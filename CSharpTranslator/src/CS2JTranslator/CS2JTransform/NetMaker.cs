// $ANTLR 3.2 Sep 23, 2009 12:02:23 /project/src/CS2JTranslator/CS2JTransform/NetMaker.g 2021-03-09 19:06:41

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162


    using System;
	using System.Text;
    using Twiglet.CS2J.Translator.Utils;
	using Twiglet.CS2J.Translator.TypeRep;
    using Twiglet.CS2J.Translator;


using System;
using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;using Stack = System.Collections.Generic.Stack<object>;
using List = System.Collections.IList;
using ArrayList = System.Collections.Generic.List<object>;
using Map = System.Collections.IDictionary;
using HashMap = System.Collections.Generic.Dictionary<object, object>;

namespace  Twiglet.CS2J.Translator.Transform 
{
    public partial class NetMaker : Twiglet.CS2J.Translator.Transform.NetFragments
    {
        public static readonly string[] tokenNames = new string[] 
    	{
            "<invalid>", 
    		"<EOR>", 
    		"<DOWN>", 
    		"<UP>", 
    		"PACKAGE", 
    		"CLASS", 
    		"EXTENDS", 
    		"IMPLEMENTS", 
    		"IMPORT", 
    		"INTERFACE", 
    		"FINAL", 
    		"ANNOTATION", 
    		"OUT", 
    		"CONST", 
    		"EVENT", 
    		"METHOD", 
    		"PROPERTY", 
    		"INDEXER", 
    		"FIELD", 
    		"OPERATOR", 
    		"ENUM", 
    		"DELEGATE", 
    		"CONVERSION_OPERATOR", 
    		"CONSTRUCTOR", 
    		"DESTRUCTOR", 
    		"METHOD_HEADER", 
    		"PARAMS", 
    		"PARAMS_TYPELESS", 
    		"SWITCH_SECTION", 
    		"YIELD_RETURN", 
    		"YIELD_BREAK", 
    		"UNCHECKED", 
    		"GLOBAL_ATTRIBUTE", 
    		"ATTRIBUTE", 
    		"MONOPLUS", 
    		"MONOMINUS", 
    		"MONONOT", 
    		"MONOTWIDDLE", 
    		"MONOSTAR", 
    		"ADDRESSOF", 
    		"PREINC", 
    		"PREDEC", 
    		"POSTINC", 
    		"POSTDEC", 
    		"PARENS", 
    		"INDEX", 
    		"APPLY", 
    		"ARGS", 
    		"NEW", 
    		"NEW_ARRAY", 
    		"NEW_DELEGATE", 
    		"NEW_ANON_OBJECT", 
    		"STATIC_CONSTRUCTOR", 
    		"PUBLIC", 
    		"PROTECTED", 
    		"PRIVATE", 
    		"INTERNAL", 
    		"STATIC", 
    		"RETURN", 
    		"TRY", 
    		"CATCH", 
    		"FINALLY", 
    		"THROW", 
    		"ELSE", 
    		"BREAK", 
    		"OBJECT", 
    		"THIS", 
    		"FOREACH", 
    		"IN", 
    		"OPEN_BRACKET", 
    		"CLOSE_BRACKET", 
    		"OPEN_BRACE", 
    		"CLOSE_BRACE", 
    		"LPAREN", 
    		"NULL_COALESCE", 
    		"IF", 
    		"ASSIGN", 
    		"PLUS_ASSIGN", 
    		"MINUS_ASSIGN", 
    		"STAR_ASSIGN", 
    		"DIV_ASSIGN", 
    		"MOD_ASSIGN", 
    		"BIT_AND_ASSIGN", 
    		"BIT_OR_ASSIGN", 
    		"BIT_XOR_ASSIGN", 
    		"LEFT_SHIFT_ASSIGN", 
    		"RIGHT_SHIFT_ASSIGN", 
    		"UNSIGNED_RIGHT_SHIFT_ASSIGN", 
    		"COND_EXPR", 
    		"RIGHT_SHIFT", 
    		"INSTANCEOF", 
    		"LOG_OR", 
    		"LOG_AND", 
    		"BIT_OR", 
    		"BIT_XOR", 
    		"BIT_AND", 
    		"NOT_EQUAL", 
    		"EQUAL", 
    		"LTHAN", 
    		"LTE", 
    		"GTE", 
    		"LEFT_SHIFT", 
    		"UNSIGNED_RIGHT_SHIFT", 
    		"SUPER", 
    		"LONGNUMBER", 
    		"PLUS", 
    		"MINUS", 
    		"DIV", 
    		"MOD", 
    		"STAR", 
    		"LAMBDA", 
    		"COMMA", 
    		"TYPE", 
    		"TYPE_VAR", 
    		"TYPE_DYNAMIC", 
    		"ENUM_BODY", 
    		"TYPE_PARAM_CONSTRAINT", 
    		"UNARY_EXPR", 
    		"CAST_EXPR", 
    		"EXCEPTION", 
    		"SYNCHRONIZED", 
    		"PAYLOAD", 
    		"PAYLOAD_LIST", 
    		"JAVAWRAPPER", 
    		"JAVAWRAPPEREXPRESSION", 
    		"JAVAWRAPPERARGUMENT", 
    		"JAVAWRAPPERARGUMENTLIST", 
    		"JAVAWRAPPERTYPE", 
    		"SEP", 
    		"KGHOLE", 
    		"BOOL", 
    		"BYTE", 
    		"CHAR", 
    		"SHORT", 
    		"INT", 
    		"LONG", 
    		"FLOAT", 
    		"DOUBLE", 
    		"IDENTIFIER", 
    		"Real_literal", 
    		"NUMBER", 
    		"Hex_number", 
    		"Character_literal", 
    		"STRINGLITERAL", 
    		"Verbatim_string_literal", 
    		"TRUE", 
    		"FALSE", 
    		"NULL", 
    		"DOT", 
    		"PTR", 
    		"GT", 
    		"USING", 
    		"ELIF", 
    		"ENDIF", 
    		"DEFINE", 
    		"UNDEF", 
    		"SEMI", 
    		"RPAREN", 
    		"WS", 
    		"TS", 
    		"DOC_LINE_COMMENT", 
    		"LINE_COMMENT", 
    		"COMMENT", 
    		"EscapeSequence", 
    		"Verbatim_string_literal_character", 
    		"Decimal_digits", 
    		"INTEGER_TYPE_SUFFIX", 
    		"Decimal_integer_literal", 
    		"GooBallIdentifier", 
    		"GooBall", 
    		"IdentifierStart", 
    		"IdentifierPart", 
    		"Exponent_part", 
    		"Real_type_suffix", 
    		"Pragma", 
    		"PP_CONDITIONAL", 
    		"PREPROCESSOR_DIRECTIVE", 
    		"IF_TOKEN", 
    		"DEFINE_TOKEN", 
    		"ELSE_TOKEN", 
    		"ENDIF_TOKEN", 
    		"UNDEF_TOKEN", 
    		"PP_EXPRESSION", 
    		"PP_OR_EXPRESSION", 
    		"PP_AND_EXPRESSION", 
    		"PP_EQUALITY_EXPRESSION", 
    		"PP_UNARY_EXPRESSION", 
    		"PP_PRIMARY_EXPRESSION", 
    		"UNICODE_LETTER", 
    		"HEX_DIGIT", 
    		"HEX_DIGITS", 
    		"DECIMAL_DIGIT", 
    		"Sign", 
    		"'namespace'", 
    		"'extern'", 
    		"'alias'", 
    		"'partial'", 
    		"'new'", 
    		"'unsafe'", 
    		"'abstract'", 
    		"'sealed'", 
    		"'readonly'", 
    		"'volatile'", 
    		"'virtual'", 
    		"'override'", 
    		"'const'", 
    		"'void'", 
    		"'base'", 
    		"'::'", 
    		"'++'", 
    		"'--'", 
    		"':'", 
    		"'out'", 
    		"'ref'", 
    		"'sizeof'", 
    		"'checked'", 
    		"'unchecked'", 
    		"'default'", 
    		"'delegate'", 
    		"'typeof'", 
    		"'?'", 
    		"'extends'", 
    		"'is'", 
    		"'as'", 
    		"'into'", 
    		"'from'", 
    		"'join'", 
    		"'on'", 
    		"'equals'", 
    		"'let'", 
    		"'orderby'", 
    		"'ascending'", 
    		"'descending'", 
    		"'select'", 
    		"'group'", 
    		"'by'", 
    		"'where'", 
    		"'assembly'", 
    		"'module'", 
    		"'field'", 
    		"'event'", 
    		"'method'", 
    		"'param'", 
    		"'property'", 
    		"'type'", 
    		"'class'", 
    		"'throws'", 
    		"'get'", 
    		"'set'", 
    		"'add'", 
    		"'remove'", 
    		"'sbyte'", 
    		"'ushort'", 
    		"'uint'", 
    		"'ulong'", 
    		"'struct'", 
    		"'__arglist'", 
    		"'params'", 
    		"'interface'", 
    		"'operator'", 
    		"'implicit'", 
    		"'explicit'", 
    		"'fixed'", 
    		"'var'", 
    		"'dynamic'", 
    		"'stackalloc'", 
    		"'switch'", 
    		"'case'", 
    		"'while'", 
    		"'do'", 
    		"'for'", 
    		"'continue'", 
    		"'goto'", 
    		"'lock'", 
    		"'yield'", 
    		"'decimal'", 
    		"'string'", 
    		"'pragma'"
        };

        public const int DECIMAL_DIGIT = 191;
        public const int MONOMINUS = 35;
        public const int PACKAGE = 4;
        public const int GLOBAL_ATTRIBUTE = 32;
        public const int STAR = 109;
        public const int JAVAWRAPPERTYPE = 127;
        public const int T__259 = 259;
        public const int T__258 = 258;
        public const int MOD = 108;
        public const int T__257 = 257;
        public const int CONST = 13;
        public const int PREDEC = 41;
        public const int T__262 = 262;
        public const int Character_literal = 142;
        public const int SWITCH_SECTION = 28;
        public const int T__263 = 263;
        public const int T__260 = 260;
        public const int T__261 = 261;
        public const int T__266 = 266;
        public const int LEFT_SHIFT_ASSIGN = 85;
        public const int T__267 = 267;
        public const int T__264 = 264;
        public const int T__265 = 265;
        public const int EOF = -1;
        public const int TYPE = 112;
        public const int ELSE_TOKEN = 179;
        public const int RPAREN = 157;
        public const int FINAL = 10;
        public const int IMPORT = 8;
        public const int UNCHECKED = 31;
        public const int CAST_EXPR = 118;
        public const int USING = 151;
        public const int T__247 = 247;
        public const int NOT_EQUAL = 96;
        public const int T__246 = 246;
        public const int T__249 = 249;
        public const int T__248 = 248;
        public const int PP_AND_EXPRESSION = 184;
        public const int THIS = 66;
        public const int RETURN = 58;
        public const int T__250 = 250;
        public const int ARGS = 47;
        public const int T__251 = 251;
        public const int T__252 = 252;
        public const int T__253 = 253;
        public const int T__254 = 254;
        public const int T__255 = 255;
        public const int Sign = 192;
        public const int UNICODE_LETTER = 188;
        public const int T__256 = 256;
        public const int TYPE_VAR = 113;
        public const int TYPE_PARAM_CONSTRAINT = 116;
        public const int YIELD_BREAK = 30;
        public const int PARAMS_TYPELESS = 27;
        public const int STATIC = 57;
        public const int DELEGATE = 21;
        public const int ELSE = 63;
        public const int MINUS_ASSIGN = 78;
        public const int NUMBER = 140;
        public const int BOOL = 130;
        public const int Decimal_integer_literal = 167;
        public const int DEFINE_TOKEN = 178;
        public const int INT = 134;
        public const int UNDEF_TOKEN = 181;
        public const int ENDIF_TOKEN = 180;
        public const int UNSIGNED_RIGHT_SHIFT_ASSIGN = 87;
        public const int WS = 158;
        public const int PP_PRIMARY_EXPRESSION = 187;
        public const int OUT = 12;
        public const int T__269 = 269;
        public const int T__268 = 268;
        public const int COND_EXPR = 88;
        public const int YIELD_RETURN = 29;
        public const int T__275 = 275;
        public const int T__276 = 276;
        public const int T__277 = 277;
        public const int MONOSTAR = 38;
        public const int GT = 150;
        public const int T__271 = 271;
        public const int LEFT_SHIFT = 101;
        public const int T__272 = 272;
        public const int T__273 = 273;
        public const int POSTINC = 42;
        public const int T__274 = 274;
        public const int PP_EQUALITY_EXPRESSION = 185;
        public const int CONSTRUCTOR = 23;
        public const int T__270 = 270;
        public const int T__215 = 215;
        public const int T__216 = 216;
        public const int PROTECTED = 54;
        public const int T__213 = 213;
        public const int APPLY = 46;
        public const int T__214 = 214;
        public const int T__219 = 219;
        public const int T__217 = 217;
        public const int T__218 = 218;
        public const int ANNOTATION = 11;
        public const int UNARY_EXPR = 117;
        public const int FLOAT = 136;
        public const int T__223 = 223;
        public const int T__222 = 222;
        public const int LPAREN = 73;
        public const int T__221 = 221;
        public const int T__220 = 220;
        public const int T__202 = 202;
        public const int PARENS = 44;
        public const int T__203 = 203;
        public const int T__204 = 204;
        public const int LONGNUMBER = 104;
        public const int T__205 = 205;
        public const int T__206 = 206;
        public const int T__207 = 207;
        public const int IMPLEMENTS = 7;
        public const int T__208 = 208;
        public const int T__209 = 209;
        public const int JAVAWRAPPEREXPRESSION = 124;
        public const int SEP = 128;
        public const int PREPROCESSOR_DIRECTIVE = 176;
        public const int PREINC = 40;
        public const int RIGHT_SHIFT_ASSIGN = 86;
        public const int PLUS = 105;
        public const int LOG_OR = 91;
        public const int LAMBDA = 110;
        public const int LOG_AND = 92;
        public const int T__210 = 210;
        public const int T__212 = 212;
        public const int PARAMS = 26;
        public const int T__211 = 211;
        public const int T__239 = 239;
        public const int T__237 = 237;
        public const int T__238 = 238;
        public const int T__235 = 235;
        public const int T__236 = 236;
        public const int TS = 159;
        public const int HEX_DIGIT = 189;
        public const int SHORT = 133;
        public const int INSTANCEOF = 90;
        public const int PAYLOAD = 121;
        public const int CLOSE_BRACE = 72;
        public const int METHOD_HEADER = 25;
        public const int MINUS = 106;
        public const int T__245 = 245;
        public const int T__244 = 244;
        public const int SEMI = 156;
        public const int T__243 = 243;
        public const int STAR_ASSIGN = 79;
        public const int T__242 = 242;
        public const int Hex_number = 141;
        public const int T__241 = 241;
        public const int T__240 = 240;
        public const int STATIC_CONSTRUCTOR = 52;
        public const int T__228 = 228;
        public const int T__229 = 229;
        public const int T__224 = 224;
        public const int ENUM = 20;
        public const int T__225 = 225;
        public const int T__226 = 226;
        public const int T__227 = 227;
        public const int UNSIGNED_RIGHT_SHIFT = 102;
        public const int STRINGLITERAL = 143;
        public const int BIT_XOR = 94;
        public const int ADDRESSOF = 39;
        public const int PLUS_ASSIGN = 77;
        public const int INTERFACE = 9;
        public const int DIV = 107;
        public const int PP_UNARY_EXPRESSION = 186;
        public const int T__232 = 232;
        public const int LONG = 135;
        public const int T__231 = 231;
        public const int PUBLIC = 53;
        public const int T__234 = 234;
        public const int T__233 = 233;
        public const int JAVAWRAPPERARGUMENTLIST = 126;
        public const int T__230 = 230;
        public const int INTERNAL = 56;
        public const int PP_OR_EXPRESSION = 183;
        public const int MOD_ASSIGN = 81;
        public const int JAVAWRAPPERARGUMENT = 125;
        public const int NEW = 48;
        public const int CHAR = 132;
        public const int DIV_ASSIGN = 80;
        public const int BREAK = 64;
        public const int OPEN_BRACKET = 69;
        public const int PAYLOAD_LIST = 122;
        public const int BIT_OR = 93;
        public const int NEW_ARRAY = 49;
        public const int TYPE_DYNAMIC = 114;
        public const int ENDIF = 153;
        public const int DOUBLE = 137;
        public const int ENUM_BODY = 115;
        public const int SUPER = 103;
        public const int COMMENT = 162;
        public const int EXCEPTION = 119;
        public const int KGHOLE = 129;
        public const int LINE_COMMENT = 161;
        public const int PRIVATE = 55;
        public const int BIT_XOR_ASSIGN = 84;
        public const int NULL = 147;
        public const int IdentifierStart = 170;
        public const int MONOTWIDDLE = 37;
        public const int TRY = 59;
        public const int Verbatim_string_literal = 144;
        public const int IF_TOKEN = 177;
        public const int ELIF = 152;
        public const int T__200 = 200;
        public const int T__201 = 201;
        public const int PROPERTY = 16;
        public const int MONOPLUS = 34;
        public const int FIELD = 18;
        public const int PP_CONDITIONAL = 175;
        public const int FOREACH = 67;
        public const int CATCH = 60;
        public const int FALSE = 146;
        public const int INTEGER_TYPE_SUFFIX = 166;
        public const int EscapeSequence = 163;
        public const int THROW = 62;
        public const int CLOSE_BRACKET = 70;
        public const int POSTDEC = 43;
        public const int DESTRUCTOR = 24;
        public const int CLASS = 5;
        public const int Real_literal = 139;
        public const int BIT_AND = 95;
        public const int PP_EXPRESSION = 182;
        public const int CONVERSION_OPERATOR = 22;
        public const int GTE = 100;
        public const int ATTRIBUTE = 33;
        public const int LTHAN = 98;
        public const int GooBall = 169;
        public const int DEFINE = 154;
        public const int LTE = 99;
        public const int IF = 75;
        public const int Exponent_part = 172;
        public const int INDEX = 45;
        public const int T__199 = 199;
        public const int T__198 = 198;
        public const int T__197 = 197;
        public const int SYNCHRONIZED = 120;
        public const int T__196 = 196;
        public const int IN = 68;
        public const int T__195 = 195;
        public const int T__194 = 194;
        public const int T__193 = 193;
        public const int OBJECT = 65;
        public const int COMMA = 111;
        public const int IDENTIFIER = 138;
        public const int EQUAL = 97;
        public const int RIGHT_SHIFT = 89;
        public const int UNDEF = 155;
        public const int DOT = 148;
        public const int IdentifierPart = 171;
        public const int JAVAWRAPPER = 123;
        public const int BYTE = 131;
        public const int MONONOT = 36;
        public const int BIT_OR_ASSIGN = 83;
        public const int DOC_LINE_COMMENT = 160;
        public const int OPERATOR = 19;
        public const int GooBallIdentifier = 168;
        public const int Pragma = 174;
        public const int Verbatim_string_literal_character = 164;
        public const int NEW_ANON_OBJECT = 51;
        public const int EVENT = 14;
        public const int TRUE = 145;
        public const int NULL_COALESCE = 74;
        public const int PTR = 149;
        public const int Decimal_digits = 165;
        public const int FINALLY = 61;
        public const int INDEXER = 17;
        public const int NEW_DELEGATE = 50;
        public const int Real_type_suffix = 173;
        public const int ASSIGN = 76;
        public const int HEX_DIGITS = 190;
        public const int EXTENDS = 6;
        public const int OPEN_BRACE = 71;
        public const int METHOD = 15;
        public const int BIT_AND_ASSIGN = 82;

        // delegates
        // delegators

        protected class NSContext_scope 
        {
            protected internal string currentNS;
            protected internal List<string> namespaces;
            protected internal List<string> globalNamespaces;
            protected internal List<string> typeVariables;
            protected internal List<string> globalTypeVariables;
            protected internal ClassRepTemplate baseClass;
            protected internal List<InterfaceRepTemplate> interfaceList;
            protected internal List<string> blackListedMethods;
        }
        protected Stack NSContext_stack = new Stack();
        protected class MkNonGeneric_scope 
        {
            protected internal bool scrubGenericArgs;
        }
        protected Stack MkNonGeneric_stack = new Stack();
        protected class ForceUnsharedType_scope 
        {
            protected internal bool fresh;
        }
        protected Stack ForceUnsharedType_stack = new Stack();
        protected class PrimitiveRep_scope 
        {
            protected internal bool primitiveTypeAsObject;
        }
        protected Stack PrimitiveRep_stack = new Stack();
        protected class SymTab_scope 
        {
            protected internal Dictionary<string,TypeRepTemplate> symtab;
        }
        protected Stack SymTab_stack = new Stack();



            public NetMaker(ITreeNodeStream input)
        		: this(input, new RecognizerSharedState()) {
            }

            public NetMaker(ITreeNodeStream input, RecognizerSharedState state)
        		: base(input, state) {
                InitializeCyclicDFAs();

                 
            }
            
        protected ITreeAdaptor adaptor = new CommonTreeAdaptor();

        public ITreeAdaptor TreeAdaptor
        {
            get { return this.adaptor; }
            set {
        	this.adaptor = value;
        	}
        }

        override public string[] TokenNames {
    		get { return NetMaker.tokenNames; }
        }

        override public string GrammarFileName {
    		get { return "/project/src/CS2JTranslator/CS2JTransform/NetMaker.g"; }
        }


            // in_member_name is set while we are processing member_name. It stops type_or_generic from 
            // treating its input as a type (and translating it).
            // TODO: Decide what should really be done here with <type>.member_name
            private bool in_member_name = false;

            private string CompUnitName = null;

            // Initial namespace search path gathered in JavaMaker
            public List<string> SearchPath { get; set; }
            public List<string> AliasKeys { get; set; }
            public List<string> AliasNamespaces { get; set; }

            protected CommonTree mkImports() {
            
                CommonTree root = (CommonTree)adaptor.Nil;
                
                if (Imports != null) {
                    string[] sortedImports = Imports.AsArray();
                    Array.Sort(sortedImports);
                    foreach (string imp in sortedImports) {
                        adaptor.AddChild(root, (CommonTree)adaptor.Create(IMPORT, "import"));
                        adaptor.AddChild(root, (CommonTree)adaptor.Create(PAYLOAD, imp));
                    }
                }
                return root;

            }

            public override void AddToImports(string imp) {
                // Don't add import if its namespace is within our type
        //       if (!imp.StartsWith(((NSContext_scope)NSContext_stack.Peek()).currentNS+".")) {
                if (imp != null && imp.Contains(".") && (CompUnitName == null || CompUnitName.Length == 0 || !imp.StartsWith(NSPrefix(CompUnitName)))) { 
                    Imports.Add(imp);
                }
          //      }
            }

            protected string ParentNameSpace {
                get {
                    return ((NSContext_scope)NSContext_stack.ToArray()[1]).currentNS;
                }
            }

            protected TypeRepTemplate findType(TypeRepRef name) {
               return findType(name.Type);
            }

            private Dictionary<string,string> builtinTypeMap = null; 
            private Dictionary<string,string> BuiltinTypeMap {
               get {
                  if (builtinTypeMap == null) {
                     builtinTypeMap = new Dictionary<string,string>();
                     builtinTypeMap["bool"] = "System.Boolean";
                     builtinTypeMap["boolean"] = "System.Boolean";
                     builtinTypeMap["byte"] = Cfg.UnsignedNumbersToSigned ? "System.SByte" : "System.Byte";
                     builtinTypeMap["char"] = "System.Char";
                     builtinTypeMap["decimal"] = "System.Decimal";
                     builtinTypeMap["double"] = "System.Double";
                     builtinTypeMap["float"] = "System.Single";
                     builtinTypeMap["int"] = "System.Int32";
                     builtinTypeMap["long"] = "System.Int64";
                     builtinTypeMap["object"] = "System.Object";
                     builtinTypeMap["Object"] = "System.Object";
                     builtinTypeMap["sbyte"] = "System.Byte";
                     builtinTypeMap["short"] = "System.Int16";
                     builtinTypeMap["string"] = "System.String";
                     builtinTypeMap["String"] = "System.String";
                     builtinTypeMap["uint"] = Cfg.UnsignedNumbersToSigned ? "System.Int32" : "System.UInt32";
                     builtinTypeMap["ulong"] = Cfg.UnsignedNumbersToSigned ? "System.Int64" : "System.UInt64"; 
                     builtinTypeMap["ushort"] = Cfg.UnsignedNumbersToSigned ? "System.Int16" : "System.UInt16";
                     builtinTypeMap["void"] = "System.Void";
                  }
                  return builtinTypeMap;
               }
            }

            protected TypeRepTemplate findType(string name) {
                if (NSContext_stack.Count > 0 && ((NSContext_scope)NSContext_stack.Peek()).globalTypeVariables != null && ((NSContext_scope)NSContext_stack.Peek()).globalTypeVariables.Contains(name)) {
                    return new TypeVarRepTemplate(name);
                }
                string fullName = name;
                if (BuiltinTypeMap.ContainsKey(name)) {
                   fullName = BuiltinTypeMap[name];
                }
                return AppEnv.Search(NSContext_stack.Count > 0 ? ((NSContext_scope)NSContext_stack.Peek()).globalNamespaces : null, fullName, new UnknownRepTemplate(fullName));
            }

            protected TypeRepTemplate findType(string name, ICollection<TypeRepTemplate> args) {
                if (args == null || args.Count == 0) {
                    return findType(name);
                }
                StringBuilder argNames = new StringBuilder();
                bool first = true;
                if (args != null && args.Count > 0) {
                    argNames.Append("<");
                    foreach (TypeRepTemplate sub in args) {
                        if (!first) {
                            argNames.Append(", ");
                            first = false;
                        }
                        argNames.Append(sub.TypeName);
                    }
                    argNames.Append(">");
                }
                
                TypeRepTemplate tyRep = AppEnv.Search(((NSContext_scope)NSContext_stack.Peek()).globalNamespaces, mkGenericTypeAlias(name, args != null ? args.Count : 0), new UnknownRepTemplate(name + argNames.ToString()));
                return (args != null && args.Count > 0 ? tyRep.Instantiate(args) : tyRep);
            }

            private ClassRepTemplate objectType = null;

            protected ClassRepTemplate ObjectType {
                get {
                    if (objectType == null) {
                        objectType = (ClassRepTemplate)AppEnv.Search("System.Object", new UnknownRepTemplate("System.Object"));
                    }
                    return objectType;
                }
            }

            private ClassRepTemplate boolType = null;

            protected ClassRepTemplate BoolType {
                get {
                    if (boolType == null) {
                        boolType = (ClassRepTemplate)AppEnv.Search("System.Boolean", new UnknownRepTemplate("System.Boolean"));
                    }
                    return boolType;
                }
            }

            private ClassRepTemplate voidType = null;

            protected ClassRepTemplate VoidType {
                get {
                    if (voidType == null) {
                        voidType = (ClassRepTemplate)AppEnv.Search("System.Void", new UnknownRepTemplate("System.Void"));
                    }
                    return voidType;
                }
            }

            private ClassRepTemplate stringType = null;

            protected ClassRepTemplate StringType {
                get {
                    if (stringType == null) {
                        stringType = (ClassRepTemplate)AppEnv.Search("System.String", new UnknownRepTemplate("System.String"));
                    }
                    return stringType;
                }
            }

            private ClassRepTemplate dateType = null;
            protected ClassRepTemplate DateType {
                get {
                    if (dateType == null) {
                        dateType = (ClassRepTemplate)AppEnv.Search("System.DateTime", new UnknownRepTemplate("System.DateTime"));
                    }
                    return dateType;
                }
            }

            public class SupportedInterfaceInfo {

               public SupportedInterfaceInfo() {
                  Imports = new List<string>();
                  BlackListedMethods = new List<string>();
               }

               public List<string> Imports { get; set; }
               public List<string> BlackListedMethods { get; set; }
            }

            // For classes that implement some specific interface types (such as IEnumerable) we add
            // additional methods so that they can support an equivalent Java Interface (e.g. Iterable).
            // The keys of this map are the supported interface. We map them to a set of imports that are
            // needed for the additional methods
            // TODO: Move this to Fragments where the code is maintained.
            private Dictionary<InterfaceRepTemplate, SupportedInterfaceInfo> supportedInterfaces = null;
            protected Dictionary<InterfaceRepTemplate, SupportedInterfaceInfo> SupportedInterfaces {
                get {
                    if (supportedInterfaces == null) {
                        supportedInterfaces = new Dictionary<InterfaceRepTemplate, SupportedInterfaceInfo>();
                        supportedInterfaces[IEnumerableType] = new SupportedInterfaceInfo();
                        supportedInterfaces[GenericIEnumerableType] = new SupportedInterfaceInfo();
                        supportedInterfaces[ICollectionType] = new SupportedInterfaceInfo();

                        supportedInterfaces[GenericICollectionType] = new SupportedInterfaceInfo();
                        supportedInterfaces[GenericICollectionType].BlackListedMethods.AddRange(new string[] {"Add", "Clear", "Contains", "Remove"});
                        supportedInterfaces[GenericICollectionType].Imports.AddRange(new string[] {"java.util.Collection"});
                    }
                    return supportedInterfaces;
                }
            }


            private InterfaceRepTemplate iEnumerableType = null;
            protected InterfaceRepTemplate IEnumerableType {
                get {
                    if (iEnumerableType == null) {
                        iEnumerableType = (InterfaceRepTemplate)findType("System.Collections.IEnumerable");
                    }
                    return iEnumerableType;
                }
            }

            private InterfaceRepTemplate genericIEnumerableType = null;
            protected InterfaceRepTemplate GenericIEnumerableType {
                get {
                    if (genericIEnumerableType == null) {
                        genericIEnumerableType = (InterfaceRepTemplate)findType("System.Collections.Generic.IEnumerable", new TypeRepTemplate[] {ObjectType});
                    }
                    return genericIEnumerableType;
                }
            }

            private InterfaceRepTemplate iCollectionType = null;
            protected InterfaceRepTemplate ICollectionType {
                get {
                    if (iCollectionType == null) {
                        iCollectionType = (InterfaceRepTemplate)findType("System.Collections.ICollection");
                    }
                    return iCollectionType;
                }
            }

            private InterfaceRepTemplate genericICollectionType = null;
            protected InterfaceRepTemplate GenericICollectionType {
                get {
                    if (genericICollectionType == null) {
                        genericICollectionType = (InterfaceRepTemplate)findType("System.Collections.Generic.ICollection", new TypeRepTemplate[] {ObjectType});
                    }
                    return genericICollectionType;
                }
            }

            protected TypeRepTemplate SymTabLookup(string name) {
                return SymTabLookup(name, null);
            }

            protected TypeRepTemplate SymTabLookup(string name, TypeRepTemplate def) {
                object[] stabs = SymTab_stack.ToArray();
                foreach(SymTab_scope stabScope in stabs) {
                    if (stabScope.symtab.ContainsKey(name)) {
                        return stabScope.symtab[name];
                    }
                }
                return def;
            }

            protected CommonTree mkJavaWrapper(string template, Dictionary<string,CommonTree> varMap, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVAWRAPPER, tok, "JAVAWRAPPER"), root);
                adaptor.AddChild(root, (CommonTree)adaptor.Create(IDENTIFIER, tok, template));

                if (varMap != null) {
                    foreach (string var in varMap.Keys) {
                        if (varMap[var] != null) {
                            adaptor.AddChild(root, (CommonTree)adaptor.Create(IDENTIFIER, tok, var));
                            adaptor.AddChild(root, dupTree(varMap[var]));
                        }
                    }
                }

                return (CommonTree)adaptor.RulePostProcessing(root);
            }

            protected CommonTree wrapExpression(CommonTree e, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVAWRAPPEREXPRESSION, tok, "JAVAWRAPPEREXPRESSION"), root);
                adaptor.AddChild(root, dupTree(e));

                return (CommonTree)adaptor.RulePostProcessing(root);
            }

            protected CommonTree wrapArgument(CommonTree e, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVAWRAPPERARGUMENT, tok, "JAVAWRAPPERARGUMENT"), root);
                adaptor.AddChild(root, dupTree(e));

                return (CommonTree)adaptor.RulePostProcessing(root);
            }

            protected CommonTree wrapArgumentList(CommonTree e, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVAWRAPPERARGUMENTLIST, tok, "JAVAWRAPPERARGUMENTLIST"), root);
                adaptor.AddChild(root, dupTree(e));

                return (CommonTree)adaptor.RulePostProcessing(root);
            }

            protected CommonTree mkArgumentList(CommonTree e1, IToken tok) {
                if (adaptor.IsNil(e1))
                   return e1;

                CommonTree argList = (CommonTree)adaptor.Nil;
                argList = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), argList);
                adaptor.AddChild(argList, dupTree(e1));

                return (CommonTree)adaptor.RulePostProcessing(argList);
            }

            protected CommonTree mkArgumentList(CommonTree e1, CommonTree e2, IToken tok) {
                CommonTree argList = (CommonTree)adaptor.Nil;
                argList = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), argList);
                adaptor.AddChild(argList, dupTree(e1));
                adaptor.AddChild(argList, dupTree(e2));

                return (CommonTree)adaptor.RulePostProcessing(argList);
            }

            protected CommonTree mkArgumentList(IToken tok, params CommonTree[] es) {
                CommonTree argList = (CommonTree)adaptor.Nil;
                if (es == null || es.Length == 0)
                   return argList;

                argList = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), argList);
                if (es != null) {
                   foreach (CommonTree e in es) {
                      adaptor.AddChild(argList, dupTree(e));
                   }
                }
                return (CommonTree)adaptor.RulePostProcessing(argList);
            }

            protected CommonTree mkArgumentList(IToken tok, IList<CommonTree> es) {
                CommonTree argList = (CommonTree)adaptor.Nil;
                if (es == null || es.Count == 0)
                   return argList;

                argList = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), argList);
                if (es != null) {
                   foreach (CommonTree e in es) {
                      adaptor.AddChild(argList, dupTree(e));
                   }
                }
                return (CommonTree)adaptor.RulePostProcessing(argList);
            }

            protected CommonTree wrapType(CommonTree t, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVAWRAPPERTYPE, tok, "JAVAWRAPPERTYPE"), root);
                adaptor.AddChild(root, dupTree(t));

                return (CommonTree)adaptor.RulePostProcessing(root);
            }
            protected CommonTree wrapTypeOfType(TypeRepTemplate t, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVAWRAPPEREXPRESSION, tok, "JAVAWRAPPEREXPRESSION"), root);
                adaptor.AddChild(root, (CommonTree)adaptor.Create(IDENTIFIER, tok, t.Java));
                return (CommonTree)adaptor.RulePostProcessing(root);
            }

            /// <summary>
            /// Populates the param Map that gives values for tokens in a Java template
            /// </summary>
            /// <param name="pMap">
            /// A <see cref="Dictionary<System.String, CommonTree>"/>. The map to populate.
            /// </param>
            /// <param name="ps">
            /// A <see cref="IList<ParamRepTemplate>"/>. The parameters.
            /// </param>
            /// <param name="argTrees">
            /// A <see cref="IList<CommonTree>"/>. The expressions for each parameter.
            /// </param>
            /// <param name="argTreeTypeofTypes">
            /// A <see cref="IList<TypeRepTemplate>"/>. (May be null). The type of each argument.
            /// </param>
            /// <param name="argListTree">
            /// A <see cref="CommonTree"/>. (May be null). A Tree with the list of arguments. If needed and not provided then we build it from argTrees.
            /// </param>
            /// <param name="incStar">
            /// A <see cref="System.Boolean"/>. If true then substitute for arglist parameters ("${*]n}") using argListTree.
            /// </param>
            /// <param name="tok">
            /// A <see cref="IToken"/> Mark created trees with this token's posiition.
            /// </param>
            protected void populateParamMap(Dictionary<string,CommonTree> pMap, IList<ParamRepTemplate> ps, 
                                            IList<CommonTree> argTrees, IList<TypeRepTemplate> argTreeTypeofTypes, CommonTree argListTree, 
                                            bool incStar, IToken tok) {
               populateParamMap(pMap, ps, argTrees, argTreeTypeofTypes, argListTree, incStar, null, null, tok);
            }

            /// <summary>
            /// Populates the param Map that gives values for tokens in a Java template
            /// </summary>
            /// <param name="pMap">
            /// A <see cref="Dictionary<System.String, CommonTree>"/>. The map to populate.
            /// </param>
            /// <param name="ps">
            /// A <see cref="IList<ParamRepTemplate>"/>. The parameters.
            /// </param>
            /// <param name="argTrees">
            /// A <see cref="IList<CommonTree>"/>. The expressions for each parameter.
            /// </param>
            /// <param name="argTreeTypeofTypes">
            /// A <see cref="IList<TypeRepTemplate>"/>. (May be null). The type of each argument.
            /// </param>
            /// <param name="argListTree">
            /// A <see cref="CommonTree"/>. (May be null). A Tree with the list of arguments. If needed and not provided then we build it from argTrees.
            /// </param>
            /// <param name="incStar">
            /// A <see cref="System.Boolean"/>. If true then substitute for arglist parameters ("${*]n}") using argListTree.
            /// </param>
            /// <param name="typeParams">
            /// A <see cref="String[]"/>. (May be null). Array of Type Parameter Names.
            /// </param>
            /// <param name="typeTrees">
            /// A <see cref="IList<CommonTree>"/> (May be null). Types to substitute for typeParams.
            /// </param>
            /// <param name="tok">
            /// A <see cref="IToken"/> Mark created trees with this token's posiition.
            /// </param>
            protected void populateParamMap(Dictionary<string,CommonTree> pMap, IList<ParamRepTemplate> ps, 
                                           IList<CommonTree> argTrees, IList<TypeRepTemplate> argTreeTypeofTypes, CommonTree argListTree, 
                                           bool incStar, Dictionary<String,TypeRepTemplate> tyVarMap,
                                           IToken tok) {
                // WARNING: logic duplicated from method overload below
                for (int idx = 0; idx < ps.Count; idx++) {
                    pMap[ps[idx].Name] = wrapArgument(argTrees[idx], tok);
                    if (ps[idx].Name.StartsWith("TYPEOF") && argTreeTypeofTypes != null && argTreeTypeofTypes[idx] != null) {
                        // if this argument is a typeof expression then add a TYPEOF_TYPEOF-> typeof's type mapping
                        pMap[ps[idx].Name + "_TYPE"] = wrapTypeOfType(argTreeTypeofTypes[idx], tok);
                    }
                }
                if (incStar)
                { 
                    pMap["*"] = wrapArgumentList(argListTree != null ? argListTree : mkArgumentList(tok, argTrees), tok);
                }

                if (tyVarMap != null) {
                    foreach(KeyValuePair<String,TypeRepTemplate> entry in tyVarMap) {
                        pMap[entry.Key] = wrapExpression(mkJavaRep(tok, entry.Value), tok);
                    }
                }
            }

            /// <summary>
            /// Populates the param Map that gives values for tokens in a Java template
            /// </summary>
            /// <param name="pMap">
            /// A <see cref="Dictionary<System.String, CommonTree>"/>. The map to populate.
            /// </param>
            /// <param name="ps">
            /// A <see cref="IList<ParamRepTemplate>"/>. The parameters.
            /// </param>
            /// <param name="argTrees">
            /// A <see cref="IList<CommonTree>"/>. The expressions for each parameter.
            /// </param>
            /// <param name="argTreeTypeofTypes">
            /// A <see cref="IList<TypeRepTemplate>"/>. (May be null). The type of each argument.
            /// </param>
            /// <param name="argListTree">
            /// A <see cref="CommonTree"/>. (May be null). A Tree with the list of arguments. If needed and not provided then we build it from argTrees.
            /// </param>
            /// <param name="incStar">
            /// A <see cref="System.Boolean"/>. If true then substitute for arglist parameters ("${*]n}") using argListTree.
            /// </param>
            /// <param name="typeParams">
            /// A <see cref="String[]"/>. (May be null). Array of Type Parameter Names.
            /// </param>
            /// <param name="typeTrees">
            /// A <see cref="IList<CommonTree>"/> (May be null). Types to substitute for typeParams.
            /// </param>
            /// <param name="tok">
            /// A <see cref="IToken"/> Mark created trees with this token's posiition.
            /// </param>
            protected void populateParamMap(Dictionary<string,CommonTree> pMap, IList<ParamRepTemplate> ps, 
                                           IList<CommonTree> argTrees, IList<TypeRepTemplate> argTreeTypeofTypes, CommonTree argListTree, 
                                           bool incStar, String[] typeParams, IList<CommonTree> typeTrees,
                                           IToken tok) {
              // WARNING: logic duplicated from method overload below
              for (int idx = 0; idx < ps.Count; idx++) {
                 pMap[ps[idx].Name] = wrapArgument(argTrees[idx], tok);
                 if (ps[idx].Name.StartsWith("TYPEOF") && argTreeTypeofTypes != null && argTreeTypeofTypes[idx] != null) {
                    // if this argument is a typeof expression then add a TYPEOF_TYPEOF-> typeof's type mapping
                    pMap[ps[idx].Name + "_TYPE"] = wrapTypeOfType(argTreeTypeofTypes[idx], tok);
                 }
              }
              if (incStar)
              { 
                 pMap["*"] = wrapArgumentList(argListTree != null ? argListTree : mkArgumentList(tok, argTrees), tok);
              }
              if (typeTrees != null && typeTrees.Count == typeParams.Length) {
                 int idx = 0;
                 foreach (CommonTree ty in typeTrees)
                 {
                    pMap[typeParams[idx]] = wrapType(ty, tok);
                    idx++;
                 }
              }
           }

            protected bool wantsStar(String template) {
               return template.Contains("${*") || template.Contains("${,*");
            }

            protected CommonTree mkArray(CommonTree t, IToken tok) {
                if (!t.IsNil) {
                    adaptor.AddChild(t, (CommonTree)adaptor.Create(OPEN_BRACKET, tok, "["));
                    adaptor.AddChild(t, (CommonTree)adaptor.Create(CLOSE_BRACKET, tok, "]"));
                }
                return t;
            }

            protected CommonTree castToBoxedType(TypeRepTemplate ty, CommonTree exp, IToken tok) {
               if (!String.IsNullOrEmpty(ty.BoxExpressionTemplate)) {
                  Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                  myMap["expr"] = wrapExpression(exp, tok);
                  return mkJavaWrapper(ty.BoxExpressionTemplate, myMap, tok);
               }
               else {
                  return dupTree(exp);
               }
            }

            protected CommonTree dupTree(CommonTree t) {
                return (CommonTree)adaptor.DupTree(t);
            }

            protected static readonly string[] ScruTypeStrs = new string[] { "System.Int32",
                                                                             "System.Int64",
                                                                             "System.Char",
                                                                             "System.Enum", 
                                                                            };

            protected bool typeIsInvalidForScrutinee(TypeRepTemplate sType) {
                bool ret = true;

                foreach (string t in ScruTypeStrs)
                {
                    if (sType.IsA(findType(t), AppEnv))
                    {
                        ret = false;
                        break;
                    }
                }

                return ret;
                
            }

            // counter to ensure that the vars we introduce are unique 
            protected int dummyScrutVarCtr = 0;
            protected int dummyForeachVarCtr = 0;
            protected int dummyStaticConstructorCatchVarCtr = 0;
            protected int dummyTyVarCtr = 0;
            protected int dummyRefVarCtr = 0;
            protected int dummyVarCtr = 0;

            // It turns out that 'default:' doesn't have to be last in the switch statement, so
            // we need some jiggery pokery when converting to if-then-else.
            // If there was a default section then 'defaultTree' will be non-null and 'sections'
            // will have a null entry (the hole where the default section appeared).
            protected CommonTree convertSectionsToITE(List sections, CommonTree defaultTree) {
                CommonTree ret = null;
                if ((sections == null || sections.Count == 1) && defaultTree != null) {
                   // We just had a default section, so emit it.
                   ret = dupTree(defaultTree);
                }
                else if (sections != null) {
                   int startidx = sections.Count - 2;
                   if (defaultTree != null) {
                      // must have at least if .. then .. else
                      // wrap default in else { }
                      IToken tok = defaultTree.Token;
                      CommonTree root = (CommonTree)adaptor.Nil;
                      adaptor.AddChild(root, (CommonTree)adaptor.Create(ELSE, tok, "else"));
                      adaptor.AddChild(root, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                      adaptor.AddChild(root, dupTree(defaultTree));
                      adaptor.AddChild(root, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                      ret = root;
                      startidx = sections.Count - 1;
                   }
                   else {
                    ret = dupTree((CommonTree)sections[sections.Count - 1]);
                   }
                   for(int i = startidx; i >= 0; i--) {
                      if (sections[i] != null) {
                         CommonTree section = dupTree((CommonTree)sections[i]);
                         // section is either ^(IF ...) or "else ^(IF ....)" we need to insert ret into the IF
                         if (section.IsNil) {
                            section.Children[section.Children.Count-1].AddChild(ret);
                         }
                         else {
                            section.AddChild(ret);
                         }
                         ret = section;
                      }
                    } 
                }
                return ret;
            }

            // In switch sections we want to remove final break statements if we have converted to if-then-else 
            protected CommonTree stripFinalBreak(CommonTree stats) {
            
                CommonTree ret = stats;
                if (stats.IsNil) {
                    // A list of statements
                    // look for an ending of "break [;]"
                    int len = stats.Children.Count;
                    int breakPos = len - 1;
                    if ( len > 1 && stats.Children[len-1].Type == SEMI ) {
                        breakPos = len -2;
                    }
                    if (stats.Children[breakPos].Type != BREAK) {
                        // not found
                        breakPos = -1;
                    }
                    if (breakPos >= 0) {
                        // delete from break to end
                        for (int i = len-1; i >= breakPos; i--) {
                            stats.DeleteChild(i);
                        }
                    }
                }
                return ret;
            }

            // if slist is a list of statements surrounded by braces, then strip them out. 
            protected CommonTree stripPossibleBraces(CommonTree slist) {
                CommonTree ret = slist;
                if (ret.IsNil && adaptor.GetChildCount(ret) >= 2) {
                    if (adaptor.GetType(adaptor.GetChild(ret,0)) == OPEN_BRACE &&
                        adaptor.GetType(adaptor.GetChild(ret,adaptor.GetChildCount(ret)-1)) == CLOSE_BRACE) {
                        adaptor.DeleteChild(ret,adaptor.GetChildCount(ret)-1); 
                        adaptor.DeleteChild(ret,0); 
                    }
                }
                return ret;
            }

            // embeddedStatement is either ";", "{ .... }", or a single statement
            protected CommonTree prefixCast(CommonTree targetTy, CommonTree id, CommonTree castTy, CommonTree foreachVar, CommonTree embeddedStatement, IToken tok) {
                CommonTree root = embeddedStatement;
                if (!embeddedStatement.IsNil && adaptor.GetType(embeddedStatement) == SEMI) {
                    // Do nothing, id is unused  
                }
                else {
                    // Make cast statement
                    CommonTree kast = (CommonTree)adaptor.Nil;
                    kast = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, tok, "CAST"), kast);
                    adaptor.AddChild(kast, (CommonTree)adaptor.DupTree(castTy));
                    adaptor.AddChild(kast, (CommonTree)adaptor.DupTree(foreachVar));
                    CommonTree vardec = (CommonTree)adaptor.Nil;
                    adaptor.AddChild(vardec, (CommonTree)adaptor.DupTree(targetTy));
                    adaptor.AddChild(vardec, (CommonTree)adaptor.DupTree(id));
                    adaptor.AddChild(vardec, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                    adaptor.AddChild(vardec, (CommonTree)adaptor.DupTree(kast));
                    adaptor.AddChild(vardec, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                    root = (CommonTree)adaptor.Nil;
                    // Make a { <cast> statement }
                    adaptor.AddChild(root, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                    adaptor.AddChild(root, vardec);

                    adaptor.AddChild(root, stripPossibleBraces((CommonTree)adaptor.DupTree(embeddedStatement)));
                    adaptor.AddChild(root, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                }
                return (CommonTree)adaptor.RulePostProcessing(root);
            }

            private Dictionary<int,string> _boxTypeMap = null;
            protected Dictionary<int,string> BoxTypeMap {
                get {
                    if (_boxTypeMap == null) {
                        _boxTypeMap  = new Dictionary<int,string>();
                        // Initialize boxTypeMap (see JLS, ed 3 sec 5.1.7)
                        _boxTypeMap[BOOL] = "Boolean";
                        _boxTypeMap[BYTE] = "Byte";
                        _boxTypeMap[CHAR] = "Character";
                        _boxTypeMap[SHORT] = "Short";
                        _boxTypeMap[INT] = "Integer";
                        _boxTypeMap[LONG] = "Long";
                        _boxTypeMap[FLOAT] = "Float";
                        _boxTypeMap[DOUBLE] = "Double";
                    }
                    return _boxTypeMap;
                }
            }
            
            protected CommonTree mkBoxedType(CommonTree ty, IToken tok) {
                CommonTree ret = ty;
                // Make sure its just  plain old predefined type
                if (!ty.IsNil && adaptor.GetType(ty) == TYPE && adaptor.GetChildCount(ty) == 1 && 
                    BoxTypeMap.ContainsKey(adaptor.GetType(((CommonTree)adaptor.GetChild(ty,0)))) ) {
                    ret =  (CommonTree)adaptor.Nil;
                    ret = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), ret);
                    adaptor.AddChild(ret, (CommonTree)adaptor.Create(IDENTIFIER, tok, BoxTypeMap[adaptor.GetType((CommonTree)adaptor.GetChild(ty,0))]));
                }
                return ret;
            }

            protected CommonTree boxTypesAsRequired(CommonTree fpTree, IList<ParamRepTemplate> fpTemps, ParamRepTemplate fpTempArray, IList<CommonTree> boxedTypeTrees, IToken tok) {

               if (fpTree == null) {
                  return fpTree;
               }
               CommonTree ret =  (CommonTree)adaptor.Nil;
               ret = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, tok, "PARAMS"), ret);

               int typeIdx = 0;
               for (int i = 0; i < adaptor.GetChildCount(fpTree); i++) {
                  // on one level is all the attributes, types, names, etc. of the parameters.  Scan down taking each TYPE node and
                  // modifying it if necessary
                  CommonTree child = (CommonTree)adaptor.GetChild(fpTree,i);
                  if (adaptor.GetType(child) == TYPE) {
                     if (((typeIdx < fpTemps.Count && fpTemps[typeIdx].Type.ForceBoxed) ||
                          (typeIdx == fpTemps.Count && fpTempArray != null && fpTempArray.Type.ForceBoxed))
                         && boxedTypeTrees[typeIdx] != null) {
                        child = boxedTypeTrees[typeIdx];
                     }
                     typeIdx++;
                  }
                  adaptor.AddChild(ret, (CommonTree)adaptor.DupTree(child));
               } 

               return ret;
            }

            private Dictionary<int,int> _assOpMap = null;
            protected Dictionary<int,int> AssOpMap {
                get {
                    if (_assOpMap == null) {
                        _assOpMap  = new Dictionary<int,int>();
                        // Initialize boxTypeMap (see JLS, ed 3 sec 5.1.7)
                        _assOpMap[PLUS_ASSIGN] = PLUS;
                        _assOpMap[MINUS_ASSIGN] = MINUS;
                        _assOpMap[STAR_ASSIGN] = STAR;
                        _assOpMap[DIV_ASSIGN] = DIV;
                        _assOpMap[MOD_ASSIGN] = MOD;
                        _assOpMap[BIT_AND_ASSIGN] = BIT_AND;
                        _assOpMap[BIT_OR_ASSIGN] = BIT_OR;
                        _assOpMap[BIT_XOR_ASSIGN] = BIT_XOR;
                        _assOpMap[LEFT_SHIFT_ASSIGN] = LEFT_SHIFT;
                        _assOpMap[RIGHT_SHIFT_ASSIGN] = RIGHT_SHIFT;
                    }
                    return _assOpMap;
                }
            }
            
            protected CommonTree mkOpExp(CommonTree assTree) {
                CommonTree ret = assTree;
                if (AssOpMap.ContainsKey(assTree.Token.Type)) {
                    ret = (CommonTree)adaptor.Create(AssOpMap[assTree.Token.Type], assTree.Token, assTree.Token.Text != null && assTree.Token.Text.EndsWith("=") ? assTree.Token.Text.Substring(0, assTree.Token.Text.Length - 1) : assTree.Token.Text);
                }
                return ret;
            }

            // make ^(op lhs rhs)
            protected CommonTree mkOpExp(CommonTree opTree, CommonTree lhs, CommonTree rhs) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.DupTree(opTree), root);
                adaptor.AddChild(root, (CommonTree)adaptor.DupTree(lhs));
                adaptor.AddChild(root, (CommonTree)adaptor.DupTree(rhs));
                return root;
            }

            protected CommonTree mkJavaRep(IToken tok, TypeRepTemplate ty) {
               if (ty.InstantiatedTypes == null || ty.InstantiatedTypes.Length == 0) {
                  return (CommonTree)adaptor.Create(IDENTIFIER, tok, ty.Java);
               }
               else {
                  Dictionary<string,CommonTree> tyMap = new Dictionary<string,CommonTree>();
                  int i = 0;
                  foreach (TypeRepTemplate tyArg in ty.InstantiatedTypes) {
                     CommonTree typeRoot = (CommonTree)adaptor.Nil;
                     typeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), typeRoot);
                     adaptor.AddChild(typeRoot, mkJavaRep(tok, tyArg));
                     tyMap[ty.TypeParams[i]] = wrapType(typeRoot, tok);
                     i++;
                  }
                  return mkJavaWrapper(ty.Java, tyMap, tok);  
               } 
            }

            // either ^(PARAMS (type identifier)*) or ^(ARGS identifier*) depending on value of formal
            protected CommonTree mkParams(TypeRepTemplate tyRep, List<ParamRepTemplate> inParams, bool formal, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(formal ? PARAMS : ARGS, tok, formal ? "PARAMS" : "ARGS"), root);
                foreach (ParamRepTemplate p in inParams) {
                   if (formal) {
                      TypeRepTemplate ty = tyRep.BuildType(p.Type, AppEnv, new UnknownRepTemplate(p.Type));
                      CommonTree typeRoot = (CommonTree)adaptor.Nil;
                      typeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), typeRoot);
                      adaptor.AddChild(typeRoot, mkJavaRep(tok, ty));
                      adaptor.AddChild(root, typeRoot);
                      AddToImports(ty.Imports);
                   }
                   adaptor.AddChild(root, (CommonTree)adaptor.Create(IDENTIFIER, tok, p.Name));
                }
                return root;
            }

            // make ^(PARAMS (type identifier)*) from a List<ParamRepTemplate (for the types) and List<IDENTIFIER> for the names 
            protected CommonTree mkTypedParams(List<ParamRepTemplate> inParams, List<CommonTree> ids, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, tok, "PARAMS"), root);
                CommonTree[] idsArray = ids.ToArray();
                int i = 0;
                foreach (ParamRepTemplate p in inParams) {
                   TypeRepTemplate ty = findType(p.Type);
                   CommonTree typeRoot = (CommonTree)adaptor.Nil;
                   typeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), typeRoot);
                   adaptor.AddChild(typeRoot, (CommonTree)adaptor.Create(IDENTIFIER, tok, ty.Java));
                   adaptor.AddChild(root, typeRoot);
                   AddToImports(ty.Imports);
                   adaptor.AddChild(root, dupTree(idsArray[i]));
                   i++;
                }
                return root;
            }

            //  public List<delegate_type> GetInvocationList() throws Exception {
            //        	List<delegate_type> ret = new ArrayList<delegate_type>();
            //        	ret.add(this);
            //          return ret;
            //   }
            protected CommonTree mkDelegateGetInvocationList(CommonTree delTree, TypeRepTemplate delType, IToken tok) {

        //     | ^(METHOD attributes? modifiers? type member_name type_parameter_constraints_clauses? type_parameter_list? formal_parameter_list? method_body exception*)
                CommonTree method = (CommonTree)adaptor.Nil;
                method = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), method);

                adaptor.AddChild(method, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));

                CommonTree retTypeRoot = (CommonTree)adaptor.Nil;
                retTypeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), retTypeRoot);
                adaptor.AddChild(retTypeRoot, (CommonTree)adaptor.Create(IDENTIFIER, tok, "List"));
                AddToImports("java.util.List");
                adaptor.AddChild(retTypeRoot, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                CommonTree delTypeRoot = (CommonTree)adaptor.Nil;
                if (delTree != null) {
                   delTypeRoot = dupTree(delTree);
                }
                else {
                   delTypeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), delTypeRoot);
                   adaptor.AddChild(delTypeRoot, (CommonTree)adaptor.Create(IDENTIFIER, tok, delType.mkFormattedTypeName(false, "<",">")));
                   AddToImports(delType.Imports);
                }
                adaptor.AddChild(retTypeRoot, delTypeRoot);

                adaptor.AddChild(retTypeRoot, (CommonTree)adaptor.Create(GT, tok, ">"));

                adaptor.AddChild(method, retTypeRoot);

                adaptor.AddChild(method, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("GetInvocationList")));

                adaptor.AddChild(method, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));


                CommonTree body = (CommonTree)adaptor.Nil;

                // List<delegate_type> ret = new ArrayList<delegate_type>();
                CommonTree retdecl = (CommonTree)adaptor.Nil;

                adaptor.AddChild(retdecl, dupTree(retTypeRoot));
                adaptor.AddChild(retdecl, (CommonTree)adaptor.Create(IDENTIFIER, tok, "ret"));
                adaptor.AddChild(retdecl, (CommonTree)adaptor.Create(ASSIGN, tok, "="));

                CommonTree newA = (CommonTree)adaptor.Nil;
                newA = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "new"), newA);

                CommonTree alTypeRoot = (CommonTree)adaptor.Nil;
                alTypeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), alTypeRoot);
                adaptor.AddChild(alTypeRoot, (CommonTree)adaptor.Create(IDENTIFIER, tok, "ArrayList"));
                AddToImports("java.util.ArrayList");
                adaptor.AddChild(alTypeRoot, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
          
                adaptor.AddChild(alTypeRoot, dupTree(delTypeRoot));

                adaptor.AddChild(alTypeRoot, (CommonTree)adaptor.Create(GT, tok, ">"));

                adaptor.AddChild(newA, alTypeRoot);
                adaptor.AddChild(retdecl, newA);
                adaptor.AddChild(body, retdecl);
                adaptor.AddChild(body, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                // ret.add(this)
                CommonTree retaddcall = (CommonTree)adaptor.Nil;
                retaddcall = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), retaddcall);

                CommonTree retadd = (CommonTree)adaptor.Nil;
                retadd = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), retadd);
                adaptor.AddChild(retadd, (CommonTree)adaptor.Create(IDENTIFIER, tok, "ret"));
                adaptor.AddChild(retadd, (CommonTree)adaptor.Create(IDENTIFIER, tok, "add"));

                adaptor.AddChild(retaddcall, retadd);

                CommonTree arg = (CommonTree)adaptor.Nil;
                arg = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), arg);

                adaptor.AddChild(arg, (CommonTree)adaptor.Create(THIS, tok, "this"));
                adaptor.AddChild(retaddcall, arg);
                adaptor.AddChild(body,retaddcall);
                adaptor.AddChild(body, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                // return ret;
                CommonTree ret = (CommonTree)adaptor.Nil;
                ret = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, tok, "return"), ret);
                adaptor.AddChild(ret, (CommonTree)adaptor.Create(IDENTIFIER, tok, "ret"));
                adaptor.AddChild(body,ret);

                adaptor.AddChild(method, body);

                adaptor.AddChild(method, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                adaptor.AddChild(method, (CommonTree)adaptor.Create(EXCEPTION, tok, "Exception"));

                return method;
            }

            // new <delegate_type>() { public void Invoke(<formal args>) throws Exception { [return] arg[0](<args>); }
            //                         public List<delegate_type> GetInvocationList() throws Exception { ... }}
            protected CommonTree mkDelegateObject(CommonTree delTree, CommonTree methTree, DelegateRepTemplate delg, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW_DELEGATE, tok, "NEW_DELEGATE"), root);
                if (delTree != null) {
                   adaptor.AddChild(root, dupTree(delTree));
                }
                else {
                   CommonTree delTyTree = (CommonTree)adaptor.Nil;
                   delTyTree = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), delTyTree);
                   adaptor.AddChild(delTyTree, (CommonTree)adaptor.Create(IDENTIFIER, tok, delg.mkFormattedTypeName(false, "<",">")));
                   AddToImports(delg.Imports);
                   adaptor.AddChild(root, delTyTree);
                }

                adaptor.AddChild(root, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));

        //     | ^(METHOD attributes? modifiers? type member_name type_parameter_constraints_clauses? type_parameter_list? formal_parameter_list? method_body exception*)
                CommonTree method = (CommonTree)adaptor.Nil;
                method = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), method);

                adaptor.AddChild(method, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));

                TypeRepTemplate returnType = findType(delg.Invoke.Return);
                AddToImports(returnType.Imports);
                CommonTree retTypeRoot = (CommonTree)adaptor.Nil;
                retTypeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), retTypeRoot);
                adaptor.AddChild(retTypeRoot, (CommonTree)adaptor.Create(IDENTIFIER, tok, returnType.Java));
                adaptor.AddChild(method, retTypeRoot);

                adaptor.AddChild(method, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("Invoke")));
                if (delg.Invoke.Params.Count > 0) {
                   adaptor.AddChild(method, mkParams(delg, delg.Invoke.Params, true, tok));
                }
                adaptor.AddChild(method, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));

                CommonTree ret = (CommonTree)adaptor.Nil;
                ret = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, tok, "return"), ret);

                CommonTree call = (CommonTree)adaptor.Nil;
                call = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), call);
                adaptor.AddChild(call, dupTree(methTree));
                if (delg.Invoke.Params.Count > 0) {
                   adaptor.AddChild(call, mkParams(delg, delg.Invoke.Params, false, tok));
                }
                if (!returnType.IsA(VoidType, AppEnv)) {
                   adaptor.AddChild(ret, call);
                   adaptor.AddChild(method, ret);
                }
                else {
                   adaptor.AddChild(method, call);
                   adaptor.AddChild(method, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                }

                adaptor.AddChild(method, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                adaptor.AddChild(method, (CommonTree)adaptor.Create(EXCEPTION, tok, "Exception"));
                adaptor.AddChild(root, method);
                adaptor.AddChild(root, mkDelegateGetInvocationList(delTree, delg, tok));

                adaptor.AddChild(root, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                return root;
            }

            // new <delegate_type>() { public void Invoke(<formal args>) throw exception <body> }
            protected CommonTree mkDelegateObject(CommonTree delTree, CommonTree argsTree, CommonTree bodyTree, DelegateRepTemplate delg, IToken tok) {
                CommonTree root = (CommonTree)adaptor.Nil;
                root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW_DELEGATE, tok, "NEW_DELEGATE"), root);
                if (delTree != null) {
                   adaptor.AddChild(root, dupTree(delTree));
                }
                else {
                   CommonTree delTyTree = (CommonTree)adaptor.Nil;
                   delTyTree = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), delTyTree);
                   adaptor.AddChild(delTyTree, (CommonTree)adaptor.Create(IDENTIFIER, tok, delg.mkFormattedTypeName(false, "<",">")));
                   AddToImports(delg.Imports);
                   adaptor.AddChild(root, delTyTree);
                }

                adaptor.AddChild(root, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));

        //     | ^(METHOD attributes? modifiers? type member_name type_parameter_constraints_clauses? type_parameter_list? formal_parameter_list? method_body exception*)
                CommonTree method = (CommonTree)adaptor.Nil;
                method = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), method);

                adaptor.AddChild(method, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));

                TypeRepTemplate returnType = findType(delg.Invoke.Return);
                AddToImports(returnType.Imports);
                CommonTree retTypeRoot = (CommonTree)adaptor.Nil;
                retTypeRoot = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), retTypeRoot);
                adaptor.AddChild(retTypeRoot, (CommonTree)adaptor.Create(IDENTIFIER, tok, returnType.Java));
                adaptor.AddChild(method, retTypeRoot);

                adaptor.AddChild(method, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("Invoke")));
                adaptor.AddChild(method, dupTree(argsTree));
                adaptor.AddChild(method, dupTree(bodyTree));
                adaptor.AddChild(method, (CommonTree)adaptor.Create(EXCEPTION, tok, "Exception"));
                adaptor.AddChild(root, method);
                adaptor.AddChild(root, mkDelegateGetInvocationList(delTree, delg, tok));

                adaptor.AddChild(root, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                return root;
            }

                // new <delegate_type>() { public void Invoke(<formal args>) throw exception <body> }
                protected CommonTree rewriteMethodGroupName(CommonTree methodGroupNameId) {
                   CommonTree ret = null;
                   if (adaptor.GetType(methodGroupNameId) == IDENTIFIER) {
                      ret = (CommonTree)adaptor.Nil;
                      ret = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IDENTIFIER, adaptor.GetToken(methodGroupNameId), rewriteMethodName(adaptor.GetToken(methodGroupNameId).Text)), ret);
                   }
                   else {
                     ret = dupTree(methodGroupNameId);
                   }
                   return ret;
                }

                // Used from parseString() to set up dynamic scopes
                public override void InitParser()
                {
                   // Set up dynamic scopes
                   NSContext_stack.Push(new NSContext_scope());
                   PrimitiveRep_stack.Push(new PrimitiveRep_scope());
                   MkNonGeneric_stack.Push(new MkNonGeneric_scope());
                   SymTab_stack.Push(new SymTab_scope());
                   ForceUnsharedType_stack.Push(new ForceUnsharedType_scope());
                   // Set up dynamic scopes

                   ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  false;
                   ((MkNonGeneric_scope)MkNonGeneric_stack.Peek()).scrubGenericArgs =  false;

                   ((NSContext_scope)NSContext_stack.Peek()).namespaces =  SearchPath ?? new List<string>();
                   ((NSContext_scope)NSContext_stack.Peek()).globalNamespaces =  SearchPath ?? new List<string>();

                   ((NSContext_scope)NSContext_stack.Peek()).typeVariables =  new List<string>();
                   ((NSContext_scope)NSContext_stack.Peek()).globalTypeVariables =  new List<string>();

                   ((NSContext_scope)NSContext_stack.Peek()).baseClass =  ObjectType;
                   ((NSContext_scope)NSContext_stack.Peek()).interfaceList =  new List<InterfaceRepTemplate>();
                   ((NSContext_scope)NSContext_stack.Peek()).blackListedMethods =  new List<string>();

                   ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();

                   ((ForceUnsharedType_scope)ForceUnsharedType_stack.Peek()).fresh =  false;
                }

                protected void AddNSToSearchPath(List<string> search, string ns) {
                    int idx = 0;
                    while (ns.IndexOf('.', idx) > 0) {
                        idx = ns.IndexOf('.', idx)+1;
                        search.Add(ns.Substring(0,idx-1));
                    }
                    search.Add(ns);
                }


        public class compilation_unit_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "compilation_unit"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1159:8: public compilation_unit : ^(pkg= PACKAGE ns= PAYLOAD dec= type_declaration ) -> ^( $pkg $ns $dec) ;
        public NetMaker.compilation_unit_return compilation_unit() // throws RecognitionException [1]
        {   
            NSContext_stack.Push(new NSContext_scope());
            PrimitiveRep_stack.Push(new PrimitiveRep_scope());
            MkNonGeneric_stack.Push(new MkNonGeneric_scope());
            ForceUnsharedType_stack.Push(new ForceUnsharedType_scope());

            NetMaker.compilation_unit_return retval = new NetMaker.compilation_unit_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree pkg = null;
            CommonTree ns = null;
            NetMaker.type_declaration_return dec = default(NetMaker.type_declaration_return);


            CommonTree pkg_tree=null;
            CommonTree ns_tree=null;
            RewriteRuleNodeStream stream_PACKAGE = new RewriteRuleNodeStream(adaptor,"token PACKAGE");
            RewriteRuleNodeStream stream_PAYLOAD = new RewriteRuleNodeStream(adaptor,"token PAYLOAD");
            RewriteRuleSubtreeStream stream_type_declaration = new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");


                ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  false;
                ((MkNonGeneric_scope)MkNonGeneric_stack.Peek()).scrubGenericArgs =  false;

                // TODO: Do we need to ensure we have access to System? If so, can add it here.
                ((NSContext_scope)NSContext_stack.Peek()).namespaces =  SearchPath ?? new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).globalNamespaces =  SearchPath ?? new List<string>();

                ((NSContext_scope)NSContext_stack.Peek()).typeVariables =  new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).globalTypeVariables =  new List<string>();

                ((NSContext_scope)NSContext_stack.Peek()).baseClass =  ObjectType;
                ((NSContext_scope)NSContext_stack.Peek()).interfaceList =  new List<InterfaceRepTemplate>();
                ((NSContext_scope)NSContext_stack.Peek()).blackListedMethods =  new List<string>();

                ((ForceUnsharedType_scope)ForceUnsharedType_stack.Peek()).fresh =  false;


            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1179:2: ( ^(pkg= PACKAGE ns= PAYLOAD dec= type_declaration ) -> ^( $pkg $ns $dec) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1180:2: ^(pkg= PACKAGE ns= PAYLOAD dec= type_declaration )
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	pkg=(CommonTree)Match(input,PACKAGE,FOLLOW_PACKAGE_in_compilation_unit146); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_PACKAGE.Add(pkg);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	ns=(CommonTree)Match(input,PAYLOAD,FOLLOW_PAYLOAD_in_compilation_unit150); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_PAYLOAD.Add(ns);

                	if ( (state.backtracking==0) )
                	{
                	   ((NSContext_scope)NSContext_stack.Peek()).currentNS =  ((ns != null) ? ns.Text : null); AddNSToSearchPath(((NSContext_scope)NSContext_stack.Peek()).globalNamespaces, ((ns != null) ? ns.Text : null));
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_declaration_in_compilation_unit156);
                	dec = type_declaration();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type_declaration.Add(dec.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}



                	// AST REWRITE
                	// elements:          dec, pkg, ns
                	// token labels:      ns, pkg
                	// rule labels:       retval, dec
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_ns = new RewriteRuleNodeStream(adaptor, "token ns", ns);
                	RewriteRuleNodeStream stream_pkg = new RewriteRuleNodeStream(adaptor, "token pkg", pkg);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_dec = new RewriteRuleSubtreeStream(adaptor, "rule dec", dec!=null ? dec.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1181:5: -> ^( $pkg $ns $dec)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1181:8: ^( $pkg $ns $dec)
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_pkg.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_ns.NextNode());
                	    adaptor.AddChild(root_1,  mkImports() );
                	    adaptor.AddChild(root_1, stream_dec.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                NSContext_stack.Pop();
                PrimitiveRep_stack.Pop();
                MkNonGeneric_stack.Pop();
                ForceUnsharedType_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "compilation_unit"

        public class type_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1183:1: type_declaration : ( class_declaration | interface_declaration | enum_declaration );
        public NetMaker.type_declaration_return type_declaration() // throws RecognitionException [1]
        {   
            NetMaker.type_declaration_return retval = new NetMaker.type_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.class_declaration_return class_declaration1 = default(NetMaker.class_declaration_return);

            NetMaker.interface_declaration_return interface_declaration2 = default(NetMaker.interface_declaration_return);

            NetMaker.enum_declaration_return enum_declaration3 = default(NetMaker.enum_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1183:17: ( class_declaration | interface_declaration | enum_declaration )
                int alt1 = 3;
                switch ( input.LA(1) ) 
                {
                case CLASS:
                	{
                    alt1 = 1;
                    }
                    break;
                case INTERFACE:
                	{
                    alt1 = 2;
                    }
                    break;
                case ENUM:
                	{
                    alt1 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d1s0 =
                	        new NoViableAltException("", 1, 0, input);

                	    throw nvae_d1s0;
                }

                switch (alt1) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1184:2: class_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_class_declaration_in_type_declaration187);
                        	class_declaration1 = class_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, class_declaration1.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1185:4: interface_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_interface_declaration_in_type_declaration192);
                        	interface_declaration2 = interface_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, interface_declaration2.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1186:4: enum_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_enum_declaration_in_type_declaration197);
                        	enum_declaration3 = enum_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, enum_declaration3.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_declaration"

        public class qualified_identifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qualified_identifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1189:1: qualified_identifier : identifier ( '.' identifier )* ;
        public NetMaker.qualified_identifier_return qualified_identifier() // throws RecognitionException [1]
        {   
            NetMaker.qualified_identifier_return retval = new NetMaker.qualified_identifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal5 = null;
            NetMaker.identifier_return identifier4 = default(NetMaker.identifier_return);

            NetMaker.identifier_return identifier6 = default(NetMaker.identifier_return);


            CommonTree char_literal5_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1189:21: ( identifier ( '.' identifier )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1190:2: identifier ( '.' identifier )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_qualified_identifier209);
                	identifier4 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier4.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1190:13: ( '.' identifier )*
                	do 
                	{
                	    int alt2 = 2;
                	    int LA2_0 = input.LA(1);

                	    if ( (LA2_0 == DOT) )
                	    {
                	        alt2 = 1;
                	    }


                	    switch (alt2) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1190:14: '.' identifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal5=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_qualified_identifier212); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal5_tree = (CommonTree)adaptor.DupNode(char_literal5);

                			    		adaptor.AddChild(root_0, char_literal5_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_identifier_in_qualified_identifier214);
                			    	identifier6 = identifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, identifier6.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop2;
                	    }
                	} while (true);

                	loop2:
                		;	// Stops C# compiler whining that label 'loop2' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qualified_identifier"

        public class modifiers_return : TreeRuleReturnScope
        {
            public List<string> modList;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "modifiers"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1192:1: modifiers returns [List<string> modList] : ( modifier )+ ;
        public NetMaker.modifiers_return modifiers() // throws RecognitionException [1]
        {   
            NetMaker.modifiers_return retval = new NetMaker.modifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.modifier_return modifier7 = default(NetMaker.modifier_return);




                retval.modList =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1195:2: ( ( modifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1196:2: ( modifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1196:2: ( modifier )+
                	int cnt3 = 0;
                	do 
                	{
                	    int alt3 = 2;
                	    int LA3_0 = input.LA(1);

                	    if ( (LA3_0 == FINAL || (LA3_0 >= PUBLIC && LA3_0 <= PRIVATE) || LA3_0 == STATIC || LA3_0 == 194 || LA3_0 == 197 || (LA3_0 >= 199 && LA3_0 <= 204)) )
                	    {
                	        alt3 = 1;
                	    }


                	    switch (alt3) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1196:3: modifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_modifier_in_modifiers234);
                			    	modifier7 = modifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, modifier7.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.modList.Add(((modifier7 != null) ? ((CommonTree)modifier7.Tree) : null).Text); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt3 >= 1 ) goto loop3;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee3 =
                		                new EarlyExitException(3, input);
                		            throw eee3;
                	    }
                	    cnt3++;
                	} while (true);

                	loop3:
                		;	// Stops C# compiler whining that label 'loop3' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "modifiers"

        public class modifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "modifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1197:1: modifier : ( 'new' | 'public' | 'protected' | 'private' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' | FINAL );
        public NetMaker.modifier_return modifier() // throws RecognitionException [1]
        {   
            NetMaker.modifier_return retval = new NetMaker.modifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set8 = null;

            CommonTree set8_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1197:9: ( 'new' | 'public' | 'protected' | 'private' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' | FINAL )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set8 = (CommonTree)input.LT(1);
                	if ( input.LA(1) == FINAL || (input.LA(1) >= PUBLIC && input.LA(1) <= PRIVATE) || input.LA(1) == STATIC || input.LA(1) == 194 || input.LA(1) == 197 || (input.LA(1) >= 199 && input.LA(1) <= 204) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set8_tree = (CommonTree)adaptor.DupNode(set8);

                	    adaptor.AddChild(root_0, set8_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "modifier"

        public class class_member_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_member_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1201:1: class_member_declaration : ( ^( CONST ( attributes )? ( modifiers )? type constant_declarators[$type.dotNetType] ) | ^( EVENT ( attributes )? ( modifiers )? event_declaration ) | ^( METHOD ( attributes )? ( modifiers )? type identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? method_body ( exception )* ) -> ^( METHOD ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? method_body ( exception )* ) | interface_declaration | class_declaration | ^( FIELD ( attributes )? ( modifiers )? type field_declaration[$type.tree, $type.dotNetType] ) | ^( OPERATOR ( attributes )? ( modifiers )? type operator_declaration ) | enum_declaration | ^( CONVERSION_OPERATOR ( attributes )? ( modifiers )? conversion_operator_declaration[$attributes.tree, $modifiers.tree] ) -> conversion_operator_declaration | constructor_declaration );
        public NetMaker.class_member_declaration_return class_member_declaration() // throws RecognitionException [1]
        {   
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.class_member_declaration_return retval = new NetMaker.class_member_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree CONST9 = null;
            CommonTree EVENT14 = null;
            CommonTree METHOD18 = null;
            CommonTree FIELD30 = null;
            CommonTree OPERATOR35 = null;
            CommonTree CONVERSION_OPERATOR41 = null;
            NetMaker.attributes_return attributes10 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers11 = default(NetMaker.modifiers_return);

            NetMaker.type_return type12 = default(NetMaker.type_return);

            NetMaker.constant_declarators_return constant_declarators13 = default(NetMaker.constant_declarators_return);

            NetMaker.attributes_return attributes15 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers16 = default(NetMaker.modifiers_return);

            NetMaker.event_declaration_return event_declaration17 = default(NetMaker.event_declaration_return);

            NetMaker.attributes_return attributes19 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers20 = default(NetMaker.modifiers_return);

            NetMaker.type_return type21 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier22 = default(NetMaker.identifier_return);

            NetMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses23 = default(NetMaker.type_parameter_constraints_clauses_return);

            NetMaker.type_parameter_list_return type_parameter_list24 = default(NetMaker.type_parameter_list_return);

            NetMaker.formal_parameter_list_return formal_parameter_list25 = default(NetMaker.formal_parameter_list_return);

            NetMaker.method_body_return method_body26 = default(NetMaker.method_body_return);

            NetMaker.exception_return exception27 = default(NetMaker.exception_return);

            NetMaker.interface_declaration_return interface_declaration28 = default(NetMaker.interface_declaration_return);

            NetMaker.class_declaration_return class_declaration29 = default(NetMaker.class_declaration_return);

            NetMaker.attributes_return attributes31 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers32 = default(NetMaker.modifiers_return);

            NetMaker.type_return type33 = default(NetMaker.type_return);

            NetMaker.field_declaration_return field_declaration34 = default(NetMaker.field_declaration_return);

            NetMaker.attributes_return attributes36 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers37 = default(NetMaker.modifiers_return);

            NetMaker.type_return type38 = default(NetMaker.type_return);

            NetMaker.operator_declaration_return operator_declaration39 = default(NetMaker.operator_declaration_return);

            NetMaker.enum_declaration_return enum_declaration40 = default(NetMaker.enum_declaration_return);

            NetMaker.attributes_return attributes42 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers43 = default(NetMaker.modifiers_return);

            NetMaker.conversion_operator_declaration_return conversion_operator_declaration44 = default(NetMaker.conversion_operator_declaration_return);

            NetMaker.constructor_declaration_return constructor_declaration45 = default(NetMaker.constructor_declaration_return);


            CommonTree CONST9_tree=null;
            CommonTree EVENT14_tree=null;
            CommonTree METHOD18_tree=null;
            CommonTree FIELD30_tree=null;
            CommonTree OPERATOR35_tree=null;
            CommonTree CONVERSION_OPERATOR41_tree=null;
            RewriteRuleNodeStream stream_METHOD = new RewriteRuleNodeStream(adaptor,"token METHOD");
            RewriteRuleNodeStream stream_CONVERSION_OPERATOR = new RewriteRuleNodeStream(adaptor,"token CONVERSION_OPERATOR");
            RewriteRuleSubtreeStream stream_exception = new RewriteRuleSubtreeStream(adaptor,"rule exception");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_type_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_list");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            RewriteRuleSubtreeStream stream_method_body = new RewriteRuleSubtreeStream(adaptor,"rule method_body");
            RewriteRuleSubtreeStream stream_modifiers = new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_conversion_operator_declaration = new RewriteRuleSubtreeStream(adaptor,"rule conversion_operator_declaration");


               ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();

               ResolveResult methodResult = null;
               MethodRepTemplate methodTemplate = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1209:2: ( ^( CONST ( attributes )? ( modifiers )? type constant_declarators[$type.dotNetType] ) | ^( EVENT ( attributes )? ( modifiers )? event_declaration ) | ^( METHOD ( attributes )? ( modifiers )? type identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? method_body ( exception )* ) -> ^( METHOD ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? method_body ( exception )* ) | interface_declaration | class_declaration | ^( FIELD ( attributes )? ( modifiers )? type field_declaration[$type.tree, $type.dotNetType] ) | ^( OPERATOR ( attributes )? ( modifiers )? type operator_declaration ) | enum_declaration | ^( CONVERSION_OPERATOR ( attributes )? ( modifiers )? conversion_operator_declaration[$attributes.tree, $modifiers.tree] ) -> conversion_operator_declaration | constructor_declaration )
                int alt20 = 10;
                switch ( input.LA(1) ) 
                {
                case CONST:
                	{
                    alt20 = 1;
                    }
                    break;
                case EVENT:
                	{
                    alt20 = 2;
                    }
                    break;
                case METHOD:
                	{
                    alt20 = 3;
                    }
                    break;
                case INTERFACE:
                	{
                    alt20 = 4;
                    }
                    break;
                case CLASS:
                	{
                    alt20 = 5;
                    }
                    break;
                case FIELD:
                	{
                    alt20 = 6;
                    }
                    break;
                case OPERATOR:
                	{
                    alt20 = 7;
                    }
                    break;
                case ENUM:
                	{
                    alt20 = 8;
                    }
                    break;
                case CONVERSION_OPERATOR:
                	{
                    alt20 = 9;
                    }
                    break;
                case CONSTRUCTOR:
                	{
                    alt20 = 10;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d20s0 =
                	        new NoViableAltException("", 20, 0, input);

                	    throw nvae_d20s0;
                }

                switch (alt20) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1210:5: ^( CONST ( attributes )? ( modifiers )? type constant_declarators[$type.dotNetType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	CONST9=(CommonTree)Match(input,CONST,FOLLOW_CONST_in_class_member_declaration321); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{CONST9_tree = (CommonTree)adaptor.DupNode(CONST9);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(CONST9_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1210:13: ( attributes )?
                        	int alt4 = 2;
                        	int LA4_0 = input.LA(1);

                        	if ( (LA4_0 == ATTRIBUTE) )
                        	{
                        	    alt4 = 1;
                        	}
                        	switch (alt4) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1210:13: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_class_member_declaration323);
                        	        	attributes10 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, attributes10.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1210:25: ( modifiers )?
                        	int alt5 = 2;
                        	int LA5_0 = input.LA(1);

                        	if ( (LA5_0 == FINAL || (LA5_0 >= PUBLIC && LA5_0 <= PRIVATE) || LA5_0 == STATIC || LA5_0 == 194 || LA5_0 == 197 || (LA5_0 >= 199 && LA5_0 <= 204)) )
                        	{
                        	    alt5 = 1;
                        	}
                        	switch (alt5) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1210:25: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration326);
                        	        	modifiers11 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, modifiers11.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_class_member_declaration329);
                        	type12 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, type12.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_constant_declarators_in_class_member_declaration331);
                        	constant_declarators13 = constant_declarators(((type12 != null) ? type12.dotNetType : default(TypeRepTemplate)));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, constant_declarators13.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1211:7: ^( EVENT ( attributes )? ( modifiers )? event_declaration )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	EVENT14=(CommonTree)Match(input,EVENT,FOLLOW_EVENT_in_class_member_declaration342); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{EVENT14_tree = (CommonTree)adaptor.DupNode(EVENT14);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(EVENT14_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1211:15: ( attributes )?
                        	int alt6 = 2;
                        	int LA6_0 = input.LA(1);

                        	if ( (LA6_0 == ATTRIBUTE) )
                        	{
                        	    alt6 = 1;
                        	}
                        	switch (alt6) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1211:15: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_class_member_declaration344);
                        	        	attributes15 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, attributes15.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1211:27: ( modifiers )?
                        	int alt7 = 2;
                        	int LA7_0 = input.LA(1);

                        	if ( (LA7_0 == FINAL || (LA7_0 >= PUBLIC && LA7_0 <= PRIVATE) || LA7_0 == STATIC || LA7_0 == 194 || LA7_0 == 197 || (LA7_0 >= 199 && LA7_0 <= 204)) )
                        	{
                        	    alt7 = 1;
                        	}
                        	switch (alt7) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1211:27: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration347);
                        	        	modifiers16 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, modifiers16.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_event_declaration_in_class_member_declaration350);
                        	event_declaration17 = event_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, event_declaration17.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:7: ^( METHOD ( attributes )? ( modifiers )? type identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? method_body ( exception )* )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	METHOD18=(CommonTree)Match(input,METHOD,FOLLOW_METHOD_in_class_member_declaration360); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_METHOD.Add(METHOD18);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:16: ( attributes )?
                        	int alt8 = 2;
                        	int LA8_0 = input.LA(1);

                        	if ( (LA8_0 == ATTRIBUTE) )
                        	{
                        	    alt8 = 1;
                        	}
                        	switch (alt8) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:16: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_class_member_declaration362);
                        	        	attributes19 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_attributes.Add(attributes19.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:28: ( modifiers )?
                        	int alt9 = 2;
                        	int LA9_0 = input.LA(1);

                        	if ( (LA9_0 == FINAL || (LA9_0 >= PUBLIC && LA9_0 <= PRIVATE) || LA9_0 == STATIC || LA9_0 == 194 || LA9_0 == 197 || (LA9_0 >= 199 && LA9_0 <= 204)) )
                        	{
                        	    alt9 = 1;
                        	}
                        	switch (alt9) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:28: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration365);
                        	        	modifiers20 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_modifiers.Add(modifiers20.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_class_member_declaration368);
                        	type21 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_type.Add(type21.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_class_member_declaration370);
                        	identifier22 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_identifier.Add(identifier22.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:55: ( type_parameter_constraints_clauses )?
                        	int alt10 = 2;
                        	int LA10_0 = input.LA(1);

                        	if ( (LA10_0 == TYPE_PARAM_CONSTRAINT) )
                        	{
                        	    alt10 = 1;
                        	}
                        	switch (alt10) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:55: type_parameter_constraints_clauses
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_member_declaration372);
                        	        	type_parameter_constraints_clauses23 = type_parameter_constraints_clauses();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses23.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:91: ( type_parameter_list )?
                        	int alt11 = 2;
                        	int LA11_0 = input.LA(1);

                        	if ( (LA11_0 == ATTRIBUTE || LA11_0 == IDENTIFIER || (LA11_0 >= ELIF && LA11_0 <= UNDEF) || LA11_0 == 195 || LA11_0 == 221 || (LA11_0 >= 224 && LA11_0 <= 239) || (LA11_0 >= 241 && LA11_0 <= 244) || (LA11_0 >= 247 && LA11_0 <= 250) || LA11_0 == 256 || (LA11_0 >= 263 && LA11_0 <= 264) || LA11_0 == 274 || LA11_0 == 277) )
                        	{
                        	    alt11 = 1;
                        	}
                        	switch (alt11) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:91: type_parameter_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_parameter_list_in_class_member_declaration375);
                        	        	type_parameter_list24 = type_parameter_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_type_parameter_list.Add(type_parameter_list24.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:112: ( formal_parameter_list[null,null] )?
                        	int alt12 = 2;
                        	int LA12_0 = input.LA(1);

                        	if ( (LA12_0 == PARAMS) )
                        	{
                        	    alt12 = 1;
                        	}
                        	switch (alt12) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:112: formal_parameter_list[null,null]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_formal_parameter_list_in_class_member_declaration378);
                        	        	formal_parameter_list25 = formal_parameter_list(null, null);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(formal_parameter_list25.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_method_body_in_class_member_declaration382);
                        	method_body26 = method_body();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_method_body.Add(method_body26.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:158: ( exception )*
                        	do 
                        	{
                        	    int alt13 = 2;
                        	    int LA13_0 = input.LA(1);

                        	    if ( (LA13_0 == EXCEPTION) )
                        	    {
                        	        alt13 = 1;
                        	    }


                        	    switch (alt13) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1212:158: exception
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_exception_in_class_member_declaration384);
                        			    	exception27 = exception();
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) stream_exception.Add(exception27.Tree);

                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    goto loop13;
                        	    }
                        	} while (true);

                        	loop13:
                        		;	// Stops C# compiler whining that label 'loop13' has no statements


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{


                        	           // Look to see if this method is implementing an interface or overriding a base method
                        	           foreach (InterfaceRepTemplate ifaceTy in ((NSContext_scope)NSContext_stack.Peek()).interfaceList) {
                        	              methodResult = ifaceTy.Resolve(((identifier22 != null) ? identifier22.thetext : default(string)), ((formal_parameter_list25 != null) ? formal_parameter_list25.paramTypes : default(IList<TypeRepTemplate>)) ?? new List<TypeRepTemplate>(), AppEnv);
                        	              if (methodResult != null)
                        	                 break;
                        	           }
                        	           if (methodResult == null)
                        	              methodResult = ((NSContext_scope)NSContext_stack.Peek()).baseClass.Resolve(((identifier22 != null) ? identifier22.thetext : default(string)), ((formal_parameter_list25 != null) ? formal_parameter_list25.paramTypes : default(IList<TypeRepTemplate>)) ?? new List<TypeRepTemplate>(), AppEnv);

                        	           if (methodResult != null) {
                        	              // Scan return and parameter types to see if they need to be boxed
                        	              // this occurs for primitive types that are substituing for a type parameter in the 
                        	              // parent / interface definition.
                        	              methodTemplate = methodResult.Result as MethodRepTemplate; 
                        	           }
                        	           else {
                        	              // Check for property read
                        	              if (((identifier22 != null) ? identifier22.thetext : default(string)).StartsWith("get") && (((formal_parameter_list25 != null) ? formal_parameter_list25.paramTypes : default(IList<TypeRepTemplate>)) == null || ((formal_parameter_list25 != null) ? formal_parameter_list25.paramTypes : default(IList<TypeRepTemplate>)).Count == 0)){
                        	                 string propName = ((identifier22 != null) ? identifier22.thetext : default(string)).Substring(3);
                        	                 foreach (InterfaceRepTemplate ifaceTy in ((NSContext_scope)NSContext_stack.Peek()).interfaceList) {
                        	                    methodResult = ifaceTy.Resolve(propName, false, AppEnv);
                        	                    if (methodResult != null)
                        	                       break;
                        	                 }
                        	                 if (methodResult == null)
                        	                    methodResult = ((NSContext_scope)NSContext_stack.Peek()).baseClass.Resolve(propName, false, AppEnv);

                        	                 if (methodResult != null) {
                        	                    // create a methodRepTemplate with appropriate Return and args
                        	                    PropRepTemplate prop = methodResult.Result as PropRepTemplate; 
                        	                    methodTemplate = new MethodRepTemplate();
                        	                    methodTemplate.Return = prop.Type;
                        	                 }               
                        	              }
                        	              else if (((identifier22 != null) ? identifier22.thetext : default(string)).StartsWith("set") && ((formal_parameter_list25 != null) ? formal_parameter_list25.paramTypes : default(IList<TypeRepTemplate>)) != null && ((formal_parameter_list25 != null) ? formal_parameter_list25.paramTypes : default(IList<TypeRepTemplate>)).Count == 1) {
                        	                 string propName = ((identifier22 != null) ? identifier22.thetext : default(string)).Substring(3);
                        	                 foreach (InterfaceRepTemplate ifaceTy in ((NSContext_scope)NSContext_stack.Peek()).interfaceList) {
                        	                    methodResult = ifaceTy.Resolve(propName, true, AppEnv);
                        	                    if (methodResult != null)
                        	                       break;
                        	                 }
                        	                 if (methodResult == null)
                        	                    methodResult = ((NSContext_scope)NSContext_stack.Peek()).baseClass.Resolve(propName, true, AppEnv);

                        	                 if (methodResult != null) {
                        	                    // create a methodRepTemplate with appropriate Return and args
                        	                    PropRepTemplate prop = methodResult.Result as PropRepTemplate; 
                        	                    methodTemplate = new MethodRepTemplate();
                        	                    methodTemplate.Return = new TypeRepRef("System.Void");
                        	                    ParamRepTemplate pram = new ParamRepTemplate(); 
                        	                    pram.Type = prop.Type;
                        	                    pram.Name = "value"; 
                        	                    methodTemplate.Params.Add(pram);
                        	                 }               
                        	              }
                        	           }

                        	           // (Optionally) rewrite the method name
                        	           if (!((NSContext_scope)NSContext_stack.Peek()).blackListedMethods.Contains(((identifier22 != null) ? identifier22.thetext : default(string)))) {
                        	              ((identifier22 != null) ? ((CommonTree)identifier22.Tree) : null).Token.Text = rewriteMethodName(((identifier22 != null) ? identifier22.thetext : default(string)));
                        	           }
                        	        
                        	}


                        	// AST REWRITE
                        	// elements:          type_parameter_constraints_clauses, attributes, METHOD, type_parameter_list, method_body, exception, modifiers, identifier
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1277:9: -> ^( METHOD ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? method_body ( exception )* )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1277:12: ^( METHOD ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? method_body ( exception )* )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_METHOD.NextNode(), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1277:21: ( attributes )?
                        	    if ( stream_attributes.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_attributes.NextTree());

                        	    }
                        	    stream_attributes.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1277:33: ( modifiers )?
                        	    if ( stream_modifiers.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_modifiers.NextTree());

                        	    }
                        	    stream_modifiers.Reset();
                        	    adaptor.AddChild(root_1,  dupTree(methodTemplate != null && methodTemplate.Return.ForceBoxed && ((type21 != null) ? type21.boxedTree : default(CommonTree)) != null ? ((type21 != null) ? type21.boxedTree : default(CommonTree)) : ((type21 != null) ? ((CommonTree)type21.Tree) : null)) );
                        	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1278:26: ( type_parameter_constraints_clauses )?
                        	    if ( stream_type_parameter_constraints_clauses.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_type_parameter_constraints_clauses.NextTree());

                        	    }
                        	    stream_type_parameter_constraints_clauses.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1278:62: ( type_parameter_list )?
                        	    if ( stream_type_parameter_list.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_type_parameter_list.NextTree());

                        	    }
                        	    stream_type_parameter_list.Reset();
                        	    adaptor.AddChild(root_1,  methodTemplate != null ? boxTypesAsRequired(((formal_parameter_list25 != null) ? ((CommonTree)formal_parameter_list25.Tree) : null), methodTemplate.Params, methodTemplate.ParamArray, ((formal_parameter_list25 != null) ? formal_parameter_list25.boxedTypeTrees : default(IList<CommonTree>)), ((identifier22 != null) ? ((CommonTree)identifier22.Tree) : null).Token) : dupTree(((formal_parameter_list25 != null) ? ((CommonTree)formal_parameter_list25.Tree) : null)) );
                        	    adaptor.AddChild(root_1, stream_method_body.NextTree());
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1280:27: ( exception )*
                        	    while ( stream_exception.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_exception.NextTree());

                        	    }
                        	    stream_exception.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1282:7: interface_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_interface_declaration_in_class_member_declaration490);
                        	interface_declaration28 = interface_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, interface_declaration28.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1283:7: class_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_class_declaration_in_class_member_declaration498);
                        	class_declaration29 = class_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, class_declaration29.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1284:7: ^( FIELD ( attributes )? ( modifiers )? type field_declaration[$type.tree, $type.dotNetType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	FIELD30=(CommonTree)Match(input,FIELD,FOLLOW_FIELD_in_class_member_declaration507); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{FIELD30_tree = (CommonTree)adaptor.DupNode(FIELD30);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(FIELD30_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1284:15: ( attributes )?
                        	int alt14 = 2;
                        	int LA14_0 = input.LA(1);

                        	if ( (LA14_0 == ATTRIBUTE) )
                        	{
                        	    alt14 = 1;
                        	}
                        	switch (alt14) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1284:15: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_class_member_declaration509);
                        	        	attributes31 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, attributes31.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1284:27: ( modifiers )?
                        	int alt15 = 2;
                        	int LA15_0 = input.LA(1);

                        	if ( (LA15_0 == FINAL || (LA15_0 >= PUBLIC && LA15_0 <= PRIVATE) || LA15_0 == STATIC || LA15_0 == 194 || LA15_0 == 197 || (LA15_0 >= 199 && LA15_0 <= 204)) )
                        	{
                        	    alt15 = 1;
                        	}
                        	switch (alt15) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1284:27: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration512);
                        	        	modifiers32 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, modifiers32.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_class_member_declaration515);
                        	type33 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, type33.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_field_declaration_in_class_member_declaration517);
                        	field_declaration34 = field_declaration(((type33 != null) ? ((CommonTree)type33.Tree) : null), ((type33 != null) ? type33.dotNetType : default(TypeRepTemplate)));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, field_declaration34.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1285:7: ^( OPERATOR ( attributes )? ( modifiers )? type operator_declaration )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	OPERATOR35=(CommonTree)Match(input,OPERATOR,FOLLOW_OPERATOR_in_class_member_declaration528); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{OPERATOR35_tree = (CommonTree)adaptor.DupNode(OPERATOR35);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(OPERATOR35_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1285:18: ( attributes )?
                        	int alt16 = 2;
                        	int LA16_0 = input.LA(1);

                        	if ( (LA16_0 == ATTRIBUTE) )
                        	{
                        	    alt16 = 1;
                        	}
                        	switch (alt16) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1285:18: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_class_member_declaration530);
                        	        	attributes36 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, attributes36.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1285:30: ( modifiers )?
                        	int alt17 = 2;
                        	int LA17_0 = input.LA(1);

                        	if ( (LA17_0 == FINAL || (LA17_0 >= PUBLIC && LA17_0 <= PRIVATE) || LA17_0 == STATIC || LA17_0 == 194 || LA17_0 == 197 || (LA17_0 >= 199 && LA17_0 <= 204)) )
                        	{
                        	    alt17 = 1;
                        	}
                        	switch (alt17) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1285:30: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration533);
                        	        	modifiers37 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, modifiers37.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_class_member_declaration536);
                        	type38 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, type38.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_operator_declaration_in_class_member_declaration538);
                        	operator_declaration39 = operator_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, operator_declaration39.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1286:7: enum_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_enum_declaration_in_class_member_declaration547);
                        	enum_declaration40 = enum_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, enum_declaration40.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1287:7: ^( CONVERSION_OPERATOR ( attributes )? ( modifiers )? conversion_operator_declaration[$attributes.tree, $modifiers.tree] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	CONVERSION_OPERATOR41=(CommonTree)Match(input,CONVERSION_OPERATOR,FOLLOW_CONVERSION_OPERATOR_in_class_member_declaration556); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_CONVERSION_OPERATOR.Add(CONVERSION_OPERATOR41);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1287:29: ( attributes )?
                        	int alt18 = 2;
                        	int LA18_0 = input.LA(1);

                        	if ( (LA18_0 == ATTRIBUTE) )
                        	{
                        	    alt18 = 1;
                        	}
                        	switch (alt18) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1287:29: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_class_member_declaration558);
                        	        	attributes42 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_attributes.Add(attributes42.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1287:41: ( modifiers )?
                        	int alt19 = 2;
                        	int LA19_0 = input.LA(1);

                        	if ( (LA19_0 == FINAL || (LA19_0 >= PUBLIC && LA19_0 <= PRIVATE) || LA19_0 == STATIC || LA19_0 == 194 || LA19_0 == 197 || (LA19_0 >= 199 && LA19_0 <= 204)) )
                        	{
                        	    alt19 = 1;
                        	}
                        	switch (alt19) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1287:41: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration561);
                        	        	modifiers43 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_modifiers.Add(modifiers43.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_conversion_operator_declaration_in_class_member_declaration564);
                        	conversion_operator_declaration44 = conversion_operator_declaration(((attributes42 != null) ? ((CommonTree)attributes42.Tree) : null), ((modifiers43 != null) ? ((CommonTree)modifiers43.Tree) : null));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_conversion_operator_declaration.Add(conversion_operator_declaration44.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          conversion_operator_declaration
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1287:120: -> conversion_operator_declaration
                        	{
                        	    adaptor.AddChild(root_0, stream_conversion_operator_declaration.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1288:7: constructor_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_constructor_declaration_in_class_member_declaration578);
                        	constructor_declaration45 = constructor_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, constructor_declaration45.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "class_member_declaration"

        public class exception_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "exception"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1291:1: exception : EXCEPTION ;
        public NetMaker.exception_return exception() // throws RecognitionException [1]
        {   
            NetMaker.exception_return retval = new NetMaker.exception_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree EXCEPTION46 = null;

            CommonTree EXCEPTION46_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1291:10: ( EXCEPTION )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1292:5: EXCEPTION
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	EXCEPTION46=(CommonTree)Match(input,EXCEPTION,FOLLOW_EXCEPTION_in_exception594); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{EXCEPTION46_tree = (CommonTree)adaptor.DupNode(EXCEPTION46);

                		adaptor.AddChild(root_0, EXCEPTION46_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "exception"

        public class constructor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constructor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1294:1: constructor_declaration : ^(c= CONSTRUCTOR ( attributes )? ( modifiers )? identifier ( formal_parameter_list[null,null] )? block ( exception )* sb= magicSmotherExceptionsThrow[$block.tree, \"ExceptionInInitializerError\"] ) -> { isStatic }? ^( STATIC_CONSTRUCTOR[$c.token, \"CONSTRUCTOR\"] ( attributes )? ( modifiers )? $sb) -> ^( $c ( attributes )? ( modifiers )? identifier ( formal_parameter_list )? block ( exception )* ) ;
        public NetMaker.constructor_declaration_return constructor_declaration() // throws RecognitionException [1]
        {   
            NetMaker.constructor_declaration_return retval = new NetMaker.constructor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            NetMaker.magicSmotherExceptionsThrow_return sb = default(NetMaker.magicSmotherExceptionsThrow_return);

            NetMaker.attributes_return attributes47 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers48 = default(NetMaker.modifiers_return);

            NetMaker.identifier_return identifier49 = default(NetMaker.identifier_return);

            NetMaker.formal_parameter_list_return formal_parameter_list50 = default(NetMaker.formal_parameter_list_return);

            NetMaker.block_return block51 = default(NetMaker.block_return);

            NetMaker.exception_return exception52 = default(NetMaker.exception_return);


            CommonTree c_tree=null;
            RewriteRuleNodeStream stream_CONSTRUCTOR = new RewriteRuleNodeStream(adaptor,"token CONSTRUCTOR");
            RewriteRuleSubtreeStream stream_exception = new RewriteRuleSubtreeStream(adaptor,"rule exception");
            RewriteRuleSubtreeStream stream_magicSmotherExceptionsThrow = new RewriteRuleSubtreeStream(adaptor,"rule magicSmotherExceptionsThrow");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            RewriteRuleSubtreeStream stream_modifiers = new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

               bool isStatic = false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1297:2: ( ^(c= CONSTRUCTOR ( attributes )? ( modifiers )? identifier ( formal_parameter_list[null,null] )? block ( exception )* sb= magicSmotherExceptionsThrow[$block.tree, \"ExceptionInInitializerError\"] ) -> { isStatic }? ^( STATIC_CONSTRUCTOR[$c.token, \"CONSTRUCTOR\"] ( attributes )? ( modifiers )? $sb) -> ^( $c ( attributes )? ( modifiers )? identifier ( formal_parameter_list )? block ( exception )* ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:5: ^(c= CONSTRUCTOR ( attributes )? ( modifiers )? identifier ( formal_parameter_list[null,null] )? block ( exception )* sb= magicSmotherExceptionsThrow[$block.tree, \"ExceptionInInitializerError\"] )
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,CONSTRUCTOR,FOLLOW_CONSTRUCTOR_in_constructor_declaration613); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CONSTRUCTOR.Add(c);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:21: ( attributes )?
                	int alt21 = 2;
                	int LA21_0 = input.LA(1);

                	if ( (LA21_0 == ATTRIBUTE) )
                	{
                	    alt21 = 1;
                	}
                	switch (alt21) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:21: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_constructor_declaration615);
                	        	attributes47 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(attributes47.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:33: ( modifiers )?
                	int alt22 = 2;
                	int LA22_0 = input.LA(1);

                	if ( (LA22_0 == FINAL || (LA22_0 >= PUBLIC && LA22_0 <= PRIVATE) || LA22_0 == STATIC || LA22_0 == 194 || LA22_0 == 197 || (LA22_0 >= 199 && LA22_0 <= 204)) )
                	{
                	    alt22 = 1;
                	}
                	switch (alt22) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:34: modifiers
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_modifiers_in_constructor_declaration619);
                	        	modifiers48 = modifiers();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_modifiers.Add(modifiers48.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isStatic = ((modifiers48 != null) ? modifiers48.modList : default(List<string>)).Contains("static"); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_constructor_declaration625);
                	identifier49 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier49.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:112: ( formal_parameter_list[null,null] )?
                	int alt23 = 2;
                	int LA23_0 = input.LA(1);

                	if ( (LA23_0 == PARAMS) )
                	{
                	    alt23 = 1;
                	}
                	switch (alt23) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:112: formal_parameter_list[null,null]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_formal_parameter_list_in_constructor_declaration628);
                	        	formal_parameter_list50 = formal_parameter_list(null, null);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(formal_parameter_list50.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_constructor_declaration632);
                	block51 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_block.Add(block51.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:152: ( exception )*
                	do 
                	{
                	    int alt24 = 2;
                	    int LA24_0 = input.LA(1);

                	    if ( (LA24_0 == EXCEPTION) )
                	    {
                	        alt24 = 1;
                	    }


                	    switch (alt24) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1298:152: exception
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_exception_in_constructor_declaration634);
                			    	exception52 = exception();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_exception.Add(exception52.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop24;
                	    }
                	} while (true);

                	loop24:
                		;	// Stops C# compiler whining that label 'loop24' has no statements

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicSmotherExceptionsThrow_in_constructor_declaration639);
                	sb = magicSmotherExceptionsThrow(((block51 != null) ? ((CommonTree)block51.Tree) : null), "ExceptionInInitializerError");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicSmotherExceptionsThrow.Add(sb.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}



                	// AST REWRITE
                	// elements:          sb, block, attributes, c, modifiers, attributes, exception, formal_parameter_list, identifier, modifiers
                	// token labels:      c
                	// rule labels:       retval, sb
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_c = new RewriteRuleNodeStream(adaptor, "token c", c);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_sb = new RewriteRuleSubtreeStream(adaptor, "rule sb", sb!=null ? sb.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1299:7: -> { isStatic }? ^( STATIC_CONSTRUCTOR[$c.token, \"CONSTRUCTOR\"] ( attributes )? ( modifiers )? $sb)
                	if ( isStatic )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1299:24: ^( STATIC_CONSTRUCTOR[$c.token, \"CONSTRUCTOR\"] ( attributes )? ( modifiers )? $sb)
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_CONSTRUCTOR, c.token, "CONSTRUCTOR"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1299:70: ( attributes )?
                	    if ( stream_attributes.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_attributes.NextTree());

                	    }
                	    stream_attributes.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1299:82: ( modifiers )?
                	    if ( stream_modifiers.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_modifiers.NextTree());

                	    }
                	    stream_modifiers.Reset();
                	    adaptor.AddChild(root_1, stream_sb.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 1300:7: -> ^( $c ( attributes )? ( modifiers )? identifier ( formal_parameter_list )? block ( exception )* )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1300:11: ^( $c ( attributes )? ( modifiers )? identifier ( formal_parameter_list )? block ( exception )* )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_c.NextNode(), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1300:16: ( attributes )?
                	    if ( stream_attributes.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_attributes.NextTree());

                	    }
                	    stream_attributes.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1300:28: ( modifiers )?
                	    if ( stream_modifiers.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_modifiers.NextTree());

                	    }
                	    stream_modifiers.Reset();
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1300:50: ( formal_parameter_list )?
                	    if ( stream_formal_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_formal_parameter_list.NextTree());

                	    }
                	    stream_formal_parameter_list.Reset();
                	    adaptor.AddChild(root_1, stream_block.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1300:79: ( exception )*
                	    while ( stream_exception.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_exception.NextTree());

                	    }
                	    stream_exception.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constructor_declaration"

        protected class primary_expression_scope 
        {
            protected internal bool parentIsApply;
        }
        protected Stack primary_expression_stack = new Stack();

        public class primary_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public string rmId;
            public TypeRepTemplate typeofType;
            public string thedottedtext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "primary_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1308:1: primary_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( ^(index= INDEX ie= expression[ObjectType] ( expression_list )? ) | ( ^( APPLY ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | ( identifier ( generic_argument_list )? ) ) ( argument_list )? ) )=> ^( APPLY ( ^(d0= '.' e2= expression[ObjectType] i2= identifier ( generic_argument_list )? ) | (i2= identifier ( generic_argument_list )? ) ) ( argument_list )? ) | ^( APPLY expression[ObjectType] ( argument_list )? ) | ( ^( ( POSTINC | POSTDEC ) ( ^( '.' expression[objectType] identifier ) | identifier ) ) )=> ( ^( POSTINC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) | ^( POSTDEC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) ) | ^( POSTINC expression[ObjectType] ) | ^( POSTDEC expression[ObjectType] ) | ^( '->' expression[ObjectType] identifier ( generic_argument_list )? ) | predefined_type | 'this' | SUPER | ( ^(d1= '.' e1= expression[ObjectType] i= identifier (dgal= generic_argument_list )? ) | (i= identifier (dgal= generic_argument_list )? ) ) magicIdentifier[true, rewriteMethodName($i.thetext), $i.tree != null ? $i.tree.Token : null] magicInputPeId[$d1.tree,$i.tree,$dgal.tree] magicMethodGroup[$d1.tree, $e1.tree, $magicIdentifier.tree, $dgal.tree, $i.tree != null ? $i.tree.Token : null] | primary_expression_start | literal | ^(n= NEW type ( argument_list )? ( object_or_collection_initializer )? ) | ^( NEW_ANON_OBJECT anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | ^(d= 'delegate' ( formal_parameter_list[$typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params : null,\n $typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.ParamArray : null] )? block ) | typeof_expression );
        public NetMaker.primary_expression_return primary_expression(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            primary_expression_stack.Push(new primary_expression_scope());
            NetMaker.primary_expression_return retval = new NetMaker.primary_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree index = null;
            CommonTree d0 = null;
            CommonTree d1 = null;
            CommonTree n = null;
            CommonTree d = null;
            CommonTree APPLY54 = null;
            CommonTree APPLY58 = null;
            CommonTree POSTINC61 = null;
            CommonTree char_literal62 = null;
            CommonTree POSTDEC63 = null;
            CommonTree char_literal64 = null;
            CommonTree POSTINC65 = null;
            CommonTree POSTDEC67 = null;
            CommonTree string_literal69 = null;
            CommonTree string_literal74 = null;
            CommonTree SUPER75 = null;
            CommonTree NEW_ANON_OBJECT84 = null;
            NetMaker.expression_return ie = default(NetMaker.expression_return);

            NetMaker.expression_return e2 = default(NetMaker.expression_return);

            NetMaker.identifier_return i2 = default(NetMaker.identifier_return);

            NetMaker.expression_return pse = default(NetMaker.expression_return);

            NetMaker.identifier_return pi = default(NetMaker.identifier_return);

            NetMaker.expression_return e1 = default(NetMaker.expression_return);

            NetMaker.identifier_return i = default(NetMaker.identifier_return);

            NetMaker.generic_argument_list_return dgal = default(NetMaker.generic_argument_list_return);

            NetMaker.expression_list_return expression_list53 = default(NetMaker.expression_list_return);

            NetMaker.generic_argument_list_return generic_argument_list55 = default(NetMaker.generic_argument_list_return);

            NetMaker.generic_argument_list_return generic_argument_list56 = default(NetMaker.generic_argument_list_return);

            NetMaker.argument_list_return argument_list57 = default(NetMaker.argument_list_return);

            NetMaker.expression_return expression59 = default(NetMaker.expression_return);

            NetMaker.argument_list_return argument_list60 = default(NetMaker.argument_list_return);

            NetMaker.expression_return expression66 = default(NetMaker.expression_return);

            NetMaker.expression_return expression68 = default(NetMaker.expression_return);

            NetMaker.expression_return expression70 = default(NetMaker.expression_return);

            NetMaker.identifier_return identifier71 = default(NetMaker.identifier_return);

            NetMaker.generic_argument_list_return generic_argument_list72 = default(NetMaker.generic_argument_list_return);

            NetMaker.predefined_type_return predefined_type73 = default(NetMaker.predefined_type_return);

            NetMaker.magicIdentifier_return magicIdentifier76 = default(NetMaker.magicIdentifier_return);

            NetMaker.magicInputPeId_return magicInputPeId77 = default(NetMaker.magicInputPeId_return);

            NetMaker.magicMethodGroup_return magicMethodGroup78 = default(NetMaker.magicMethodGroup_return);

            NetMaker.primary_expression_start_return primary_expression_start79 = default(NetMaker.primary_expression_start_return);

            NetMaker.literal_return literal80 = default(NetMaker.literal_return);

            NetMaker.type_return type81 = default(NetMaker.type_return);

            NetMaker.argument_list_return argument_list82 = default(NetMaker.argument_list_return);

            NetMaker.object_or_collection_initializer_return object_or_collection_initializer83 = default(NetMaker.object_or_collection_initializer_return);

            NetMaker.anonymous_object_creation_expression_return anonymous_object_creation_expression85 = default(NetMaker.anonymous_object_creation_expression_return);

            NetMaker.sizeof_expression_return sizeof_expression86 = default(NetMaker.sizeof_expression_return);

            NetMaker.checked_expression_return checked_expression87 = default(NetMaker.checked_expression_return);

            NetMaker.unchecked_expression_return unchecked_expression88 = default(NetMaker.unchecked_expression_return);

            NetMaker.default_value_expression_return default_value_expression89 = default(NetMaker.default_value_expression_return);

            NetMaker.formal_parameter_list_return formal_parameter_list90 = default(NetMaker.formal_parameter_list_return);

            NetMaker.block_return block91 = default(NetMaker.block_return);

            NetMaker.typeof_expression_return typeof_expression92 = default(NetMaker.typeof_expression_return);


            CommonTree index_tree=null;
            CommonTree d0_tree=null;
            CommonTree d1_tree=null;
            CommonTree n_tree=null;
            CommonTree d_tree=null;
            CommonTree APPLY54_tree=null;
            CommonTree APPLY58_tree=null;
            CommonTree POSTINC61_tree=null;
            CommonTree char_literal62_tree=null;
            CommonTree POSTDEC63_tree=null;
            CommonTree char_literal64_tree=null;
            CommonTree POSTINC65_tree=null;
            CommonTree POSTDEC67_tree=null;
            CommonTree string_literal69_tree=null;
            CommonTree string_literal74_tree=null;
            CommonTree SUPER75_tree=null;
            CommonTree NEW_ANON_OBJECT84_tree=null;


                ((primary_expression_scope)primary_expression_stack.Peek()).parentIsApply =  false;
                CommonTree ret = null;
                TypeRepTemplate expType = SymTabLookup("this");
                bool implicitThis = true;
                retval.thedottedtext =  null;
                string popstr = null;
                CommonTree e1Tree = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1324:2: ( ^(index= INDEX ie= expression[ObjectType] ( expression_list )? ) | ( ^( APPLY ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | ( identifier ( generic_argument_list )? ) ) ( argument_list )? ) )=> ^( APPLY ( ^(d0= '.' e2= expression[ObjectType] i2= identifier ( generic_argument_list )? ) | (i2= identifier ( generic_argument_list )? ) ) ( argument_list )? ) | ^( APPLY expression[ObjectType] ( argument_list )? ) | ( ^( ( POSTINC | POSTDEC ) ( ^( '.' expression[objectType] identifier ) | identifier ) ) )=> ( ^( POSTINC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) | ^( POSTDEC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) ) | ^( POSTINC expression[ObjectType] ) | ^( POSTDEC expression[ObjectType] ) | ^( '->' expression[ObjectType] identifier ( generic_argument_list )? ) | predefined_type | 'this' | SUPER | ( ^(d1= '.' e1= expression[ObjectType] i= identifier (dgal= generic_argument_list )? ) | (i= identifier (dgal= generic_argument_list )? ) ) magicIdentifier[true, rewriteMethodName($i.thetext), $i.tree != null ? $i.tree.Token : null] magicInputPeId[$d1.tree,$i.tree,$dgal.tree] magicMethodGroup[$d1.tree, $e1.tree, $magicIdentifier.tree, $dgal.tree, $i.tree != null ? $i.tree.Token : null] | primary_expression_start | literal | ^(n= NEW type ( argument_list )? ( object_or_collection_initializer )? ) | ^( NEW_ANON_OBJECT anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | ^(d= 'delegate' ( formal_parameter_list[$typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params : null,\n $typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.ParamArray : null] )? block ) | typeof_expression )
                int alt41 = 21;
                alt41 = dfa41.Predict(input);
                switch (alt41) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1325:5: ^(index= INDEX ie= expression[ObjectType] ( expression_list )? )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	index=(CommonTree)Match(input,INDEX,FOLLOW_INDEX_in_primary_expression741); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{index_tree = (CommonTree)adaptor.DupNode(index);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(index_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_primary_expression745);
                        	ie = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, ie.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1325:45: ( expression_list )?
                        	int alt25 = 2;
                        	int LA25_0 = input.LA(1);

                        	if ( ((LA25_0 >= PARAMS && LA25_0 <= PARAMS_TYPELESS) || (LA25_0 >= MONOPLUS && LA25_0 <= APPLY) || (LA25_0 >= NEW && LA25_0 <= NEW_ARRAY) || LA25_0 == NEW_ANON_OBJECT || (LA25_0 >= OBJECT && LA25_0 <= THIS) || LA25_0 == NULL_COALESCE || (LA25_0 >= COND_EXPR && LA25_0 <= LEFT_SHIFT) || (LA25_0 >= SUPER && LA25_0 <= LAMBDA) || LA25_0 == CAST_EXPR || (LA25_0 >= BOOL && LA25_0 <= GT) || (LA25_0 >= ELIF && LA25_0 <= UNDEF) || LA25_0 == 195 || LA25_0 == 208 || (LA25_0 >= 214 && LA25_0 <= 219) || LA25_0 == 221 || (LA25_0 >= 224 && LA25_0 <= 239) || (LA25_0 >= 241 && LA25_0 <= 244) || (LA25_0 >= 247 && LA25_0 <= 254) || LA25_0 == 256 || (LA25_0 >= 263 && LA25_0 <= 264) || (LA25_0 >= 274 && LA25_0 <= 277)) )
                        	{
                        	    alt25 = 1;
                        	}
                        	switch (alt25) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1325:45: expression_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_expression_list_in_primary_expression748);
                        	        	expression_list53 = expression_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, expression_list53.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	              expType = ((ie != null) ? ie.dotNetType : default(TypeRepTemplate)) ?? (new UnknownRepTemplate("INDEXER.BASE"));
                        	              if (expType.IsUnknownType) {
                        	                 WarningFailedResolve(index.token.Line, "Could not find type of indexed expression");
                        	              }
                        	              retval.dotNetType =  new UnknownRepTemplate(expType.TypeName+".INDEXER");
                        	              ResolveResult indexerResult = expType.ResolveIndexer(((expression_list53 != null) ? expression_list53.expTypes : default(List<TypeRepTemplate>)) ?? new List<TypeRepTemplate>(), AppEnv);
                        	              if (indexerResult != null) {
                        	                 if (!String.IsNullOrEmpty(indexerResult.Result.Warning)) Warning(((index != null) ? index.Line : 0), indexerResult.Result.Warning);
                        	                 IndexerRepTemplate indexerRep = indexerResult.Result as IndexerRepTemplate;
                        	                 if (!String.IsNullOrEmpty(indexerRep.JavaGet)) {
                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    myMap["this"] = wrapExpression(((ie != null) ? ((CommonTree)ie.Tree) : null), ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                    populateParamMap(myMap, indexerRep.Params, ((expression_list53 != null) ? expression_list53.expTrees : default(List<CommonTree>)), ((expression_list53 != null) ? expression_list53.expTreeTypeofTypes : default(List<TypeRepTemplate>)), null, wantsStar(indexerResult.Result.Java), ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                    ret = mkJavaWrapper(indexerResult.Result.Java, myMap, ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                    AddToImports(indexerResult.Result.Imports);
                        	                    retval.dotNetType =  indexerResult.ResultType; 
                        	                 }
                        	              }
                        	              else {
                        	                 WarningFailedResolve(index.token.Line, "Could not resolve index expression against " + expType.TypeName);
                        	              }
                        	          
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:7: ( ^( APPLY ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | ( identifier ( generic_argument_list )? ) ) ( argument_list )? ) )=> ^( APPLY ( ^(d0= '.' e2= expression[ObjectType] i2= identifier ( generic_argument_list )? ) | (i2= identifier ( generic_argument_list )? ) ) ( argument_list )? )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	APPLY54=(CommonTree)Match(input,APPLY,FOLLOW_APPLY_in_primary_expression813); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{APPLY54_tree = (CommonTree)adaptor.DupNode(APPLY54);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(APPLY54_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:20: ( ^(d0= '.' e2= expression[ObjectType] i2= identifier ( generic_argument_list )? ) | (i2= identifier ( generic_argument_list )? ) )
                        	int alt28 = 2;
                        	int LA28_0 = input.LA(1);

                        	if ( (LA28_0 == DOT) )
                        	{
                        	    alt28 = 1;
                        	}
                        	else if ( (LA28_0 == IDENTIFIER || (LA28_0 >= ELIF && LA28_0 <= UNDEF) || LA28_0 == 195 || LA28_0 == 221 || (LA28_0 >= 224 && LA28_0 <= 239) || (LA28_0 >= 241 && LA28_0 <= 244) || (LA28_0 >= 247 && LA28_0 <= 250) || LA28_0 == 256 || (LA28_0 >= 263 && LA28_0 <= 264) || LA28_0 == 274 || LA28_0 == 277) )
                        	{
                        	    alt28 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d28s0 =
                        	        new NoViableAltException("", 28, 0, input);

                        	    throw nvae_d28s0;
                        	}
                        	switch (alt28) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:21: ^(d0= '.' e2= expression[ObjectType] i2= identifier ( generic_argument_list )? )
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	{
                        	        	CommonTree _save_last_2 = _last;
                        	        	CommonTree _first_2 = null;
                        	        	CommonTree root_2 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	d0=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_primary_expression819); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{d0_tree = (CommonTree)adaptor.DupNode(d0);

                        	        		root_2 = (CommonTree)adaptor.BecomeRoot(d0_tree, root_2);
                        	        	}


                        	        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_expression_in_primary_expression823);
                        	        	e2 = expression(ObjectType);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_2, e2.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	  expType = ((e2 != null) ? e2.dotNetType : default(TypeRepTemplate)); implicitThis = false;
                        	        	}
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_identifier_in_primary_expression830);
                        	        	i2 = identifier();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_2, i2.Tree);
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:120: ( generic_argument_list )?
                        	        	int alt26 = 2;
                        	        	int LA26_0 = input.LA(1);

                        	        	if ( (LA26_0 == LTHAN) )
                        	        	{
                        	        	    alt26 = 1;
                        	        	}
                        	        	switch (alt26) 
                        	        	{
                        	        	    case 1 :
                        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:120: generic_argument_list
                        	        	        {
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_generic_argument_list_in_primary_expression832);
                        	        	        	generic_argument_list55 = generic_argument_list();
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_2, generic_argument_list55.Tree);

                        	        	        	if ( (state.backtracking==0) ) {
                        	        	        	}
                        	        	        }
                        	        	        break;

                        	        	}


                        	        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_1, root_2);_last = _save_last_2;
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:144: (i2= identifier ( generic_argument_list )? )
                        	        {
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:144: (i2= identifier ( generic_argument_list )? )
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:145: i2= identifier ( generic_argument_list )?
                        	        	{
                        	        		_last = (CommonTree)input.LT(1);
                        	        		PushFollow(FOLLOW_identifier_in_primary_expression839);
                        	        		i2 = identifier();
                        	        		state._fsp--;
                        	        		if (state.failed) return retval;
                        	        		if ( (state.backtracking==0) ) 
                        	        		adaptor.AddChild(root_1, i2.Tree);
                        	        		// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:159: ( generic_argument_list )?
                        	        		int alt27 = 2;
                        	        		int LA27_0 = input.LA(1);

                        	        		if ( (LA27_0 == LTHAN) )
                        	        		{
                        	        		    alt27 = 1;
                        	        		}
                        	        		switch (alt27) 
                        	        		{
                        	        		    case 1 :
                        	        		        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:159: generic_argument_list
                        	        		        {
                        	        		        	_last = (CommonTree)input.LT(1);
                        	        		        	PushFollow(FOLLOW_generic_argument_list_in_primary_expression841);
                        	        		        	generic_argument_list56 = generic_argument_list();
                        	        		        	state._fsp--;
                        	        		        	if (state.failed) return retval;
                        	        		        	if ( (state.backtracking==0) ) 
                        	        		        	adaptor.AddChild(root_1, generic_argument_list56.Tree);

                        	        		        	if ( (state.backtracking==0) ) {
                        	        		        	}
                        	        		        }
                        	        		        break;

                        	        		}


                        	        		if ( (state.backtracking==0) ) {
                        	        		}
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:184: ( argument_list )?
                        	int alt29 = 2;
                        	int LA29_0 = input.LA(1);

                        	if ( (LA29_0 == ARGS) )
                        	{
                        	    alt29 = 1;
                        	}
                        	switch (alt29) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1350:184: argument_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_argument_list_in_primary_expression846);
                        	        	argument_list57 = argument_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, argument_list57.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	              if (implicitThis && SymTabLookup(((i2 != null) ? i2.thetext : default(string))) != null) {
                        	                 // we have a local var with a delegate reference (I hope ...)?
                        	                 DelegateRepTemplate idType = SymTabLookup(((i2 != null) ? i2.thetext : default(string))) as DelegateRepTemplate;
                        	                 if (idType != null) {
                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    myMap["this"] = wrapExpression(((i2 != null) ? ((CommonTree)i2.Tree) : null), ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                    populateParamMap(myMap, idType.Invoke.Params, ((argument_list57 != null) ? argument_list57.argTrees : default(List<CommonTree>)), ((argument_list57 != null) ? argument_list57.argTreeTypeofTypes : default(List<TypeRepTemplate>)), ((argument_list57 != null) ? ((CommonTree)argument_list57.Tree) : null), wantsStar(idType.Invoke.Java), ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                    ret = mkJavaWrapper(idType.Invoke.Java, myMap, ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                    AddToImports(idType.Invoke.Imports);
                        	                    retval.dotNetType =  AppEnv.Search(idType.Invoke.Return.Type);
                        	                 }
                        	              }
                        	              else {

                        	                 if (expType == null) {
                        	                    expType = new UnknownRepTemplate("APPLY.BASE");
                        	                 }
                        	                 if (expType.IsUnknownType) {
                        	                    WarningFailedResolve(((i2 != null) ? ((CommonTree)i2.Tree) : null).Token.Line, "Could not find type needed to resolve method application");
                        	                 }
                        	                 retval.dotNetType =  new UnknownRepTemplate(expType.TypeName+".APPLY");
                        	                 ResolveResult calleeResult = expType.Resolve(((i2 != null) ? i2.thetext : default(string)), ((argument_list57 != null) ? argument_list57.argTypes : default(List<TypeRepTemplate>)) ?? new List<TypeRepTemplate>(), AppEnv);
                        	                 if (calleeResult != null) {
                        	                    if (!String.IsNullOrEmpty(calleeResult.Result.Warning)) Warning(((d0 != null) ? d0.Line : 0), calleeResult.Result.Warning);
                        	                    DebugDetail(((i2 != null) ? ((CommonTree)i2.Tree) : null).Token.Line + ": Found '" + ((i2 != null) ? i2.thetext : default(string)) + "'");
                        	                    
                        	                    // We are calling a method or a delegate on an expression. If it has a primitive type then cast it to 
                        	                    // the appropriate Object type.
                        	                    CommonTree e2InBox = expType.IsUnboxedType && Cfg.ExperimentalTransforms ? castToBoxedType(expType, ((e2 != null) ? ((CommonTree)e2.Tree) : null), d0.token) : ((e2 != null) ? ((CommonTree)e2.Tree) : null);
                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    MethodRepTemplate calleeMethod = null;
                        	                    
                        	                    if (calleeResult is DelegateResolveResult) {
                        	                       // We have a field/property that is pointing at a delegate, first extract the delegate ...
                        	                      Dictionary<string,CommonTree> delMap = new Dictionary<string,CommonTree>();
                        	                      if (!implicitThis) {
                        	                         delMap["this"] = wrapExpression(e2InBox, ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                      }
                        	                      myMap["this"] = mkJavaWrapper(calleeResult.Result.Java, delMap, ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                      AddToImports(calleeResult.Result.Imports);
                        	                      calleeMethod = ((DelegateRepTemplate)((DelegateResolveResult)calleeResult).DelegateResult.Result).Invoke;
                        	                    }
                        	                    else {  
                        	                       if (!implicitThis) {
                        	                          myMap["this"] = wrapExpression(e2InBox, ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                       }
                        	                      calleeMethod = calleeResult.Result as MethodRepTemplate;
                        	                    }
                        	                    populateParamMap(myMap, calleeMethod.Params, ((argument_list57 != null) ? argument_list57.argTrees : default(List<CommonTree>)), ((argument_list57 != null) ? argument_list57.argTreeTypeofTypes : default(List<TypeRepTemplate>)), ((argument_list57 != null) ? ((CommonTree)argument_list57.Tree) : null), wantsStar(calleeMethod.Java), 
                        	                                     expType.TyVarMap, 
                        	                                     ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                    ret = mkJavaWrapper(calleeMethod.Java, myMap, ((i2 != null) ? ((CommonTree)i2.Tree) : null).Token);
                        	                    AddToImports(calleeMethod.Imports);
                        	                    retval.dotNetType =  calleeResult.ResultType; 
                        	                 }
                        	                 else {
                        	                    WarningFailedResolve(((i2 != null) ? ((CommonTree)i2.Tree) : null).Token.Line, "Could not resolve method application of " + ((i2 != null) ? i2.thetext : default(string)) + " against " + expType.TypeName);
                        	                 }
                        	              }
                        	          
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1412:7: ^( APPLY expression[ObjectType] ( argument_list )? )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	APPLY58=(CommonTree)Match(input,APPLY,FOLLOW_APPLY_in_primary_expression867); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{APPLY58_tree = (CommonTree)adaptor.DupNode(APPLY58);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(APPLY58_tree, root_1);
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  ((primary_expression_scope)primary_expression_stack.Peek()).parentIsApply =  true; 
                        	}

                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_primary_expression871);
                        	expression59 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, expression59.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  ((primary_expression_scope)primary_expression_stack.Peek()).parentIsApply =  false; 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1412:131: ( argument_list )?
                        	int alt30 = 2;
                        	int LA30_0 = input.LA(1);

                        	if ( (LA30_0 == ARGS) )
                        	{
                        	    alt30 = 1;
                        	}
                        	switch (alt30) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1412:131: argument_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_argument_list_in_primary_expression876);
                        	        	argument_list60 = argument_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, argument_list60.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1413:7: ( ^( ( POSTINC | POSTDEC ) ( ^( '.' expression[objectType] identifier ) | identifier ) ) )=> ( ^( POSTINC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) | ^( POSTDEC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1414:7: ( ^( POSTINC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) | ^( POSTDEC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) )
                        	int alt33 = 2;
                        	int LA33_0 = input.LA(1);

                        	if ( (LA33_0 == POSTINC) )
                        	{
                        	    alt33 = 1;
                        	}
                        	else if ( (LA33_0 == POSTDEC) )
                        	{
                        	    alt33 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d33s0 =
                        	        new NoViableAltException("", 33, 0, input);

                        	    throw nvae_d33s0;
                        	}
                        	switch (alt33) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1414:8: ^( POSTINC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) )
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	{
                        	        	CommonTree _save_last_1 = _last;
                        	        	CommonTree _first_1 = null;
                        	        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	POSTINC61=(CommonTree)Match(input,POSTINC,FOLLOW_POSTINC_in_primary_expression921); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{POSTINC61_tree = (CommonTree)adaptor.DupNode(POSTINC61);

                        	        		root_1 = (CommonTree)adaptor.BecomeRoot(POSTINC61_tree, root_1);
                        	        	}

                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	  popstr = "+";
                        	        	}

                        	        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1414:34: ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier )
                        	        	int alt31 = 2;
                        	        	int LA31_0 = input.LA(1);

                        	        	if ( (LA31_0 == DOT) )
                        	        	{
                        	        	    alt31 = 1;
                        	        	}
                        	        	else if ( (LA31_0 == IDENTIFIER || (LA31_0 >= ELIF && LA31_0 <= UNDEF) || LA31_0 == 195 || LA31_0 == 221 || (LA31_0 >= 224 && LA31_0 <= 239) || (LA31_0 >= 241 && LA31_0 <= 244) || (LA31_0 >= 247 && LA31_0 <= 250) || LA31_0 == 256 || (LA31_0 >= 263 && LA31_0 <= 264) || LA31_0 == 274 || LA31_0 == 277) )
                        	        	{
                        	        	    alt31 = 2;
                        	        	}
                        	        	else 
                        	        	{
                        	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	        	    NoViableAltException nvae_d31s0 =
                        	        	        new NoViableAltException("", 31, 0, input);

                        	        	    throw nvae_d31s0;
                        	        	}
                        	        	switch (alt31) 
                        	        	{
                        	        	    case 1 :
                        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1414:35: ^( '.' pse= expression[ObjectType] pi= identifier )
                        	        	        {
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	{
                        	        	        	CommonTree _save_last_2 = _last;
                        	        	        	CommonTree _first_2 = null;
                        	        	        	CommonTree root_2 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	        	char_literal62=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_primary_expression927); if (state.failed) return retval;
                        	        	        	if ( state.backtracking == 0 )
                        	        	        	{char_literal62_tree = (CommonTree)adaptor.DupNode(char_literal62);

                        	        	        		root_2 = (CommonTree)adaptor.BecomeRoot(char_literal62_tree, root_2);
                        	        	        	}


                        	        	        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_expression_in_primary_expression931);
                        	        	        	pse = expression(ObjectType);
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_2, pse.Tree);
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_identifier_in_primary_expression936);
                        	        	        	pi = identifier();
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_2, pi.Tree);
                        	        	        	if ( (state.backtracking==0) )
                        	        	        	{
                        	        	        	  implicitThis = false;
                        	        	        	}

                        	        	        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_1, root_2);_last = _save_last_2;
                        	        	        	}


                        	        	        	if ( (state.backtracking==0) ) {
                        	        	        	}
                        	        	        }
                        	        	        break;
                        	        	    case 2 :
                        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1414:109: pi= identifier
                        	        	        {
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_identifier_in_primary_expression945);
                        	        	        	pi = identifier();
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_1, pi.Tree);

                        	        	        	if ( (state.backtracking==0) ) {
                        	        	        	}
                        	        	        }
                        	        	        break;

                        	        	}


                        	        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1415:9: ^( POSTDEC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) )
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	{
                        	        	CommonTree _save_last_1 = _last;
                        	        	CommonTree _first_1 = null;
                        	        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	POSTDEC63=(CommonTree)Match(input,POSTDEC,FOLLOW_POSTDEC_in_primary_expression958); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{POSTDEC63_tree = (CommonTree)adaptor.DupNode(POSTDEC63);

                        	        		root_1 = (CommonTree)adaptor.BecomeRoot(POSTDEC63_tree, root_1);
                        	        	}

                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	  popstr = "-";
                        	        	}

                        	        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1415:35: ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier )
                        	        	int alt32 = 2;
                        	        	int LA32_0 = input.LA(1);

                        	        	if ( (LA32_0 == DOT) )
                        	        	{
                        	        	    alt32 = 1;
                        	        	}
                        	        	else if ( (LA32_0 == IDENTIFIER || (LA32_0 >= ELIF && LA32_0 <= UNDEF) || LA32_0 == 195 || LA32_0 == 221 || (LA32_0 >= 224 && LA32_0 <= 239) || (LA32_0 >= 241 && LA32_0 <= 244) || (LA32_0 >= 247 && LA32_0 <= 250) || LA32_0 == 256 || (LA32_0 >= 263 && LA32_0 <= 264) || LA32_0 == 274 || LA32_0 == 277) )
                        	        	{
                        	        	    alt32 = 2;
                        	        	}
                        	        	else 
                        	        	{
                        	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	        	    NoViableAltException nvae_d32s0 =
                        	        	        new NoViableAltException("", 32, 0, input);

                        	        	    throw nvae_d32s0;
                        	        	}
                        	        	switch (alt32) 
                        	        	{
                        	        	    case 1 :
                        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1415:36: ^( '.' pse= expression[ObjectType] pi= identifier )
                        	        	        {
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	{
                        	        	        	CommonTree _save_last_2 = _last;
                        	        	        	CommonTree _first_2 = null;
                        	        	        	CommonTree root_2 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	        	char_literal64=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_primary_expression964); if (state.failed) return retval;
                        	        	        	if ( state.backtracking == 0 )
                        	        	        	{char_literal64_tree = (CommonTree)adaptor.DupNode(char_literal64);

                        	        	        		root_2 = (CommonTree)adaptor.BecomeRoot(char_literal64_tree, root_2);
                        	        	        	}


                        	        	        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_expression_in_primary_expression968);
                        	        	        	pse = expression(ObjectType);
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_2, pse.Tree);
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_identifier_in_primary_expression973);
                        	        	        	pi = identifier();
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_2, pi.Tree);
                        	        	        	if ( (state.backtracking==0) )
                        	        	        	{
                        	        	        	  implicitThis = false;
                        	        	        	}

                        	        	        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_1, root_2);_last = _save_last_2;
                        	        	        	}


                        	        	        	if ( (state.backtracking==0) ) {
                        	        	        	}
                        	        	        }
                        	        	        break;
                        	        	    case 2 :
                        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1415:110: pi= identifier
                        	        	        {
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_identifier_in_primary_expression982);
                        	        	        	pi = identifier();
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_1, pi.Tree);

                        	        	        	if ( (state.backtracking==0) ) {
                        	        	        	}
                        	        	        }
                        	        	        break;

                        	        	}


                        	        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	              if (implicitThis && SymTabLookup(((pi != null) ? pi.thetext : default(string))) != null) {
                        	                 // Is this a wrapped parameter?
                        	                 TypeRepTemplate idType = SymTabLookup(((pi != null) ? pi.thetext : default(string)));
                        	                 if (idType.IsWrapped) {
                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    myMap["this"] = wrapExpression(((pi != null) ? ((CommonTree)pi.Tree) : null), ((pi != null) ? ((CommonTree)pi.Tree) : null).Token);
                        	                    AddToImports("CS2JNet.JavaSupport.language.ReturnPreOrPostValue");
                        	                    ret = mkJavaWrapper("${this}.setValue(${this}.getValue() " + popstr + " 1, ReturnPreOrPostValue.POST)", myMap, ((pi != null) ? ((CommonTree)pi.Tree) : null).Token);
                        	                  }
                        	                  retval.dotNetType =  idType;
                        	                 // a simple variable 
                        	              }
                        	              else {
                        	                 TypeRepTemplate seType = (implicitThis ? SymTabLookup("this") : ((pse != null) ? pse.dotNetType : default(TypeRepTemplate)));
                        	                 if (seType == null) {
                        	                    seType = new UnknownRepTemplate("FIELD.BASE");
                        	                 }
                        	                 if (seType.IsUnknownType) {
                        	                    WarningFailedResolve(((pi != null) ? ((CommonTree)pi.Tree) : null).Token.Line, "Could not find type of expression for field /property access");
                        	                 }
                        	                 ResolveResult fieldResult = seType.Resolve(((pi != null) ? pi.thetext : default(string)), true, AppEnv);
                        	                 if (fieldResult != null) {
                        	                    if (!String.IsNullOrEmpty(fieldResult.Result.Warning)) Warning(((pi != null) ? ((CommonTree)pi.Tree) : null).Token.Line, fieldResult.Result.Warning);
                        	                    if (fieldResult.Result is PropRepTemplate) {
                        	                       PropRepTemplate propRep = fieldResult.Result as PropRepTemplate;
                        	                       if (!String.IsNullOrEmpty(propRep.JavaSet)) {
                        	                          // only translate if we also have JavaGet  

                        	                          // We have to resolve property reads and writes separately, because they may come from 
                        	                          // different parent classes
                        	                          ResolveResult readFieldResult = seType.Resolve(((pi != null) ? pi.thetext : default(string)), false, AppEnv);
                        	                          if (readFieldResult.Result is PropRepTemplate) {
                        	                             if (!String.IsNullOrEmpty(readFieldResult.Result.Warning)) Warning(((pi != null) ? ((CommonTree)pi.Tree) : null).Token.Line, readFieldResult.Result.Warning);
                        	                             PropRepTemplate readPropRep = readFieldResult.Result as PropRepTemplate;

                        	                             if (!String.IsNullOrEmpty(readPropRep.JavaGet)) {
                        	                                // we have prop (++/--)
                        	                                // need to translate to setProp(getProp (+/-) 1)
                        	                                Dictionary<string,CommonTree> rhsMap = new Dictionary<string,CommonTree>();
                        	                                if (!implicitThis)
                        	                                   rhsMap["this"] = wrapExpression(((pse != null) ? ((CommonTree)pse.Tree) : null), ((pi != null) ? ((CommonTree)pi.Tree) : null).Token);
                        	                                CommonTree rhsPropTree = mkJavaWrapper(readPropRep.JavaGet, rhsMap, ((pi != null) ? ((CommonTree)pi.Tree) : null).Token);
                        	                                CommonTree newRhsExp = (CommonTree)adaptor.Nil;
                        	                                newRhsExp = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(popstr == "+" ? PLUS : MINUS, ((pi != null) ? ((CommonTree)pi.Tree) : null).Token, popstr), newRhsExp);
                        	                                adaptor.AddChild(newRhsExp, (CommonTree)adaptor.DupTree(rhsPropTree));
                        	                                adaptor.AddChild(newRhsExp, (CommonTree)adaptor.Create(NUMBER,((pi != null) ? ((CommonTree)pi.Tree) : null).Token, "1"));

                        	                                Dictionary<string,CommonTree> valMap = new Dictionary<string,CommonTree>();
                        	                                if (!implicitThis)
                        	                                   valMap["this"] = wrapExpression(((pse != null) ? ((CommonTree)pse.Tree) : null), ((pi != null) ? ((CommonTree)pi.Tree) : null).Token);
                        	                                valMap["value"] = wrapExpression(newRhsExp, ((pi != null) ? ((CommonTree)pi.Tree) : null).Token);
                        	                                ret = mkJavaWrapper(propRep.JavaSet, valMap, ((pi != null) ? ((CommonTree)pi.Tree) : null).Token);
                        	                                AddToImports(propRep.Imports);
                        	                             }
                        	                          }
                        	                       }
                        	                    }
                        	                 }
                        	                 else {
                        	                    WarningFailedResolve(((pi != null) ? ((CommonTree)pi.Tree) : null).Token.Line, "Could not resolve field or property expression against " + seType.ToString());
                        	                 }
                        	              }
                        	        
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1480:7: ^( POSTINC expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	POSTINC65=(CommonTree)Match(input,POSTINC,FOLLOW_POSTINC_in_primary_expression1002); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{POSTINC65_tree = (CommonTree)adaptor.DupNode(POSTINC65);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(POSTINC65_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_primary_expression1004);
                        	expression66 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, expression66.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((expression66 != null) ? expression66.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1481:7: ^( POSTDEC expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	POSTDEC67=(CommonTree)Match(input,POSTDEC,FOLLOW_POSTDEC_in_primary_expression1020); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{POSTDEC67_tree = (CommonTree)adaptor.DupNode(POSTDEC67);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(POSTDEC67_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_primary_expression1022);
                        	expression68 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, expression68.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((expression68 != null) ? expression68.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1482:7: ^( '->' expression[ObjectType] identifier ( generic_argument_list )? )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal69=(CommonTree)Match(input,PTR,FOLLOW_PTR_in_primary_expression1038); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal69_tree = (CommonTree)adaptor.DupNode(string_literal69);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal69_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_primary_expression1040);
                        	expression70 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, expression70.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_primary_expression1043);
                        	identifier71 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, identifier71.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1482:48: ( generic_argument_list )?
                        	int alt34 = 2;
                        	int LA34_0 = input.LA(1);

                        	if ( (LA34_0 == LTHAN) )
                        	{
                        	    alt34 = 1;
                        	}
                        	switch (alt34) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1482:48: generic_argument_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_generic_argument_list_in_primary_expression1045);
                        	        	generic_argument_list72 = generic_argument_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, generic_argument_list72.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1483:4: predefined_type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_predefined_type_in_primary_expression1052);
                        	predefined_type73 = predefined_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, predefined_type73.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((predefined_type73 != null) ? predefined_type73.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1484:4: 'this'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal74=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_primary_expression1115); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal74_tree = (CommonTree)adaptor.DupNode(string_literal74);

                        		adaptor.AddChild(root_0, string_literal74_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  SymTabLookup("this"); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1485:4: SUPER
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	SUPER75=(CommonTree)Match(input,SUPER,FOLLOW_SUPER_in_primary_expression1187); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{SUPER75_tree = (CommonTree)adaptor.DupNode(SUPER75);

                        		adaptor.AddChild(root_0, SUPER75_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  SymTabLookup("super"); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1486:7: ( ^(d1= '.' e1= expression[ObjectType] i= identifier (dgal= generic_argument_list )? ) | (i= identifier (dgal= generic_argument_list )? ) ) magicIdentifier[true, rewriteMethodName($i.thetext), $i.tree != null ? $i.tree.Token : null] magicInputPeId[$d1.tree,$i.tree,$dgal.tree] magicMethodGroup[$d1.tree, $e1.tree, $magicIdentifier.tree, $dgal.tree, $i.tree != null ? $i.tree.Token : null]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1486:7: ( ^(d1= '.' e1= expression[ObjectType] i= identifier (dgal= generic_argument_list )? ) | (i= identifier (dgal= generic_argument_list )? ) )
                        	int alt37 = 2;
                        	int LA37_0 = input.LA(1);

                        	if ( (LA37_0 == DOT) )
                        	{
                        	    alt37 = 1;
                        	}
                        	else if ( (LA37_0 == IDENTIFIER || (LA37_0 >= ELIF && LA37_0 <= UNDEF) || LA37_0 == 195 || LA37_0 == 221 || (LA37_0 >= 224 && LA37_0 <= 239) || (LA37_0 >= 241 && LA37_0 <= 244) || (LA37_0 >= 247 && LA37_0 <= 250) || LA37_0 == 256 || (LA37_0 >= 263 && LA37_0 <= 264) || LA37_0 == 274 || LA37_0 == 277) )
                        	{
                        	    alt37 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d37s0 =
                        	        new NoViableAltException("", 37, 0, input);

                        	    throw nvae_d37s0;
                        	}
                        	switch (alt37) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1486:8: ^(d1= '.' e1= expression[ObjectType] i= identifier (dgal= generic_argument_list )? )
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	{
                        	        	CommonTree _save_last_1 = _last;
                        	        	CommonTree _first_1 = null;
                        	        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	d1=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_primary_expression1267); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{d1_tree = (CommonTree)adaptor.DupNode(d1);

                        	        		root_1 = (CommonTree)adaptor.BecomeRoot(d1_tree, root_1);
                        	        	}


                        	        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_expression_in_primary_expression1271);
                        	        	e1 = expression(ObjectType);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, e1.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	  expType = ((e1 != null) ? e1.dotNetType : default(TypeRepTemplate)); implicitThis = false; e1Tree = dupTree(((e1 != null) ? ((CommonTree)e1.Tree) : null)); /* keving: yuk, shouldn't be necessary but ((e1 != null) ? ((CommonTree)e1.Tree) : null) was also capturing i=identifier */
                        	        	}
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_identifier_in_primary_expression1278);
                        	        	i = identifier();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, i.Tree);
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1486:225: (dgal= generic_argument_list )?
                        	        	int alt35 = 2;
                        	        	int LA35_0 = input.LA(1);

                        	        	if ( (LA35_0 == LTHAN) )
                        	        	{
                        	        	    alt35 = 1;
                        	        	}
                        	        	switch (alt35) 
                        	        	{
                        	        	    case 1 :
                        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1486:225: dgal= generic_argument_list
                        	        	        {
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_generic_argument_list_in_primary_expression1282);
                        	        	        	dgal = generic_argument_list();
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_1, dgal.Tree);

                        	        	        	if ( (state.backtracking==0) ) {
                        	        	        	}
                        	        	        }
                        	        	        break;

                        	        	}


                        	        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1487:10: (i= identifier (dgal= generic_argument_list )? )
                        	        {
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1487:10: (i= identifier (dgal= generic_argument_list )? )
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1487:11: i= identifier (dgal= generic_argument_list )?
                        	        	{
                        	        		_last = (CommonTree)input.LT(1);
                        	        		PushFollow(FOLLOW_identifier_in_primary_expression1298);
                        	        		i = identifier();
                        	        		state._fsp--;
                        	        		if (state.failed) return retval;
                        	        		if ( (state.backtracking==0) ) 
                        	        		adaptor.AddChild(root_0, i.Tree);
                        	        		// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1487:28: (dgal= generic_argument_list )?
                        	        		int alt36 = 2;
                        	        		int LA36_0 = input.LA(1);

                        	        		if ( (LA36_0 == LTHAN) )
                        	        		{
                        	        		    int LA36_1 = input.LA(2);

                        	        		    if ( (LA36_1 == TYPE || LA36_1 == 220) )
                        	        		    {
                        	        		        alt36 = 1;
                        	        		    }
                        	        		}
                        	        		switch (alt36) 
                        	        		{
                        	        		    case 1 :
                        	        		        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1487:28: dgal= generic_argument_list
                        	        		        {
                        	        		        	_last = (CommonTree)input.LT(1);
                        	        		        	PushFollow(FOLLOW_generic_argument_list_in_primary_expression1302);
                        	        		        	dgal = generic_argument_list();
                        	        		        	state._fsp--;
                        	        		        	if (state.failed) return retval;
                        	        		        	if ( (state.backtracking==0) ) 
                        	        		        	adaptor.AddChild(root_0, dgal.Tree);

                        	        		        	if ( (state.backtracking==0) ) {
                        	        		        	}
                        	        		        }
                        	        		        break;

                        	        		}


                        	        		if ( (state.backtracking==0) ) {
                        	        		}
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicIdentifier_in_primary_expression1317);
                        	magicIdentifier76 = magicIdentifier(true, rewriteMethodName(((i != null) ? i.thetext : default(string))), ((i != null) ? ((CommonTree)i.Tree) : null) != null ? ((i != null) ? ((CommonTree)i.Tree) : null).Token : null);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, magicIdentifier76.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicInputPeId_in_primary_expression1329);
                        	magicInputPeId77 = magicInputPeId(d1_tree, ((i != null) ? ((CommonTree)i.Tree) : null), ((dgal != null) ? ((CommonTree)dgal.Tree) : null));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, magicInputPeId77.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicMethodGroup_in_primary_expression1341);
                        	magicMethodGroup78 = magicMethodGroup(d1_tree, ((e1 != null) ? ((CommonTree)e1.Tree) : null), ((magicIdentifier76 != null) ? ((CommonTree)magicIdentifier76.Tree) : null), ((dgal != null) ? ((CommonTree)dgal.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null) != null ? ((i != null) ? ((CommonTree)i.Tree) : null).Token : null);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, magicMethodGroup78.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   
                        	              // TODO: generic_argument_list is ignored ....

                        	              // Possibilities:
                        	              // - a variable in scope.
                        	              // - a property/field of some object
                        	              // - a type name
                        	              // - a method name if we are in a delegate type context then create a delegate (in C# it is an implicit cast) 
                        	              // - part of a type name
                        	              bool found = false;
                        	              if (implicitThis) {
                        	                 // single identifier, might be a variable
                        	                 TypeRepTemplate idType = SymTabLookup(((i != null) ? i.thetext : default(string)));
                        	                 if (idType != null) {
                        	                    // Is this a wrapped parameter?
                        	                    if (idType.IsWrapped) {
                        	                       Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                       myMap["this"] = wrapExpression(((i != null) ? ((CommonTree)i.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                       ret = mkJavaWrapper("${this}.getValue()", myMap, ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                    }
                        	                    retval.dotNetType =  idType;
                        	                    found = true;
                        	                 }
                        	              }
                        	              if (!found) {
                        	                  // Not a variable, expType is the type of 'expression', or 'this'.

                        	                  // Is it a property read? Ensure we are not being applied to arguments or about to be assigned
                        	                  if (expType != null && !expType.IsUnknownType &&
                        	                      (primary_expression_stack.Count == 1 || !((primary_expression_scope)(primary_expression_stack.ToArray()[1])).parentIsApply)) {
                        	                      
                        	                      DebugDetail(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line + ": '" + ((i != null) ? i.thetext : default(string)) + "' might be a property");
                        	                      ResolveResult fieldResult = expType.Resolve(((i != null) ? i.thetext : default(string)), false, AppEnv);
                        	                      if (fieldResult != null) {
                        	                         if (!String.IsNullOrEmpty(fieldResult.Result.Warning)) Warning(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line, fieldResult.Result.Warning);
                        	                          DebugDetail(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line + ": Found '" + ((i != null) ? i.thetext : default(string)) + "'");

                        	                          Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                          if (!implicitThis) {
                        	                             // We are accessing a field / property on an expression. If it has a primitive type then cast it to 
                        	                             // the appropriate Object type.
                        	                             CommonTree e1InBox = expType.IsUnboxedType && Cfg.ExperimentalTransforms ? castToBoxedType(expType, e1Tree, d1.token) : e1Tree;
                        	                             myMap["this"] = wrapExpression(e1InBox, ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                          }
                        	                          ret = mkJavaWrapper(fieldResult.Result.Java, myMap, ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                          AddToImports(fieldResult.Result.Imports);
                        	                          retval.dotNetType =  fieldResult.ResultType; 
                        	                          found = true;
                        	                      }
                        	                  }
                        	              }
                        	              if (!found && (implicitThis || ((e1 != null) ? e1.thedottedtext : default(string)) != null)) {
                        	                  String textSoFar = (implicitThis ? "" : ((e1 != null) ? e1.thedottedtext : default(string)) + ".") + ((i != null) ? i.thetext : default(string));
                        	                  // Not a variable, not a property read, is it a type name?
                        	                  TypeRepTemplate staticType = findType(textSoFar);
                        	                  if (!staticType.IsUnknownType) {
                        	                      // In the case that type is fully qualified, and matches the name in retval.dotNetType then emit a fully
                        	                      // qualified type and don't add imports. this allows a class to refer to multiple classes with identical names
                        	                      // as long as you fully qualify one of them.
                        	                      if (staticType.Imports.Length == 1 && staticType.Imports[0] == textSoFar) {
                        	                          staticType.Java = staticType.Java.Replace(((i != null) ? i.thetext : default(string)),  textSoFar);
                        	                          staticType.Imports = new String[0];
                        	                          // Ditto for each constructor
                        	                          if (staticType is ClassRepTemplate) {
                        	                              foreach (ConstructorRepTemplate c in ((ClassRepTemplate)staticType).Constructors)
                        	                                  {
                        	                                      c.Java = c.Java.Replace(((i != null) ? i.thetext : default(string)), textSoFar); 
                        	                                      c.Imports = new String[0];
                        	                                  }
                        	                          }
                        	                      }
                        	                      ret = mkJavaWrapper(staticType.Java, new Dictionary<string,CommonTree>(), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                      AddToImports(staticType.Imports);
                        	                      retval.dotNetType =  staticType;
                        	                      retval.thedottedtext =   (implicitThis || String.IsNullOrEmpty(((e1 != null) ? e1.thedottedtext : default(string)))  ? "" : ((e1 != null) ? e1.thedottedtext : default(string)) + ".") + ((i != null) ? i.thetext : default(string));
                        	                      found = true;
                        	                  }
                        	              }
                        	              if (!found) {
                        	                 // Could be a reference to a method group. If we are in a Delegate Type context then create a delegate object.
                        	                 if (typeCtxt != null && typeCtxt is DelegateRepTemplate) {
                        	                    // Since 'type' is a delegate then we assume that argument_list[0] will be a method group name.
                        	                    // use an anonymous inner class to generate a delegate object (object wih an Invoke with appropriate arguments)
                        	                    // new <delegate_name>() { public void Invoke(<formal args>) throw exception { [return] arg[0](<args>); } }
                        	                    DelegateRepTemplate delType = typeCtxt as DelegateRepTemplate;
                        	                    ret = mkDelegateObject((CommonTree)typeCtxt.Tree, ((magicMethodGroup78 != null) ? ((CommonTree)magicMethodGroup78.Tree) : null), delType, ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                    retval.dotNetType =  typeCtxt;
                        	                    found = true;
                        	                 }
                        	              }
                        	              if (!found) {
                        	                  // Not a variable, not a property read, not a type, is it part of a type name?
                        	                  retval.dotNetType =  new UnknownRepTemplate(((i != null) ? i.thetext : default(string)));
                        	                  retval.thedottedtext =   (implicitThis || String.IsNullOrEmpty(((e1 != null) ? e1.thedottedtext : default(string)))  ? "" : ((e1 != null) ? e1.thedottedtext : default(string)) + ".") + ((i != null) ? i.thetext : default(string));
                        	              }
                        	              retval.rmId =  ((i != null) ? i.thetext : default(string));
                        	              if (ret == null)
                        	                 ret = ((magicInputPeId77 != null) ? ((CommonTree)magicInputPeId77.Tree) : null);
                        	          
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1590:7: primary_expression_start
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_primary_expression_start_in_primary_expression1369);
                        	primary_expression_start79 = primary_expression_start();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, primary_expression_start79.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((primary_expression_start79 != null) ? primary_expression_start79.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1591:7: literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_literal_in_primary_expression1404);
                        	literal80 = literal();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, literal80.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((literal80 != null) ? literal80.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1595:7: ^(n= NEW type ( argument_list )? ( object_or_collection_initializer )? )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	n=(CommonTree)Match(input,NEW,FOLLOW_NEW_in_primary_expression1462); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{n_tree = (CommonTree)adaptor.DupNode(n);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(n_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_primary_expression1464);
                        	type81 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, type81.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1595:20: ( argument_list )?
                        	int alt38 = 2;
                        	int LA38_0 = input.LA(1);

                        	if ( (LA38_0 == ARGS) )
                        	{
                        	    alt38 = 1;
                        	}
                        	switch (alt38) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1595:20: argument_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_argument_list_in_primary_expression1466);
                        	        	argument_list82 = argument_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, argument_list82.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1595:35: ( object_or_collection_initializer )?
                        	int alt39 = 2;
                        	int LA39_0 = input.LA(1);

                        	if ( (LA39_0 == OPEN_BRACE) )
                        	{
                        	    alt39 = 1;
                        	}
                        	switch (alt39) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1595:35: object_or_collection_initializer
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_object_or_collection_initializer_in_primary_expression1469);
                        	        	object_or_collection_initializer83 = object_or_collection_initializer();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, object_or_collection_initializer83.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	           // look for delegate creation
                        	           if (((type81 != null) ? type81.dotNetType : default(TypeRepTemplate)) is DelegateRepTemplate && ((argument_list82 != null) ? argument_list82.argTypes : default(List<TypeRepTemplate>)) != null && ((argument_list82 != null) ? argument_list82.argTypes : default(List<TypeRepTemplate>)).Count > 0) {

                        	              // argument_list should consist of just a single expression, either a method group or a value of a delegate type.
                        	              // If its a delegate type, then that is the result of this expression otherwise we create a delegte object.
                        	              if (((argument_list82 != null) ? argument_list82.argTypes : default(List<TypeRepTemplate>))[0] is DelegateRepTemplate) {
                        	                 ret = dupTree((CommonTree)adaptor.GetChild(((argument_list82 != null) ? ((CommonTree)argument_list82.Tree) : null), 0));
                        	                 retval.dotNetType =  ((argument_list82 != null) ? argument_list82.argTypes : default(List<TypeRepTemplate>))[0];
                        	              }
                        	              else {
                        	                 // Since 'type' is a delegate then we assume that argument_list[0] will be a method group name.
                        	                 // use an anonymous inner class to generate a delegate object (object wih an Invoke with appropriate arguments)
                        	                 // new <delegate_name>() { public void Invoke(<formal args>) throw exception { [return] arg[0](<args>); } }
                        	                 DelegateRepTemplate delType = ((type81 != null) ? type81.dotNetType : default(TypeRepTemplate)) as DelegateRepTemplate;
                        	                 ret = mkDelegateObject(((type81 != null) ? ((CommonTree)type81.Tree) : null), rewriteMethodGroupName((CommonTree)adaptor.GetChild(((argument_list82 != null) ? ((CommonTree)argument_list82.Tree) : null), 0)), delType, n.token);
                        	                 retval.dotNetType =  ((type81 != null) ? type81.dotNetType : default(TypeRepTemplate));
                        	              }
                        	           }
                        	           else {
                        	              // assume object constructor
                        	              ClassRepTemplate conType = ((type81 != null) ? type81.dotNetType : default(TypeRepTemplate)) as ClassRepTemplate;
                        	              retval.dotNetType =  ((type81 != null) ? type81.dotNetType : default(TypeRepTemplate));
                        	              if (conType == null) {
                        	                 conType = new UnknownRepTemplate("CONSTRUCTOR");
                        	              }
                        	              ResolveResult conResult = conType.Resolve(((argument_list82 != null) ? argument_list82.argTypes : default(List<TypeRepTemplate>)), AppEnv);
                        	              if (conResult != null) {
                        	                 if (!String.IsNullOrEmpty(conResult.Result.Warning)) Warning(((n != null) ? n.Line : 0), conResult.Result.Warning);
                        	                  ConstructorRepTemplate conRep = conResult.Result as ConstructorRepTemplate;
                        	                  Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                  populateParamMap(myMap, conRep.Params, ((argument_list82 != null) ? argument_list82.argTrees : default(List<CommonTree>)), ((argument_list82 != null) ? argument_list82.argTreeTypeofTypes : default(List<TypeRepTemplate>)), 
                        	                                   ((argument_list82 != null) ? ((CommonTree)argument_list82.Tree) : null), wantsStar(conResult.Result.Java), 
                        	                                   ((type81 != null) ? type81.dotNetType : default(TypeRepTemplate)) == null ? null : ((type81 != null) ? type81.dotNetType : default(TypeRepTemplate)).TypeParams, ((type81 != null) ? type81.argTrees : default(List<CommonTree>)), 
                        	                                   n.token);
                        	                  ret = mkJavaWrapper(conResult.Result.Java, myMap, n.token);
                        	                  AddToImports(conResult.Result.Imports);
                        	                  retval.dotNetType =  conResult.ResultType; 
                        	              }
                        	              else if (((argument_list82 != null) ? argument_list82.argTypes : default(List<TypeRepTemplate>)) != null && ((argument_list82 != null) ? argument_list82.argTypes : default(List<TypeRepTemplate>)).Count > 0) { // assume we have a zero-arg constructor, so don't print warning 
                        	                 WarningFailedResolve(n.token.Line, "Could not resolve constructor against " + conType.TypeName);
                        	              }
                        	           }
                        	          
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 15 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1640:7: ^( NEW_ANON_OBJECT anonymous_object_creation_expression )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	NEW_ANON_OBJECT84=(CommonTree)Match(input,NEW_ANON_OBJECT,FOLLOW_NEW_ANON_OBJECT_in_primary_expression1490); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{NEW_ANON_OBJECT84_tree = (CommonTree)adaptor.DupNode(NEW_ANON_OBJECT84);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(NEW_ANON_OBJECT84_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_anonymous_object_creation_expression_in_primary_expression1492);
                        	anonymous_object_creation_expression85 = anonymous_object_creation_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, anonymous_object_creation_expression85.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 16 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1641:4: sizeof_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_sizeof_expression_in_primary_expression1505);
                        	sizeof_expression86 = sizeof_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, sizeof_expression86.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 17 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1642:4: checked_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_checked_expression_in_primary_expression1516);
                        	checked_expression87 = checked_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, checked_expression87.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 18 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1643:4: unchecked_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unchecked_expression_in_primary_expression1535);
                        	unchecked_expression88 = unchecked_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, unchecked_expression88.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 19 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1644:4: default_value_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_default_value_expression_in_primary_expression1552);
                        	default_value_expression89 = default_value_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, default_value_expression89.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 20 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1645:4: ^(d= 'delegate' ( formal_parameter_list[$typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params : null,\n $typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.ParamArray : null] )? block )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	d=(CommonTree)Match(input,218,FOLLOW_218_in_primary_expression1568); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{d_tree = (CommonTree)adaptor.DupNode(d);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(d_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1646:9: ( formal_parameter_list[$typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params : null,\n $typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.ParamArray : null] )?
                        	int alt40 = 2;
                        	int LA40_0 = input.LA(1);

                        	if ( (LA40_0 == PARAMS) )
                        	{
                        	    alt40 = 1;
                        	}
                        	switch (alt40) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1646:9: formal_parameter_list[$typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params : null,\n $typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.ParamArray : null]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_formal_parameter_list_in_primary_expression1580);
                        	        	formal_parameter_list90 = formal_parameter_list(typeCtxt != null && typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)typeCtxt).Invoke.Params : null, typeCtxt != null && typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)typeCtxt).Invoke.ParamArray : null);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, formal_parameter_list90.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_primary_expression1595);
                        	block91 = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, block91.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	                  if (typeCtxt != null && typeCtxt is DelegateRepTemplate) {
                        	                     // Since 'type' is a delegate then we assume that argument_list[0] will be a method group name.
                        	                     // use an anonymous inner class to generate a delegate object (object wih an Invoke with appropriate arguments)
                        	                     // new <delegate_name>() { public void Invoke(<formal args>) throw exception { [return] arg[0](<args>); } }
                        	                     DelegateRepTemplate delType = typeCtxt as DelegateRepTemplate;
                        	                     ret = mkDelegateObject((CommonTree)typeCtxt.Tree, ((formal_parameter_list90 != null) ? ((CommonTree)formal_parameter_list90.Tree) : null), ((block91 != null) ? ((CommonTree)block91.Tree) : null), delType, d.token);
                        	                     retval.dotNetType =  typeCtxt;
                        	                  }
                        	              
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 21 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1659:4: typeof_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_typeof_expression_in_primary_expression1618);
                        	typeof_expression92 = typeof_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, typeof_expression92.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((typeof_expression92 != null) ? typeof_expression92.dotNetType : default(TypeRepTemplate)); retval.typeofType =  ((typeof_expression92 != null) ? typeof_expression92.typeofType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (ret != null)
                          retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                primary_expression_stack.Pop();
            }
            return retval;
        }
        // $ANTLR end "primary_expression"

        public class primary_expression_start_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "primary_expression_start"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1662:1: primary_expression_start returns [TypeRepTemplate dotNetType] : ^( '::' identifier identifier ) ;
        public NetMaker.primary_expression_start_return primary_expression_start() // throws RecognitionException [1]
        {   
            NetMaker.primary_expression_start_return retval = new NetMaker.primary_expression_start_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal93 = null;
            NetMaker.identifier_return identifier94 = default(NetMaker.identifier_return);

            NetMaker.identifier_return identifier95 = default(NetMaker.identifier_return);


            CommonTree string_literal93_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1662:62: ( ^( '::' identifier identifier ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1663:3: ^( '::' identifier identifier )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal93=(CommonTree)Match(input,208,FOLLOW_208_in_primary_expression_start1648); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal93_tree = (CommonTree)adaptor.DupNode(string_literal93);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal93_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_primary_expression_start1650);
                	identifier94 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, identifier94.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_primary_expression_start1652);
                	identifier95 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, identifier95.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "primary_expression_start"

        public class access_identifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "access_identifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1671:1: access_identifier : access_operator type_or_generic[\"\"] ;
        public NetMaker.access_identifier_return access_identifier() // throws RecognitionException [1]
        {   
            NetMaker.access_identifier_return retval = new NetMaker.access_identifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.access_operator_return access_operator96 = default(NetMaker.access_operator_return);

            NetMaker.type_or_generic_return type_or_generic97 = default(NetMaker.type_or_generic_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1671:18: ( access_operator type_or_generic[\"\"] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1672:2: access_operator type_or_generic[\"\"]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_access_operator_in_access_identifier1668);
                	access_operator96 = access_operator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, access_operator96.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_or_generic_in_access_identifier1672);
                	type_or_generic97 = type_or_generic("");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_or_generic97.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "access_identifier"

        public class access_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "access_operator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1673:1: access_operator : ( '.' | '->' );
        public NetMaker.access_operator_return access_operator() // throws RecognitionException [1]
        {   
            NetMaker.access_operator_return retval = new NetMaker.access_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set98 = null;

            CommonTree set98_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1673:16: ( '.' | '->' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set98 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set98_tree = (CommonTree)adaptor.DupNode(set98);

                	    adaptor.AddChild(root_0, set98_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "access_operator"

        public class brackets_or_arguments_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "brackets_or_arguments"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1675:1: brackets_or_arguments : ( brackets | arguments );
        public NetMaker.brackets_or_arguments_return brackets_or_arguments() // throws RecognitionException [1]
        {   
            NetMaker.brackets_or_arguments_return retval = new NetMaker.brackets_or_arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.brackets_return brackets99 = default(NetMaker.brackets_return);

            NetMaker.arguments_return arguments100 = default(NetMaker.arguments_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1675:22: ( brackets | arguments )
                int alt42 = 2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0 == OPEN_BRACKET) )
                {
                    alt42 = 1;
                }
                else if ( (LA42_0 == LPAREN) )
                {
                    alt42 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d42s0 =
                        new NoViableAltException("", 42, 0, input);

                    throw nvae_d42s0;
                }
                switch (alt42) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1676:2: brackets
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_brackets_in_brackets_or_arguments1695);
                        	brackets99 = brackets();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, brackets99.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1676:13: arguments
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_arguments_in_brackets_or_arguments1699);
                        	arguments100 = arguments();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, arguments100.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "brackets_or_arguments"

        public class brackets_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "brackets"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1677:1: brackets : '[' ( expression_list )? ']' ;
        public NetMaker.brackets_return brackets() // throws RecognitionException [1]
        {   
            NetMaker.brackets_return retval = new NetMaker.brackets_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal101 = null;
            CommonTree char_literal103 = null;
            NetMaker.expression_list_return expression_list102 = default(NetMaker.expression_list_return);


            CommonTree char_literal101_tree=null;
            CommonTree char_literal103_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1677:9: ( '[' ( expression_list )? ']' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1678:2: '[' ( expression_list )? ']'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal101=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_brackets1707); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal101_tree = (CommonTree)adaptor.DupNode(char_literal101);

                		adaptor.AddChild(root_0, char_literal101_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1678:8: ( expression_list )?
                	int alt43 = 2;
                	int LA43_0 = input.LA(1);

                	if ( ((LA43_0 >= PARAMS && LA43_0 <= PARAMS_TYPELESS) || (LA43_0 >= MONOPLUS && LA43_0 <= APPLY) || (LA43_0 >= NEW && LA43_0 <= NEW_ARRAY) || LA43_0 == NEW_ANON_OBJECT || (LA43_0 >= OBJECT && LA43_0 <= THIS) || LA43_0 == NULL_COALESCE || (LA43_0 >= COND_EXPR && LA43_0 <= LEFT_SHIFT) || (LA43_0 >= SUPER && LA43_0 <= LAMBDA) || LA43_0 == CAST_EXPR || (LA43_0 >= BOOL && LA43_0 <= GT) || (LA43_0 >= ELIF && LA43_0 <= UNDEF) || LA43_0 == 195 || LA43_0 == 208 || (LA43_0 >= 214 && LA43_0 <= 219) || LA43_0 == 221 || (LA43_0 >= 224 && LA43_0 <= 239) || (LA43_0 >= 241 && LA43_0 <= 244) || (LA43_0 >= 247 && LA43_0 <= 254) || LA43_0 == 256 || (LA43_0 >= 263 && LA43_0 <= 264) || (LA43_0 >= 274 && LA43_0 <= 277)) )
                	{
                	    alt43 = 1;
                	}
                	switch (alt43) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1678:8: expression_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_list_in_brackets1711);
                	        	expression_list102 = expression_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, expression_list102.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal103=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_brackets1716); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal103_tree = (CommonTree)adaptor.DupNode(char_literal103);

                		adaptor.AddChild(root_0, char_literal103_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "brackets"

        public class paren_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "paren_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1679:1: paren_expression[TypeRepTemplate typeCtxt] : '(' expression[$typeCtxt] ')' ;
        public NetMaker.paren_expression_return paren_expression(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.paren_expression_return retval = new NetMaker.paren_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal104 = null;
            CommonTree char_literal106 = null;
            NetMaker.expression_return expression105 = default(NetMaker.expression_return);


            CommonTree char_literal104_tree=null;
            CommonTree char_literal106_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1679:43: ( '(' expression[$typeCtxt] ')' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1680:2: '(' expression[$typeCtxt] ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal104=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_paren_expression1727); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal104_tree = (CommonTree)adaptor.DupNode(char_literal104);

                		adaptor.AddChild(root_0, char_literal104_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_paren_expression1731);
                	expression105 = expression(typeCtxt);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression105.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal106=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_paren_expression1736); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal106_tree = (CommonTree)adaptor.DupNode(char_literal106);

                		adaptor.AddChild(root_0, char_literal106_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "paren_expression"

        public class arguments_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "arguments"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1681:1: arguments : '(' ( argument_list )? ')' ;
        public NetMaker.arguments_return arguments() // throws RecognitionException [1]
        {   
            NetMaker.arguments_return retval = new NetMaker.arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal107 = null;
            CommonTree char_literal109 = null;
            NetMaker.argument_list_return argument_list108 = default(NetMaker.argument_list_return);


            CommonTree char_literal107_tree=null;
            CommonTree char_literal109_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1681:10: ( '(' ( argument_list )? ')' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1682:2: '(' ( argument_list )? ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal107=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_arguments1745); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal107_tree = (CommonTree)adaptor.DupNode(char_literal107);

                		adaptor.AddChild(root_0, char_literal107_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1682:8: ( argument_list )?
                	int alt44 = 2;
                	int LA44_0 = input.LA(1);

                	if ( (LA44_0 == ARGS) )
                	{
                	    alt44 = 1;
                	}
                	switch (alt44) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1682:8: argument_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_argument_list_in_arguments1749);
                	        	argument_list108 = argument_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, argument_list108.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal109=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_arguments1754); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal109_tree = (CommonTree)adaptor.DupNode(char_literal109);

                		adaptor.AddChild(root_0, char_literal109_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "arguments"

        public class argument_list_return : TreeRuleReturnScope
        {
            public List<TypeRepTemplate> argTypes;
            public List<CommonTree> argTrees;
            public List<TypeRepTemplate> argTreeTypeofTypes;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1683:1: argument_list returns [List<TypeRepTemplate> argTypes, List<CommonTree> argTrees, List<TypeRepTemplate> argTreeTypeofTypes] : ^( ARGS ( argument )+ ) ;
        public NetMaker.argument_list_return argument_list() // throws RecognitionException [1]
        {   
            NetMaker.argument_list_return retval = new NetMaker.argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree ARGS110 = null;
            NetMaker.argument_return argument111 = default(NetMaker.argument_return);


            CommonTree ARGS110_tree=null;


                retval.argTypes =  new List<TypeRepTemplate>();
                retval.argTrees =  new List<CommonTree>();
                retval.argTreeTypeofTypes =  new List<TypeRepTemplate>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1688:2: ( ^( ARGS ( argument )+ ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1689:2: ^( ARGS ( argument )+ )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	ARGS110=(CommonTree)Match(input,ARGS,FOLLOW_ARGS_in_argument_list1773); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{ARGS110_tree = (CommonTree)adaptor.DupNode(ARGS110);

                		root_1 = (CommonTree)adaptor.BecomeRoot(ARGS110_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1689:9: ( argument )+
                	int cnt45 = 0;
                	do 
                	{
                	    int alt45 = 2;
                	    int LA45_0 = input.LA(1);

                	    if ( ((LA45_0 >= PARAMS && LA45_0 <= PARAMS_TYPELESS) || (LA45_0 >= MONOPLUS && LA45_0 <= APPLY) || (LA45_0 >= NEW && LA45_0 <= NEW_ARRAY) || LA45_0 == NEW_ANON_OBJECT || (LA45_0 >= OBJECT && LA45_0 <= THIS) || LA45_0 == NULL_COALESCE || (LA45_0 >= COND_EXPR && LA45_0 <= LEFT_SHIFT) || (LA45_0 >= SUPER && LA45_0 <= LAMBDA) || LA45_0 == CAST_EXPR || (LA45_0 >= BOOL && LA45_0 <= GT) || (LA45_0 >= ELIF && LA45_0 <= UNDEF) || LA45_0 == 195 || LA45_0 == 208 || (LA45_0 >= 212 && LA45_0 <= 219) || LA45_0 == 221 || (LA45_0 >= 224 && LA45_0 <= 239) || (LA45_0 >= 241 && LA45_0 <= 244) || (LA45_0 >= 247 && LA45_0 <= 254) || LA45_0 == 256 || (LA45_0 >= 263 && LA45_0 <= 264) || (LA45_0 >= 274 && LA45_0 <= 277)) )
                	    {
                	        alt45 = 1;
                	    }


                	    switch (alt45) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1689:10: argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_argument_in_argument_list1776);
                			    	argument111 = argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_1, argument111.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.argTypes.Add(((argument111 != null) ? argument111.dotNetType : default(TypeRepTemplate))); retval.argTrees.Add(dupTree(((argument111 != null) ? ((CommonTree)argument111.Tree) : null))); retval.argTreeTypeofTypes.Add(((argument111 != null) ? argument111.typeofType : default(TypeRepTemplate))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt45 >= 1 ) goto loop45;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee45 =
                		                new EarlyExitException(45, input);
                		            throw eee45;
                	    }
                	    cnt45++;
                	} while (true);

                	loop45:
                		;	// Stops C# compiler whining that label 'loop45' has no statements


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument_list"

        public class argument_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public TypeRepTemplate typeofType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1691:1: argument returns [TypeRepTemplate dotNetType, TypeRepTemplate typeofType] : ( argument_name argument_value | argument_value );
        public NetMaker.argument_return argument() // throws RecognitionException [1]
        {   
            NetMaker.argument_return retval = new NetMaker.argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.argument_name_return argument_name112 = default(NetMaker.argument_name_return);

            NetMaker.argument_value_return argument_value113 = default(NetMaker.argument_value_return);

            NetMaker.argument_value_return argument_value114 = default(NetMaker.argument_value_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1691:74: ( argument_name argument_value | argument_value )
                int alt46 = 2;
                switch ( input.LA(1) ) 
                {
                case IDENTIFIER:
                	{
                    int LA46_1 = input.LA(2);

                    if ( (LA46_1 == UP || (LA46_1 >= PARAMS && LA46_1 <= PARAMS_TYPELESS) || (LA46_1 >= MONOPLUS && LA46_1 <= APPLY) || (LA46_1 >= NEW && LA46_1 <= NEW_ARRAY) || LA46_1 == NEW_ANON_OBJECT || (LA46_1 >= OBJECT && LA46_1 <= THIS) || LA46_1 == NULL_COALESCE || (LA46_1 >= ASSIGN && LA46_1 <= RIGHT_SHIFT_ASSIGN) || (LA46_1 >= COND_EXPR && LA46_1 <= LEFT_SHIFT) || (LA46_1 >= SUPER && LA46_1 <= LAMBDA) || LA46_1 == CAST_EXPR || (LA46_1 >= BOOL && LA46_1 <= GT) || (LA46_1 >= ELIF && LA46_1 <= UNDEF) || LA46_1 == 195 || LA46_1 == 208 || (LA46_1 >= 212 && LA46_1 <= 219) || LA46_1 == 221 || (LA46_1 >= 224 && LA46_1 <= 239) || (LA46_1 >= 241 && LA46_1 <= 244) || (LA46_1 >= 247 && LA46_1 <= 254) || LA46_1 == 256 || (LA46_1 >= 263 && LA46_1 <= 264) || (LA46_1 >= 274 && LA46_1 <= 277)) )
                    {
                        alt46 = 2;
                    }
                    else if ( (LA46_1 == 211) )
                    {
                        alt46 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d46s1 =
                            new NoViableAltException("", 46, 1, input);

                        throw nvae_d46s1;
                    }
                    }
                    break;
                case 225:
                	{
                    int LA46_2 = input.LA(2);

                    if ( (LA46_2 == UP || (LA46_2 >= PARAMS && LA46_2 <= PARAMS_TYPELESS) || (LA46_2 >= MONOPLUS && LA46_2 <= APPLY) || (LA46_2 >= NEW && LA46_2 <= NEW_ARRAY) || LA46_2 == NEW_ANON_OBJECT || (LA46_2 >= OBJECT && LA46_2 <= THIS) || LA46_2 == NULL_COALESCE || (LA46_2 >= ASSIGN && LA46_2 <= RIGHT_SHIFT_ASSIGN) || (LA46_2 >= COND_EXPR && LA46_2 <= LEFT_SHIFT) || (LA46_2 >= SUPER && LA46_2 <= LAMBDA) || LA46_2 == TYPE || LA46_2 == CAST_EXPR || (LA46_2 >= BOOL && LA46_2 <= GT) || (LA46_2 >= ELIF && LA46_2 <= UNDEF) || LA46_2 == 195 || LA46_2 == 208 || (LA46_2 >= 212 && LA46_2 <= 219) || LA46_2 == 221 || (LA46_2 >= 224 && LA46_2 <= 239) || (LA46_2 >= 241 && LA46_2 <= 244) || (LA46_2 >= 247 && LA46_2 <= 254) || LA46_2 == 256 || (LA46_2 >= 263 && LA46_2 <= 264) || (LA46_2 >= 274 && LA46_2 <= 277)) )
                    {
                        alt46 = 2;
                    }
                    else if ( (LA46_2 == 211) )
                    {
                        alt46 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d46s2 =
                            new NoViableAltException("", 46, 2, input);

                        throw nvae_d46s2;
                    }
                    }
                    break;
                case PARAMS:
                case PARAMS_TYPELESS:
                case MONOPLUS:
                case MONOMINUS:
                case MONONOT:
                case MONOTWIDDLE:
                case MONOSTAR:
                case ADDRESSOF:
                case PREINC:
                case PREDEC:
                case POSTINC:
                case POSTDEC:
                case PARENS:
                case INDEX:
                case APPLY:
                case NEW:
                case NEW_ARRAY:
                case NEW_ANON_OBJECT:
                case OBJECT:
                case THIS:
                case NULL_COALESCE:
                case COND_EXPR:
                case RIGHT_SHIFT:
                case INSTANCEOF:
                case LOG_OR:
                case LOG_AND:
                case BIT_OR:
                case BIT_XOR:
                case BIT_AND:
                case NOT_EQUAL:
                case EQUAL:
                case LTHAN:
                case LTE:
                case GTE:
                case LEFT_SHIFT:
                case SUPER:
                case LONGNUMBER:
                case PLUS:
                case MINUS:
                case DIV:
                case MOD:
                case STAR:
                case LAMBDA:
                case CAST_EXPR:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case DOT:
                case PTR:
                case GT:
                case 208:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 251:
                case 252:
                case 253:
                case 254:
                case 275:
                case 276:
                	{
                    alt46 = 2;
                    }
                    break;
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    int LA46_4 = input.LA(2);

                    if ( (LA46_4 == UP || (LA46_4 >= PARAMS && LA46_4 <= PARAMS_TYPELESS) || (LA46_4 >= MONOPLUS && LA46_4 <= APPLY) || (LA46_4 >= NEW && LA46_4 <= NEW_ARRAY) || LA46_4 == NEW_ANON_OBJECT || (LA46_4 >= OBJECT && LA46_4 <= THIS) || LA46_4 == NULL_COALESCE || (LA46_4 >= ASSIGN && LA46_4 <= RIGHT_SHIFT_ASSIGN) || (LA46_4 >= COND_EXPR && LA46_4 <= LEFT_SHIFT) || (LA46_4 >= SUPER && LA46_4 <= LAMBDA) || LA46_4 == CAST_EXPR || (LA46_4 >= BOOL && LA46_4 <= GT) || (LA46_4 >= ELIF && LA46_4 <= UNDEF) || LA46_4 == 195 || LA46_4 == 208 || (LA46_4 >= 212 && LA46_4 <= 219) || LA46_4 == 221 || (LA46_4 >= 224 && LA46_4 <= 239) || (LA46_4 >= 241 && LA46_4 <= 244) || (LA46_4 >= 247 && LA46_4 <= 254) || LA46_4 == 256 || (LA46_4 >= 263 && LA46_4 <= 264) || (LA46_4 >= 274 && LA46_4 <= 277)) )
                    {
                        alt46 = 2;
                    }
                    else if ( (LA46_4 == 211) )
                    {
                        alt46 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d46s4 =
                            new NoViableAltException("", 46, 4, input);

                        throw nvae_d46s4;
                    }
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d46s0 =
                	        new NoViableAltException("", 46, 0, input);

                	    throw nvae_d46s0;
                }

                switch (alt46) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1692:2: argument_name argument_value
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_argument_name_in_argument1793);
                        	argument_name112 = argument_name();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, argument_name112.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_argument_value_in_argument1797);
                        	argument_value113 = argument_value();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, argument_value113.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((argument_value113 != null) ? argument_value113.dotNetType : default(TypeRepTemplate)); retval.typeofType =  ((argument_value113 != null) ? argument_value113.typeofType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1693:4: argument_value
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_argument_value_in_argument1804);
                        	argument_value114 = argument_value();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, argument_value114.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((argument_value114 != null) ? argument_value114.dotNetType : default(TypeRepTemplate)); retval.typeofType =  ((argument_value114 != null) ? argument_value114.typeofType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument"

        public class argument_name_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument_name"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1695:1: argument_name : identifier ':' ;
        public NetMaker.argument_name_return argument_name() // throws RecognitionException [1]
        {   
            NetMaker.argument_name_return retval = new NetMaker.argument_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal116 = null;
            NetMaker.identifier_return identifier115 = default(NetMaker.identifier_return);


            CommonTree char_literal116_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1695:14: ( identifier ':' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1696:2: identifier ':'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_argument_name1818);
                	identifier115 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier115.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal116=(CommonTree)Match(input,211,FOLLOW_211_in_argument_name1822); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal116_tree = (CommonTree)adaptor.DupNode(char_literal116);

                		adaptor.AddChild(root_0, char_literal116_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument_name"

        public class argument_value_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public TypeRepTemplate typeofType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument_value"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1697:1: argument_value returns [TypeRepTemplate dotNetType, TypeRepTemplate typeofType] : ( expression[ObjectType] | ref_variable_reference | o= 'out' variable_reference magicCreateOutVar[$o.token, refVar, ($variable_reference.dotNetType != null ? (CommonTree)$variable_reference.dotNetType.Tree : null)] magicUpdateFromRefVar[$o.token, refVar, $variable_reference.tree, $variable_reference.dotNetType != null && $variable_reference.dotNetType.IsWrapped] -> IDENTIFIER[$o.token, refVar] );
        public NetMaker.argument_value_return argument_value() // throws RecognitionException [1]
        {   
            NetMaker.argument_value_return retval = new NetMaker.argument_value_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o = null;
            NetMaker.expression_return expression117 = default(NetMaker.expression_return);

            NetMaker.ref_variable_reference_return ref_variable_reference118 = default(NetMaker.ref_variable_reference_return);

            NetMaker.variable_reference_return variable_reference119 = default(NetMaker.variable_reference_return);

            NetMaker.magicCreateOutVar_return magicCreateOutVar120 = default(NetMaker.magicCreateOutVar_return);

            NetMaker.magicUpdateFromRefVar_return magicUpdateFromRefVar121 = default(NetMaker.magicUpdateFromRefVar_return);


            CommonTree o_tree=null;
            RewriteRuleNodeStream stream_212 = new RewriteRuleNodeStream(adaptor,"token 212");
            RewriteRuleSubtreeStream stream_variable_reference = new RewriteRuleSubtreeStream(adaptor,"rule variable_reference");
            RewriteRuleSubtreeStream stream_magicUpdateFromRefVar = new RewriteRuleSubtreeStream(adaptor,"rule magicUpdateFromRefVar");
            RewriteRuleSubtreeStream stream_magicCreateOutVar = new RewriteRuleSubtreeStream(adaptor,"rule magicCreateOutVar");

               string refVar = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1700:2: ( expression[ObjectType] | ref_variable_reference | o= 'out' variable_reference magicCreateOutVar[$o.token, refVar, ($variable_reference.dotNetType != null ? (CommonTree)$variable_reference.dotNetType.Tree : null)] magicUpdateFromRefVar[$o.token, refVar, $variable_reference.tree, $variable_reference.dotNetType != null && $variable_reference.dotNetType.IsWrapped] -> IDENTIFIER[$o.token, refVar] )
                int alt47 = 3;
                switch ( input.LA(1) ) 
                {
                case PARAMS:
                case PARAMS_TYPELESS:
                case MONOPLUS:
                case MONOMINUS:
                case MONONOT:
                case MONOTWIDDLE:
                case MONOSTAR:
                case ADDRESSOF:
                case PREINC:
                case PREDEC:
                case POSTINC:
                case POSTDEC:
                case PARENS:
                case INDEX:
                case APPLY:
                case NEW:
                case NEW_ARRAY:
                case NEW_ANON_OBJECT:
                case OBJECT:
                case THIS:
                case NULL_COALESCE:
                case COND_EXPR:
                case RIGHT_SHIFT:
                case INSTANCEOF:
                case LOG_OR:
                case LOG_AND:
                case BIT_OR:
                case BIT_XOR:
                case BIT_AND:
                case NOT_EQUAL:
                case EQUAL:
                case LTHAN:
                case LTE:
                case GTE:
                case LEFT_SHIFT:
                case SUPER:
                case LONGNUMBER:
                case PLUS:
                case MINUS:
                case DIV:
                case MOD:
                case STAR:
                case LAMBDA:
                case CAST_EXPR:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case DOT:
                case PTR:
                case GT:
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 208:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 251:
                case 252:
                case 253:
                case 254:
                case 256:
                case 263:
                case 264:
                case 274:
                case 275:
                case 276:
                case 277:
                	{
                    alt47 = 1;
                    }
                    break;
                case 213:
                	{
                    alt47 = 2;
                    }
                    break;
                case 212:
                	{
                    alt47 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d47s0 =
                	        new NoViableAltException("", 47, 0, input);

                	    throw nvae_d47s0;
                }

                switch (alt47) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1701:2: expression[ObjectType]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_argument_value1838);
                        	expression117 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression117.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((expression117 != null) ? expression117.dotNetType : default(TypeRepTemplate)); retval.typeofType =  ((expression117 != null) ? expression117.typeofType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1702:4: ref_variable_reference
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_ref_variable_reference_in_argument_value1847);
                        	ref_variable_reference118 = ref_variable_reference();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, ref_variable_reference118.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((ref_variable_reference118 != null) ? ref_variable_reference118.dotNetType : default(TypeRepTemplate)); retval.typeofType =  ((ref_variable_reference118 != null) ? ref_variable_reference118.typeofType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1703:4: o= 'out' variable_reference magicCreateOutVar[$o.token, refVar, ($variable_reference.dotNetType != null ? (CommonTree)$variable_reference.dotNetType.Tree : null)] magicUpdateFromRefVar[$o.token, refVar, $variable_reference.tree, $variable_reference.dotNetType != null && $variable_reference.dotNetType.IsWrapped]
                        {
                        	_last = (CommonTree)input.LT(1);
                        	o=(CommonTree)Match(input,212,FOLLOW_212_in_argument_value1857); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_212.Add(o);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_variable_reference_in_argument_value1861);
                        	variable_reference119 = variable_reference();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_variable_reference.Add(variable_reference119.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   refVar = "refVar___" + dummyRefVarCtr++; 
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicCreateOutVar_in_argument_value1872);
                        	magicCreateOutVar120 = magicCreateOutVar(o.token, refVar, (((variable_reference119 != null) ? variable_reference119.dotNetType : default(TypeRepTemplate)) != null ? (CommonTree)((variable_reference119 != null) ? variable_reference119.dotNetType : default(TypeRepTemplate)).Tree : null));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicCreateOutVar.Add(magicCreateOutVar120.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicUpdateFromRefVar_in_argument_value1882);
                        	magicUpdateFromRefVar121 = magicUpdateFromRefVar(o.token, refVar, ((variable_reference119 != null) ? ((CommonTree)variable_reference119.Tree) : null), ((variable_reference119 != null) ? variable_reference119.dotNetType : default(TypeRepTemplate)) != null && ((variable_reference119 != null) ? variable_reference119.dotNetType : default(TypeRepTemplate)).IsWrapped);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicUpdateFromRefVar.Add(magicUpdateFromRefVar121.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((variable_reference119 != null) ? variable_reference119.dotNetType : default(TypeRepTemplate));
                        	          retval.typeofType =  ((variable_reference119 != null) ? variable_reference119.typeofType : default(TypeRepTemplate)); 
                        	          AddToImports("CS2JNet.JavaSupport.language.RefSupport");
                        	          adaptor.AddChild(((statement_scope)statement_stack.Peek()).preStatements, ((magicCreateOutVar120 != null) ? ((CommonTree)magicCreateOutVar120.Tree) : null));
                        	          adaptor.AddChild(((statement_scope)statement_stack.Peek()).postStatements, ((magicUpdateFromRefVar121 != null) ? ((CommonTree)magicUpdateFromRefVar121.Tree) : null));
                        	        
                        	}


                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1712:8: -> IDENTIFIER[$o.token, refVar]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, o.token, refVar));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument_value"

        public class ref_variable_reference_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public TypeRepTemplate typeofType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ref_variable_reference"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1714:1: ref_variable_reference returns [TypeRepTemplate dotNetType, TypeRepTemplate typeofType] : r= 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | v1= variable_reference magicCreateRefVar[$r.token, refVar, ($v1.dotNetType != null ? (CommonTree)$v1.dotNetType.Tree : null), $v1.tree] magicUpdateFromRefVar[$r.token, refVar, $v1.tree, $v1.dotNetType != null && $v1.dotNetType.IsWrapped] -> IDENTIFIER[$r.token, refVar] ) ;
        public NetMaker.ref_variable_reference_return ref_variable_reference() // throws RecognitionException [1]
        {   
            NetMaker.ref_variable_reference_return retval = new NetMaker.ref_variable_reference_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree r = null;
            CommonTree char_literal122 = null;
            CommonTree char_literal124 = null;
            NetMaker.variable_reference_return v1 = default(NetMaker.variable_reference_return);

            NetMaker.type_return type123 = default(NetMaker.type_return);

            NetMaker.ref_variable_reference_return ref_variable_reference125 = default(NetMaker.ref_variable_reference_return);

            NetMaker.variable_reference_return variable_reference126 = default(NetMaker.variable_reference_return);

            NetMaker.magicCreateRefVar_return magicCreateRefVar127 = default(NetMaker.magicCreateRefVar_return);

            NetMaker.magicUpdateFromRefVar_return magicUpdateFromRefVar128 = default(NetMaker.magicUpdateFromRefVar_return);


            CommonTree r_tree=null;
            CommonTree char_literal122_tree=null;
            CommonTree char_literal124_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_213 = new RewriteRuleNodeStream(adaptor,"token 213");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_variable_reference = new RewriteRuleSubtreeStream(adaptor,"rule variable_reference");
            RewriteRuleSubtreeStream stream_magicUpdateFromRefVar = new RewriteRuleSubtreeStream(adaptor,"rule magicUpdateFromRefVar");
            RewriteRuleSubtreeStream stream_ref_variable_reference = new RewriteRuleSubtreeStream(adaptor,"rule ref_variable_reference");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_magicCreateRefVar = new RewriteRuleSubtreeStream(adaptor,"rule magicCreateRefVar");

               string refVar = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1717:2: (r= 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | v1= variable_reference magicCreateRefVar[$r.token, refVar, ($v1.dotNetType != null ? (CommonTree)$v1.dotNetType.Tree : null), $v1.tree] magicUpdateFromRefVar[$r.token, refVar, $v1.tree, $v1.dotNetType != null && $v1.dotNetType.IsWrapped] -> IDENTIFIER[$r.token, refVar] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1718:2: r= 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | v1= variable_reference magicCreateRefVar[$r.token, refVar, ($v1.dotNetType != null ? (CommonTree)$v1.dotNetType.Tree : null), $v1.tree] magicUpdateFromRefVar[$r.token, refVar, $v1.tree, $v1.dotNetType != null && $v1.dotNetType.IsWrapped] -> IDENTIFIER[$r.token, refVar] )
                {
                	_last = (CommonTree)input.LT(1);
                	r=(CommonTree)Match(input,213,FOLLOW_213_in_ref_variable_reference1927); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_213.Add(r);

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1719:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | v1= variable_reference magicCreateRefVar[$r.token, refVar, ($v1.dotNetType != null ? (CommonTree)$v1.dotNetType.Tree : null), $v1.tree] magicUpdateFromRefVar[$r.token, refVar, $v1.tree, $v1.dotNetType != null && $v1.dotNetType.IsWrapped] -> IDENTIFIER[$r.token, refVar] )
                	int alt49 = 2;
                	int LA49_0 = input.LA(1);

                	if ( (LA49_0 == LPAREN) && (synpred3_NetMaker()) )
                	{
                	    alt49 = 1;
                	}
                	else if ( ((LA49_0 >= PARAMS && LA49_0 <= PARAMS_TYPELESS) || (LA49_0 >= MONOPLUS && LA49_0 <= APPLY) || (LA49_0 >= NEW && LA49_0 <= NEW_ARRAY) || LA49_0 == NEW_ANON_OBJECT || (LA49_0 >= OBJECT && LA49_0 <= THIS) || LA49_0 == NULL_COALESCE || (LA49_0 >= COND_EXPR && LA49_0 <= LEFT_SHIFT) || (LA49_0 >= SUPER && LA49_0 <= LAMBDA) || LA49_0 == CAST_EXPR || (LA49_0 >= BOOL && LA49_0 <= GT) || (LA49_0 >= ELIF && LA49_0 <= UNDEF) || LA49_0 == 195 || LA49_0 == 208 || (LA49_0 >= 214 && LA49_0 <= 219) || LA49_0 == 221 || (LA49_0 >= 224 && LA49_0 <= 239) || (LA49_0 >= 241 && LA49_0 <= 244) || (LA49_0 >= 247 && LA49_0 <= 254) || LA49_0 == 256 || (LA49_0 >= 263 && LA49_0 <= 264) || (LA49_0 >= 274 && LA49_0 <= 277)) )
                	{
                	    alt49 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d49s0 =
                	        new NoViableAltException("", 49, 0, input);

                	    throw nvae_d49s0;
                	}
                	switch (alt49) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1719:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal122=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_ref_variable_reference1949); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal122);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_ref_variable_reference1953);
                	        	type123 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type.Add(type123.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal124=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_ref_variable_reference1957); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal124);

                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1719:47: ( ref_variable_reference | variable_reference )
                	        	int alt48 = 2;
                	        	int LA48_0 = input.LA(1);

                	        	if ( (LA48_0 == 213) )
                	        	{
                	        	    alt48 = 1;
                	        	}
                	        	else if ( ((LA48_0 >= PARAMS && LA48_0 <= PARAMS_TYPELESS) || (LA48_0 >= MONOPLUS && LA48_0 <= APPLY) || (LA48_0 >= NEW && LA48_0 <= NEW_ARRAY) || LA48_0 == NEW_ANON_OBJECT || (LA48_0 >= OBJECT && LA48_0 <= THIS) || LA48_0 == NULL_COALESCE || (LA48_0 >= COND_EXPR && LA48_0 <= LEFT_SHIFT) || (LA48_0 >= SUPER && LA48_0 <= LAMBDA) || LA48_0 == CAST_EXPR || (LA48_0 >= BOOL && LA48_0 <= GT) || (LA48_0 >= ELIF && LA48_0 <= UNDEF) || LA48_0 == 195 || LA48_0 == 208 || (LA48_0 >= 214 && LA48_0 <= 219) || LA48_0 == 221 || (LA48_0 >= 224 && LA48_0 <= 239) || (LA48_0 >= 241 && LA48_0 <= 244) || (LA48_0 >= 247 && LA48_0 <= 254) || LA48_0 == 256 || (LA48_0 >= 263 && LA48_0 <= 264) || (LA48_0 >= 274 && LA48_0 <= 277)) )
                	        	{
                	        	    alt48 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d48s0 =
                	        	        new NoViableAltException("", 48, 0, input);

                	        	    throw nvae_d48s0;
                	        	}
                	        	switch (alt48) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1719:48: ref_variable_reference
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_ref_variable_reference_in_ref_variable_reference1962);
                	        	        	ref_variable_reference125 = ref_variable_reference();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_ref_variable_reference.Add(ref_variable_reference125.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1719:73: variable_reference
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_variable_reference_in_ref_variable_reference1966);
                	        	        	variable_reference126 = variable_reference();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_variable_reference.Add(variable_reference126.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   retval.dotNetType =  ((type123 != null) ? type123.dotNetType : default(TypeRepTemplate)); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1721:5: v1= variable_reference magicCreateRefVar[$r.token, refVar, ($v1.dotNetType != null ? (CommonTree)$v1.dotNetType.Tree : null), $v1.tree] magicUpdateFromRefVar[$r.token, refVar, $v1.tree, $v1.dotNetType != null && $v1.dotNetType.IsWrapped]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variable_reference_in_ref_variable_reference2006);
                	        	v1 = variable_reference();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_variable_reference.Add(v1.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   refVar = "refVar___" + dummyRefVarCtr++; 
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicCreateRefVar_in_ref_variable_reference2037);
                	        	magicCreateRefVar127 = magicCreateRefVar(r.token, refVar, (((v1 != null) ? v1.dotNetType : default(TypeRepTemplate)) != null ? (CommonTree)((v1 != null) ? v1.dotNetType : default(TypeRepTemplate)).Tree : null), ((v1 != null) ? ((CommonTree)v1.Tree) : null));
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicCreateRefVar.Add(magicCreateRefVar127.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicUpdateFromRefVar_in_ref_variable_reference2053);
                	        	magicUpdateFromRefVar128 = magicUpdateFromRefVar(r.token, refVar, ((v1 != null) ? ((CommonTree)v1.Tree) : null), ((v1 != null) ? v1.dotNetType : default(TypeRepTemplate)) != null && ((v1 != null) ? v1.dotNetType : default(TypeRepTemplate)).IsWrapped);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicUpdateFromRefVar.Add(magicUpdateFromRefVar128.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   
                	        	                retval.dotNetType =  ((v1 != null) ? v1.dotNetType : default(TypeRepTemplate)); retval.typeofType =  ((v1 != null) ? v1.typeofType : default(TypeRepTemplate));
                	        	                AddToImports("CS2JNet.JavaSupport.language.RefSupport");
                	        	                adaptor.AddChild(((statement_scope)statement_stack.Peek()).preStatements, ((magicCreateRefVar127 != null) ? ((CommonTree)magicCreateRefVar127.Tree) : null));
                	        	                adaptor.AddChild(((statement_scope)statement_stack.Peek()).postStatements, ((magicUpdateFromRefVar128 != null) ? ((CommonTree)magicUpdateFromRefVar128.Tree) : null));
                	        	              
                	        	}


                	        	// AST REWRITE
                	        	// elements:          
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1731:8: -> IDENTIFIER[$r.token, refVar]
                	        	{
                	        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, r.token, refVar));

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ref_variable_reference"

        public class variable_reference_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public TypeRepTemplate typeofType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_reference"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1734:1: variable_reference returns [TypeRepTemplate dotNetType, TypeRepTemplate typeofType] : expression[ObjectType] ;
        public NetMaker.variable_reference_return variable_reference() // throws RecognitionException [1]
        {   
            NetMaker.variable_reference_return retval = new NetMaker.variable_reference_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression129 = default(NetMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1734:84: ( expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1735:2: expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_variable_reference2100);
                	expression129 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression129.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ((expression129 != null) ? expression129.dotNetType : default(TypeRepTemplate)); retval.typeofType =  ((expression129 != null) ? expression129.typeofType : default(TypeRepTemplate)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_reference"

        public class rank_specifiers_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "rank_specifiers"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1736:1: rank_specifiers[TypeRepTemplate inTy] returns [TypeRepTemplate dotNetType] : ( rank_specifier[ty] )+ ;
        public NetMaker.rank_specifiers_return rank_specifiers(TypeRepTemplate inTy) // throws RecognitionException [1]
        {   
            NetMaker.rank_specifiers_return retval = new NetMaker.rank_specifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.rank_specifier_return rank_specifier130 = default(NetMaker.rank_specifier_return);




                TypeRepTemplate ty = inTy;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1739:2: ( ( rank_specifier[ty] )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1740:9: ( rank_specifier[ty] )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1740:9: ( rank_specifier[ty] )+
                	int cnt50 = 0;
                	do 
                	{
                	    int alt50 = 2;
                	    int LA50_0 = input.LA(1);

                	    if ( (LA50_0 == OPEN_BRACKET) )
                	    {
                	        alt50 = 1;
                	    }


                	    switch (alt50) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1740:10: rank_specifier[ty]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_rank_specifier_in_rank_specifiers2129);
                			    	rank_specifier130 = rank_specifier(ty);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, rank_specifier130.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   ty = ((rank_specifier130 != null) ? rank_specifier130.dotNetType : default(TypeRepTemplate));
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt50 >= 1 ) goto loop50;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee50 =
                		                new EarlyExitException(50, input);
                		            throw eee50;
                	    }
                	    cnt50++;
                	} while (true);

                	loop50:
                		;	// Stops C# compiler whining that label 'loop50' has no statements

                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ty; 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "rank_specifiers"

        public class rank_specifier_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "rank_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1741:1: rank_specifier[TypeRepTemplate inTy] returns [TypeRepTemplate dotNetType] : '[' ']' ;
        public NetMaker.rank_specifier_return rank_specifier(TypeRepTemplate inTy) // throws RecognitionException [1]
        {   
            NetMaker.rank_specifier_return retval = new NetMaker.rank_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal131 = null;
            CommonTree char_literal132 = null;

            CommonTree char_literal131_tree=null;
            CommonTree char_literal132_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1741:74: ( '[' ']' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1742:2: '[' ']'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal131=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_rank_specifier2157); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal131_tree = (CommonTree)adaptor.DupNode(char_literal131);

                		adaptor.AddChild(root_0, char_literal131_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal132=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_rank_specifier2165); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal132_tree = (CommonTree)adaptor.DupNode(char_literal132);

                		adaptor.AddChild(root_0, char_literal132_tree);
                	}
                	if ( (state.backtracking==0) )
                	{
                	   if (inTy != null) { retval.dotNetType =  findType("System.Array", new TypeRepTemplate[] {inTy}); } 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "rank_specifier"

        public class delegate_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "delegate_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1747:1: delegate_creation_expression : type_name '(' type_name ')' ;
        public NetMaker.delegate_creation_expression_return delegate_creation_expression() // throws RecognitionException [1]
        {   
            NetMaker.delegate_creation_expression_return retval = new NetMaker.delegate_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal134 = null;
            CommonTree char_literal136 = null;
            NetMaker.type_name_return type_name133 = default(NetMaker.type_name_return);

            NetMaker.type_name_return type_name135 = default(NetMaker.type_name_return);


            CommonTree char_literal134_tree=null;
            CommonTree char_literal136_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1747:29: ( type_name '(' type_name ')' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1749:2: type_name '(' type_name ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_delegate_creation_expression2182);
                	type_name133 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_name133.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal134=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_delegate_creation_expression2186); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal134_tree = (CommonTree)adaptor.DupNode(char_literal134);

                		adaptor.AddChild(root_0, char_literal134_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_delegate_creation_expression2190);
                	type_name135 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_name135.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal136=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_delegate_creation_expression2194); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal136_tree = (CommonTree)adaptor.DupNode(char_literal136);

                		adaptor.AddChild(root_0, char_literal136_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "delegate_creation_expression"

        public class anonymous_object_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_object_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1750:1: anonymous_object_creation_expression : anonymous_object_initializer ;
        public NetMaker.anonymous_object_creation_expression_return anonymous_object_creation_expression() // throws RecognitionException [1]
        {   
            NetMaker.anonymous_object_creation_expression_return retval = new NetMaker.anonymous_object_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.anonymous_object_initializer_return anonymous_object_initializer137 = default(NetMaker.anonymous_object_initializer_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1750:37: ( anonymous_object_initializer )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1752:2: anonymous_object_initializer
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2205);
                	anonymous_object_initializer137 = anonymous_object_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, anonymous_object_initializer137.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_object_creation_expression"

        public class anonymous_object_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_object_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1753:1: anonymous_object_initializer : '{' ( member_declarator_list ( ',' )? )? '}' ;
        public NetMaker.anonymous_object_initializer_return anonymous_object_initializer() // throws RecognitionException [1]
        {   
            NetMaker.anonymous_object_initializer_return retval = new NetMaker.anonymous_object_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal138 = null;
            CommonTree char_literal140 = null;
            CommonTree char_literal141 = null;
            NetMaker.member_declarator_list_return member_declarator_list139 = default(NetMaker.member_declarator_list_return);


            CommonTree char_literal138_tree=null;
            CommonTree char_literal140_tree=null;
            CommonTree char_literal141_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1753:29: ( '{' ( member_declarator_list ( ',' )? )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1754:2: '{' ( member_declarator_list ( ',' )? )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal138=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2214); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal138_tree = (CommonTree)adaptor.DupNode(char_literal138);

                		adaptor.AddChild(root_0, char_literal138_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1754:8: ( member_declarator_list ( ',' )? )?
                	int alt52 = 2;
                	int LA52_0 = input.LA(1);

                	if ( (LA52_0 == OBJECT || LA52_0 == LONGNUMBER || (LA52_0 >= BOOL && LA52_0 <= PTR) || (LA52_0 >= ELIF && LA52_0 <= UNDEF) || LA52_0 == 195 || LA52_0 == 221 || (LA52_0 >= 224 && LA52_0 <= 239) || (LA52_0 >= 241 && LA52_0 <= 244) || (LA52_0 >= 247 && LA52_0 <= 254) || LA52_0 == 256 || (LA52_0 >= 263 && LA52_0 <= 264) || (LA52_0 >= 274 && LA52_0 <= 277)) )
                	{
                	    alt52 = 1;
                	}
                	switch (alt52) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1754:9: member_declarator_list ( ',' )?
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer2219);
                	        	member_declarator_list139 = member_declarator_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, member_declarator_list139.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1754:34: ( ',' )?
                	        	int alt51 = 2;
                	        	int LA51_0 = input.LA(1);

                	        	if ( (LA51_0 == COMMA) )
                	        	{
                	        	    alt51 = 1;
                	        	}
                	        	switch (alt51) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1754:34: ','
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	char_literal140=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_anonymous_object_initializer2223); if (state.failed) return retval;
                	        	        	if ( state.backtracking == 0 )
                	        	        	{char_literal140_tree = (CommonTree)adaptor.DupNode(char_literal140);

                	        	        		adaptor.AddChild(root_0, char_literal140_tree);
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal141=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2230); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal141_tree = (CommonTree)adaptor.DupNode(char_literal141);

                		adaptor.AddChild(root_0, char_literal141_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_object_initializer"

        public class member_declarator_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_declarator_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1755:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
        public NetMaker.member_declarator_list_return member_declarator_list() // throws RecognitionException [1]
        {   
            NetMaker.member_declarator_list_return retval = new NetMaker.member_declarator_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal143 = null;
            NetMaker.member_declarator_return member_declarator142 = default(NetMaker.member_declarator_return);

            NetMaker.member_declarator_return member_declarator144 = default(NetMaker.member_declarator_return);


            CommonTree char_literal143_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1755:23: ( member_declarator ( ',' member_declarator )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1756:2: member_declarator ( ',' member_declarator )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_declarator_in_member_declarator_list2238);
                	member_declarator142 = member_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, member_declarator142.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1756:21: ( ',' member_declarator )*
                	do 
                	{
                	    int alt53 = 2;
                	    int LA53_0 = input.LA(1);

                	    if ( (LA53_0 == COMMA) )
                	    {
                	        int LA53_1 = input.LA(2);

                	        if ( (LA53_1 == OBJECT || LA53_1 == LONGNUMBER || (LA53_1 >= BOOL && LA53_1 <= PTR) || (LA53_1 >= ELIF && LA53_1 <= UNDEF) || LA53_1 == 195 || LA53_1 == 221 || (LA53_1 >= 224 && LA53_1 <= 239) || (LA53_1 >= 241 && LA53_1 <= 244) || (LA53_1 >= 247 && LA53_1 <= 254) || LA53_1 == 256 || (LA53_1 >= 263 && LA53_1 <= 264) || (LA53_1 >= 274 && LA53_1 <= 277)) )
                	        {
                	            alt53 = 1;
                	        }


                	    }


                	    switch (alt53) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1756:22: ',' member_declarator
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal143=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_member_declarator_list2242); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal143_tree = (CommonTree)adaptor.DupNode(char_literal143);

                			    		adaptor.AddChild(root_0, char_literal143_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_member_declarator_in_member_declarator_list2244);
                			    	member_declarator144 = member_declarator();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, member_declarator144.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop53;
                	    }
                	} while (true);

                	loop53:
                		;	// Stops C# compiler whining that label 'loop53' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_declarator_list"

        public class member_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1757:1: member_declarator : qid ( '=' expression[ObjectType] )? ;
        public NetMaker.member_declarator_return member_declarator() // throws RecognitionException [1]
        {   
            NetMaker.member_declarator_return retval = new NetMaker.member_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal146 = null;
            NetMaker.qid_return qid145 = default(NetMaker.qid_return);

            NetMaker.expression_return expression147 = default(NetMaker.expression_return);


            CommonTree char_literal146_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1757:18: ( qid ( '=' expression[ObjectType] )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1758:2: qid ( '=' expression[ObjectType] )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_qid_in_member_declarator2256);
                	qid145 = qid();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, qid145.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1758:8: ( '=' expression[ObjectType] )?
                	int alt54 = 2;
                	int LA54_0 = input.LA(1);

                	if ( (LA54_0 == ASSIGN) )
                	{
                	    alt54 = 1;
                	}
                	switch (alt54) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1758:9: '=' expression[ObjectType]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal146=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_member_declarator2261); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal146_tree = (CommonTree)adaptor.DupNode(char_literal146);

                	        		adaptor.AddChild(root_0, char_literal146_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_member_declarator2265);
                	        	expression147 = expression(ObjectType);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, expression147.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_declarator"

        public class primary_or_array_creation_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public string rmId;
            public TypeRepTemplate typeofType;
            public string thedottedtext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "primary_or_array_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1759:1: primary_or_array_creation_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( ( array_creation_expression )=> array_creation_expression | primary_expression[$typeCtxt] );
        public NetMaker.primary_or_array_creation_expression_return primary_or_array_creation_expression(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.primary_or_array_creation_expression_return retval = new NetMaker.primary_or_array_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.array_creation_expression_return array_creation_expression148 = default(NetMaker.array_creation_expression_return);

            NetMaker.primary_expression_return primary_expression149 = default(NetMaker.primary_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1759:163: ( ( array_creation_expression )=> array_creation_expression | primary_expression[$typeCtxt] )
                int alt55 = 2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0 == NEW_ARRAY) && (synpred4_NetMaker()) )
                {
                    alt55 = 1;
                }
                else if ( ((LA55_0 >= POSTINC && LA55_0 <= POSTDEC) || (LA55_0 >= INDEX && LA55_0 <= APPLY) || LA55_0 == NEW || LA55_0 == NEW_ANON_OBJECT || (LA55_0 >= OBJECT && LA55_0 <= THIS) || (LA55_0 >= SUPER && LA55_0 <= LONGNUMBER) || (LA55_0 >= BOOL && LA55_0 <= PTR) || (LA55_0 >= ELIF && LA55_0 <= UNDEF) || LA55_0 == 195 || LA55_0 == 208 || (LA55_0 >= 214 && LA55_0 <= 219) || LA55_0 == 221 || (LA55_0 >= 224 && LA55_0 <= 239) || (LA55_0 >= 241 && LA55_0 <= 244) || (LA55_0 >= 247 && LA55_0 <= 254) || LA55_0 == 256 || (LA55_0 >= 263 && LA55_0 <= 264) || (LA55_0 >= 274 && LA55_0 <= 277)) )
                {
                    alt55 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d55s0 =
                        new NoViableAltException("", 55, 0, input);

                    throw nvae_d55s0;
                }
                switch (alt55) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1760:2: ( array_creation_expression )=> array_creation_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2287);
                        	array_creation_expression148 = array_creation_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, array_creation_expression148.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((array_creation_expression148 != null) ? array_creation_expression148.dotNetType : default(TypeRepTemplate)); retval.thedottedtext =  null; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1761:4: primary_expression[$typeCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_primary_expression_in_primary_or_array_creation_expression2294);
                        	primary_expression149 = primary_expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, primary_expression149.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((primary_expression149 != null) ? primary_expression149.dotNetType : default(TypeRepTemplate)); retval.rmId =  ((primary_expression149 != null) ? primary_expression149.rmId : default(string)); retval.typeofType =  ((primary_expression149 != null) ? primary_expression149.typeofType : default(TypeRepTemplate)); retval.thedottedtext =  ((primary_expression149 != null) ? primary_expression149.thedottedtext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "primary_or_array_creation_expression"

        public class array_creation_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "array_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1764:1: array_creation_expression returns [TypeRepTemplate dotNetType] : ^( NEW_ARRAY ( type ( '[' expression_list ']' ( rank_specifiers[$type.dotNetType] )? ( array_initializer )? | array_initializer ) | rank_specifier[null] array_initializer ) ) ;
        public NetMaker.array_creation_expression_return array_creation_expression() // throws RecognitionException [1]
        {   
            NetMaker.array_creation_expression_return retval = new NetMaker.array_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree NEW_ARRAY150 = null;
            CommonTree char_literal152 = null;
            CommonTree char_literal154 = null;
            NetMaker.type_return type151 = default(NetMaker.type_return);

            NetMaker.expression_list_return expression_list153 = default(NetMaker.expression_list_return);

            NetMaker.rank_specifiers_return rank_specifiers155 = default(NetMaker.rank_specifiers_return);

            NetMaker.array_initializer_return array_initializer156 = default(NetMaker.array_initializer_return);

            NetMaker.array_initializer_return array_initializer157 = default(NetMaker.array_initializer_return);

            NetMaker.rank_specifier_return rank_specifier158 = default(NetMaker.rank_specifier_return);

            NetMaker.array_initializer_return array_initializer159 = default(NetMaker.array_initializer_return);


            CommonTree NEW_ARRAY150_tree=null;
            CommonTree char_literal152_tree=null;
            CommonTree char_literal154_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1764:63: ( ^( NEW_ARRAY ( type ( '[' expression_list ']' ( rank_specifiers[$type.dotNetType] )? ( array_initializer )? | array_initializer ) | rank_specifier[null] array_initializer ) ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1765:2: ^( NEW_ARRAY ( type ( '[' expression_list ']' ( rank_specifiers[$type.dotNetType] )? ( array_initializer )? | array_initializer ) | rank_specifier[null] array_initializer ) )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	NEW_ARRAY150=(CommonTree)Match(input,NEW_ARRAY,FOLLOW_NEW_ARRAY_in_array_creation_expression2312); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{NEW_ARRAY150_tree = (CommonTree)adaptor.DupNode(NEW_ARRAY150);

                		root_1 = (CommonTree)adaptor.BecomeRoot(NEW_ARRAY150_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:3: ( type ( '[' expression_list ']' ( rank_specifiers[$type.dotNetType] )? ( array_initializer )? | array_initializer ) | rank_specifier[null] array_initializer )
                	int alt59 = 2;
                	int LA59_0 = input.LA(1);

                	if ( (LA59_0 == TYPE) )
                	{
                	    alt59 = 1;
                	}
                	else if ( (LA59_0 == OPEN_BRACKET) )
                	{
                	    alt59 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d59s0 =
                	        new NoViableAltException("", 59, 0, input);

                	    throw nvae_d59s0;
                	}
                	switch (alt59) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:4: type ( '[' expression_list ']' ( rank_specifiers[$type.dotNetType] )? ( array_initializer )? | array_initializer )
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_array_creation_expression2320);
                	        	type151 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, type151.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:11: ( '[' expression_list ']' ( rank_specifiers[$type.dotNetType] )? ( array_initializer )? | array_initializer )
                	        	int alt58 = 2;
                	        	int LA58_0 = input.LA(1);

                	        	if ( (LA58_0 == OPEN_BRACKET) )
                	        	{
                	        	    alt58 = 1;
                	        	}
                	        	else if ( (LA58_0 == OPEN_BRACE) )
                	        	{
                	        	    alt58 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d58s0 =
                	        	        new NoViableAltException("", 58, 0, input);

                	        	    throw nvae_d58s0;
                	        	}
                	        	switch (alt58) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:12: '[' expression_list ']' ( rank_specifiers[$type.dotNetType] )? ( array_initializer )?
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	char_literal152=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_array_creation_expression2325); if (state.failed) return retval;
                	        	        	if ( state.backtracking == 0 )
                	        	        	{char_literal152_tree = (CommonTree)adaptor.DupNode(char_literal152);

                	        	        		adaptor.AddChild(root_1, char_literal152_tree);
                	        	        	}
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_expression_list_in_array_creation_expression2329);
                	        	        	expression_list153 = expression_list();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_1, expression_list153.Tree);
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	char_literal154=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_array_creation_expression2333); if (state.failed) return retval;
                	        	        	if ( state.backtracking == 0 )
                	        	        	{char_literal154_tree = (CommonTree)adaptor.DupNode(char_literal154);

                	        	        		adaptor.AddChild(root_1, char_literal154_tree);
                	        	        	}
                	        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:40: ( rank_specifiers[$type.dotNetType] )?
                	        	        	int alt56 = 2;
                	        	        	int LA56_0 = input.LA(1);

                	        	        	if ( (LA56_0 == OPEN_BRACKET) )
                	        	        	{
                	        	        	    alt56 = 1;
                	        	        	}
                	        	        	switch (alt56) 
                	        	        	{
                	        	        	    case 1 :
                	        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:40: rank_specifiers[$type.dotNetType]
                	        	        	        {
                	        	        	        	_last = (CommonTree)input.LT(1);
                	        	        	        	PushFollow(FOLLOW_rank_specifiers_in_array_creation_expression2335);
                	        	        	        	rank_specifiers155 = rank_specifiers(((type151 != null) ? type151.dotNetType : default(TypeRepTemplate)));
                	        	        	        	state._fsp--;
                	        	        	        	if (state.failed) return retval;
                	        	        	        	if ( (state.backtracking==0) ) 
                	        	        	        	adaptor.AddChild(root_1, rank_specifiers155.Tree);

                	        	        	        	if ( (state.backtracking==0) ) {
                	        	        	        	}
                	        	        	        }
                	        	        	        break;

                	        	        	}

                	        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:77: ( array_initializer )?
                	        	        	int alt57 = 2;
                	        	        	int LA57_0 = input.LA(1);

                	        	        	if ( (LA57_0 == OPEN_BRACE) )
                	        	        	{
                	        	        	    alt57 = 1;
                	        	        	}
                	        	        	switch (alt57) 
                	        	        	{
                	        	        	    case 1 :
                	        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1766:77: array_initializer
                	        	        	        {
                	        	        	        	_last = (CommonTree)input.LT(1);
                	        	        	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression2341);
                	        	        	        	array_initializer156 = array_initializer();
                	        	        	        	state._fsp--;
                	        	        	        	if (state.failed) return retval;
                	        	        	        	if ( (state.backtracking==0) ) 
                	        	        	        	adaptor.AddChild(root_1, array_initializer156.Tree);

                	        	        	        	if ( (state.backtracking==0) ) {
                	        	        	        	}
                	        	        	        }
                	        	        	        break;

                	        	        	}


                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1767:7: array_initializer
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression2351);
                	        	        	array_initializer157 = array_initializer();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_1, array_initializer157.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   retval.dotNetType =  ((type151 != null) ? type151.dotNetType : default(TypeRepTemplate)); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1769:5: rank_specifier[null] array_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_rank_specifier_in_array_creation_expression2367);
                	        	rank_specifier158 = rank_specifier(null);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, rank_specifier158.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression2370);
                	        	array_initializer159 = array_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, array_initializer159.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "array_creation_expression"

        public class array_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "array_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1772:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
        public NetMaker.array_initializer_return array_initializer() // throws RecognitionException [1]
        {   
            NetMaker.array_initializer_return retval = new NetMaker.array_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal160 = null;
            CommonTree char_literal162 = null;
            CommonTree char_literal163 = null;
            NetMaker.variable_initializer_list_return variable_initializer_list161 = default(NetMaker.variable_initializer_list_return);


            CommonTree char_literal160_tree=null;
            CommonTree char_literal162_tree=null;
            CommonTree char_literal163_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1772:18: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1773:2: '{' ( variable_initializer_list )? ( ',' )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal160=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer2390); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal160_tree = (CommonTree)adaptor.DupNode(char_literal160);

                		adaptor.AddChild(root_0, char_literal160_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1773:8: ( variable_initializer_list )?
                	int alt60 = 2;
                	int LA60_0 = input.LA(1);

                	if ( ((LA60_0 >= PARAMS && LA60_0 <= PARAMS_TYPELESS) || (LA60_0 >= MONOPLUS && LA60_0 <= APPLY) || (LA60_0 >= NEW && LA60_0 <= NEW_ARRAY) || LA60_0 == NEW_ANON_OBJECT || (LA60_0 >= OBJECT && LA60_0 <= THIS) || LA60_0 == OPEN_BRACE || LA60_0 == NULL_COALESCE || (LA60_0 >= COND_EXPR && LA60_0 <= LEFT_SHIFT) || (LA60_0 >= SUPER && LA60_0 <= LAMBDA) || LA60_0 == CAST_EXPR || (LA60_0 >= BOOL && LA60_0 <= GT) || (LA60_0 >= ELIF && LA60_0 <= UNDEF) || LA60_0 == 195 || LA60_0 == 208 || (LA60_0 >= 214 && LA60_0 <= 219) || LA60_0 == 221 || (LA60_0 >= 224 && LA60_0 <= 239) || (LA60_0 >= 241 && LA60_0 <= 244) || (LA60_0 >= 247 && LA60_0 <= 254) || LA60_0 == 256 || (LA60_0 >= 263 && LA60_0 <= 264) || (LA60_0 >= 274 && LA60_0 <= 277)) )
                	{
                	    alt60 = 1;
                	}
                	switch (alt60) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1773:8: variable_initializer_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variable_initializer_list_in_array_initializer2394);
                	        	variable_initializer_list161 = variable_initializer_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, variable_initializer_list161.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1773:37: ( ',' )?
                	int alt61 = 2;
                	int LA61_0 = input.LA(1);

                	if ( (LA61_0 == COMMA) )
                	{
                	    alt61 = 1;
                	}
                	switch (alt61) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1773:37: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal162=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_array_initializer2399); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal162_tree = (CommonTree)adaptor.DupNode(char_literal162);

                	        		adaptor.AddChild(root_0, char_literal162_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal163=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer2404); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal163_tree = (CommonTree)adaptor.DupNode(char_literal163);

                		adaptor.AddChild(root_0, char_literal163_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "array_initializer"

        public class variable_initializer_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_initializer_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1774:1: variable_initializer_list : variable_initializer[ObjectType] ( ',' variable_initializer[ObjectType] )* ;
        public NetMaker.variable_initializer_list_return variable_initializer_list() // throws RecognitionException [1]
        {   
            NetMaker.variable_initializer_list_return retval = new NetMaker.variable_initializer_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal165 = null;
            NetMaker.variable_initializer_return variable_initializer164 = default(NetMaker.variable_initializer_return);

            NetMaker.variable_initializer_return variable_initializer166 = default(NetMaker.variable_initializer_return);


            CommonTree char_literal165_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1774:26: ( variable_initializer[ObjectType] ( ',' variable_initializer[ObjectType] )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1775:2: variable_initializer[ObjectType] ( ',' variable_initializer[ObjectType] )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list2412);
                	variable_initializer164 = variable_initializer(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, variable_initializer164.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1775:35: ( ',' variable_initializer[ObjectType] )*
                	do 
                	{
                	    int alt62 = 2;
                	    int LA62_0 = input.LA(1);

                	    if ( (LA62_0 == COMMA) )
                	    {
                	        int LA62_1 = input.LA(2);

                	        if ( ((LA62_1 >= PARAMS && LA62_1 <= PARAMS_TYPELESS) || (LA62_1 >= MONOPLUS && LA62_1 <= APPLY) || (LA62_1 >= NEW && LA62_1 <= NEW_ARRAY) || LA62_1 == NEW_ANON_OBJECT || (LA62_1 >= OBJECT && LA62_1 <= THIS) || LA62_1 == OPEN_BRACE || LA62_1 == NULL_COALESCE || (LA62_1 >= COND_EXPR && LA62_1 <= LEFT_SHIFT) || (LA62_1 >= SUPER && LA62_1 <= LAMBDA) || LA62_1 == CAST_EXPR || (LA62_1 >= BOOL && LA62_1 <= GT) || (LA62_1 >= ELIF && LA62_1 <= UNDEF) || LA62_1 == 195 || LA62_1 == 208 || (LA62_1 >= 214 && LA62_1 <= 219) || LA62_1 == 221 || (LA62_1 >= 224 && LA62_1 <= 239) || (LA62_1 >= 241 && LA62_1 <= 244) || (LA62_1 >= 247 && LA62_1 <= 254) || LA62_1 == 256 || (LA62_1 >= 263 && LA62_1 <= 264) || (LA62_1 >= 274 && LA62_1 <= 277)) )
                	        {
                	            alt62 = 1;
                	        }


                	    }


                	    switch (alt62) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1775:36: ',' variable_initializer[ObjectType]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal165=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_variable_initializer_list2416); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal165_tree = (CommonTree)adaptor.DupNode(char_literal165);

                			    		adaptor.AddChild(root_0, char_literal165_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list2418);
                			    	variable_initializer166 = variable_initializer(ObjectType);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, variable_initializer166.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop62;
                	    }
                	} while (true);

                	loop62:
                		;	// Stops C# compiler whining that label 'loop62' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_initializer_list"

        public class variable_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1776:1: variable_initializer[TypeRepTemplate typeCtxt] : ( expression[$typeCtxt] | array_initializer );
        public NetMaker.variable_initializer_return variable_initializer(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.variable_initializer_return retval = new NetMaker.variable_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression167 = default(NetMaker.expression_return);

            NetMaker.array_initializer_return array_initializer168 = default(NetMaker.array_initializer_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1776:47: ( expression[$typeCtxt] | array_initializer )
                int alt63 = 2;
                int LA63_0 = input.LA(1);

                if ( ((LA63_0 >= PARAMS && LA63_0 <= PARAMS_TYPELESS) || (LA63_0 >= MONOPLUS && LA63_0 <= APPLY) || (LA63_0 >= NEW && LA63_0 <= NEW_ARRAY) || LA63_0 == NEW_ANON_OBJECT || (LA63_0 >= OBJECT && LA63_0 <= THIS) || LA63_0 == NULL_COALESCE || (LA63_0 >= COND_EXPR && LA63_0 <= LEFT_SHIFT) || (LA63_0 >= SUPER && LA63_0 <= LAMBDA) || LA63_0 == CAST_EXPR || (LA63_0 >= BOOL && LA63_0 <= GT) || (LA63_0 >= ELIF && LA63_0 <= UNDEF) || LA63_0 == 195 || LA63_0 == 208 || (LA63_0 >= 214 && LA63_0 <= 219) || LA63_0 == 221 || (LA63_0 >= 224 && LA63_0 <= 239) || (LA63_0 >= 241 && LA63_0 <= 244) || (LA63_0 >= 247 && LA63_0 <= 254) || LA63_0 == 256 || (LA63_0 >= 263 && LA63_0 <= 264) || (LA63_0 >= 274 && LA63_0 <= 277)) )
                {
                    alt63 = 1;
                }
                else if ( (LA63_0 == OPEN_BRACE) )
                {
                    alt63 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d63s0 =
                        new NoViableAltException("", 63, 0, input);

                    throw nvae_d63s0;
                }
                switch (alt63) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1777:2: expression[$typeCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_variable_initializer2430);
                        	expression167 = expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression167.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1777:26: array_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_array_initializer_in_variable_initializer2435);
                        	array_initializer168 = array_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, array_initializer168.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_initializer"

        public class sizeof_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "sizeof_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1778:1: sizeof_expression : ^( 'sizeof' unmanaged_type ) ;
        public NetMaker.sizeof_expression_return sizeof_expression() // throws RecognitionException [1]
        {   
            NetMaker.sizeof_expression_return retval = new NetMaker.sizeof_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal169 = null;
            NetMaker.unmanaged_type_return unmanaged_type170 = default(NetMaker.unmanaged_type_return);


            CommonTree string_literal169_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1778:18: ( ^( 'sizeof' unmanaged_type ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1779:2: ^( 'sizeof' unmanaged_type )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal169=(CommonTree)Match(input,214,FOLLOW_214_in_sizeof_expression2444); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal169_tree = (CommonTree)adaptor.DupNode(string_literal169);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal169_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unmanaged_type_in_sizeof_expression2447);
                	unmanaged_type170 = unmanaged_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, unmanaged_type170.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "sizeof_expression"

        public class checked_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "checked_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1780:1: checked_expression : ^( 'checked' expression[ObjectType] ) ;
        public NetMaker.checked_expression_return checked_expression() // throws RecognitionException [1]
        {   
            NetMaker.checked_expression_return retval = new NetMaker.checked_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal171 = null;
            NetMaker.expression_return expression172 = default(NetMaker.expression_return);


            CommonTree string_literal171_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1780:19: ( ^( 'checked' expression[ObjectType] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1781:2: ^( 'checked' expression[ObjectType] )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal171=(CommonTree)Match(input,215,FOLLOW_215_in_checked_expression2458); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal171_tree = (CommonTree)adaptor.DupNode(string_literal171);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal171_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_checked_expression2460);
                	expression172 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, expression172.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "checked_expression"

        public class unchecked_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unchecked_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1782:1: unchecked_expression : ^( 'unchecked' expression[ObjectType] ) ;
        public NetMaker.unchecked_expression_return unchecked_expression() // throws RecognitionException [1]
        {   
            NetMaker.unchecked_expression_return retval = new NetMaker.unchecked_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal173 = null;
            NetMaker.expression_return expression174 = default(NetMaker.expression_return);


            CommonTree string_literal173_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1782:21: ( ^( 'unchecked' expression[ObjectType] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1783:2: ^( 'unchecked' expression[ObjectType] )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal173=(CommonTree)Match(input,216,FOLLOW_216_in_unchecked_expression2473); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal173_tree = (CommonTree)adaptor.DupNode(string_literal173);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal173_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_unchecked_expression2475);
                	expression174 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, expression174.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unchecked_expression"

        public class default_value_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "default_value_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1784:1: default_value_expression : ^( 'default' type ) ;
        public NetMaker.default_value_expression_return default_value_expression() // throws RecognitionException [1]
        {   
            NetMaker.default_value_expression_return retval = new NetMaker.default_value_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal175 = null;
            NetMaker.type_return type176 = default(NetMaker.type_return);


            CommonTree string_literal175_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1784:25: ( ^( 'default' type ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1785:2: ^( 'default' type )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal175=(CommonTree)Match(input,217,FOLLOW_217_in_default_value_expression2488); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal175_tree = (CommonTree)adaptor.DupNode(string_literal175);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal175_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_default_value_expression2490);
                	type176 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, type176.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "default_value_expression"

        public class object_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "object_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1788:1: object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
        public NetMaker.object_creation_expression_return object_creation_expression() // throws RecognitionException [1]
        {   
            NetMaker.object_creation_expression_return retval = new NetMaker.object_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal178 = null;
            CommonTree char_literal180 = null;
            NetMaker.type_return type177 = default(NetMaker.type_return);

            NetMaker.argument_list_return argument_list179 = default(NetMaker.argument_list_return);

            NetMaker.object_or_collection_initializer_return object_or_collection_initializer181 = default(NetMaker.object_or_collection_initializer_return);

            NetMaker.object_or_collection_initializer_return object_or_collection_initializer182 = default(NetMaker.object_or_collection_initializer_return);


            CommonTree char_literal178_tree=null;
            CommonTree char_literal180_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1788:27: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1790:2: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_object_creation_expression2507);
                	type177 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type177.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1791:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
                	int alt66 = 2;
                	int LA66_0 = input.LA(1);

                	if ( (LA66_0 == LPAREN) )
                	{
                	    alt66 = 1;
                	}
                	else if ( (LA66_0 == OPEN_BRACE) )
                	{
                	    alt66 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d66s0 =
                	        new NoViableAltException("", 66, 0, input);

                	    throw nvae_d66s0;
                	}
                	switch (alt66) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1791:5: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal178=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_object_creation_expression2516); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal178_tree = (CommonTree)adaptor.DupNode(char_literal178);

                	        		adaptor.AddChild(root_0, char_literal178_tree);
                	        	}
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1791:11: ( argument_list )?
                	        	int alt64 = 2;
                	        	int LA64_0 = input.LA(1);

                	        	if ( (LA64_0 == ARGS) )
                	        	{
                	        	    alt64 = 1;
                	        	}
                	        	switch (alt64) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1791:11: argument_list
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_argument_list_in_object_creation_expression2520);
                	        	        	argument_list179 = argument_list();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, argument_list179.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal180=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_object_creation_expression2525); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal180_tree = (CommonTree)adaptor.DupNode(char_literal180);

                	        		adaptor.AddChild(root_0, char_literal180_tree);
                	        	}
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1791:34: ( object_or_collection_initializer )?
                	        	int alt65 = 2;
                	        	int LA65_0 = input.LA(1);

                	        	if ( (LA65_0 == OPEN_BRACE) )
                	        	{
                	        	    alt65 = 1;
                	        	}
                	        	switch (alt65) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1791:34: object_or_collection_initializer
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2529);
                	        	        	object_or_collection_initializer181 = object_or_collection_initializer();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, object_or_collection_initializer181.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1792:7: object_or_collection_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2540);
                	        	object_or_collection_initializer182 = object_or_collection_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, object_or_collection_initializer182.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "object_creation_expression"

        public class object_or_collection_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "object_or_collection_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1794:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
        public NetMaker.object_or_collection_initializer_return object_or_collection_initializer() // throws RecognitionException [1]
        {   
            NetMaker.object_or_collection_initializer_return retval = new NetMaker.object_or_collection_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal183 = null;
            NetMaker.object_initializer_return object_initializer184 = default(NetMaker.object_initializer_return);

            NetMaker.collection_initializer_return collection_initializer185 = default(NetMaker.collection_initializer_return);


            CommonTree char_literal183_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1794:33: ( '{' ( object_initializer | collection_initializer ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1795:2: '{' ( object_initializer | collection_initializer )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal183=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_or_collection_initializer2552); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal183_tree = (CommonTree)adaptor.DupNode(char_literal183);

                		adaptor.AddChild(root_0, char_literal183_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1795:7: ( object_initializer | collection_initializer )
                	int alt67 = 2;
                	switch ( input.LA(1) ) 
                	{
                	case IDENTIFIER:
                		{
                	    int LA67_1 = input.LA(2);

                	    if ( (LA67_1 == CLOSE_BRACE || LA67_1 == LTHAN || LA67_1 == COMMA) )
                	    {
                	        alt67 = 2;
                	    }
                	    else if ( (LA67_1 == ASSIGN) )
                	    {
                	        alt67 = 1;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d67s1 =
                	            new NoViableAltException("", 67, 1, input);

                	        throw nvae_d67s1;
                	    }
                	    }
                	    break;
                	case 225:
                		{
                	    int LA67_2 = input.LA(2);

                	    if ( (LA67_2 == CLOSE_BRACE || LA67_2 == LTHAN || (LA67_2 >= COMMA && LA67_2 <= TYPE) || LA67_2 == IDENTIFIER || (LA67_2 >= ELIF && LA67_2 <= UNDEF) || LA67_2 == 195 || LA67_2 == 221 || (LA67_2 >= 224 && LA67_2 <= 239) || (LA67_2 >= 241 && LA67_2 <= 244) || (LA67_2 >= 247 && LA67_2 <= 250) || LA67_2 == 256 || (LA67_2 >= 263 && LA67_2 <= 264) || LA67_2 == 274 || LA67_2 == 277) )
                	    {
                	        alt67 = 2;
                	    }
                	    else if ( (LA67_2 == ASSIGN) )
                	    {
                	        alt67 = 1;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d67s2 =
                	            new NoViableAltException("", 67, 2, input);

                	        throw nvae_d67s2;
                	    }
                	    }
                	    break;
                	case CLOSE_BRACE:
                	case COMMA:
                		{
                	    alt67 = 1;
                	    }
                	    break;
                	case PARAMS:
                	case PARAMS_TYPELESS:
                	case MONOPLUS:
                	case MONOMINUS:
                	case MONONOT:
                	case MONOTWIDDLE:
                	case MONOSTAR:
                	case ADDRESSOF:
                	case PREINC:
                	case PREDEC:
                	case POSTINC:
                	case POSTDEC:
                	case PARENS:
                	case INDEX:
                	case APPLY:
                	case NEW:
                	case NEW_ARRAY:
                	case NEW_ANON_OBJECT:
                	case OBJECT:
                	case THIS:
                	case OPEN_BRACE:
                	case NULL_COALESCE:
                	case COND_EXPR:
                	case RIGHT_SHIFT:
                	case INSTANCEOF:
                	case LOG_OR:
                	case LOG_AND:
                	case BIT_OR:
                	case BIT_XOR:
                	case BIT_AND:
                	case NOT_EQUAL:
                	case EQUAL:
                	case LTHAN:
                	case LTE:
                	case GTE:
                	case LEFT_SHIFT:
                	case SUPER:
                	case LONGNUMBER:
                	case PLUS:
                	case MINUS:
                	case DIV:
                	case MOD:
                	case STAR:
                	case LAMBDA:
                	case CAST_EXPR:
                	case BOOL:
                	case BYTE:
                	case CHAR:
                	case SHORT:
                	case INT:
                	case LONG:
                	case FLOAT:
                	case DOUBLE:
                	case Real_literal:
                	case NUMBER:
                	case Hex_number:
                	case Character_literal:
                	case STRINGLITERAL:
                	case Verbatim_string_literal:
                	case TRUE:
                	case FALSE:
                	case NULL:
                	case DOT:
                	case PTR:
                	case GT:
                	case 208:
                	case 214:
                	case 215:
                	case 216:
                	case 217:
                	case 218:
                	case 219:
                	case 251:
                	case 252:
                	case 253:
                	case 254:
                	case 275:
                	case 276:
                		{
                	    alt67 = 2;
                	    }
                	    break;
                	case ELIF:
                	case ENDIF:
                	case DEFINE:
                	case UNDEF:
                	case 195:
                	case 221:
                	case 224:
                	case 226:
                	case 227:
                	case 228:
                	case 229:
                	case 230:
                	case 231:
                	case 232:
                	case 233:
                	case 234:
                	case 235:
                	case 236:
                	case 237:
                	case 238:
                	case 239:
                	case 241:
                	case 242:
                	case 243:
                	case 244:
                	case 247:
                	case 248:
                	case 249:
                	case 250:
                	case 256:
                	case 263:
                	case 264:
                	case 274:
                	case 277:
                		{
                	    int LA67_5 = input.LA(2);

                	    if ( (LA67_5 == ASSIGN) )
                	    {
                	        alt67 = 1;
                	    }
                	    else if ( (LA67_5 == CLOSE_BRACE || LA67_5 == LTHAN || LA67_5 == COMMA) )
                	    {
                	        alt67 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d67s5 =
                	            new NoViableAltException("", 67, 5, input);

                	        throw nvae_d67s5;
                	    }
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d67s0 =
                		        new NoViableAltException("", 67, 0, input);

                		    throw nvae_d67s0;
                	}

                	switch (alt67) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1795:8: object_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer2556);
                	        	object_initializer184 = object_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, object_initializer184.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1796:5: collection_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer2563);
                	        	collection_initializer185 = collection_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, collection_initializer185.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "object_or_collection_initializer"

        public class collection_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "collection_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1797:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
        public NetMaker.collection_initializer_return collection_initializer() // throws RecognitionException [1]
        {   
            NetMaker.collection_initializer_return retval = new NetMaker.collection_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal187 = null;
            CommonTree char_literal188 = null;
            NetMaker.element_initializer_list_return element_initializer_list186 = default(NetMaker.element_initializer_list_return);


            CommonTree char_literal187_tree=null;
            CommonTree char_literal188_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1797:23: ( element_initializer_list ( ',' )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1798:2: element_initializer_list ( ',' )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_element_initializer_list_in_collection_initializer2573);
                	element_initializer_list186 = element_initializer_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, element_initializer_list186.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1798:29: ( ',' )?
                	int alt68 = 2;
                	int LA68_0 = input.LA(1);

                	if ( (LA68_0 == COMMA) )
                	{
                	    alt68 = 1;
                	}
                	switch (alt68) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1798:29: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal187=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_collection_initializer2577); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal187_tree = (CommonTree)adaptor.DupNode(char_literal187);

                	        		adaptor.AddChild(root_0, char_literal187_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal188=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection_initializer2582); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal188_tree = (CommonTree)adaptor.DupNode(char_literal188);

                		adaptor.AddChild(root_0, char_literal188_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "collection_initializer"

        public class element_initializer_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "element_initializer_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1799:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
        public NetMaker.element_initializer_list_return element_initializer_list() // throws RecognitionException [1]
        {   
            NetMaker.element_initializer_list_return retval = new NetMaker.element_initializer_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal190 = null;
            NetMaker.element_initializer_return element_initializer189 = default(NetMaker.element_initializer_return);

            NetMaker.element_initializer_return element_initializer191 = default(NetMaker.element_initializer_return);


            CommonTree char_literal190_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1799:25: ( element_initializer ( ',' element_initializer )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1800:2: element_initializer ( ',' element_initializer )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_element_initializer_in_element_initializer_list2591);
                	element_initializer189 = element_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, element_initializer189.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1800:23: ( ',' element_initializer )*
                	do 
                	{
                	    int alt69 = 2;
                	    int LA69_0 = input.LA(1);

                	    if ( (LA69_0 == COMMA) )
                	    {
                	        int LA69_1 = input.LA(2);

                	        if ( ((LA69_1 >= PARAMS && LA69_1 <= PARAMS_TYPELESS) || (LA69_1 >= MONOPLUS && LA69_1 <= APPLY) || (LA69_1 >= NEW && LA69_1 <= NEW_ARRAY) || LA69_1 == NEW_ANON_OBJECT || (LA69_1 >= OBJECT && LA69_1 <= THIS) || LA69_1 == OPEN_BRACE || LA69_1 == NULL_COALESCE || (LA69_1 >= COND_EXPR && LA69_1 <= LEFT_SHIFT) || (LA69_1 >= SUPER && LA69_1 <= LAMBDA) || LA69_1 == CAST_EXPR || (LA69_1 >= BOOL && LA69_1 <= GT) || (LA69_1 >= ELIF && LA69_1 <= UNDEF) || LA69_1 == 195 || LA69_1 == 208 || (LA69_1 >= 214 && LA69_1 <= 219) || LA69_1 == 221 || (LA69_1 >= 224 && LA69_1 <= 239) || (LA69_1 >= 241 && LA69_1 <= 244) || (LA69_1 >= 247 && LA69_1 <= 254) || LA69_1 == 256 || (LA69_1 >= 263 && LA69_1 <= 264) || (LA69_1 >= 274 && LA69_1 <= 277)) )
                	        {
                	            alt69 = 1;
                	        }


                	    }


                	    switch (alt69) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1800:24: ',' element_initializer
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal190=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_element_initializer_list2595); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal190_tree = (CommonTree)adaptor.DupNode(char_literal190);

                			    		adaptor.AddChild(root_0, char_literal190_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_element_initializer_in_element_initializer_list2597);
                			    	element_initializer191 = element_initializer();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, element_initializer191.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop69;
                	    }
                	} while (true);

                	loop69:
                		;	// Stops C# compiler whining that label 'loop69' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "element_initializer_list"

        public class element_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "element_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1801:1: element_initializer : ( non_assignment_expression[ObjectType] | '{' expression_list '}' );
        public NetMaker.element_initializer_return element_initializer() // throws RecognitionException [1]
        {   
            NetMaker.element_initializer_return retval = new NetMaker.element_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal193 = null;
            CommonTree char_literal195 = null;
            NetMaker.non_assignment_expression_return non_assignment_expression192 = default(NetMaker.non_assignment_expression_return);

            NetMaker.expression_list_return expression_list194 = default(NetMaker.expression_list_return);


            CommonTree char_literal193_tree=null;
            CommonTree char_literal195_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1801:20: ( non_assignment_expression[ObjectType] | '{' expression_list '}' )
                int alt70 = 2;
                int LA70_0 = input.LA(1);

                if ( ((LA70_0 >= PARAMS && LA70_0 <= PARAMS_TYPELESS) || (LA70_0 >= MONOPLUS && LA70_0 <= APPLY) || (LA70_0 >= NEW && LA70_0 <= NEW_ARRAY) || LA70_0 == NEW_ANON_OBJECT || (LA70_0 >= OBJECT && LA70_0 <= THIS) || LA70_0 == NULL_COALESCE || (LA70_0 >= COND_EXPR && LA70_0 <= LEFT_SHIFT) || (LA70_0 >= SUPER && LA70_0 <= LAMBDA) || LA70_0 == CAST_EXPR || (LA70_0 >= BOOL && LA70_0 <= GT) || (LA70_0 >= ELIF && LA70_0 <= UNDEF) || LA70_0 == 195 || LA70_0 == 208 || (LA70_0 >= 214 && LA70_0 <= 219) || LA70_0 == 221 || (LA70_0 >= 224 && LA70_0 <= 239) || (LA70_0 >= 241 && LA70_0 <= 244) || (LA70_0 >= 247 && LA70_0 <= 254) || LA70_0 == 256 || (LA70_0 >= 263 && LA70_0 <= 264) || (LA70_0 >= 274 && LA70_0 <= 277)) )
                {
                    alt70 = 1;
                }
                else if ( (LA70_0 == OPEN_BRACE) )
                {
                    alt70 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d70s0 =
                        new NoViableAltException("", 70, 0, input);

                    throw nvae_d70s0;
                }
                switch (alt70) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1802:2: non_assignment_expression[ObjectType]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_element_initializer2608);
                        	non_assignment_expression192 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, non_assignment_expression192.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1803:4: '{' expression_list '}'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal193=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_element_initializer2615); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal193_tree = (CommonTree)adaptor.DupNode(char_literal193);

                        		adaptor.AddChild(root_0, char_literal193_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_list_in_element_initializer2619);
                        	expression_list194 = expression_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression_list194.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	char_literal195=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_element_initializer2623); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal195_tree = (CommonTree)adaptor.DupNode(char_literal195);

                        		adaptor.AddChild(root_0, char_literal195_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "element_initializer"

        public class object_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "object_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1810:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
        public NetMaker.object_initializer_return object_initializer() // throws RecognitionException [1]
        {   
            NetMaker.object_initializer_return retval = new NetMaker.object_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal197 = null;
            CommonTree char_literal198 = null;
            NetMaker.member_initializer_list_return member_initializer_list196 = default(NetMaker.member_initializer_list_return);


            CommonTree char_literal197_tree=null;
            CommonTree char_literal198_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1810:19: ( ( member_initializer_list )? ( ',' )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1811:2: ( member_initializer_list )? ( ',' )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1811:2: ( member_initializer_list )?
                	int alt71 = 2;
                	int LA71_0 = input.LA(1);

                	if ( (LA71_0 == IDENTIFIER || (LA71_0 >= ELIF && LA71_0 <= UNDEF) || LA71_0 == 195 || LA71_0 == 221 || (LA71_0 >= 224 && LA71_0 <= 239) || (LA71_0 >= 241 && LA71_0 <= 244) || (LA71_0 >= 247 && LA71_0 <= 250) || LA71_0 == 256 || (LA71_0 >= 263 && LA71_0 <= 264) || LA71_0 == 274 || LA71_0 == 277) )
                	{
                	    alt71 = 1;
                	}
                	switch (alt71) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1811:2: member_initializer_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_member_initializer_list_in_object_initializer2638);
                	        	member_initializer_list196 = member_initializer_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, member_initializer_list196.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1811:29: ( ',' )?
                	int alt72 = 2;
                	int LA72_0 = input.LA(1);

                	if ( (LA72_0 == COMMA) )
                	{
                	    alt72 = 1;
                	}
                	switch (alt72) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1811:29: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal197=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_object_initializer2643); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal197_tree = (CommonTree)adaptor.DupNode(char_literal197);

                	        		adaptor.AddChild(root_0, char_literal197_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal198=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer2648); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal198_tree = (CommonTree)adaptor.DupNode(char_literal198);

                		adaptor.AddChild(root_0, char_literal198_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "object_initializer"

        public class member_initializer_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_initializer_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1812:1: member_initializer_list : member_initializer ( ',' member_initializer )* ;
        public NetMaker.member_initializer_list_return member_initializer_list() // throws RecognitionException [1]
        {   
            NetMaker.member_initializer_list_return retval = new NetMaker.member_initializer_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal200 = null;
            NetMaker.member_initializer_return member_initializer199 = default(NetMaker.member_initializer_return);

            NetMaker.member_initializer_return member_initializer201 = default(NetMaker.member_initializer_return);


            CommonTree char_literal200_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1812:24: ( member_initializer ( ',' member_initializer )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1813:2: member_initializer ( ',' member_initializer )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_initializer_in_member_initializer_list2657);
                	member_initializer199 = member_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, member_initializer199.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1813:22: ( ',' member_initializer )*
                	do 
                	{
                	    int alt73 = 2;
                	    int LA73_0 = input.LA(1);

                	    if ( (LA73_0 == COMMA) )
                	    {
                	        int LA73_1 = input.LA(2);

                	        if ( (LA73_1 == IDENTIFIER || (LA73_1 >= ELIF && LA73_1 <= UNDEF) || LA73_1 == 195 || LA73_1 == 221 || (LA73_1 >= 224 && LA73_1 <= 239) || (LA73_1 >= 241 && LA73_1 <= 244) || (LA73_1 >= 247 && LA73_1 <= 250) || LA73_1 == 256 || (LA73_1 >= 263 && LA73_1 <= 264) || LA73_1 == 274 || LA73_1 == 277) )
                	        {
                	            alt73 = 1;
                	        }


                	    }


                	    switch (alt73) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1813:23: ',' member_initializer
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal200=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_member_initializer_list2661); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal200_tree = (CommonTree)adaptor.DupNode(char_literal200);

                			    		adaptor.AddChild(root_0, char_literal200_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_member_initializer_in_member_initializer_list2663);
                			    	member_initializer201 = member_initializer();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, member_initializer201.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop73;
                	    }
                	} while (true);

                	loop73:
                		;	// Stops C# compiler whining that label 'loop73' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_initializer_list"

        public class member_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1814:1: member_initializer : identifier '=' initializer_value ;
        public NetMaker.member_initializer_return member_initializer() // throws RecognitionException [1]
        {   
            NetMaker.member_initializer_return retval = new NetMaker.member_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal203 = null;
            NetMaker.identifier_return identifier202 = default(NetMaker.identifier_return);

            NetMaker.initializer_value_return initializer_value204 = default(NetMaker.initializer_value_return);


            CommonTree char_literal203_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1814:19: ( identifier '=' initializer_value )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1815:2: identifier '=' initializer_value
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_member_initializer2674);
                	identifier202 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier202.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal203=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_member_initializer2678); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal203_tree = (CommonTree)adaptor.DupNode(char_literal203);

                		adaptor.AddChild(root_0, char_literal203_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_initializer_value_in_member_initializer2682);
                	initializer_value204 = initializer_value();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, initializer_value204.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_initializer"

        public class initializer_value_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "initializer_value"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1816:1: initializer_value : ( expression[ObjectType] | object_or_collection_initializer );
        public NetMaker.initializer_value_return initializer_value() // throws RecognitionException [1]
        {   
            NetMaker.initializer_value_return retval = new NetMaker.initializer_value_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression205 = default(NetMaker.expression_return);

            NetMaker.object_or_collection_initializer_return object_or_collection_initializer206 = default(NetMaker.object_or_collection_initializer_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1816:18: ( expression[ObjectType] | object_or_collection_initializer )
                int alt74 = 2;
                int LA74_0 = input.LA(1);

                if ( ((LA74_0 >= PARAMS && LA74_0 <= PARAMS_TYPELESS) || (LA74_0 >= MONOPLUS && LA74_0 <= APPLY) || (LA74_0 >= NEW && LA74_0 <= NEW_ARRAY) || LA74_0 == NEW_ANON_OBJECT || (LA74_0 >= OBJECT && LA74_0 <= THIS) || LA74_0 == NULL_COALESCE || (LA74_0 >= COND_EXPR && LA74_0 <= LEFT_SHIFT) || (LA74_0 >= SUPER && LA74_0 <= LAMBDA) || LA74_0 == CAST_EXPR || (LA74_0 >= BOOL && LA74_0 <= GT) || (LA74_0 >= ELIF && LA74_0 <= UNDEF) || LA74_0 == 195 || LA74_0 == 208 || (LA74_0 >= 214 && LA74_0 <= 219) || LA74_0 == 221 || (LA74_0 >= 224 && LA74_0 <= 239) || (LA74_0 >= 241 && LA74_0 <= 244) || (LA74_0 >= 247 && LA74_0 <= 254) || LA74_0 == 256 || (LA74_0 >= 263 && LA74_0 <= 264) || (LA74_0 >= 274 && LA74_0 <= 277)) )
                {
                    alt74 = 1;
                }
                else if ( (LA74_0 == OPEN_BRACE) )
                {
                    alt74 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d74s0 =
                        new NoViableAltException("", 74, 0, input);

                    throw nvae_d74s0;
                }
                switch (alt74) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1817:2: expression[ObjectType]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_initializer_value2691);
                        	expression205 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression205.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1818:4: object_or_collection_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value2698);
                        	object_or_collection_initializer206 = object_or_collection_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, object_or_collection_initializer206.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "initializer_value"

        public class typeof_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public TypeRepTemplate typeofType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "typeof_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1822:1: typeof_expression returns [TypeRepTemplate dotNetType, TypeRepTemplate typeofType] : ^( 'typeof' ( unbound_type_name | type | 'void' ) ) ;
        public NetMaker.typeof_expression_return typeof_expression() // throws RecognitionException [1]
        {   
            NetMaker.typeof_expression_return retval = new NetMaker.typeof_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal207 = null;
            CommonTree string_literal210 = null;
            NetMaker.unbound_type_name_return unbound_type_name208 = default(NetMaker.unbound_type_name_return);

            NetMaker.type_return type209 = default(NetMaker.type_return);


            CommonTree string_literal207_tree=null;
            CommonTree string_literal210_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1822:83: ( ^( 'typeof' ( unbound_type_name | type | 'void' ) ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1823:2: ^( 'typeof' ( unbound_type_name | type | 'void' ) )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal207=(CommonTree)Match(input,219,FOLLOW_219_in_typeof_expression2715); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal207_tree = (CommonTree)adaptor.DupNode(string_literal207);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal207_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1823:14: ( unbound_type_name | type | 'void' )
                	int alt75 = 3;
                	switch ( input.LA(1) ) 
                	{
                	case IDENTIFIER:
                	case ELIF:
                	case ENDIF:
                	case DEFINE:
                	case UNDEF:
                	case 195:
                	case 221:
                	case 224:
                	case 225:
                	case 226:
                	case 227:
                	case 228:
                	case 229:
                	case 230:
                	case 231:
                	case 232:
                	case 233:
                	case 234:
                	case 235:
                	case 236:
                	case 237:
                	case 238:
                	case 239:
                	case 241:
                	case 242:
                	case 243:
                	case 244:
                	case 247:
                	case 248:
                	case 249:
                	case 250:
                	case 256:
                	case 263:
                	case 264:
                	case 274:
                	case 277:
                		{
                	    alt75 = 1;
                	    }
                	    break;
                	case TYPE:
                		{
                	    alt75 = 2;
                	    }
                	    break;
                	case 206:
                		{
                	    alt75 = 3;
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d75s0 =
                		        new NoViableAltException("", 75, 0, input);

                		    throw nvae_d75s0;
                	}

                	switch (alt75) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1823:15: unbound_type_name
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_unbound_type_name_in_typeof_expression2719);
                	        	unbound_type_name208 = unbound_type_name();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, unbound_type_name208.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1823:35: type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_typeof_expression2723);
                	        	type209 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, type209.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   retval.typeofType =  ((type209 != null) ? type209.dotNetType : default(TypeRepTemplate)); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1823:78: 'void'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal210=(CommonTree)Match(input,206,FOLLOW_206_in_typeof_expression2729); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal210_tree = (CommonTree)adaptor.DupNode(string_literal210);

                	        		adaptor.AddChild(root_1, string_literal210_tree);
                	        	}
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   retval.typeofType =  findType("System.Void"); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}

                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  findType("System.Type"); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "typeof_expression"

        public class unbound_type_name_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unbound_type_name"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1828:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
        public NetMaker.unbound_type_name_return unbound_type_name() // throws RecognitionException [1]
        {   
            NetMaker.unbound_type_name_return retval = new NetMaker.unbound_type_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.unbound_type_name_start_return unbound_type_name_start211 = default(NetMaker.unbound_type_name_start_return);

            NetMaker.generic_dimension_specifier_return generic_dimension_specifier212 = default(NetMaker.generic_dimension_specifier_return);

            NetMaker.unbound_type_name_part_return unbound_type_name_part213 = default(NetMaker.unbound_type_name_part_return);

            NetMaker.unbound_type_name_part_return unbound_type_name_part214 = default(NetMaker.unbound_type_name_part_return);

            NetMaker.generic_dimension_specifier_return generic_dimension_specifier215 = default(NetMaker.generic_dimension_specifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1828:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1830:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unbound_type_name_start_in_unbound_type_name2750);
                	unbound_type_name_start211 = unbound_type_name_start();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, unbound_type_name_start211.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1831:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
                	do 
                	{
                	    int alt76 = 3;
                	    alt76 = dfa76.Predict(input);
                	    switch (alt76) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1831:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1831:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
                			    	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1831:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
                			    	{
                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2769);
                			    		generic_dimension_specifier212 = generic_dimension_specifier();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) 
                			    		adaptor.AddChild(root_0, generic_dimension_specifier212.Tree);
                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name2773);
                			    		unbound_type_name_part213 = unbound_type_name_part();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) 
                			    		adaptor.AddChild(root_0, unbound_type_name_part213.Tree);

                			    		if ( (state.backtracking==0) ) {
                			    		}
                			    	}


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;
                			case 2 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1832:5: unbound_type_name_part
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name2780);
                			    	unbound_type_name_part214 = unbound_type_name_part();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, unbound_type_name_part214.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop76;
                	    }
                	} while (true);

                	loop76:
                		;	// Stops C# compiler whining that label 'loop76' has no statements

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2790);
                	generic_dimension_specifier215 = generic_dimension_specifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, generic_dimension_specifier215.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unbound_type_name"

        public class unbound_type_name_start_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unbound_type_name_start"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1836:1: unbound_type_name_start : identifier ( '::' identifier )? ;
        public NetMaker.unbound_type_name_start_return unbound_type_name_start() // throws RecognitionException [1]
        {   
            NetMaker.unbound_type_name_start_return retval = new NetMaker.unbound_type_name_start_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal217 = null;
            NetMaker.identifier_return identifier216 = default(NetMaker.identifier_return);

            NetMaker.identifier_return identifier218 = default(NetMaker.identifier_return);


            CommonTree string_literal217_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1836:24: ( identifier ( '::' identifier )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1837:2: identifier ( '::' identifier )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_unbound_type_name_start2800);
                	identifier216 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier216.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1837:13: ( '::' identifier )?
                	int alt77 = 2;
                	int LA77_0 = input.LA(1);

                	if ( (LA77_0 == 208) )
                	{
                	    alt77 = 1;
                	}
                	switch (alt77) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1837:14: '::' identifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal217=(CommonTree)Match(input,208,FOLLOW_208_in_unbound_type_name_start2803); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal217_tree = (CommonTree)adaptor.DupNode(string_literal217);

                	        		adaptor.AddChild(root_0, string_literal217_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_unbound_type_name_start2805);
                	        	identifier218 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier218.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unbound_type_name_start"

        public class unbound_type_name_part_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unbound_type_name_part"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1838:1: unbound_type_name_part : '.' identifier ;
        public NetMaker.unbound_type_name_part_return unbound_type_name_part() // throws RecognitionException [1]
        {   
            NetMaker.unbound_type_name_part_return retval = new NetMaker.unbound_type_name_part_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal219 = null;
            NetMaker.identifier_return identifier220 = default(NetMaker.identifier_return);


            CommonTree char_literal219_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1838:23: ( '.' identifier )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1839:2: '.' identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal219=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_unbound_type_name_part2814); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal219_tree = (CommonTree)adaptor.DupNode(char_literal219);

                		adaptor.AddChild(root_0, char_literal219_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_unbound_type_name_part2818);
                	identifier220 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier220.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unbound_type_name_part"

        public class generic_dimension_specifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "generic_dimension_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1840:1: generic_dimension_specifier : '<' ( commas )? '>' ;
        public NetMaker.generic_dimension_specifier_return generic_dimension_specifier() // throws RecognitionException [1]
        {   
            NetMaker.generic_dimension_specifier_return retval = new NetMaker.generic_dimension_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal221 = null;
            CommonTree char_literal223 = null;
            NetMaker.commas_return commas222 = default(NetMaker.commas_return);


            CommonTree char_literal221_tree=null;
            CommonTree char_literal223_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1840:28: ( '<' ( commas )? '>' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1841:2: '<' ( commas )? '>'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal221=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_generic_dimension_specifier2826); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal221_tree = (CommonTree)adaptor.DupNode(char_literal221);

                		adaptor.AddChild(root_0, char_literal221_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1841:8: ( commas )?
                	int alt78 = 2;
                	int LA78_0 = input.LA(1);

                	if ( (LA78_0 == COMMA) )
                	{
                	    alt78 = 1;
                	}
                	switch (alt78) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1841:8: commas
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_commas_in_generic_dimension_specifier2830);
                	        	commas222 = commas();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, commas222.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal223=(CommonTree)Match(input,GT,FOLLOW_GT_in_generic_dimension_specifier2835); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal223_tree = (CommonTree)adaptor.DupNode(char_literal223);

                		adaptor.AddChild(root_0, char_literal223_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "generic_dimension_specifier"

        public class commas_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "commas"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1842:1: commas : ( ',' )+ ;
        public NetMaker.commas_return commas() // throws RecognitionException [1]
        {   
            NetMaker.commas_return retval = new NetMaker.commas_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal224 = null;

            CommonTree char_literal224_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1842:7: ( ( ',' )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1843:2: ( ',' )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1843:2: ( ',' )+
                	int cnt79 = 0;
                	do 
                	{
                	    int alt79 = 2;
                	    int LA79_0 = input.LA(1);

                	    if ( (LA79_0 == COMMA) )
                	    {
                	        alt79 = 1;
                	    }


                	    switch (alt79) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1843:2: ','
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal224=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_commas2844); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal224_tree = (CommonTree)adaptor.DupNode(char_literal224);

                			    		adaptor.AddChild(root_0, char_literal224_tree);
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt79 >= 1 ) goto loop79;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee79 =
                		                new EarlyExitException(79, input);
                		            throw eee79;
                	    }
                	    cnt79++;
                	} while (true);

                	loop79:
                		;	// Stops C# compiler whining that label 'loop79' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "commas"

        public class type_name_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public List<CommonTree> argTrees;
            public bool hasTyArgs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_name"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1850:1: type_name returns [TypeRepTemplate dotNetType, List<CommonTree> argTrees, bool hasTyArgs] : (tg= type_or_generic[\"\"] | ^( '::' ct= type_name ctg= type_or_generic[$ct.dotNetType == null ? \"::\" : $ct.dotNetType.TypeName+\"::\"] ) | ^(d= '.' dt= type_name dtg= type_or_generic[$dt.dotNetType == null ? \".\" : $dt.dotNetType.TypeName+\".\"] ) -> {!$dotNetType.IsUnknownType}? -> ^( $d $dt $dtg) );
        public NetMaker.type_name_return type_name() // throws RecognitionException [1]
        {   
            NetMaker.type_name_return retval = new NetMaker.type_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree d = null;
            CommonTree string_literal225 = null;
            NetMaker.type_or_generic_return tg = default(NetMaker.type_or_generic_return);

            NetMaker.type_name_return ct = default(NetMaker.type_name_return);

            NetMaker.type_or_generic_return ctg = default(NetMaker.type_or_generic_return);

            NetMaker.type_name_return dt = default(NetMaker.type_name_return);

            NetMaker.type_or_generic_return dtg = default(NetMaker.type_or_generic_return);


            CommonTree d_tree=null;
            CommonTree string_literal225_tree=null;
            RewriteRuleNodeStream stream_DOT = new RewriteRuleNodeStream(adaptor,"token DOT");
            RewriteRuleSubtreeStream stream_type_or_generic = new RewriteRuleSubtreeStream(adaptor,"rule type_or_generic");
            RewriteRuleSubtreeStream stream_type_name = new RewriteRuleSubtreeStream(adaptor,"rule type_name");

               retval.hasTyArgs =  false;
               Dictionary<string,CommonTree> tyMap = new Dictionary<string,CommonTree>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1858:1: (tg= type_or_generic[\"\"] | ^( '::' ct= type_name ctg= type_or_generic[$ct.dotNetType == null ? \"::\" : $ct.dotNetType.TypeName+\"::\"] ) | ^(d= '.' dt= type_name dtg= type_or_generic[$dt.dotNetType == null ? \".\" : $dt.dotNetType.TypeName+\".\"] ) -> {!$dotNetType.IsUnknownType}? -> ^( $d $dt $dtg) )
                int alt80 = 3;
                switch ( input.LA(1) ) 
                {
                case IDENTIFIER:
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    alt80 = 1;
                    }
                    break;
                case 208:
                	{
                    alt80 = 2;
                    }
                    break;
                case DOT:
                	{
                    alt80 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d80s0 =
                	        new NoViableAltException("", 80, 0, input);

                	    throw nvae_d80s0;
                }

                switch (alt80) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1859:3: tg= type_or_generic[\"\"]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_or_generic_in_type_name2878);
                        	tg = type_or_generic("");
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, tg.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((tg != null) ? tg.dotNetType : default(TypeRepTemplate)); retval.argTrees =  ((tg != null) ? tg.argTrees : default(List<CommonTree>)); retval.hasTyArgs =  ((tg != null) ? tg.hasTyArgs : default(bool)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1860:7: ^( '::' ct= type_name ctg= type_or_generic[$ct.dotNetType == null ? \"::\" : $ct.dotNetType.TypeName+\"::\"] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal225=(CommonTree)Match(input,208,FOLLOW_208_in_type_name2890); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal225_tree = (CommonTree)adaptor.DupNode(string_literal225);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal225_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_name_in_type_name2894);
                        	ct = type_name();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, ct.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_or_generic_in_type_name2898);
                        	ctg = type_or_generic(((ct != null) ? ct.dotNetType : default(TypeRepTemplate)) == null ? "::" : ((ct != null) ? ct.dotNetType : default(TypeRepTemplate)).TypeName+"::");
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, ctg.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   
                        	           // give up, we don't support these, pretty printer will wrap in a comment
                        	           retval.dotNetType =  ((ctg != null) ? ctg.dotNetType : default(TypeRepTemplate));
                        	           retval.hasTyArgs =  ((ctg != null) ? ctg.hasTyArgs : default(bool));
                        	           retval.argTrees =  ((ctg != null) ? ctg.argTrees : default(List<CommonTree>));
                        	        
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1867:7: ^(d= '.' dt= type_name dtg= type_or_generic[$dt.dotNetType == null ? \".\" : $dt.dotNetType.TypeName+\".\"] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	d=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_type_name2921); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_DOT.Add(d);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_name_in_type_name2927);
                        	dt = type_name();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_type_name.Add(dt.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_or_generic_in_type_name2931);
                        	dtg = type_or_generic(((dt != null) ? dt.dotNetType : default(TypeRepTemplate)) == null ? "." : ((dt != null) ? dt.dotNetType : default(TypeRepTemplate)).TypeName+".");
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_type_or_generic.Add(dtg.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   
                        	           WarningAssert(!((dt != null) ? dt.hasTyArgs : default(bool)), d.token.Line, "Didn't expect type arguments in prefix of type name"); 

                        	           retval.dotNetType =  ((dtg != null) ? dtg.dotNetType : default(TypeRepTemplate));
                        	           if (!retval.dotNetType.IsUnknownType) {
                        	              if (retval.dotNetType.TypeParams.Length > 0 && retval.dotNetType.TypeParams.Length == ((dtg != null) ? dtg.argTrees : default(List<CommonTree>)).Count) {
                        	                 int i = 0;
                        	                 foreach (CommonTree ty in ((dtg != null) ? dtg.argTrees : default(List<CommonTree>))) {
                        	                    tyMap[retval.dotNetType.TypeParams[i]] = wrapType(ty, ((dt != null) ? ((CommonTree)dt.Tree) : null).Token);
                        	                    i++;
                        	                 }
                        	                 retval.hasTyArgs =  true; 
                        	                 retval.argTrees =  ((dtg != null) ? dtg.argTrees : default(List<CommonTree>));
                        	              }
                        	           }
                        	        
                        	}


                        	// AST REWRITE
                        	// elements:          dtg, d, dt
                        	// token labels:      d
                        	// rule labels:       dt, retval, dtg
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_d = new RewriteRuleNodeStream(adaptor, "token d", d);
                        	RewriteRuleSubtreeStream stream_dt = new RewriteRuleSubtreeStream(adaptor, "rule dt", dt!=null ? dt.Tree : null);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_dtg = new RewriteRuleSubtreeStream(adaptor, "rule dtg", dtg!=null ? dtg.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1884:7: -> {!$dotNetType.IsUnknownType}?
                        	if (!retval.dotNetType.IsUnknownType)
                        	{
                        	    adaptor.AddChild(root_0,  mkJavaWrapper(retval.dotNetType.Java, tyMap, ((dt != null) ? ((CommonTree)dt.Tree) : null).Token) );

                        	}
                        	else // 1885:7: -> ^( $d $dt $dtg)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1885:10: ^( $d $dt $dtg)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_d.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_dt.NextTree());
                        	    adaptor.AddChild(root_1, stream_dtg.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                     AddToImports(retval.dotNetType.Imports);

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_name"

        public class type_or_generic_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public List<CommonTree> argTrees;
            public bool hasTyArgs;
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_or_generic"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1888:1: type_or_generic[String prefix] returns [TypeRepTemplate dotNetType, List<CommonTree> argTrees, bool hasTyArgs, string thetext] : t= identifier (ga= generic_argument_list )? -> {!this.in_member_name && !$dotNetType.IsUnknownType}? -> $t ( $ga)? ;
        public NetMaker.type_or_generic_return type_or_generic(String prefix) // throws RecognitionException [1]
        {   
            NetMaker.type_or_generic_return retval = new NetMaker.type_or_generic_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.identifier_return t = default(NetMaker.identifier_return);

            NetMaker.generic_argument_list_return ga = default(NetMaker.generic_argument_list_return);


            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_generic_argument_list = new RewriteRuleSubtreeStream(adaptor,"rule generic_argument_list");

               retval.hasTyArgs =  false;
               retval.argTrees =  new List<CommonTree>();
               Dictionary<string,CommonTree> tyMap = new Dictionary<string,CommonTree>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1897:1: (t= identifier (ga= generic_argument_list )? -> {!this.in_member_name && !$dotNetType.IsUnknownType}? -> $t ( $ga)? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1899:2: t= identifier (ga= generic_argument_list )?
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_type_or_generic3008);
                	t = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(t.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1899:16: (ga= generic_argument_list )?
                	int alt81 = 2;
                	int LA81_0 = input.LA(1);

                	if ( (LA81_0 == LTHAN) )
                	{
                	    alt81 = 1;
                	}
                	switch (alt81) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1899:17: ga= generic_argument_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_generic_argument_list_in_type_or_generic3014);
                	        	ga = generic_argument_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_generic_argument_list.Add(ga.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	  retval.hasTyArgs =  true;
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   
                	           retval.dotNetType =  findType(prefix+((t != null) ? t.thetext : default(string)), ((ga != null) ? ga.argTypes : default(List<TypeRepTemplate>)));
                	           if (!retval.dotNetType.IsUnknownType) {
                	               // In the case that type is fully qualified, and matches the name in retval.dotNetType then emit a fully
                	               // qualified type and don't add imports. this allows a class to refer to multiple classes with identical names
                	               // as long as you fully qualify one of them.
                	               if (retval.dotNetType.Imports.Length == 1 && retval.dotNetType.Imports[0] == prefix+((t != null) ? t.thetext : default(string))) {
                	                   retval.dotNetType.Java = retval.dotNetType.Java.Replace(((t != null) ? t.thetext : default(string)),  prefix+((t != null) ? t.thetext : default(string)));
                	                   retval.dotNetType.Imports = new String[0];
                	                   // Ditto for each constructor
                	                   if (retval.dotNetType is ClassRepTemplate) {
                	                       foreach (ConstructorRepTemplate c in ((ClassRepTemplate)retval.dotNetType).Constructors)
                	                           {
                	                               c.Java = c.Java.Replace(((t != null) ? t.thetext : default(string)), prefix + ((t != null) ? t.thetext : default(string))); 
                	                               c.Imports = new String[0];
                	                           }
                	                   }
                	               }
                	              if (!((MkNonGeneric_scope)MkNonGeneric_stack.Peek()).scrubGenericArgs && retval.hasTyArgs && retval.dotNetType.TypeParams.Length == ((ga != null) ? ga.argTrees : default(List<CommonTree>)).Count) {
                	                 int i = 0;
                	                 foreach (CommonTree ty in ((ga != null) ? ga.argTrees : default(List<CommonTree>))) {
                	                    tyMap[retval.dotNetType.TypeParams[i]] = wrapType(ty, ((t != null) ? ((CommonTree)t.Tree) : null).Token);
                	                    i++;
                	                 }
                	                 retval.argTrees =  ((ga != null) ? ga.argTrees : default(List<CommonTree>));
                	              }
                	           }
                	           // TODO: we ignore generic arguments. At the moment this is used to create a member_name so that
                	           // we can search for methods in their parents.
                	           retval.thetext =  ((t != null) ? t.thetext : default(string));
                	        
                	}


                	// AST REWRITE
                	// elements:          ga, t
                	// token labels:      
                	// rule labels:       retval, t, ga
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_t = new RewriteRuleSubtreeStream(adaptor, "rule t", t!=null ? t.Tree : null);
                	RewriteRuleSubtreeStream stream_ga = new RewriteRuleSubtreeStream(adaptor, "rule ga", ga!=null ? ga.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1931:7: -> {!this.in_member_name && !$dotNetType.IsUnknownType}?
                	if (!this.in_member_name && !retval.dotNetType.IsUnknownType)
                	{
                	    adaptor.AddChild(root_0,  mkJavaWrapper(retval.dotNetType.Java, tyMap, ((t != null) ? ((CommonTree)t.Tree) : null).Token) );

                	}
                	else // 1932:7: -> $t ( $ga)?
                	{
                	    adaptor.AddChild(root_0, stream_t.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1932:13: ( $ga)?
                	    if ( stream_ga.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_ga.NextTree());

                	    }
                	    stream_ga.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                     AddToImports(retval.dotNetType.Imports);

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_or_generic"

        public class qid_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qid"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1953:1: qid : ( ^( access_operator qid type_or_generic[\"\"] ) | qid_start );
        public NetMaker.qid_return qid() // throws RecognitionException [1]
        {   
            NetMaker.qid_return retval = new NetMaker.qid_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.access_operator_return access_operator226 = default(NetMaker.access_operator_return);

            NetMaker.qid_return qid227 = default(NetMaker.qid_return);

            NetMaker.type_or_generic_return type_or_generic228 = default(NetMaker.type_or_generic_return);

            NetMaker.qid_start_return qid_start229 = default(NetMaker.qid_start_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1953:4: ( ^( access_operator qid type_or_generic[\"\"] ) | qid_start )
                int alt82 = 2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0 >= DOT && LA82_0 <= PTR)) )
                {
                    alt82 = 1;
                }
                else if ( (LA82_0 == OBJECT || LA82_0 == LONGNUMBER || (LA82_0 >= BOOL && LA82_0 <= NULL) || (LA82_0 >= ELIF && LA82_0 <= UNDEF) || LA82_0 == 195 || LA82_0 == 221 || (LA82_0 >= 224 && LA82_0 <= 239) || (LA82_0 >= 241 && LA82_0 <= 244) || (LA82_0 >= 247 && LA82_0 <= 254) || LA82_0 == 256 || (LA82_0 >= 263 && LA82_0 <= 264) || (LA82_0 >= 274 && LA82_0 <= 277)) )
                {
                    alt82 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d82s0 =
                        new NoViableAltException("", 82, 0, input);

                    throw nvae_d82s0;
                }
                switch (alt82) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1954:5: ^( access_operator qid type_or_generic[\"\"] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_access_operator_in_qid3092);
                        	access_operator226 = access_operator();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( state.backtracking == 0 ) root_1 = (CommonTree)adaptor.BecomeRoot(access_operator226.Tree, root_1);


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_qid_in_qid3094);
                        	qid227 = qid();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, qid227.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_or_generic_in_qid3096);
                        	type_or_generic228 = type_or_generic("");
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, type_or_generic228.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1955:4: qid_start
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_qid_start_in_qid3104);
                        	qid_start229 = qid_start();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, qid_start229.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qid"

        public class qid_start_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qid_start"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1957:1: qid_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
        public NetMaker.qid_start_return qid_start() // throws RecognitionException [1]
        {   
            NetMaker.qid_start_return retval = new NetMaker.qid_start_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal234 = null;
            NetMaker.predefined_type_return predefined_type230 = default(NetMaker.predefined_type_return);

            NetMaker.identifier_return identifier231 = default(NetMaker.identifier_return);

            NetMaker.generic_argument_list_return generic_argument_list232 = default(NetMaker.generic_argument_list_return);

            NetMaker.identifier_return identifier233 = default(NetMaker.identifier_return);

            NetMaker.identifier_return identifier235 = default(NetMaker.identifier_return);

            NetMaker.literal_return literal236 = default(NetMaker.literal_return);


            CommonTree string_literal234_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1957:10: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
                int alt84 = 4;
                switch ( input.LA(1) ) 
                {
                case OBJECT:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case 251:
                case 252:
                case 253:
                case 254:
                case 275:
                case 276:
                	{
                    alt84 = 1;
                    }
                    break;
                case IDENTIFIER:
                	{
                    int LA84_2 = input.LA(2);

                    if ( (LA84_2 == CLOSE_BRACE || LA84_2 == ASSIGN || LA84_2 == COMMA || LA84_2 == IDENTIFIER || (LA84_2 >= ELIF && LA84_2 <= UNDEF) || LA84_2 == 195 || LA84_2 == 208 || LA84_2 == 221 || (LA84_2 >= 224 && LA84_2 <= 239) || (LA84_2 >= 241 && LA84_2 <= 244) || (LA84_2 >= 247 && LA84_2 <= 250) || LA84_2 == 256 || (LA84_2 >= 263 && LA84_2 <= 264) || LA84_2 == 274 || LA84_2 == 277) )
                    {
                        alt84 = 3;
                    }
                    else if ( (LA84_2 == LTHAN) && (synpred6_NetMaker()) )
                    {
                        alt84 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d84s2 =
                            new NoViableAltException("", 84, 2, input);

                        throw nvae_d84s2;
                    }
                    }
                    break;
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    int LA84_3 = input.LA(2);

                    if ( (LA84_3 == LTHAN) && (synpred6_NetMaker()) )
                    {
                        alt84 = 2;
                    }
                    else if ( (LA84_3 == CLOSE_BRACE || LA84_3 == ASSIGN || LA84_3 == COMMA || LA84_3 == IDENTIFIER || (LA84_3 >= ELIF && LA84_3 <= UNDEF) || LA84_3 == 195 || LA84_3 == 208 || LA84_3 == 221 || (LA84_3 >= 224 && LA84_3 <= 239) || (LA84_3 >= 241 && LA84_3 <= 244) || (LA84_3 >= 247 && LA84_3 <= 250) || LA84_3 == 256 || (LA84_3 >= 263 && LA84_3 <= 264) || LA84_3 == 274 || LA84_3 == 277) )
                    {
                        alt84 = 3;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d84s3 =
                            new NoViableAltException("", 84, 3, input);

                        throw nvae_d84s3;
                    }
                    }
                    break;
                case LONGNUMBER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                	{
                    alt84 = 4;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d84s0 =
                	        new NoViableAltException("", 84, 0, input);

                	    throw nvae_d84s0;
                }

                switch (alt84) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1958:2: predefined_type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_predefined_type_in_qid_start3115);
                        	predefined_type230 = predefined_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, predefined_type230.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1959:4: ( identifier generic_argument_list )=> identifier generic_argument_list
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_qid_start3130);
                        	identifier231 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, identifier231.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_generic_argument_list_in_qid_start3134);
                        	generic_argument_list232 = generic_argument_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, generic_argument_list232.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1962:4: identifier ( '::' identifier )?
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_qid_start3141);
                        	identifier233 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, identifier233.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1962:17: ( '::' identifier )?
                        	int alt83 = 2;
                        	int LA83_0 = input.LA(1);

                        	if ( (LA83_0 == 208) )
                        	{
                        	    alt83 = 1;
                        	}
                        	switch (alt83) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1962:18: '::' identifier
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	string_literal234=(CommonTree)Match(input,208,FOLLOW_208_in_qid_start3146); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{string_literal234_tree = (CommonTree)adaptor.DupNode(string_literal234);

                        	        		adaptor.AddChild(root_0, string_literal234_tree);
                        	        	}
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_identifier_in_qid_start3150);
                        	        	identifier235 = identifier();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, identifier235.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1963:4: literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_literal_in_qid_start3157);
                        	literal236 = literal();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, literal236.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qid_start"

        public class qid_part_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qid_part"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1967:1: qid_part : access_identifier ;
        public NetMaker.qid_part_return qid_part() // throws RecognitionException [1]
        {   
            NetMaker.qid_part_return retval = new NetMaker.qid_part_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.access_identifier_return access_identifier237 = default(NetMaker.access_identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1967:9: ( access_identifier )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1968:2: access_identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_access_identifier_in_qid_part3171);
                	access_identifier237 = access_identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, access_identifier237.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qid_part"

        public class generic_argument_list_return : TreeRuleReturnScope
        {
            public List<TypeRepTemplate> argTypes;
            public List<CommonTree> argTrees;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "generic_argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1970:1: generic_argument_list returns [List<TypeRepTemplate> argTypes, List<CommonTree> argTrees] : '<' type_arguments '>' ;
        public NetMaker.generic_argument_list_return generic_argument_list() // throws RecognitionException [1]
        {   
            NetMaker.generic_argument_list_return retval = new NetMaker.generic_argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal238 = null;
            CommonTree char_literal240 = null;
            NetMaker.type_arguments_return type_arguments239 = default(NetMaker.type_arguments_return);


            CommonTree char_literal238_tree=null;
            CommonTree char_literal240_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1970:90: ( '<' type_arguments '>' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1971:2: '<' type_arguments '>'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal238=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_generic_argument_list3184); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal238_tree = (CommonTree)adaptor.DupNode(char_literal238);

                		adaptor.AddChild(root_0, char_literal238_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_arguments_in_generic_argument_list3188);
                	type_arguments239 = type_arguments();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_arguments239.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal240=(CommonTree)Match(input,GT,FOLLOW_GT_in_generic_argument_list3192); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal240_tree = (CommonTree)adaptor.DupNode(char_literal240);

                		adaptor.AddChild(root_0, char_literal240_tree);
                	}
                	if ( (state.backtracking==0) )
                	{
                	   retval.argTypes =  ((type_arguments239 != null) ? type_arguments239.tyTypes : default(List<TypeRepTemplate>)); retval.argTrees =  ((type_arguments239 != null) ? type_arguments239.argTrees : default(List<CommonTree>)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "generic_argument_list"

        public class type_arguments_return : TreeRuleReturnScope
        {
            public List<TypeRepTemplate> tyTypes;
            public List<CommonTree> argTrees;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_arguments"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1973:1: type_arguments returns [List<TypeRepTemplate> tyTypes, List<CommonTree> argTrees] : t1= type_argument ( ',' tn= type_argument )* ;
        public NetMaker.type_arguments_return type_arguments() // throws RecognitionException [1]
        {   
            PrimitiveRep_stack.Push(new PrimitiveRep_scope());

            NetMaker.type_arguments_return retval = new NetMaker.type_arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal241 = null;
            NetMaker.type_argument_return t1 = default(NetMaker.type_argument_return);

            NetMaker.type_argument_return tn = default(NetMaker.type_argument_return);


            CommonTree char_literal241_tree=null;


                ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  true;
                retval.tyTypes =  new List<TypeRepTemplate>();
                retval.argTrees =  new List<CommonTree>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1979:2: (t1= type_argument ( ',' tn= type_argument )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1980:2: t1= type_argument ( ',' tn= type_argument )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_argument_in_type_arguments3219);
                	t1 = type_argument();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, t1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.tyTypes.Add(((t1 != null) ? t1.dotNetType : default(TypeRepTemplate))); retval.argTrees.Add(dupTree(((t1 != null) ? ((CommonTree)t1.Tree) : null))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1980:88: ( ',' tn= type_argument )*
                	do 
                	{
                	    int alt85 = 2;
                	    int LA85_0 = input.LA(1);

                	    if ( (LA85_0 == COMMA) )
                	    {
                	        alt85 = 1;
                	    }


                	    switch (alt85) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1980:89: ',' tn= type_argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal241=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_type_arguments3225); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal241_tree = (CommonTree)adaptor.DupNode(char_literal241);

                			    		adaptor.AddChild(root_0, char_literal241_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_argument_in_type_arguments3229);
                			    	tn = type_argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, tn.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.tyTypes.Add(((tn != null) ? tn.dotNetType : default(TypeRepTemplate))); retval.argTrees.Add(dupTree(((tn != null) ? ((CommonTree)tn.Tree) : null))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop85;
                	    }
                	} while (true);

                	loop85:
                		;	// Stops C# compiler whining that label 'loop85' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                PrimitiveRep_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "type_arguments"

        public class type_argument_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_argument"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1982:8: public type_argument returns [TypeRepTemplate dotNetType] : ({...}? => javaish_type_argument | type );
        public NetMaker.type_argument_return type_argument() // throws RecognitionException [1]
        {   
            NetMaker.type_argument_return retval = new NetMaker.type_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.javaish_type_argument_return javaish_type_argument242 = default(NetMaker.javaish_type_argument_return);

            NetMaker.type_return type243 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1982:58: ({...}? => javaish_type_argument | type )
                int alt86 = 2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0 == 220) && ((this.IsJavaish)) )
                {
                    alt86 = 1;
                }
                else if ( (LA86_0 == TYPE) )
                {
                    int LA86_2 = input.LA(2);

                    if ( ((this.IsJavaish)) )
                    {
                        alt86 = 1;
                    }
                    else if ( (true) )
                    {
                        alt86 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d86s2 =
                            new NoViableAltException("", 86, 2, input);

                        throw nvae_d86s2;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d86s0 =
                        new NoViableAltException("", 86, 0, input);

                    throw nvae_d86s0;
                }
                switch (alt86) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1983:5: {...}? => javaish_type_argument
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	if ( !((this.IsJavaish)) ) 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    throw new FailedPredicateException(input, "type_argument", "this.IsJavaish");
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_javaish_type_argument_in_type_argument3255);
                        	javaish_type_argument242 = javaish_type_argument();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, javaish_type_argument242.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((javaish_type_argument242 != null) ? javaish_type_argument242.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1984:6: type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_type_argument3264);
                        	type243 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type243.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((type243 != null) ? type243.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_argument"

        public class javaish_type_argument_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "javaish_type_argument"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1986:8: public javaish_type_argument returns [TypeRepTemplate dotNetType] : ( ( '?' 'extends' )=> '?' 'extends' type | '?' | type );
        public NetMaker.javaish_type_argument_return javaish_type_argument() // throws RecognitionException [1]
        {   
            NetMaker.javaish_type_argument_return retval = new NetMaker.javaish_type_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal244 = null;
            CommonTree string_literal245 = null;
            CommonTree char_literal247 = null;
            NetMaker.type_return type246 = default(NetMaker.type_return);

            NetMaker.type_return type248 = default(NetMaker.type_return);


            CommonTree char_literal244_tree=null;
            CommonTree string_literal245_tree=null;
            CommonTree char_literal247_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1986:66: ( ( '?' 'extends' )=> '?' 'extends' type | '?' | type )
                int alt87 = 3;
                int LA87_0 = input.LA(1);

                if ( (LA87_0 == 220) )
                {
                    int LA87_1 = input.LA(2);

                    if ( (LA87_1 == 221) && (synpred7_NetMaker()) )
                    {
                        alt87 = 1;
                    }
                    else if ( (LA87_1 == COMMA || LA87_1 == GT) )
                    {
                        alt87 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d87s1 =
                            new NoViableAltException("", 87, 1, input);

                        throw nvae_d87s1;
                    }
                }
                else if ( (LA87_0 == TYPE) )
                {
                    alt87 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d87s0 =
                        new NoViableAltException("", 87, 0, input);

                    throw nvae_d87s0;
                }
                switch (alt87) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1987:7: ( '?' 'extends' )=> '?' 'extends' type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal244=(CommonTree)Match(input,220,FOLLOW_220_in_javaish_type_argument3292); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal244_tree = (CommonTree)adaptor.DupNode(char_literal244);

                        		adaptor.AddChild(root_0, char_literal244_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	string_literal245=(CommonTree)Match(input,221,FOLLOW_221_in_javaish_type_argument3294); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal245_tree = (CommonTree)adaptor.DupNode(string_literal245);

                        		adaptor.AddChild(root_0, string_literal245_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_javaish_type_argument3296);
                        	type246 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type246.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((type246 != null) ? type246.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1988:6: '?'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal247=(CommonTree)Match(input,220,FOLLOW_220_in_javaish_type_argument3306); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal247_tree = (CommonTree)adaptor.DupNode(char_literal247);

                        		adaptor.AddChild(root_0, char_literal247_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  new TypeVarRepTemplate("?"); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1989:6: type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_javaish_type_argument3316);
                        	type248 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type248.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((type248 != null) ? type248.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "javaish_type_argument"

        public class type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public List<CommonTree> argTrees;
            public CommonTree boxedTree;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1994:1: type returns [TypeRepTemplate dotNetType, List<CommonTree> argTrees, CommonTree boxedTree] : ^(t= TYPE (p= predefined_type | type_name | 'void' ) ( rank_specifiers[$dotNetType] )? ( '*' )* ( '?' )? ) magicBoxedType[$dotNetType != null && $dotNetType.HasBoxedRep, $t.token, $dotNetType == null ? \"\" : $dotNetType.BoxedJava] -> { (isNullable || $PrimitiveRep::primitiveTypeAsObject) && !hasRank && $dotNetType.HasBoxedRep && !String.IsNullOrEmpty($dotNetType.BoxedJava) }? ^( TYPE[$t.token, \"TYPE\"] IDENTIFIER[$t.token,$dotNetType.BoxedJava] ( '*' )* ) -> ^( TYPE[$t.token, \"TYPE\"] ( predefined_type )? ( type_name )? ( 'void' )? ( rank_specifiers )? ( '*' )* ( '?' )? ) ;
        public NetMaker.type_return type() // throws RecognitionException [1]
        {   
            NetMaker.type_return retval = new NetMaker.type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree t = null;
            CommonTree string_literal250 = null;
            CommonTree char_literal252 = null;
            CommonTree char_literal253 = null;
            NetMaker.predefined_type_return p = default(NetMaker.predefined_type_return);

            NetMaker.type_name_return type_name249 = default(NetMaker.type_name_return);

            NetMaker.rank_specifiers_return rank_specifiers251 = default(NetMaker.rank_specifiers_return);

            NetMaker.magicBoxedType_return magicBoxedType254 = default(NetMaker.magicBoxedType_return);


            CommonTree t_tree=null;
            CommonTree string_literal250_tree=null;
            CommonTree char_literal252_tree=null;
            CommonTree char_literal253_tree=null;
            RewriteRuleNodeStream stream_220 = new RewriteRuleNodeStream(adaptor,"token 220");
            RewriteRuleNodeStream stream_STAR = new RewriteRuleNodeStream(adaptor,"token STAR");
            RewriteRuleNodeStream stream_206 = new RewriteRuleNodeStream(adaptor,"token 206");
            RewriteRuleNodeStream stream_TYPE = new RewriteRuleNodeStream(adaptor,"token TYPE");
            RewriteRuleSubtreeStream stream_rank_specifiers = new RewriteRuleSubtreeStream(adaptor,"rule rank_specifiers");
            RewriteRuleSubtreeStream stream_predefined_type = new RewriteRuleSubtreeStream(adaptor,"rule predefined_type");
            RewriteRuleSubtreeStream stream_type_name = new RewriteRuleSubtreeStream(adaptor,"rule type_name");
            RewriteRuleSubtreeStream stream_magicBoxedType = new RewriteRuleSubtreeStream(adaptor,"rule magicBoxedType");

               bool hasRank = false;
               bool isPredefined = false;
               bool isNullable = false;
               CommonTree pTree = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2013:1: ( ^(t= TYPE (p= predefined_type | type_name | 'void' ) ( rank_specifiers[$dotNetType] )? ( '*' )* ( '?' )? ) magicBoxedType[$dotNetType != null && $dotNetType.HasBoxedRep, $t.token, $dotNetType == null ? \"\" : $dotNetType.BoxedJava] -> { (isNullable || $PrimitiveRep::primitiveTypeAsObject) && !hasRank && $dotNetType.HasBoxedRep && !String.IsNullOrEmpty($dotNetType.BoxedJava) }? ^( TYPE[$t.token, \"TYPE\"] IDENTIFIER[$t.token,$dotNetType.BoxedJava] ( '*' )* ) -> ^( TYPE[$t.token, \"TYPE\"] ( predefined_type )? ( type_name )? ( 'void' )? ( rank_specifiers )? ( '*' )* ( '?' )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2014:5: ^(t= TYPE (p= predefined_type | type_name | 'void' ) ( rank_specifiers[$dotNetType] )? ( '*' )* ( '?' )? ) magicBoxedType[$dotNetType != null && $dotNetType.HasBoxedRep, $t.token, $dotNetType == null ? \"\" : $dotNetType.BoxedJava]
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	t=(CommonTree)Match(input,TYPE,FOLLOW_TYPE_in_type3351); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_TYPE.Add(t);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2014:14: (p= predefined_type | type_name | 'void' )
                	int alt88 = 3;
                	switch ( input.LA(1) ) 
                	{
                	case OBJECT:
                	case BOOL:
                	case BYTE:
                	case CHAR:
                	case SHORT:
                	case INT:
                	case LONG:
                	case FLOAT:
                	case DOUBLE:
                	case 251:
                	case 252:
                	case 253:
                	case 254:
                	case 275:
                	case 276:
                		{
                	    alt88 = 1;
                	    }
                	    break;
                	case IDENTIFIER:
                	case DOT:
                	case ELIF:
                	case ENDIF:
                	case DEFINE:
                	case UNDEF:
                	case 195:
                	case 208:
                	case 221:
                	case 224:
                	case 225:
                	case 226:
                	case 227:
                	case 228:
                	case 229:
                	case 230:
                	case 231:
                	case 232:
                	case 233:
                	case 234:
                	case 235:
                	case 236:
                	case 237:
                	case 238:
                	case 239:
                	case 241:
                	case 242:
                	case 243:
                	case 244:
                	case 247:
                	case 248:
                	case 249:
                	case 250:
                	case 256:
                	case 263:
                	case 264:
                	case 274:
                	case 277:
                		{
                	    alt88 = 2;
                	    }
                	    break;
                	case 206:
                		{
                	    alt88 = 3;
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d88s0 =
                		        new NoViableAltException("", 88, 0, input);

                		    throw nvae_d88s0;
                	}

                	switch (alt88) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2014:15: p= predefined_type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_predefined_type_in_type3356);
                	        	p = predefined_type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_predefined_type.Add(p.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isPredefined = true; retval.dotNetType =  ((p != null) ? p.dotNetType : default(TypeRepTemplate)); pTree = ((p != null) ? ((CommonTree)p.Tree) : null); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2015:14: type_name
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_name_in_type3374);
                	        	type_name249 = type_name();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_name.Add(type_name249.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   retval.dotNetType =  ((type_name249 != null) ? type_name249.dotNetType : default(TypeRepTemplate)); retval.argTrees =  ((type_name249 != null) ? type_name249.argTrees : default(List<CommonTree>)); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2016:14: 'void'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal250=(CommonTree)Match(input,206,FOLLOW_206_in_type3392); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_206.Add(string_literal250);

                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   retval.dotNetType =  VoidType; 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2017:9: ( rank_specifiers[$dotNetType] )?
                	int alt89 = 2;
                	int LA89_0 = input.LA(1);

                	if ( (LA89_0 == OPEN_BRACKET) )
                	{
                	    alt89 = 1;
                	}
                	switch (alt89) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2017:10: rank_specifiers[$dotNetType]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_rank_specifiers_in_type3409);
                	        	rank_specifiers251 = rank_specifiers(retval.dotNetType);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_rank_specifiers.Add(rank_specifiers251.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isPredefined = false; retval.dotNetType =  ((rank_specifiers251 != null) ? rank_specifiers251.dotNetType : default(TypeRepTemplate)); retval.argTrees =  null; hasRank = true; 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2017:144: ( '*' )*
                	do 
                	{
                	    int alt90 = 2;
                	    int LA90_0 = input.LA(1);

                	    if ( (LA90_0 == STAR) )
                	    {
                	        alt90 = 1;
                	    }


                	    switch (alt90) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2017:144: '*'
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal252=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_type3416); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_STAR.Add(char_literal252);


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop90;
                	    }
                	} while (true);

                	loop90:
                		;	// Stops C# compiler whining that label 'loop90' has no statements

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2017:149: ( '?' )?
                	int alt91 = 2;
                	int LA91_0 = input.LA(1);

                	if ( (LA91_0 == 220) )
                	{
                	    alt91 = 1;
                	}
                	switch (alt91) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2017:150: '?'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal253=(CommonTree)Match(input,220,FOLLOW_220_in_type3420); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_220.Add(char_literal253);

                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isNullable = true; 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicBoxedType_in_type3436);
                	magicBoxedType254 = magicBoxedType(retval.dotNetType != null && retval.dotNetType.HasBoxedRep, t.token, retval.dotNetType == null ? "" : retval.dotNetType.BoxedJava);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicBoxedType.Add(magicBoxedType254.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   
                	           if (isPredefined) {
                	               retval.dotNetType.Tree = (((magicBoxedType254 != null) ? ((CommonTree)magicBoxedType254.Tree) : null) != null ? dupTree(((magicBoxedType254 != null) ? ((CommonTree)magicBoxedType254.Tree) : null)) : null);
                	           }
                	           if (((magicBoxedType254 != null) ? ((CommonTree)magicBoxedType254.Tree) : null) != null) {
                	              retval.boxedTree =  ((magicBoxedType254 != null) ? ((CommonTree)magicBoxedType254.Tree) : null);
                	           }
                	           if (isNullable) {
                	               Warning(t.Line, "[UNSUPPORTED] We convert Nullable types to Boxed types. Operators on null values will throw exceptions rather than preserving NULL.");
                	           }
                	         
                	}


                	// AST REWRITE
                	// elements:          STAR, type_name, predefined_type, TYPE, rank_specifiers, STAR, TYPE, 220, 206
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2030:5: -> { (isNullable || $PrimitiveRep::primitiveTypeAsObject) && !hasRank && $dotNetType.HasBoxedRep && !String.IsNullOrEmpty($dotNetType.BoxedJava) }? ^( TYPE[$t.token, \"TYPE\"] IDENTIFIER[$t.token,$dotNetType.BoxedJava] ( '*' )* )
                	if ( (isNullable || ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject) && !hasRank && retval.dotNetType.HasBoxedRep && !String.IsNullOrEmpty(retval.dotNetType.BoxedJava) )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2030:153: ^( TYPE[$t.token, \"TYPE\"] IDENTIFIER[$t.token,$dotNetType.BoxedJava] ( '*' )* )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, t.token, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, t.token, retval.dotNetType.BoxedJava));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2030:221: ( '*' )*
                	    while ( stream_STAR.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_STAR.NextNode());

                	    }
                	    stream_STAR.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2031:5: -> ^( TYPE[$t.token, \"TYPE\"] ( predefined_type )? ( type_name )? ( 'void' )? ( rank_specifiers )? ( '*' )* ( '?' )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2031:8: ^( TYPE[$t.token, \"TYPE\"] ( predefined_type )? ( type_name )? ( 'void' )? ( rank_specifiers )? ( '*' )* ( '?' )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, t.token, "TYPE"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2031:33: ( predefined_type )?
                	    if ( stream_predefined_type.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_predefined_type.NextTree());

                	    }
                	    stream_predefined_type.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2031:50: ( type_name )?
                	    if ( stream_type_name.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_name.NextTree());

                	    }
                	    stream_type_name.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2031:61: ( 'void' )?
                	    if ( stream_206.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_206.NextNode());

                	    }
                	    stream_206.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2031:69: ( rank_specifiers )?
                	    if ( stream_rank_specifiers.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_rank_specifiers.NextTree());

                	    }
                	    stream_rank_specifiers.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2031:86: ( '*' )*
                	    while ( stream_STAR.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_STAR.NextNode());

                	    }
                	    stream_STAR.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2031:91: ( '?' )?
                	    if ( stream_220.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_220.NextNode());

                	    }
                	    stream_220.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                     if (retval.boxedTree == null) {
                        retval.boxedTree =  ((CommonTree)retval.Tree);
                     }
                     if (((ForceUnsharedType_scope)ForceUnsharedType_stack.Peek()).fresh) {
                        retval.dotNetType =  retval.dotNetType.Instantiate(null); 
                     }
                     if (retval.dotNetType.Tree == null) {
                        retval.dotNetType.Tree = ((CommonTree)retval.Tree);
                     }


                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type"

        public class non_nullable_type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "non_nullable_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2034:1: non_nullable_type returns [TypeRepTemplate dotNetType] : type ;
        public NetMaker.non_nullable_type_return non_nullable_type() // throws RecognitionException [1]
        {   
            NetMaker.non_nullable_type_return retval = new NetMaker.non_nullable_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type255 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2034:55: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2035:5: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_non_nullable_type3510);
                	type255 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type255.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ((type255 != null) ? type255.dotNetType : default(TypeRepTemplate)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "non_nullable_type"

        public class non_array_type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "non_array_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2036:1: non_array_type returns [TypeRepTemplate dotNetType] : type ;
        public NetMaker.non_array_type_return non_array_type() // throws RecognitionException [1]
        {   
            NetMaker.non_array_type_return retval = new NetMaker.non_array_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type256 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2036:52: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2037:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_non_array_type3524);
                	type256 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type256.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ((type256 != null) ? type256.dotNetType : default(TypeRepTemplate)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "non_array_type"

        public class array_type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "array_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2038:1: array_type returns [TypeRepTemplate dotNetType] : type ;
        public NetMaker.array_type_return array_type() // throws RecognitionException [1]
        {   
            NetMaker.array_type_return retval = new NetMaker.array_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type257 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2038:48: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2039:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_array_type3538);
                	type257 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type257.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ((type257 != null) ? type257.dotNetType : default(TypeRepTemplate)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "array_type"

        public class unmanaged_type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unmanaged_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2040:1: unmanaged_type returns [TypeRepTemplate dotNetType] : type ;
        public NetMaker.unmanaged_type_return unmanaged_type() // throws RecognitionException [1]
        {   
            NetMaker.unmanaged_type_return retval = new NetMaker.unmanaged_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type258 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2040:52: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2041:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_unmanaged_type3552);
                	type258 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type258.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ((type258 != null) ? type258.dotNetType : default(TypeRepTemplate)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unmanaged_type"

        public class class_type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2042:1: class_type returns [TypeRepTemplate dotNetType] : type ;
        public NetMaker.class_type_return class_type() // throws RecognitionException [1]
        {   
            NetMaker.class_type_return retval = new NetMaker.class_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type259 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2042:48: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2043:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_class_type3566);
                	type259 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type259.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ((type259 != null) ? type259.dotNetType : default(TypeRepTemplate)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_type"

        public class pointer_type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "pointer_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2044:1: pointer_type returns [TypeRepTemplate dotNetType] : type ;
        public NetMaker.pointer_type_return pointer_type() // throws RecognitionException [1]
        {   
            NetMaker.pointer_type_return retval = new NetMaker.pointer_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type260 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2044:50: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2045:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_pointer_type3580);
                	type260 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type260.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.dotNetType =  ((type260 != null) ? type260.dotNetType : default(TypeRepTemplate)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "pointer_type"

        public class block_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "block"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2051:1: block : ( ';' | '{' ( statement_list )? '}' );
        public NetMaker.block_return block() // throws RecognitionException [1]
        {   
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.block_return retval = new NetMaker.block_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal261 = null;
            CommonTree char_literal262 = null;
            CommonTree char_literal264 = null;
            NetMaker.statement_list_return statement_list263 = default(NetMaker.statement_list_return);


            CommonTree char_literal261_tree=null;
            CommonTree char_literal262_tree=null;
            CommonTree char_literal264_tree=null;


                ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2055:2: ( ';' | '{' ( statement_list )? '}' )
                int alt93 = 2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0 == SEMI) )
                {
                    alt93 = 1;
                }
                else if ( (LA93_0 == OPEN_BRACE) )
                {
                    alt93 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d93s0 =
                        new NoViableAltException("", 93, 0, input);

                    throw nvae_d93s0;
                }
                switch (alt93) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2056:2: ';'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal261=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_block3605); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal261_tree = (CommonTree)adaptor.DupNode(char_literal261);

                        		adaptor.AddChild(root_0, char_literal261_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2057:4: '{' ( statement_list )? '}'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal262=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_block3610); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal262_tree = (CommonTree)adaptor.DupNode(char_literal262);

                        		adaptor.AddChild(root_0, char_literal262_tree);
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2057:10: ( statement_list )?
                        	int alt92 = 2;
                        	int LA92_0 = input.LA(1);

                        	if ( ((LA92_0 >= PARAMS && LA92_0 <= PARAMS_TYPELESS) || (LA92_0 >= YIELD_RETURN && LA92_0 <= UNCHECKED) || (LA92_0 >= MONOPLUS && LA92_0 <= APPLY) || (LA92_0 >= NEW && LA92_0 <= NEW_ARRAY) || LA92_0 == NEW_ANON_OBJECT || (LA92_0 >= RETURN && LA92_0 <= TRY) || LA92_0 == THROW || (LA92_0 >= BREAK && LA92_0 <= FOREACH) || LA92_0 == OPEN_BRACE || (LA92_0 >= NULL_COALESCE && LA92_0 <= IF) || (LA92_0 >= COND_EXPR && LA92_0 <= LEFT_SHIFT) || (LA92_0 >= SUPER && LA92_0 <= LAMBDA) || (LA92_0 >= TYPE && LA92_0 <= TYPE_DYNAMIC) || LA92_0 == CAST_EXPR || LA92_0 == SYNCHRONIZED || (LA92_0 >= BOOL && LA92_0 <= GT) || (LA92_0 >= ELIF && LA92_0 <= SEMI) || LA92_0 == 195 || LA92_0 == 198 || LA92_0 == 205 || LA92_0 == 208 || (LA92_0 >= 214 && LA92_0 <= 219) || LA92_0 == 221 || (LA92_0 >= 224 && LA92_0 <= 239) || (LA92_0 >= 241 && LA92_0 <= 244) || (LA92_0 >= 247 && LA92_0 <= 254) || LA92_0 == 256 || (LA92_0 >= 262 && LA92_0 <= 264) || LA92_0 == 266 || (LA92_0 >= 268 && LA92_0 <= 272) || (LA92_0 >= 274 && LA92_0 <= 277)) )
                        	{
                        	    alt92 = 1;
                        	}
                        	switch (alt92) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2057:10: statement_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_statement_list_in_block3614);
                        	        	statement_list263 = statement_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, statement_list263.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	char_literal264=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_block3619); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal264_tree = (CommonTree)adaptor.DupNode(char_literal264);

                        		adaptor.AddChild(root_0, char_literal264_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "block"

        public class statement_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2058:1: statement_list : ( statement[/* isStatementListCtxt */ true] )+ ;
        public NetMaker.statement_list_return statement_list() // throws RecognitionException [1]
        {   
            NetMaker.statement_list_return retval = new NetMaker.statement_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.statement_return statement265 = default(NetMaker.statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2058:15: ( ( statement[/* isStatementListCtxt */ true] )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2059:2: ( statement[/* isStatementListCtxt */ true] )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2059:2: ( statement[/* isStatementListCtxt */ true] )+
                	int cnt94 = 0;
                	do 
                	{
                	    int alt94 = 2;
                	    int LA94_0 = input.LA(1);

                	    if ( ((LA94_0 >= PARAMS && LA94_0 <= PARAMS_TYPELESS) || (LA94_0 >= YIELD_RETURN && LA94_0 <= UNCHECKED) || (LA94_0 >= MONOPLUS && LA94_0 <= APPLY) || (LA94_0 >= NEW && LA94_0 <= NEW_ARRAY) || LA94_0 == NEW_ANON_OBJECT || (LA94_0 >= RETURN && LA94_0 <= TRY) || LA94_0 == THROW || (LA94_0 >= BREAK && LA94_0 <= FOREACH) || LA94_0 == OPEN_BRACE || (LA94_0 >= NULL_COALESCE && LA94_0 <= IF) || (LA94_0 >= COND_EXPR && LA94_0 <= LEFT_SHIFT) || (LA94_0 >= SUPER && LA94_0 <= LAMBDA) || (LA94_0 >= TYPE && LA94_0 <= TYPE_DYNAMIC) || LA94_0 == CAST_EXPR || LA94_0 == SYNCHRONIZED || (LA94_0 >= BOOL && LA94_0 <= GT) || (LA94_0 >= ELIF && LA94_0 <= SEMI) || LA94_0 == 195 || LA94_0 == 198 || LA94_0 == 205 || LA94_0 == 208 || (LA94_0 >= 214 && LA94_0 <= 219) || LA94_0 == 221 || (LA94_0 >= 224 && LA94_0 <= 239) || (LA94_0 >= 241 && LA94_0 <= 244) || (LA94_0 >= 247 && LA94_0 <= 254) || LA94_0 == 256 || (LA94_0 >= 262 && LA94_0 <= 264) || LA94_0 == 266 || (LA94_0 >= 268 && LA94_0 <= 272) || (LA94_0 >= 274 && LA94_0 <= 277)) )
                	    {
                	        alt94 = 1;
                	    }


                	    switch (alt94) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2059:2: statement[/* isStatementListCtxt */ true]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_statement_in_statement_list3626);
                			    	statement265 = statement(/* isStatementListCtxt */ true);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, statement265.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt94 >= 1 ) goto loop94;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee94 =
                		                new EarlyExitException(94, input);
                		            throw eee94;
                	    }
                	    cnt94++;
                	} while (true);

                	loop94:
                		;	// Stops C# compiler whining that label 'loop94' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement_list"

        public class expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public string rmId;
            public TypeRepTemplate typeofType;
            public string thedottedtext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2064:1: expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( ( unary_expression[ObjectType] assignment_operator )=> assignment | non_assignment_expression[$typeCtxt] );
        public NetMaker.expression_return expression(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.expression_return retval = new NetMaker.expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.assignment_return assignment266 = default(NetMaker.assignment_return);

            NetMaker.non_assignment_expression_return non_assignment_expression267 = default(NetMaker.non_assignment_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2065:1: ( ( unary_expression[ObjectType] assignment_operator )=> assignment | non_assignment_expression[$typeCtxt] )
                int alt95 = 2;
                alt95 = dfa95.Predict(input);
                switch (alt95) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2066:2: ( unary_expression[ObjectType] assignment_operator )=> assignment
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_assignment_in_expression3659);
                        	assignment266 = assignment();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, assignment266.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  VoidType; retval.thedottedtext =  null;
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2067:4: non_assignment_expression[$typeCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_expression3670);
                        	non_assignment_expression267 = non_assignment_expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, non_assignment_expression267.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((non_assignment_expression267 != null) ? non_assignment_expression267.dotNetType : default(TypeRepTemplate)); retval.rmId =  ((non_assignment_expression267 != null) ? non_assignment_expression267.rmId : default(string)); retval.typeofType =  ((non_assignment_expression267 != null) ? non_assignment_expression267.typeofType : default(TypeRepTemplate)); retval.thedottedtext =  ((non_assignment_expression267 != null) ? non_assignment_expression267.thedottedtext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "expression"

        public class expression_list_return : TreeRuleReturnScope
        {
            public List<TypeRepTemplate> expTypes;
            public List<CommonTree> expTrees;
            public List<TypeRepTemplate> expTreeTypeofTypes;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "expression_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2069:1: expression_list returns [List<TypeRepTemplate> expTypes, List<CommonTree> expTrees, List<TypeRepTemplate> expTreeTypeofTypes] : e1= expression[ObjectType] ( ',' en= expression[ObjectType] )* ;
        public NetMaker.expression_list_return expression_list() // throws RecognitionException [1]
        {   
            NetMaker.expression_list_return retval = new NetMaker.expression_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal268 = null;
            NetMaker.expression_return e1 = default(NetMaker.expression_return);

            NetMaker.expression_return en = default(NetMaker.expression_return);


            CommonTree char_literal268_tree=null;


                retval.expTypes =  new List<TypeRepTemplate>();
                retval.expTrees =  new List<CommonTree>();
                retval.expTreeTypeofTypes =  new List<TypeRepTemplate>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2074:2: (e1= expression[ObjectType] ( ',' en= expression[ObjectType] )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2075:2: e1= expression[ObjectType] ( ',' en= expression[ObjectType] )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_expression_list3725);
                	e1 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, e1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.expTypes.Add(((e1 != null) ? e1.dotNetType : default(TypeRepTemplate))); retval.expTrees.Add(dupTree(((e1 != null) ? ((CommonTree)e1.Tree) : null))); retval.expTreeTypeofTypes.Add(((e1 != null) ? e1.typeofType : default(TypeRepTemplate))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2076:7: ( ',' en= expression[ObjectType] )*
                	do 
                	{
                	    int alt96 = 2;
                	    int LA96_0 = input.LA(1);

                	    if ( (LA96_0 == COMMA) )
                	    {
                	        alt96 = 1;
                	    }


                	    switch (alt96) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2076:8: ',' en= expression[ObjectType]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal268=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_expression_list3737); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal268_tree = (CommonTree)adaptor.DupNode(char_literal268);

                			    		adaptor.AddChild(root_0, char_literal268_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_expression_in_expression_list3743);
                			    	en = expression(ObjectType);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, en.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.expTypes.Add(((en != null) ? en.dotNetType : default(TypeRepTemplate))); retval.expTrees.Add(dupTree(((en != null) ? ((CommonTree)en.Tree) : null))); retval.expTreeTypeofTypes.Add(((en != null) ? en.typeofType : default(TypeRepTemplate))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop96;
                	    }
                	} while (true);

                	loop96:
                		;	// Stops C# compiler whining that label 'loop96' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "expression_list"

        public class assignment_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "assignment"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2078:1: assignment : ( ( ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | identifier ) assignment_operator )=> ( ^(d0= '.' se= expression[ObjectType] i= identifier ( generic_argument_list )? ) | i= identifier ) a= assignment_operator rhs= expression[lhsType] | ( ^( INDEX expression[ObjectType] ( expression_list )? ) assignment_operator )=> ^( INDEX ie= expression[ObjectType] ( expression_list )? ) ia= assignment_operator irhs= expression[lhsType] | unary_expression[ObjectType] assignment_operator expression[ObjectType] );
        public NetMaker.assignment_return assignment() // throws RecognitionException [1]
        {   
            NetMaker.assignment_return retval = new NetMaker.assignment_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree d0 = null;
            CommonTree INDEX270 = null;
            NetMaker.expression_return se = default(NetMaker.expression_return);

            NetMaker.identifier_return i = default(NetMaker.identifier_return);

            NetMaker.assignment_operator_return a = default(NetMaker.assignment_operator_return);

            NetMaker.expression_return rhs = default(NetMaker.expression_return);

            NetMaker.expression_return ie = default(NetMaker.expression_return);

            NetMaker.assignment_operator_return ia = default(NetMaker.assignment_operator_return);

            NetMaker.expression_return irhs = default(NetMaker.expression_return);

            NetMaker.generic_argument_list_return generic_argument_list269 = default(NetMaker.generic_argument_list_return);

            NetMaker.expression_list_return expression_list271 = default(NetMaker.expression_list_return);

            NetMaker.unary_expression_return unary_expression272 = default(NetMaker.unary_expression_return);

            NetMaker.assignment_operator_return assignment_operator273 = default(NetMaker.assignment_operator_return);

            NetMaker.expression_return expression274 = default(NetMaker.expression_return);


            CommonTree d0_tree=null;
            CommonTree INDEX270_tree=null;


                CommonTree ret = null;
                bool isThis = false;
                bool isLocalVar = false;
                TypeRepTemplate expType = null;
                TypeRepTemplate lhsType = ObjectType;

                ResolveResult fieldResult = null;
                ResolveResult indexerResult = null;

                CommonTree lhsTree = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2094:2: ( ( ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | identifier ) assignment_operator )=> ( ^(d0= '.' se= expression[ObjectType] i= identifier ( generic_argument_list )? ) | i= identifier ) a= assignment_operator rhs= expression[lhsType] | ( ^( INDEX expression[ObjectType] ( expression_list )? ) assignment_operator )=> ^( INDEX ie= expression[ObjectType] ( expression_list )? ) ia= assignment_operator irhs= expression[lhsType] | unary_expression[ObjectType] assignment_operator expression[ObjectType] )
                int alt100 = 3;
                alt100 = dfa100.Predict(input);
                switch (alt100) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:5: ( ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | identifier ) assignment_operator )=> ( ^(d0= '.' se= expression[ObjectType] i= identifier ( generic_argument_list )? ) | i= identifier ) a= assignment_operator rhs= expression[lhsType]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2096:9: ( ^(d0= '.' se= expression[ObjectType] i= identifier ( generic_argument_list )? ) | i= identifier )
                        	int alt98 = 2;
                        	int LA98_0 = input.LA(1);

                        	if ( (LA98_0 == DOT) )
                        	{
                        	    alt98 = 1;
                        	}
                        	else if ( (LA98_0 == IDENTIFIER || (LA98_0 >= ELIF && LA98_0 <= UNDEF) || LA98_0 == 195 || LA98_0 == 221 || (LA98_0 >= 224 && LA98_0 <= 239) || (LA98_0 >= 241 && LA98_0 <= 244) || (LA98_0 >= 247 && LA98_0 <= 250) || LA98_0 == 256 || (LA98_0 >= 263 && LA98_0 <= 264) || LA98_0 == 274 || LA98_0 == 277) )
                        	{
                        	    alt98 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d98s0 =
                        	        new NoViableAltException("", 98, 0, input);

                        	    throw nvae_d98s0;
                        	}
                        	switch (alt98) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2096:10: ^(d0= '.' se= expression[ObjectType] i= identifier ( generic_argument_list )? )
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	{
                        	        	CommonTree _save_last_1 = _last;
                        	        	CommonTree _first_1 = null;
                        	        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	d0=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_assignment3808); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{d0_tree = (CommonTree)adaptor.DupNode(d0);

                        	        		root_1 = (CommonTree)adaptor.BecomeRoot(d0_tree, root_1);
                        	        	}


                        	        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_expression_in_assignment3812);
                        	        	se = expression(ObjectType);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, se.Tree);
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_identifier_in_assignment3817);
                        	        	i = identifier();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, i.Tree);
                        	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2096:58: ( generic_argument_list )?
                        	        	int alt97 = 2;
                        	        	int LA97_0 = input.LA(1);

                        	        	if ( (LA97_0 == LTHAN) )
                        	        	{
                        	        	    alt97 = 1;
                        	        	}
                        	        	switch (alt97) 
                        	        	{
                        	        	    case 1 :
                        	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2096:58: generic_argument_list
                        	        	        {
                        	        	        	_last = (CommonTree)input.LT(1);
                        	        	        	PushFollow(FOLLOW_generic_argument_list_in_assignment3819);
                        	        	        	generic_argument_list269 = generic_argument_list();
                        	        	        	state._fsp--;
                        	        	        	if (state.failed) return retval;
                        	        	        	if ( (state.backtracking==0) ) 
                        	        	        	adaptor.AddChild(root_1, generic_argument_list269.Tree);

                        	        	        	if ( (state.backtracking==0) ) {
                        	        	        	}
                        	        	        }
                        	        	        break;

                        	        	}


                        	        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	        	}

                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	  lhsTree = dupTree(d0_tree); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2097:13: i= identifier
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_identifier_in_assignment3840);
                        	        	i = identifier();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, i.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   isThis = true; lhsTree = dupTree(((i != null) ? ((CommonTree)i.Tree) : null)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	                  TypeRepTemplate varType = SymTabLookup(((i != null) ? i.thetext : default(string)));
                        	                  if (isThis && varType != null) {
                        	                     isLocalVar = true;
                        	                     lhsType = varType;
                        	                  }   
                        	                  else {
                        	                     expType = (isThis ? SymTabLookup("this") : ((se != null) ? se.dotNetType : default(TypeRepTemplate)));
                        	                     if (expType == null) {
                        	                        expType = new UnknownRepTemplate("FIELD.BASE");
                        	                     }
                        	                     if (expType.IsUnknownType) {
                        	                        WarningFailedResolve(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line, "Could not find type of expression for field /property access");
                        	                     }
                        	                     fieldResult = expType.Resolve(((i != null) ? i.thetext : default(string)), true, AppEnv);
                        	                     if (fieldResult != null) {
                        	                        lhsType = fieldResult.ResultType ?? lhsType;
                        	                     }
                        	                  }
                        	              
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_assignment_operator_in_assignment3872);
                        	a = assignment_operator();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, a.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_assignment3876);
                        	rhs = expression(lhsType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, rhs.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	              CommonTree assignmentOp = ((a != null) ? ((CommonTree)a.Tree) : null);
                        	              CommonTree rhsTree = ((rhs != null) ? ((CommonTree)rhs.Tree) : null);
                        	              TypeRepTemplate rhsType = ((rhs != null) ? rhs.dotNetType : default(TypeRepTemplate)) ?? ObjectType;
                        	              // Is lhs a delegate and assignment one of += -=?
                        	              if (lhsType is DelegateRepTemplate && (assignmentOp.Token.Type == PLUS_ASSIGN || assignmentOp.Token.Type == MINUS_ASSIGN)) {
                        	                 // rewrite to lhs = <op>(lhs,rhs)
                        	                 // First calculate new rhs
                        	                 CommonTree lhsGetter = lhsTree;
                        	                 // Do we have a getter for lhs
                        	                 if (isLocalVar && lhsType.IsWrapped) {
                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    myMap["this"] = wrapExpression(((i != null) ? ((CommonTree)i.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                    lhsGetter = mkJavaWrapper("${this}.getValue()", myMap, ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                 }
                        	                 else if (expType != null) {
                        	                    // Is lhs a property?
                        	                    ResolveResult readFieldResult = expType.Resolve(((i != null) ? i.thetext : default(string)), false, AppEnv);
                        	                    if (readFieldResult.Result is PropRepTemplate) {
                        	                       if (!String.IsNullOrEmpty(readFieldResult.Result.Warning)) Warning(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line, readFieldResult.Result.Warning);
                        	                       PropRepTemplate readPropRep = readFieldResult.Result as PropRepTemplate;
                        	                    
                        	                       if (!String.IsNullOrEmpty(readPropRep.JavaGet)) {
                        	                          // need to translate to setProp(getProp <op> rhs)
                        	                          Dictionary<string,CommonTree> rhsMap = new Dictionary<string,CommonTree>();
                        	                          if (!isThis)
                        	                             rhsMap["this"] = wrapExpression(((se != null) ? ((CommonTree)se.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                          lhsGetter = mkJavaWrapper(readPropRep.JavaGet, rhsMap, assignmentOp.Token);
                        	                          lhsType = readFieldResult.ResultType;
                        	                       }
                        	                    }
                        	                 }
                        	                 // OK, lhsGetter is good for use.
                        	                 List<TypeRepTemplate> args = new List<TypeRepTemplate>();
                        	                 args.Add(lhsType);
                        	                 args.Add(rhsType == null ? lhsType : rhsType);
                        	                 ResolveResult calleeResult = lhsType.Resolve(assignmentOp.Token.Type == PLUS_ASSIGN ? "Combine" : "Remove", args, AppEnv);
                        	                 if (calleeResult != null) {
                        	                    if (!String.IsNullOrEmpty(calleeResult.Result.Warning)) Warning(assignmentOp.Token.Line, calleeResult.Result.Warning);
                        	                    
                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    MethodRepTemplate calleeMethod = calleeResult.Result as MethodRepTemplate;
                        	                    myMap[calleeMethod.Params[0].Name] = wrapArgument(lhsGetter, assignmentOp.token);
                        	                    myMap[calleeMethod.Params[1].Name] = wrapArgument(rhsTree, assignmentOp.token);
                        	                    rhsTree = mkJavaWrapper(calleeMethod.Java, myMap, assignmentOp.token);
                        	                    AddToImports(calleeMethod.Imports);
                        	                    rhsType = calleeResult.ResultType; 
                        	                    assignmentOp = (CommonTree)adaptor.Create(ASSIGN, assignmentOp.Token, "=");
                        	                    
                        	                    // set up a default ret
                        	                    ret = (CommonTree)adaptor.Nil;
                        	                    adaptor.AddChild(ret, dupTree(lhsTree));
                        	                    adaptor.AddChild(ret, dupTree(assignmentOp));
                        	                    adaptor.AddChild(ret, dupTree(rhsTree));
                        	                 }
                        	                 else {
                        	                    WarningFailedResolve(assignmentOp.Token.Line, "Could not resolve method application of " + (assignmentOp.Token.Type == PLUS_ASSIGN ? "Combine" : "Remove") + " against " + lhsType.TypeName);
                        	                 }
                        	              } 
                        	              if (isLocalVar) {
                        	                 // Is this a wrapped parameter?
                        	                 if (lhsType.IsWrapped) {
                        	                    CommonTree newRhsExp = rhsTree;
                        	                    if (assignmentOp.Token.Type != ASSIGN) {
                        	                       Dictionary<string,CommonTree> rhsMap = new Dictionary<string,CommonTree>();
                        	                       rhsMap["this"] = wrapExpression(((i != null) ? ((CommonTree)i.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                       CommonTree rhsPropTree = mkJavaWrapper("${this}.getValue()", rhsMap, assignmentOp.Token);
                        	                       newRhsExp = mkOpExp(mkOpExp(assignmentOp), rhsPropTree, rhsTree);
                        	                    }
                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    myMap["this"] = wrapExpression(((i != null) ? ((CommonTree)i.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                    myMap["value"] = wrapExpression(newRhsExp, rhsTree.Token);
                        	                    ret = mkJavaWrapper("${this}.setValue(${value})", myMap, ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                  }
                        	                 // a simple variable assignment
                        	              }
                        	              else {
                        	                 if (fieldResult != null) {
                        	                    if (!String.IsNullOrEmpty(fieldResult.Result.Warning)) Warning(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line, fieldResult.Result.Warning);
                        	                    if (fieldResult.Result is PropRepTemplate) {
                        	                       PropRepTemplate propRep = fieldResult.Result as PropRepTemplate;
                        	                       if (!String.IsNullOrEmpty(propRep.JavaSet)) {
                        	                          CommonTree newRhsExp = rhsTree;
                        	                          // if assignment operator is a short cut operator then only translate if we also have JavaGet  
                        	                          bool goodTx = true;
                        	                          if (assignmentOp.Token.Type != ASSIGN) {
                        	                             // We have to resolve property reads and writes separately, because they may come from 
                        	                             // different parent classes
                        	                             ResolveResult readFieldResult = expType.Resolve(((i != null) ? i.thetext : default(string)), false, AppEnv);
                        	                             if (readFieldResult.Result is PropRepTemplate) {
                        	                                if (!String.IsNullOrEmpty(readFieldResult.Result.Warning)) Warning(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line, readFieldResult.Result.Warning);
                        	                                PropRepTemplate readPropRep = readFieldResult.Result as PropRepTemplate;

                        	                                if (!String.IsNullOrEmpty(readPropRep.JavaGet)) {
                        	                                   // we have prop <op>= rhs
                        	                                   // need to translate to setProp(getProp <op> rhs)
                        	                                   Dictionary<string,CommonTree> rhsMap = new Dictionary<string,CommonTree>();
                        	                                   if (!isThis)
                        	                                      rhsMap["this"] = wrapExpression(((se != null) ? ((CommonTree)se.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                                   CommonTree rhsPropTree = mkJavaWrapper(readPropRep.JavaGet, rhsMap, assignmentOp.Token);
                        	                                   newRhsExp = mkOpExp(mkOpExp(assignmentOp), rhsPropTree, rhsTree);
                        	                                }
                        	                                else {
                        	                                   goodTx = false;
                        	                                }
                        	                             }
                        	                          }
                        	                          Dictionary<string,CommonTree> valMap = new Dictionary<string,CommonTree>();
                        	                          if (!isThis)
                        	                             valMap["this"] = wrapExpression(((se != null) ? ((CommonTree)se.Tree) : null), ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                          valMap["value"] = wrapExpression(newRhsExp, ((i != null) ? ((CommonTree)i.Tree) : null).Token);
                        	                          if (goodTx) {
                        	                             ret = mkJavaWrapper(propRep.JavaSet, valMap, assignmentOp.Token);
                        	                             AddToImports(propRep.Imports);
                        	                          }
                        	                       }
                        	                    }
                        	                 }
                        	                 else {
                        	                    WarningFailedResolve(((i != null) ? ((CommonTree)i.Tree) : null).Token.Line, "Could not resolve field or property expression against " + expType.ToString());
                        	                 }
                        	              }
                        	          
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2242:7: ( ^( INDEX expression[ObjectType] ( expression_list )? ) assignment_operator )=> ^( INDEX ie= expression[ObjectType] ( expression_list )? ) ia= assignment_operator irhs= expression[lhsType]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	INDEX270=(CommonTree)Match(input,INDEX,FOLLOW_INDEX_in_assignment3923); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{INDEX270_tree = (CommonTree)adaptor.DupNode(INDEX270);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(INDEX270_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_assignment3927);
                        	ie = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, ie.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2243:43: ( expression_list )?
                        	int alt99 = 2;
                        	int LA99_0 = input.LA(1);

                        	if ( ((LA99_0 >= PARAMS && LA99_0 <= PARAMS_TYPELESS) || (LA99_0 >= MONOPLUS && LA99_0 <= APPLY) || (LA99_0 >= NEW && LA99_0 <= NEW_ARRAY) || LA99_0 == NEW_ANON_OBJECT || (LA99_0 >= OBJECT && LA99_0 <= THIS) || LA99_0 == NULL_COALESCE || (LA99_0 >= COND_EXPR && LA99_0 <= LEFT_SHIFT) || (LA99_0 >= SUPER && LA99_0 <= LAMBDA) || LA99_0 == CAST_EXPR || (LA99_0 >= BOOL && LA99_0 <= GT) || (LA99_0 >= ELIF && LA99_0 <= UNDEF) || LA99_0 == 195 || LA99_0 == 208 || (LA99_0 >= 214 && LA99_0 <= 219) || LA99_0 == 221 || (LA99_0 >= 224 && LA99_0 <= 239) || (LA99_0 >= 241 && LA99_0 <= 244) || (LA99_0 >= 247 && LA99_0 <= 254) || LA99_0 == 256 || (LA99_0 >= 263 && LA99_0 <= 264) || (LA99_0 >= 274 && LA99_0 <= 277)) )
                        	{
                        	    alt99 = 1;
                        	}
                        	switch (alt99) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2243:43: expression_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_expression_list_in_assignment3930);
                        	        	expression_list271 = expression_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, expression_list271.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	              expType = ((ie != null) ? ie.dotNetType : default(TypeRepTemplate)) ?? (new UnknownRepTemplate("INDEXER.BASE"));
                        	              if (expType.IsUnknownType) {
                        	                 WarningFailedResolve(((ie != null) ? ((CommonTree)ie.Tree) : null).Token.Line, "Could not find type of expression for Indexer");
                        	              }
                        	              indexerResult = expType.ResolveIndexer(((expression_list271 != null) ? expression_list271.expTypes : default(List<TypeRepTemplate>)) ?? new List<TypeRepTemplate>(), AppEnv);
                        	              if (indexerResult != null) {
                        	                 lhsType = indexerResult.ResultType ?? lhsType;
                        	              }
                        	            
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_assignment_operator_in_assignment3959);
                        	ia = assignment_operator();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, ia.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_assignment3963);
                        	irhs = expression(lhsType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, irhs.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	              if (indexerResult != null) {
                        	                 if (!String.IsNullOrEmpty(indexerResult.Result.Warning)) Warning(((ia != null) ? ((CommonTree)ia.Tree) : null).Token.Line, indexerResult.Result.Warning);
                        	                 IndexerRepTemplate indexerRep = indexerResult.Result as IndexerRepTemplate;
                        	                 if (!String.IsNullOrEmpty(indexerRep.JavaSet)) {
                        	                    CommonTree newRhsExp = ((irhs != null) ? ((CommonTree)irhs.Tree) : null);
                        	                    // if assignment operator is a short cut operator then only translate if we also have JavaGet  
                        	                    bool goodTx = true;
                        	                    if (((ia != null) ? ((CommonTree)ia.Tree) : null).Token.Type != ASSIGN) {
                        	                       if (!String.IsNullOrEmpty(indexerRep.JavaGet)) {
                        	                          // we have indexable[args] <op>= rhs
                        	                          // need to translate to set___idx(args, get___idx(args) <op> rhs)
                        	                          Dictionary<string,CommonTree> rhsMap = new Dictionary<string,CommonTree>();
                        	                          rhsMap["this"] = wrapExpression(((ie != null) ? ((CommonTree)ie.Tree) : null), ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                          populateParamMap(rhsMap, indexerRep.Params, ((expression_list271 != null) ? expression_list271.expTrees : default(List<CommonTree>)), ((expression_list271 != null) ? expression_list271.expTreeTypeofTypes : default(List<TypeRepTemplate>)), null, wantsStar(indexerRep.JavaGet), ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                          CommonTree rhsIdxTree = mkJavaWrapper(indexerRep.JavaGet, rhsMap, ((ia != null) ? ((CommonTree)ia.Tree) : null).Token);
                        	                          newRhsExp = mkOpExp(mkOpExp(((ia != null) ? ((CommonTree)ia.Tree) : null)), rhsIdxTree, ((irhs != null) ? ((CommonTree)irhs.Tree) : null));
                        	                       }
                        	                       else {
                        	                          goodTx = false;
                        	                       }
                        	                    }

                        	                    Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                    myMap["this"] = wrapExpression(((ie != null) ? ((CommonTree)ie.Tree) : null), ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                    myMap["value"] = wrapExpression(newRhsExp, newRhsExp.Token);
                        	                    populateParamMap(myMap, indexerRep.Params, ((expression_list271 != null) ? expression_list271.expTrees : default(List<CommonTree>)), ((expression_list271 != null) ? expression_list271.expTreeTypeofTypes : default(List<TypeRepTemplate>)), null, wantsStar(indexerRep.JavaSet), ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                    if (goodTx) {
                        	                       ret = mkJavaWrapper(indexerRep.JavaSet, myMap, ((ie != null) ? ((CommonTree)ie.Tree) : null).Token);
                        	                       AddToImports(indexerRep.Imports);
                        	                    }
                        	                 }   
                        	              }
                        	              else {
                        	                 WarningFailedResolve(((ie != null) ? ((CommonTree)ie.Tree) : null).Token.Line, "Could not resolve index expression against " + expType.ToString());
                        	              }
                        	        
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2292:7: unary_expression[ObjectType] assignment_operator expression[ObjectType]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_assignment3983);
                        	unary_expression272 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, unary_expression272.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_assignment_operator_in_assignment3988);
                        	assignment_operator273 = assignment_operator();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, assignment_operator273.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_assignment3990);
                        	expression274 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression274.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (ret != null)
                          retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "assignment"

        public class unary_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public string rmId;
            public TypeRepTemplate typeofType;
            public string thedottedtext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unary_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2295:1: unary_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( cast_expression | primary_or_array_creation_expression[$typeCtxt] | ^( MONOPLUS u1= unary_expression[ObjectType] ) | ^( MONOMINUS u2= unary_expression[ObjectType] ) | ^( MONONOT u3= unary_expression[ObjectType] ) | ^( MONOTWIDDLE u4= unary_expression[ObjectType] ) | ^( PREINC u5= unary_expression[ObjectType] ) | ^( PREDEC u6= unary_expression[ObjectType] ) | ^( MONOSTAR unary_expression[ObjectType] ) | ^( ADDRESSOF unary_expression[ObjectType] ) | ^( PARENS expression[$typeCtxt] ) );
        public NetMaker.unary_expression_return unary_expression(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.unary_expression_return retval = new NetMaker.unary_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree MONOPLUS277 = null;
            CommonTree MONOMINUS278 = null;
            CommonTree MONONOT279 = null;
            CommonTree MONOTWIDDLE280 = null;
            CommonTree PREINC281 = null;
            CommonTree PREDEC282 = null;
            CommonTree MONOSTAR283 = null;
            CommonTree ADDRESSOF285 = null;
            CommonTree PARENS287 = null;
            NetMaker.unary_expression_return u1 = default(NetMaker.unary_expression_return);

            NetMaker.unary_expression_return u2 = default(NetMaker.unary_expression_return);

            NetMaker.unary_expression_return u3 = default(NetMaker.unary_expression_return);

            NetMaker.unary_expression_return u4 = default(NetMaker.unary_expression_return);

            NetMaker.unary_expression_return u5 = default(NetMaker.unary_expression_return);

            NetMaker.unary_expression_return u6 = default(NetMaker.unary_expression_return);

            NetMaker.cast_expression_return cast_expression275 = default(NetMaker.cast_expression_return);

            NetMaker.primary_or_array_creation_expression_return primary_or_array_creation_expression276 = default(NetMaker.primary_or_array_creation_expression_return);

            NetMaker.unary_expression_return unary_expression284 = default(NetMaker.unary_expression_return);

            NetMaker.unary_expression_return unary_expression286 = default(NetMaker.unary_expression_return);

            NetMaker.expression_return expression288 = default(NetMaker.expression_return);


            CommonTree MONOPLUS277_tree=null;
            CommonTree MONOMINUS278_tree=null;
            CommonTree MONONOT279_tree=null;
            CommonTree MONOTWIDDLE280_tree=null;
            CommonTree PREINC281_tree=null;
            CommonTree PREDEC282_tree=null;
            CommonTree MONOSTAR283_tree=null;
            CommonTree ADDRESSOF285_tree=null;
            CommonTree PARENS287_tree=null;


               retval.thedottedtext =  null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2298:2: ( cast_expression | primary_or_array_creation_expression[$typeCtxt] | ^( MONOPLUS u1= unary_expression[ObjectType] ) | ^( MONOMINUS u2= unary_expression[ObjectType] ) | ^( MONONOT u3= unary_expression[ObjectType] ) | ^( MONOTWIDDLE u4= unary_expression[ObjectType] ) | ^( PREINC u5= unary_expression[ObjectType] ) | ^( PREDEC u6= unary_expression[ObjectType] ) | ^( MONOSTAR unary_expression[ObjectType] ) | ^( ADDRESSOF unary_expression[ObjectType] ) | ^( PARENS expression[$typeCtxt] ) )
                int alt101 = 11;
                alt101 = dfa101.Predict(input);
                switch (alt101) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2301:5: cast_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_cast_expression_in_unary_expression4018);
                        	cast_expression275 = cast_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, cast_expression275.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((cast_expression275 != null) ? cast_expression275.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2302:4: primary_or_array_creation_expression[$typeCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_primary_or_array_creation_expression_in_unary_expression4053);
                        	primary_or_array_creation_expression276 = primary_or_array_creation_expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, primary_or_array_creation_expression276.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((primary_or_array_creation_expression276 != null) ? primary_or_array_creation_expression276.dotNetType : default(TypeRepTemplate)); retval.rmId =  ((primary_or_array_creation_expression276 != null) ? primary_or_array_creation_expression276.rmId : default(string)); retval.typeofType =  ((primary_or_array_creation_expression276 != null) ? primary_or_array_creation_expression276.typeofType : default(TypeRepTemplate)); retval.thedottedtext =  ((primary_or_array_creation_expression276 != null) ? primary_or_array_creation_expression276.thedottedtext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2303:4: ^( MONOPLUS u1= unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	MONOPLUS277=(CommonTree)Match(input,MONOPLUS,FOLLOW_MONOPLUS_in_unary_expression4067); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{MONOPLUS277_tree = (CommonTree)adaptor.DupNode(MONOPLUS277);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(MONOPLUS277_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4071);
                        	u1 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, u1.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((u1 != null) ? u1.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2304:4: ^( MONOMINUS u2= unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	MONOMINUS278=(CommonTree)Match(input,MONOMINUS,FOLLOW_MONOMINUS_in_unary_expression4091); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{MONOMINUS278_tree = (CommonTree)adaptor.DupNode(MONOMINUS278);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(MONOMINUS278_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4095);
                        	u2 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, u2.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((u2 != null) ? u2.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2305:4: ^( MONONOT u3= unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	MONONOT279=(CommonTree)Match(input,MONONOT,FOLLOW_MONONOT_in_unary_expression4114); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{MONONOT279_tree = (CommonTree)adaptor.DupNode(MONONOT279);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(MONONOT279_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4118);
                        	u3 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, u3.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((u3 != null) ? u3.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2306:4: ^( MONOTWIDDLE u4= unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	MONOTWIDDLE280=(CommonTree)Match(input,MONOTWIDDLE,FOLLOW_MONOTWIDDLE_in_unary_expression4139); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{MONOTWIDDLE280_tree = (CommonTree)adaptor.DupNode(MONOTWIDDLE280);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(MONOTWIDDLE280_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4143);
                        	u4 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, u4.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((u4 != null) ? u4.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2307:4: ^( PREINC u5= unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	PREINC281=(CommonTree)Match(input,PREINC,FOLLOW_PREINC_in_unary_expression4160); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{PREINC281_tree = (CommonTree)adaptor.DupNode(PREINC281);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(PREINC281_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4164);
                        	u5 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, u5.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((u5 != null) ? u5.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2308:4: ^( PREDEC u6= unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	PREDEC282=(CommonTree)Match(input,PREDEC,FOLLOW_PREDEC_in_unary_expression4186); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{PREDEC282_tree = (CommonTree)adaptor.DupNode(PREDEC282);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(PREDEC282_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4190);
                        	u6 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, u6.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((u6 != null) ? u6.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2309:4: ^( MONOSTAR unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	MONOSTAR283=(CommonTree)Match(input,MONOSTAR,FOLLOW_MONOSTAR_in_unary_expression4212); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{MONOSTAR283_tree = (CommonTree)adaptor.DupNode(MONOSTAR283);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(MONOSTAR283_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4214);
                        	unary_expression284 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, unary_expression284.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ObjectType; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2310:4: ^( ADDRESSOF unary_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	ADDRESSOF285=(CommonTree)Match(input,ADDRESSOF,FOLLOW_ADDRESSOF_in_unary_expression4237); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{ADDRESSOF285_tree = (CommonTree)adaptor.DupNode(ADDRESSOF285);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(ADDRESSOF285_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4239);
                        	unary_expression286 = unary_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, unary_expression286.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ObjectType; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2311:4: ^( PARENS expression[$typeCtxt] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	PARENS287=(CommonTree)Match(input,PARENS,FOLLOW_PARENS_in_unary_expression4261); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{PARENS287_tree = (CommonTree)adaptor.DupNode(PARENS287);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(PARENS287_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_unary_expression4263);
                        	expression288 = expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, expression288.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((expression288 != null) ? expression288.dotNetType : default(TypeRepTemplate)); retval.rmId =  ((expression288 != null) ? expression288.rmId : default(string)); retval.typeofType =  ((expression288 != null) ? expression288.typeofType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unary_expression"

        public class cast_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "cast_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2314:1: cast_expression returns [TypeRepTemplate dotNetType] : ^(c= CAST_EXPR type expression[$type.dotNetType ?? ObjectType] ) -> ^( $c expression ) ;
        public NetMaker.cast_expression_return cast_expression() // throws RecognitionException [1]
        {   
            NetMaker.cast_expression_return retval = new NetMaker.cast_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            NetMaker.type_return type289 = default(NetMaker.type_return);

            NetMaker.expression_return expression290 = default(NetMaker.expression_return);


            CommonTree c_tree=null;
            RewriteRuleNodeStream stream_CAST_EXPR = new RewriteRuleNodeStream(adaptor,"token CAST_EXPR");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");

                CommonTree ret = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2321:2: ( ^(c= CAST_EXPR type expression[$type.dotNetType ?? ObjectType] ) -> ^( $c expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2322:5: ^(c= CAST_EXPR type expression[$type.dotNetType ?? ObjectType] )
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_cast_expression4319); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CAST_EXPR.Add(c);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_cast_expression4321);
                	type289 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(type289.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_cast_expression4323);
                	expression290 = expression(((type289 != null) ? type289.dotNetType : default(TypeRepTemplate)) ?? ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_expression.Add(expression290.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}

                	if ( (state.backtracking==0) )
                	{
                	   
                	              retval.dotNetType =  ((type289 != null) ? type289.dotNetType : default(TypeRepTemplate));
                	              if (((type289 != null) ? type289.dotNetType : default(TypeRepTemplate)) != null && ((expression290 != null) ? expression290.dotNetType : default(TypeRepTemplate)) != null) {
                	                  // see if expression's type has a cast to type
                	                  ResolveResult kaster = ((expression290 != null) ? expression290.dotNetType : default(TypeRepTemplate)).ResolveCastTo(((type289 != null) ? type289.dotNetType : default(TypeRepTemplate)), AppEnv);
                	                  if (kaster == null) {
                	                      // see if type has a cast from expression's type
                	                      kaster = ((type289 != null) ? type289.dotNetType : default(TypeRepTemplate)).ResolveCastFrom(((expression290 != null) ? expression290.dotNetType : default(TypeRepTemplate)), AppEnv);
                	                  }
                	                  if (kaster != null) {
                	                      if (!String.IsNullOrEmpty(kaster.Result.Warning)) Warning(((c != null) ? c.Line : 0), kaster.Result.Warning);
                	                      Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                	                      myMap["expr"] = wrapExpression(((expression290 != null) ? ((CommonTree)expression290.Tree) : null), c.token);
                	                      myMap["TYPEOF_totype"] = wrapTypeOfType(((type289 != null) ? type289.dotNetType : default(TypeRepTemplate)), c.token);
                	                      myMap["TYPEOF_expr"] = wrapTypeOfType(((expression290 != null) ? expression290.dotNetType : default(TypeRepTemplate)), c.token);
                	                      ret = mkJavaWrapper(kaster.Result.Java, myMap, c.token);
                	                      AddToImports(kaster.Result.Imports);
                	                  }
                	              }
                	         
                	}


                	// AST REWRITE
                	// elements:          expression, c
                	// token labels:      c
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_c = new RewriteRuleNodeStream(adaptor, "token c", c);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2343:10: -> ^( $c expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2343:14: ^( $c expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_c.NextNode(), root_1);

                	    adaptor.AddChild(root_1,  (((expression290 != null) ? expression290.dotNetType : default(TypeRepTemplate)) != null && ((expression290 != null) ? expression290.dotNetType : default(TypeRepTemplate)).TypeName == "System.Object" ? mkBoxedType(((type289 != null) ? ((CommonTree)type289.Tree) : null), ((type289 != null) ? ((CommonTree)type289.Tree) : null).Token) : ((type289 != null) ? ((CommonTree)type289.Tree) : null)) );
                	    adaptor.AddChild(root_1, stream_expression.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (ret != null)
                          retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "cast_expression"

        public class assignment_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "assignment_operator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2346:1: assignment_operator : ( '=' | shortcut_assignment_operator );
        public NetMaker.assignment_operator_return assignment_operator() // throws RecognitionException [1]
        {   
            NetMaker.assignment_operator_return retval = new NetMaker.assignment_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal291 = null;
            NetMaker.shortcut_assignment_operator_return shortcut_assignment_operator292 = default(NetMaker.shortcut_assignment_operator_return);


            CommonTree char_literal291_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2346:20: ( '=' | shortcut_assignment_operator )
                int alt102 = 2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0 == ASSIGN) )
                {
                    alt102 = 1;
                }
                else if ( ((LA102_0 >= PLUS_ASSIGN && LA102_0 <= RIGHT_SHIFT_ASSIGN)) )
                {
                    alt102 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d102s0 =
                        new NoViableAltException("", 102, 0, input);

                    throw nvae_d102s0;
                }
                switch (alt102) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2347:2: '='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal291=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_operator4385); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal291_tree = (CommonTree)adaptor.DupNode(char_literal291);

                        		adaptor.AddChild(root_0, char_literal291_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2347:8: shortcut_assignment_operator
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_shortcut_assignment_operator_in_assignment_operator4389);
                        	shortcut_assignment_operator292 = shortcut_assignment_operator();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, shortcut_assignment_operator292.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "assignment_operator"

        public class shortcut_assignment_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "shortcut_assignment_operator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2348:1: shortcut_assignment_operator : ( '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | RIGHT_SHIFT_ASSIGN );
        public NetMaker.shortcut_assignment_operator_return shortcut_assignment_operator() // throws RecognitionException [1]
        {   
            NetMaker.shortcut_assignment_operator_return retval = new NetMaker.shortcut_assignment_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set293 = null;

            CommonTree set293_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2348:29: ( '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | RIGHT_SHIFT_ASSIGN )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set293 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= PLUS_ASSIGN && input.LA(1) <= RIGHT_SHIFT_ASSIGN) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set293_tree = (CommonTree)adaptor.DupNode(set293);

                	    adaptor.AddChild(root_0, set293_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "shortcut_assignment_operator"

        public class non_assignment_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public string rmId;
            public TypeRepTemplate typeofType;
            public string thedottedtext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "non_assignment_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2358:1: non_assignment_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( ( ( anonymous_function_signature[null] )? '=>' )=> lambda_expression[$typeCtxt] | ( query_expression )=> query_expression | ^( COND_EXPR non_assignment_expression[ObjectType] e1= expression[ObjectType] e2= expression[ObjectType] ) | ^( '??' n1= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '||' n2= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '&&' n3= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '|' n4= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '^' n5= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '&' n6= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^(eq= '==' ne1= non_assignment_expression[ObjectType] ne2= non_assignment_expression[ObjectType] opse= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] opde= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] ) -> {stringArgs}? $opse -> {dateArgs}? $opde -> ^( $eq $ne1 $ne2) | ^(neq= '!=' neqo1= non_assignment_expression[ObjectType] neqo2= non_assignment_expression[ObjectType] opse1= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opsne= magicNegate[stringArgs, $opse1.tree, $neq.token] opde1= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opdne= magicNegate[dateArgs, $opde1.tree, $neq.token] ) -> {stringArgs}? $opsne -> {dateArgs}? $opdne -> ^( $neq $neqo1 $neqo2) | ^(gt= '>' gt1= non_assignment_expression[ObjectType] gt2= non_assignment_expression[ObjectType] opgt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $gt2.tree, $gt1.tree, $gt.token] ) -> {dateArgs}? $opgt -> ^( $gt $gt1 $gt2) | ^(lt= '<' lt1= non_assignment_expression[ObjectType] lt2= non_assignment_expression[ObjectType] oplt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $lt1.tree, $lt2.tree, $lt.token] ) -> {dateArgs}? $oplt -> ^( $lt $lt1 $lt2) | ^(ge= '>=' ge1= non_assignment_expression[ObjectType] ge2= non_assignment_expression[ObjectType] opge= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $ge2.tree, $ge1.tree, $ge.token] ) -> {dateArgs}? $opge -> ^( $ge $ge1 $ge2) | ^(le= '<=' le1= non_assignment_expression[ObjectType] le2= non_assignment_expression[ObjectType] ople= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $le1.tree, $le2.tree, $le.token] ) -> {dateArgs}? $ople -> ^( $le $le1 $le2) | ^( INSTANCEOF non_assignment_expression[ObjectType] non_nullable_type ) | ^( '<<' n7= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( RIGHT_SHIFT n8= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^(pl= '+' n9= non_assignment_expression[ObjectType] n92= non_assignment_expression[ObjectType] ) | ^(ne= '-' n10= non_assignment_expression[ObjectType] n102= non_assignment_expression[ObjectType] ) | ^( '*' n11= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '/' n12= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '%' n13= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | unary_expression[$typeCtxt] );
        public NetMaker.non_assignment_expression_return non_assignment_expression(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            MkNonGeneric_stack.Push(new MkNonGeneric_scope());
            PrimitiveRep_stack.Push(new PrimitiveRep_scope());

            NetMaker.non_assignment_expression_return retval = new NetMaker.non_assignment_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree eq = null;
            CommonTree neq = null;
            CommonTree gt = null;
            CommonTree lt = null;
            CommonTree ge = null;
            CommonTree le = null;
            CommonTree pl = null;
            CommonTree ne = null;
            CommonTree COND_EXPR296 = null;
            CommonTree string_literal298 = null;
            CommonTree string_literal300 = null;
            CommonTree string_literal302 = null;
            CommonTree char_literal304 = null;
            CommonTree char_literal306 = null;
            CommonTree char_literal308 = null;
            CommonTree INSTANCEOF310 = null;
            CommonTree string_literal313 = null;
            CommonTree RIGHT_SHIFT315 = null;
            CommonTree char_literal317 = null;
            CommonTree char_literal319 = null;
            CommonTree char_literal321 = null;
            NetMaker.expression_return e1 = default(NetMaker.expression_return);

            NetMaker.expression_return e2 = default(NetMaker.expression_return);

            NetMaker.non_assignment_expression_return n1 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n2 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n3 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n4 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n5 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n6 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return ne1 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return ne2 = default(NetMaker.non_assignment_expression_return);

            NetMaker.magicSupportOp_return opse = default(NetMaker.magicSupportOp_return);

            NetMaker.magicSupportOp_return opde = default(NetMaker.magicSupportOp_return);

            NetMaker.non_assignment_expression_return neqo1 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return neqo2 = default(NetMaker.non_assignment_expression_return);

            NetMaker.magicSupportOp_return opse1 = default(NetMaker.magicSupportOp_return);

            NetMaker.magicNegate_return opsne = default(NetMaker.magicNegate_return);

            NetMaker.magicSupportOp_return opde1 = default(NetMaker.magicSupportOp_return);

            NetMaker.magicNegate_return opdne = default(NetMaker.magicNegate_return);

            NetMaker.non_assignment_expression_return gt1 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return gt2 = default(NetMaker.non_assignment_expression_return);

            NetMaker.magicSupportOp_return opgt = default(NetMaker.magicSupportOp_return);

            NetMaker.non_assignment_expression_return lt1 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return lt2 = default(NetMaker.non_assignment_expression_return);

            NetMaker.magicSupportOp_return oplt = default(NetMaker.magicSupportOp_return);

            NetMaker.non_assignment_expression_return ge1 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return ge2 = default(NetMaker.non_assignment_expression_return);

            NetMaker.magicSupportOp_return opge = default(NetMaker.magicSupportOp_return);

            NetMaker.non_assignment_expression_return le1 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return le2 = default(NetMaker.non_assignment_expression_return);

            NetMaker.magicSupportOp_return ople = default(NetMaker.magicSupportOp_return);

            NetMaker.non_assignment_expression_return n7 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n8 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n9 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n92 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n10 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n102 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n11 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n12 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return n13 = default(NetMaker.non_assignment_expression_return);

            NetMaker.lambda_expression_return lambda_expression294 = default(NetMaker.lambda_expression_return);

            NetMaker.query_expression_return query_expression295 = default(NetMaker.query_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression297 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression299 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression301 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression303 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression305 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression307 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression309 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression311 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_nullable_type_return non_nullable_type312 = default(NetMaker.non_nullable_type_return);

            NetMaker.non_assignment_expression_return non_assignment_expression314 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression316 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression318 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression320 = default(NetMaker.non_assignment_expression_return);

            NetMaker.non_assignment_expression_return non_assignment_expression322 = default(NetMaker.non_assignment_expression_return);

            NetMaker.unary_expression_return unary_expression323 = default(NetMaker.unary_expression_return);


            CommonTree eq_tree=null;
            CommonTree neq_tree=null;
            CommonTree gt_tree=null;
            CommonTree lt_tree=null;
            CommonTree ge_tree=null;
            CommonTree le_tree=null;
            CommonTree pl_tree=null;
            CommonTree ne_tree=null;
            CommonTree COND_EXPR296_tree=null;
            CommonTree string_literal298_tree=null;
            CommonTree string_literal300_tree=null;
            CommonTree string_literal302_tree=null;
            CommonTree char_literal304_tree=null;
            CommonTree char_literal306_tree=null;
            CommonTree char_literal308_tree=null;
            CommonTree INSTANCEOF310_tree=null;
            CommonTree string_literal313_tree=null;
            CommonTree RIGHT_SHIFT315_tree=null;
            CommonTree char_literal317_tree=null;
            CommonTree char_literal319_tree=null;
            CommonTree char_literal321_tree=null;
            RewriteRuleNodeStream stream_LTHAN = new RewriteRuleNodeStream(adaptor,"token LTHAN");
            RewriteRuleNodeStream stream_GT = new RewriteRuleNodeStream(adaptor,"token GT");
            RewriteRuleNodeStream stream_NOT_EQUAL = new RewriteRuleNodeStream(adaptor,"token NOT_EQUAL");
            RewriteRuleNodeStream stream_LTE = new RewriteRuleNodeStream(adaptor,"token LTE");
            RewriteRuleNodeStream stream_EQUAL = new RewriteRuleNodeStream(adaptor,"token EQUAL");
            RewriteRuleNodeStream stream_GTE = new RewriteRuleNodeStream(adaptor,"token GTE");
            RewriteRuleSubtreeStream stream_magicSupportOp = new RewriteRuleSubtreeStream(adaptor,"rule magicSupportOp");
            RewriteRuleSubtreeStream stream_magicNegate = new RewriteRuleSubtreeStream(adaptor,"rule magicNegate");
            RewriteRuleSubtreeStream stream_non_assignment_expression = new RewriteRuleSubtreeStream(adaptor,"rule non_assignment_expression");

                ((MkNonGeneric_scope)MkNonGeneric_stack.Peek()).scrubGenericArgs =  false;
                ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  false;
                bool nullArg = false;
                bool stringArgs = false;
                bool dateArgs = false;
                retval.thedottedtext =  null;
                CommonTree ret = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2372:2: ( ( ( anonymous_function_signature[null] )? '=>' )=> lambda_expression[$typeCtxt] | ( query_expression )=> query_expression | ^( COND_EXPR non_assignment_expression[ObjectType] e1= expression[ObjectType] e2= expression[ObjectType] ) | ^( '??' n1= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '||' n2= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '&&' n3= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '|' n4= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '^' n5= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '&' n6= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^(eq= '==' ne1= non_assignment_expression[ObjectType] ne2= non_assignment_expression[ObjectType] opse= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] opde= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] ) -> {stringArgs}? $opse -> {dateArgs}? $opde -> ^( $eq $ne1 $ne2) | ^(neq= '!=' neqo1= non_assignment_expression[ObjectType] neqo2= non_assignment_expression[ObjectType] opse1= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opsne= magicNegate[stringArgs, $opse1.tree, $neq.token] opde1= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opdne= magicNegate[dateArgs, $opde1.tree, $neq.token] ) -> {stringArgs}? $opsne -> {dateArgs}? $opdne -> ^( $neq $neqo1 $neqo2) | ^(gt= '>' gt1= non_assignment_expression[ObjectType] gt2= non_assignment_expression[ObjectType] opgt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $gt2.tree, $gt1.tree, $gt.token] ) -> {dateArgs}? $opgt -> ^( $gt $gt1 $gt2) | ^(lt= '<' lt1= non_assignment_expression[ObjectType] lt2= non_assignment_expression[ObjectType] oplt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $lt1.tree, $lt2.tree, $lt.token] ) -> {dateArgs}? $oplt -> ^( $lt $lt1 $lt2) | ^(ge= '>=' ge1= non_assignment_expression[ObjectType] ge2= non_assignment_expression[ObjectType] opge= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $ge2.tree, $ge1.tree, $ge.token] ) -> {dateArgs}? $opge -> ^( $ge $ge1 $ge2) | ^(le= '<=' le1= non_assignment_expression[ObjectType] le2= non_assignment_expression[ObjectType] ople= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $le1.tree, $le2.tree, $le.token] ) -> {dateArgs}? $ople -> ^( $le $le1 $le2) | ^( INSTANCEOF non_assignment_expression[ObjectType] non_nullable_type ) | ^( '<<' n7= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( RIGHT_SHIFT n8= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^(pl= '+' n9= non_assignment_expression[ObjectType] n92= non_assignment_expression[ObjectType] ) | ^(ne= '-' n10= non_assignment_expression[ObjectType] n102= non_assignment_expression[ObjectType] ) | ^( '*' n11= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '/' n12= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '%' n13= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | unary_expression[$typeCtxt] )
                int alt103 = 24;
                alt103 = dfa103.Predict(input);
                switch (alt103) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2374:2: ( ( anonymous_function_signature[null] )? '=>' )=> lambda_expression[$typeCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_lambda_expression_in_non_assignment_expression4485);
                        	lambda_expression294 = lambda_expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, lambda_expression294.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((lambda_expression294 != null) ? lambda_expression294.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2375:4: ( query_expression )=> query_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_query_expression_in_non_assignment_expression4500);
                        	query_expression295 = query_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, query_expression295.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2376:8: ^( COND_EXPR non_assignment_expression[ObjectType] e1= expression[ObjectType] e2= expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	COND_EXPR296=(CommonTree)Match(input,COND_EXPR,FOLLOW_COND_EXPR_in_non_assignment_expression4511); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{COND_EXPR296_tree = (CommonTree)adaptor.DupNode(COND_EXPR296);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(COND_EXPR296_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4513);
                        	non_assignment_expression297 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression297.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_non_assignment_expression4518);
                        	e1 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, e1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_non_assignment_expression4523);
                        	e2 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, e2.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((e1 != null) ? e1.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2377:11: ^( '??' n1= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal298=(CommonTree)Match(input,NULL_COALESCE,FOLLOW_NULL_COALESCE_in_non_assignment_expression4541); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal298_tree = (CommonTree)adaptor.DupNode(string_literal298);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal298_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4545);
                        	n1 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4548);
                        	non_assignment_expression299 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression299.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n1 != null) ? n1.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2378:11: ^( '||' n2= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal300=(CommonTree)Match(input,LOG_OR,FOLLOW_LOG_OR_in_non_assignment_expression4570); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal300_tree = (CommonTree)adaptor.DupNode(string_literal300);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal300_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4574);
                        	n2 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n2.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4577);
                        	non_assignment_expression301 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression301.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n2 != null) ? n2.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2379:11: ^( '&&' n3= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal302=(CommonTree)Match(input,LOG_AND,FOLLOW_LOG_AND_in_non_assignment_expression4599); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal302_tree = (CommonTree)adaptor.DupNode(string_literal302);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal302_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4603);
                        	n3 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n3.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4606);
                        	non_assignment_expression303 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression303.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n3 != null) ? n3.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2380:11: ^( '|' n4= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	char_literal304=(CommonTree)Match(input,BIT_OR,FOLLOW_BIT_OR_in_non_assignment_expression4628); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal304_tree = (CommonTree)adaptor.DupNode(char_literal304);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(char_literal304_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4632);
                        	n4 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n4.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4635);
                        	non_assignment_expression305 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression305.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n4 != null) ? n4.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2381:11: ^( '^' n5= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	char_literal306=(CommonTree)Match(input,BIT_XOR,FOLLOW_BIT_XOR_in_non_assignment_expression4658); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal306_tree = (CommonTree)adaptor.DupNode(char_literal306);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(char_literal306_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4662);
                        	n5 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n5.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4665);
                        	non_assignment_expression307 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression307.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n5 != null) ? n5.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2382:11: ^( '&' n6= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	char_literal308=(CommonTree)Match(input,BIT_AND,FOLLOW_BIT_AND_in_non_assignment_expression4688); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal308_tree = (CommonTree)adaptor.DupNode(char_literal308);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(char_literal308_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4692);
                        	n6 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n6.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4695);
                        	non_assignment_expression309 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression309.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n6 != null) ? n6.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2383:11: ^(eq= '==' ne1= non_assignment_expression[ObjectType] ne2= non_assignment_expression[ObjectType] opse= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] opde= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	eq=(CommonTree)Match(input,EQUAL,FOLLOW_EQUAL_in_non_assignment_expression4720); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_EQUAL.Add(eq);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4724);
                        	ne1 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(ne1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4729);
                        	ne2 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(ne2.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	                  // if One arg is null then leave original operator
                        	                  nullArg = ((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)) != null && ((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)) != null && (((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)).IsExplicitNull || ((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)).IsExplicitNull);
                        	                  // need to exclude null because that has every type
                        	                  stringArgs = !nullArg && ((((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)) != null && !((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)).IsA(StringType,AppEnv)) || 
                        	                                              (((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)) != null && !((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)).IsA(StringType,AppEnv)));
                        	                  if (stringArgs) {
                        	                      this.AddToImports("CS2JNet.System.StringSupport");
                        	                  }
                        	                  dateArgs = !nullArg && ((((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)) != null && !((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((ne1 != null) ? ne1.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)) || 
                        	                                             (((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)) != null && !((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((ne2 != null) ? ne2.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)));
                        	                  if (dateArgs) {
                        	                      this.AddToImports("CS2JNet.System.DateTimeSupport");
                        	                  }
                        	                  retval.dotNetType =  BoolType; 
                        	              
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression4761);
                        	opse = magicSupportOp(stringArgs, "StringSupport", "equals", ((ne1 != null) ? ((CommonTree)ne1.Tree) : null), ((ne2 != null) ? ((CommonTree)ne2.Tree) : null), eq.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(opse.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression4778);
                        	opde = magicSupportOp(dateArgs, "DateTimeSupport", "equals", ((ne1 != null) ? ((CommonTree)ne1.Tree) : null), ((ne2 != null) ? ((CommonTree)ne2.Tree) : null), eq.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(opde.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          ne2, ne1, eq, opse, opde
                        	// token labels:      eq
                        	// rule labels:       opse, retval, ne1, ne2, opde
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_eq = new RewriteRuleNodeStream(adaptor, "token eq", eq);
                        	RewriteRuleSubtreeStream stream_opse = new RewriteRuleSubtreeStream(adaptor, "rule opse", opse!=null ? opse.Tree : null);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_ne1 = new RewriteRuleSubtreeStream(adaptor, "rule ne1", ne1!=null ? ne1.Tree : null);
                        	RewriteRuleSubtreeStream stream_ne2 = new RewriteRuleSubtreeStream(adaptor, "rule ne2", ne2!=null ? ne2.Tree : null);
                        	RewriteRuleSubtreeStream stream_opde = new RewriteRuleSubtreeStream(adaptor, "rule opde", opde!=null ? opde.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2402:10: -> {stringArgs}? $opse
                        	if (stringArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_opse.NextTree());

                        	}
                        	else // 2404:10: -> {dateArgs}? $opde
                        	if (dateArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_opde.NextTree());

                        	}
                        	else // 2406:10: -> ^( $eq $ne1 $ne2)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2406:12: ^( $eq $ne1 $ne2)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_eq.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_ne1.NextTree());
                        	    adaptor.AddChild(root_1, stream_ne2.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2407:11: ^(neq= '!=' neqo1= non_assignment_expression[ObjectType] neqo2= non_assignment_expression[ObjectType] opse1= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opsne= magicNegate[stringArgs, $opse1.tree, $neq.token] opde1= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opdne= magicNegate[dateArgs, $opde1.tree, $neq.token] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	neq=(CommonTree)Match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_non_assignment_expression4880); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_NOT_EQUAL.Add(neq);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4884);
                        	neqo1 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(neqo1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression4889);
                        	neqo2 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(neqo2.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	                  // if One arg is null then leave original operator
                        	                  nullArg = ((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)) != null && ((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)) != null && (((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)).IsExplicitNull || ((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)).IsExplicitNull);
                        	                  // need to exclude null because that has every type
                        	                  stringArgs = !nullArg && ((((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)) != null && !((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)).IsA(StringType,AppEnv)) || 
                        	                                              (((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)) != null && !((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)).IsA(StringType,AppEnv)));
                        	                  if (stringArgs) {
                        	                      this.AddToImports("CS2JNet.System.StringSupport");
                        	                  }
                        	                  dateArgs = !nullArg && ((((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)) != null && !((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((neqo1 != null) ? neqo1.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)) || 
                        	                                             (((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)) != null && !((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((neqo2 != null) ? neqo2.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)));
                        	                  if (dateArgs) {
                        	                      this.AddToImports("CS2JNet.System.DateTimeSupport");
                        	                  }
                        	                  retval.dotNetType =  BoolType; 
                        	              
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression4924);
                        	opse1 = magicSupportOp(stringArgs, "StringSupport", "equals", ((neqo1 != null) ? ((CommonTree)neqo1.Tree) : null), ((neqo2 != null) ? ((CommonTree)neqo2.Tree) : null), neq.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(opse1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicNegate_in_non_assignment_expression4941);
                        	opsne = magicNegate(stringArgs, ((opse1 != null) ? ((CommonTree)opse1.Tree) : null), neq.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicNegate.Add(opsne.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression4958);
                        	opde1 = magicSupportOp(dateArgs, "DateTimeSupport", "equals", ((neqo1 != null) ? ((CommonTree)neqo1.Tree) : null), ((neqo2 != null) ? ((CommonTree)neqo2.Tree) : null), neq.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(opde1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicNegate_in_non_assignment_expression4975);
                        	opdne = magicNegate(dateArgs, ((opde1 != null) ? ((CommonTree)opde1.Tree) : null), neq.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicNegate.Add(opdne.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          neq, neqo1, neqo2, opdne, opsne
                        	// token labels:      neq
                        	// rule labels:       retval, neqo1, neqo2, opsne, opdne
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_neq = new RewriteRuleNodeStream(adaptor, "token neq", neq);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_neqo1 = new RewriteRuleSubtreeStream(adaptor, "rule neqo1", neqo1!=null ? neqo1.Tree : null);
                        	RewriteRuleSubtreeStream stream_neqo2 = new RewriteRuleSubtreeStream(adaptor, "rule neqo2", neqo2!=null ? neqo2.Tree : null);
                        	RewriteRuleSubtreeStream stream_opsne = new RewriteRuleSubtreeStream(adaptor, "rule opsne", opsne!=null ? opsne.Tree : null);
                        	RewriteRuleSubtreeStream stream_opdne = new RewriteRuleSubtreeStream(adaptor, "rule opdne", opdne!=null ? opdne.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2428:10: -> {stringArgs}? $opsne
                        	if (stringArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_opsne.NextTree());

                        	}
                        	else // 2430:10: -> {dateArgs}? $opdne
                        	if (dateArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_opdne.NextTree());

                        	}
                        	else // 2432:10: -> ^( $neq $neqo1 $neqo2)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2432:12: ^( $neq $neqo1 $neqo2)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_neq.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_neqo1.NextTree());
                        	    adaptor.AddChild(root_1, stream_neqo2.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2433:11: ^(gt= '>' gt1= non_assignment_expression[ObjectType] gt2= non_assignment_expression[ObjectType] opgt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $gt2.tree, $gt1.tree, $gt.token] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	gt=(CommonTree)Match(input,GT,FOLLOW_GT_in_non_assignment_expression5077); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_GT.Add(gt);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5081);
                        	gt1 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(gt1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5086);
                        	gt2 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(gt2.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	                  // if One arg is null then leave original operator
                        	                  nullArg = ((gt1 != null) ? gt1.dotNetType : default(TypeRepTemplate)) != null && ((gt2 != null) ? gt2.dotNetType : default(TypeRepTemplate)) != null && (((gt1 != null) ? gt1.dotNetType : default(TypeRepTemplate)).IsExplicitNull || ((gt2 != null) ? gt2.dotNetType : default(TypeRepTemplate)).IsExplicitNull);
                        	                  // need to exclude null because that has every type
                        	                  dateArgs = !nullArg && ((((gt1 != null) ? gt1.dotNetType : default(TypeRepTemplate)) != null && !((gt1 != null) ? gt1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((gt1 != null) ? gt1.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)) || 
                        	                                             (((gt2 != null) ? gt2.dotNetType : default(TypeRepTemplate)) != null && !((gt2 != null) ? gt2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((gt2 != null) ? gt2.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)));
                        	                  if (dateArgs) {
                        	                      this.AddToImports("CS2JNet.System.DateTimeSupport");
                        	                  }
                        	                  retval.dotNetType =  BoolType; 
                        	              
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression5117);
                        	opgt = magicSupportOp(dateArgs, "DateTimeSupport", "lessthan", ((gt2 != null) ? ((CommonTree)gt2.Tree) : null), ((gt1 != null) ? ((CommonTree)gt1.Tree) : null), gt.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(opgt.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          gt2, gt1, gt, opgt
                        	// token labels:      gt
                        	// rule labels:       retval, gt2, gt1, opgt
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_gt = new RewriteRuleNodeStream(adaptor, "token gt", gt);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_gt2 = new RewriteRuleSubtreeStream(adaptor, "rule gt2", gt2!=null ? gt2.Tree : null);
                        	RewriteRuleSubtreeStream stream_gt1 = new RewriteRuleSubtreeStream(adaptor, "rule gt1", gt1!=null ? gt1.Tree : null);
                        	RewriteRuleSubtreeStream stream_opgt = new RewriteRuleSubtreeStream(adaptor, "rule opgt", opgt!=null ? opgt.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2446:9: -> {dateArgs}? $opgt
                        	if (dateArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_opgt.NextTree());

                        	}
                        	else // 2448:10: -> ^( $gt $gt1 $gt2)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2448:12: ^( $gt $gt1 $gt2)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_gt.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_gt1.NextTree());
                        	    adaptor.AddChild(root_1, stream_gt2.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2449:11: ^(lt= '<' lt1= non_assignment_expression[ObjectType] lt2= non_assignment_expression[ObjectType] oplt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $lt1.tree, $lt2.tree, $lt.token] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	lt=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_non_assignment_expression5186); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_LTHAN.Add(lt);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5190);
                        	lt1 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(lt1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5195);
                        	lt2 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(lt2.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	                  // if One arg is null then leave original operator
                        	                  nullArg = ((lt1 != null) ? lt1.dotNetType : default(TypeRepTemplate)) != null && ((lt2 != null) ? lt2.dotNetType : default(TypeRepTemplate)) != null && (((lt1 != null) ? lt1.dotNetType : default(TypeRepTemplate)).IsExplicitNull || ((lt2 != null) ? lt2.dotNetType : default(TypeRepTemplate)).IsExplicitNull);
                        	                  // need to exclude null because that has every type
                        	                  dateArgs = !nullArg && ((((lt1 != null) ? lt1.dotNetType : default(TypeRepTemplate)) != null && !((lt1 != null) ? lt1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((lt1 != null) ? lt1.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)) || 
                        	                                             (((lt2 != null) ? lt2.dotNetType : default(TypeRepTemplate)) != null && !((lt2 != null) ? lt2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((lt2 != null) ? lt2.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)));
                        	                  if (dateArgs) {
                        	                      this.AddToImports("CS2JNet.System.DateTimeSupport");
                        	                  }
                        	                  retval.dotNetType =  BoolType; 
                        	              
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression5226);
                        	oplt = magicSupportOp(dateArgs, "DateTimeSupport", "lessthan", ((lt1 != null) ? ((CommonTree)lt1.Tree) : null), ((lt2 != null) ? ((CommonTree)lt2.Tree) : null), lt.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(oplt.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          lt2, oplt, lt1, lt
                        	// token labels:      lt
                        	// rule labels:       retval, oplt, lt2, lt1
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_lt = new RewriteRuleNodeStream(adaptor, "token lt", lt);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_oplt = new RewriteRuleSubtreeStream(adaptor, "rule oplt", oplt!=null ? oplt.Tree : null);
                        	RewriteRuleSubtreeStream stream_lt2 = new RewriteRuleSubtreeStream(adaptor, "rule lt2", lt2!=null ? lt2.Tree : null);
                        	RewriteRuleSubtreeStream stream_lt1 = new RewriteRuleSubtreeStream(adaptor, "rule lt1", lt1!=null ? lt1.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2462:9: -> {dateArgs}? $oplt
                        	if (dateArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_oplt.NextTree());

                        	}
                        	else // 2464:10: -> ^( $lt $lt1 $lt2)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2464:12: ^( $lt $lt1 $lt2)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_lt.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_lt1.NextTree());
                        	    adaptor.AddChild(root_1, stream_lt2.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2465:11: ^(ge= '>=' ge1= non_assignment_expression[ObjectType] ge2= non_assignment_expression[ObjectType] opge= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $ge2.tree, $ge1.tree, $ge.token] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	ge=(CommonTree)Match(input,GTE,FOLLOW_GTE_in_non_assignment_expression5295); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_GTE.Add(ge);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5299);
                        	ge1 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(ge1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5304);
                        	ge2 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(ge2.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	                  // if One arg is null then leave original operator
                        	                  nullArg = ((ge1 != null) ? ge1.dotNetType : default(TypeRepTemplate)) != null && ((ge2 != null) ? ge2.dotNetType : default(TypeRepTemplate)) != null && (((ge1 != null) ? ge1.dotNetType : default(TypeRepTemplate)).IsExplicitNull || ((ge2 != null) ? ge2.dotNetType : default(TypeRepTemplate)).IsExplicitNull);
                        	                  // need to exclude null because that has every type
                        	                  dateArgs = !nullArg && ((((ge1 != null) ? ge1.dotNetType : default(TypeRepTemplate)) != null && !((ge1 != null) ? ge1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((ge1 != null) ? ge1.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)) || 
                        	                                            (((ge2 != null) ? ge2.dotNetType : default(TypeRepTemplate)) != null && !((ge2 != null) ? ge2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((ge2 != null) ? ge2.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)));
                        	                  if (dateArgs) {
                        	                      this.AddToImports("CS2JNet.System.DateTimeSupport");
                        	                  }
                        	                  retval.dotNetType =  BoolType; 
                        	              
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression5335);
                        	opge = magicSupportOp(dateArgs, "DateTimeSupport", "lessthanorequal", ((ge2 != null) ? ((CommonTree)ge2.Tree) : null), ((ge1 != null) ? ((CommonTree)ge1.Tree) : null), ge.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(opge.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          ge1, ge2, ge, opge
                        	// token labels:      ge
                        	// rule labels:       retval, ge2, ge1, opge
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_ge = new RewriteRuleNodeStream(adaptor, "token ge", ge);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_ge2 = new RewriteRuleSubtreeStream(adaptor, "rule ge2", ge2!=null ? ge2.Tree : null);
                        	RewriteRuleSubtreeStream stream_ge1 = new RewriteRuleSubtreeStream(adaptor, "rule ge1", ge1!=null ? ge1.Tree : null);
                        	RewriteRuleSubtreeStream stream_opge = new RewriteRuleSubtreeStream(adaptor, "rule opge", opge!=null ? opge.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2478:9: -> {dateArgs}? $opge
                        	if (dateArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_opge.NextTree());

                        	}
                        	else // 2480:10: -> ^( $ge $ge1 $ge2)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2480:12: ^( $ge $ge1 $ge2)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_ge.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_ge1.NextTree());
                        	    adaptor.AddChild(root_1, stream_ge2.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 15 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2481:11: ^(le= '<=' le1= non_assignment_expression[ObjectType] le2= non_assignment_expression[ObjectType] ople= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $le1.tree, $le2.tree, $le.token] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	le=(CommonTree)Match(input,LTE,FOLLOW_LTE_in_non_assignment_expression5404); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_LTE.Add(le);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5408);
                        	le1 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(le1.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5413);
                        	le2 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_non_assignment_expression.Add(le2.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	                  // if One arg is null then leave original operator
                        	                  nullArg = ((le1 != null) ? le1.dotNetType : default(TypeRepTemplate)) != null && ((le2 != null) ? le2.dotNetType : default(TypeRepTemplate)) != null && (((le1 != null) ? le1.dotNetType : default(TypeRepTemplate)).IsExplicitNull || ((le2 != null) ? le2.dotNetType : default(TypeRepTemplate)).IsExplicitNull);
                        	                  // need to exclude null because that has every type
                        	                  dateArgs = !nullArg && ((((le1 != null) ? le1.dotNetType : default(TypeRepTemplate)) != null && !((le1 != null) ? le1.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((le1 != null) ? le1.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)) || 
                        	                                              (((le2 != null) ? le2.dotNetType : default(TypeRepTemplate)) != null && !((le2 != null) ? le2.dotNetType : default(TypeRepTemplate)).IsExplicitNull && ((le2 != null) ? le2.dotNetType : default(TypeRepTemplate)).IsA(DateType,AppEnv)));
                        	                  if (dateArgs) {
                        	                      this.AddToImports("CS2JNet.System.DateTimeSupport");
                        	                  }
                        	                  retval.dotNetType =  BoolType; 
                        	              
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSupportOp_in_non_assignment_expression5444);
                        	ople = magicSupportOp(dateArgs, "DateTimeSupport", "lessthanorequal", ((le1 != null) ? ((CommonTree)le1.Tree) : null), ((le2 != null) ? ((CommonTree)le2.Tree) : null), le.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSupportOp.Add(ople.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          le2, le1, le, ople
                        	// token labels:      le
                        	// rule labels:       retval, ople, le2, le1
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_le = new RewriteRuleNodeStream(adaptor, "token le", le);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_ople = new RewriteRuleSubtreeStream(adaptor, "rule ople", ople!=null ? ople.Tree : null);
                        	RewriteRuleSubtreeStream stream_le2 = new RewriteRuleSubtreeStream(adaptor, "rule le2", le2!=null ? le2.Tree : null);
                        	RewriteRuleSubtreeStream stream_le1 = new RewriteRuleSubtreeStream(adaptor, "rule le1", le1!=null ? le1.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2494:9: -> {dateArgs}? $ople
                        	if (dateArgs)
                        	{
                        	    adaptor.AddChild(root_0, stream_ople.NextTree());

                        	}
                        	else // 2496:10: -> ^( $le $le1 $le2)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2496:12: ^( $le $le1 $le2)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_le.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_le1.NextTree());
                        	    adaptor.AddChild(root_1, stream_le2.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 16 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2497:11: ^( INSTANCEOF non_assignment_expression[ObjectType] non_nullable_type )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	INSTANCEOF310=(CommonTree)Match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_non_assignment_expression5511); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{INSTANCEOF310_tree = (CommonTree)adaptor.DupNode(INSTANCEOF310);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(INSTANCEOF310_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5513);
                        	non_assignment_expression311 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression311.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   ((MkNonGeneric_scope)MkNonGeneric_stack.Peek()).scrubGenericArgs =  true;  ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  true; 
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_nullable_type_in_non_assignment_expression5518);
                        	non_nullable_type312 = non_nullable_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_nullable_type312.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  BoolType; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 17 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2498:11: ^( '<<' n7= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal313=(CommonTree)Match(input,LEFT_SHIFT,FOLLOW_LEFT_SHIFT_in_non_assignment_expression5544); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal313_tree = (CommonTree)adaptor.DupNode(string_literal313);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal313_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5548);
                        	n7 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n7.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5551);
                        	non_assignment_expression314 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression314.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n7 != null) ? n7.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 18 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2499:11: ^( RIGHT_SHIFT n8= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	RIGHT_SHIFT315=(CommonTree)Match(input,RIGHT_SHIFT,FOLLOW_RIGHT_SHIFT_in_non_assignment_expression5573); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{RIGHT_SHIFT315_tree = (CommonTree)adaptor.DupNode(RIGHT_SHIFT315);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(RIGHT_SHIFT315_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5577);
                        	n8 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n8.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5580);
                        	non_assignment_expression316 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression316.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n8 != null) ? n8.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 19 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2501:11: ^(pl= '+' n9= non_assignment_expression[ObjectType] n92= non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	pl=(CommonTree)Match(input,PLUS,FOLLOW_PLUS_in_non_assignment_expression5605); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{pl_tree = (CommonTree)adaptor.DupNode(pl);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(pl_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5609);
                        	n9 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n9.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5614);
                        	n92 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n92.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	           // Are we adding two delegates?
                        	           if (((n9 != null) ? n9.dotNetType : default(TypeRepTemplate)) != null && ((n9 != null) ? n9.dotNetType : default(TypeRepTemplate)) is DelegateRepTemplate) {
                        	              List<TypeRepTemplate> args = new List<TypeRepTemplate>();
                        	              args.Add(((n9 != null) ? n9.dotNetType : default(TypeRepTemplate)));
                        	              args.Add(((n92 != null) ? n92.dotNetType : default(TypeRepTemplate)) == null ? ((n9 != null) ? n9.dotNetType : default(TypeRepTemplate)) : ((n92 != null) ? n92.dotNetType : default(TypeRepTemplate)));
                        	              ResolveResult calleeResult = ((n9 != null) ? n9.dotNetType : default(TypeRepTemplate)).Resolve("Combine", args, AppEnv);
                        	              if (calleeResult != null) {
                        	                 if (!String.IsNullOrEmpty(calleeResult.Result.Warning)) Warning(((pl != null) ? pl.Line : 0), calleeResult.Result.Warning);
                        	                 IList<CommonTree> argTrees = new List<CommonTree>();
                        	                 argTrees.Add(((n9 != null) ? ((CommonTree)n9.Tree) : null));
                        	                 argTrees.Add(((n92 != null) ? ((CommonTree)n92.Tree) : null));
                        	                 Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                 MethodRepTemplate calleeMethod = calleeResult.Result as MethodRepTemplate;
                        	                 populateParamMap(myMap, calleeMethod.Params, argTrees, null, null, wantsStar(calleeMethod.Java), pl.token);
                        	                 ret = mkJavaWrapper(calleeMethod.Java, myMap, pl.token);
                        	                 AddToImports(calleeMethod.Imports);
                        	                 retval.dotNetType =  calleeResult.ResultType; 
                        	              }
                        	              else {
                        	                 WarningFailedResolve(((pl != null) ? pl.Line : 0), "Could not resolve method application of Combine against " + ((n9 != null) ? n9.dotNetType : default(TypeRepTemplate)).TypeName);
                        	              }
                        	           }
                        	           retval.dotNetType =  ((n9 != null) ? n9.dotNetType : default(TypeRepTemplate)); 
                        	          
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 20 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2527:11: ^(ne= '-' n10= non_assignment_expression[ObjectType] n102= non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	ne=(CommonTree)Match(input,MINUS,FOLLOW_MINUS_in_non_assignment_expression5648); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{ne_tree = (CommonTree)adaptor.DupNode(ne);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(ne_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5652);
                        	n10 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n10.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5657);
                        	n102 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n102.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)); 
                        	}
                        	if ( (state.backtracking==0) )
                        	{

                        	           // Are we adding two delegates?
                        	           if (((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)) != null && ((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)) is DelegateRepTemplate) {
                        	              List<TypeRepTemplate> args = new List<TypeRepTemplate>();
                        	              args.Add(((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)));
                        	              args.Add(((n102 != null) ? n102.dotNetType : default(TypeRepTemplate)) == null ? ((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)) : ((n102 != null) ? n102.dotNetType : default(TypeRepTemplate)));
                        	              ResolveResult calleeResult = ((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)).Resolve("Remove", args, AppEnv);
                        	              if (calleeResult != null) {
                        	                 if (!String.IsNullOrEmpty(calleeResult.Result.Warning)) Warning(((ne != null) ? ne.Line : 0), calleeResult.Result.Warning);
                        	                    
                        	                 IList<CommonTree> argTrees = new List<CommonTree>();
                        	                 argTrees.Add(((n10 != null) ? ((CommonTree)n10.Tree) : null));
                        	                 argTrees.Add(((n102 != null) ? ((CommonTree)n102.Tree) : null));
                        	                 Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                 MethodRepTemplate calleeMethod = calleeResult.Result as MethodRepTemplate;
                        	                 populateParamMap(myMap, calleeMethod.Params, argTrees, null, null, wantsStar(calleeMethod.Java), ne.token);
                        	                 ret = mkJavaWrapper(calleeMethod.Java, myMap, ne.token);
                        	                 AddToImports(calleeMethod.Imports);
                        	                 retval.dotNetType =  calleeResult.ResultType; 
                        	              }
                        	              else {
                        	                 WarningFailedResolve(((ne != null) ? ne.Line : 0), "Could not resolve method application of Remove against " + ((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)).TypeName);
                        	              }
                        	           }
                        	           retval.dotNetType =  ((n10 != null) ? n10.dotNetType : default(TypeRepTemplate)); 
                        	          
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 21 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2554:11: ^( '*' n11= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	char_literal317=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_non_assignment_expression5689); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal317_tree = (CommonTree)adaptor.DupNode(char_literal317);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(char_literal317_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5693);
                        	n11 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n11.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5696);
                        	non_assignment_expression318 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression318.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n11 != null) ? n11.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 22 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2555:11: ^( '/' n12= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	char_literal319=(CommonTree)Match(input,DIV,FOLLOW_DIV_in_non_assignment_expression5718); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal319_tree = (CommonTree)adaptor.DupNode(char_literal319);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(char_literal319_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5722);
                        	n12 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n12.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5725);
                        	non_assignment_expression320 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression320.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n12 != null) ? n12.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 23 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2556:11: ^( '%' n13= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	char_literal321=(CommonTree)Match(input,MOD,FOLLOW_MOD_in_non_assignment_expression5747); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal321_tree = (CommonTree)adaptor.DupNode(char_literal321);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(char_literal321_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5751);
                        	n13 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, n13.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression5754);
                        	non_assignment_expression322 = non_assignment_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, non_assignment_expression322.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.dotNetType =  ((n13 != null) ? n13.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 24 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2558:11: unary_expression[$typeCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_non_assignment_expression5777);
                        	unary_expression323 = unary_expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, unary_expression323.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	                  retval.dotNetType =  ((unary_expression323 != null) ? unary_expression323.dotNetType : default(TypeRepTemplate)); 
                        	                  retval.rmId =  ((unary_expression323 != null) ? unary_expression323.rmId : default(string)); 
                        	                  retval.typeofType =  ((unary_expression323 != null) ? unary_expression323.typeofType : default(TypeRepTemplate)); 
                        	                  retval.thedottedtext =  ((unary_expression323 != null) ? unary_expression323.thedottedtext : default(string)); 
                        	                
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                     if (ret != null)
                        retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                MkNonGeneric_stack.Pop();
                PrimitiveRep_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "non_assignment_expression"

        public class lambda_expression_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "lambda_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2570:1: lambda_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType] : ( anonymous_function_signature[$typeCtxt] )? d= '=>' anonymous_function_body ;
        public NetMaker.lambda_expression_return lambda_expression(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.lambda_expression_return retval = new NetMaker.lambda_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree d = null;
            NetMaker.anonymous_function_signature_return anonymous_function_signature324 = default(NetMaker.anonymous_function_signature_return);

            NetMaker.anonymous_function_body_return anonymous_function_body325 = default(NetMaker.anonymous_function_body_return);


            CommonTree d_tree=null;


               CommonTree ret = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2577:2: ( ( anonymous_function_signature[$typeCtxt] )? d= '=>' anonymous_function_body )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2578:2: ( anonymous_function_signature[$typeCtxt] )? d= '=>' anonymous_function_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2578:2: ( anonymous_function_signature[$typeCtxt] )?
                	int alt104 = 2;
                	int LA104_0 = input.LA(1);

                	if ( ((LA104_0 >= PARAMS && LA104_0 <= PARAMS_TYPELESS)) )
                	{
                	    alt104 = 1;
                	}
                	switch (alt104) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2578:2: anonymous_function_signature[$typeCtxt]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression5822);
                	        	anonymous_function_signature324 = anonymous_function_signature(typeCtxt);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, anonymous_function_signature324.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	d=(CommonTree)Match(input,LAMBDA,FOLLOW_LAMBDA_in_lambda_expression5830); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{d_tree = (CommonTree)adaptor.DupNode(d);

                		adaptor.AddChild(root_0, d_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_anonymous_function_body_in_lambda_expression5834);
                	anonymous_function_body325 = anonymous_function_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, anonymous_function_body325.Tree);
                	if ( (state.backtracking==0) )
                	{

                	           if (typeCtxt != null && typeCtxt is DelegateRepTemplate && ((anonymous_function_signature324 != null) ? anonymous_function_signature324.isTypedParams : default(bool))) {
                	              // use an anonymous inner class to generate a delegate object (object wih an Invoke with appropriate arguments)
                	              // new <delegate_name>() { public void Invoke(<formal args>) throw exception <block> }
                	              DelegateRepTemplate delType = typeCtxt as DelegateRepTemplate;
                	              ret = mkDelegateObject((CommonTree)typeCtxt.Tree, ((anonymous_function_signature324 != null) ? ((CommonTree)anonymous_function_signature324.Tree) : null), ((anonymous_function_body325 != null) ? ((CommonTree)anonymous_function_body325.Tree) : null), delType, d.token);
                	              retval.dotNetType =  typeCtxt;
                	           }
                	        
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (ret != null)
                          retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "lambda_expression"

        public class anonymous_function_signature_return : TreeRuleReturnScope
        {
            public bool isTypedParams;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_function_signature"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2589:1: anonymous_function_signature[TypeRepTemplate typeCtxt] returns [bool isTypedParams] : ( ^( PARAMS ( fixed_parameter[$typeCtxt != null && $typeCtxt is DelegateRepTemplate && idx < ((DelegateRepTemplate)$typeCtxt).Invoke.Params.Count ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params[idx++] : null] )+ ) | ^(p= PARAMS_TYPELESS ( identifier )+ ) );
        public NetMaker.anonymous_function_signature_return anonymous_function_signature(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.anonymous_function_signature_return retval = new NetMaker.anonymous_function_signature_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree p = null;
            CommonTree PARAMS326 = null;
            NetMaker.fixed_parameter_return fixed_parameter327 = default(NetMaker.fixed_parameter_return);

            NetMaker.identifier_return identifier328 = default(NetMaker.identifier_return);


            CommonTree p_tree=null;
            CommonTree PARAMS326_tree=null;


                retval.isTypedParams =  true;
                CommonTree ret = null;
                List<CommonTree> ids = new List<CommonTree>();
                int idx = 0;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2599:2: ( ^( PARAMS ( fixed_parameter[$typeCtxt != null && $typeCtxt is DelegateRepTemplate && idx < ((DelegateRepTemplate)$typeCtxt).Invoke.Params.Count ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params[idx++] : null] )+ ) | ^(p= PARAMS_TYPELESS ( identifier )+ ) )
                int alt107 = 2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0 == PARAMS) )
                {
                    alt107 = 1;
                }
                else if ( (LA107_0 == PARAMS_TYPELESS) )
                {
                    alt107 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d107s0 =
                        new NoViableAltException("", 107, 0, input);

                    throw nvae_d107s0;
                }
                switch (alt107) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2600:2: ^( PARAMS ( fixed_parameter[$typeCtxt != null && $typeCtxt is DelegateRepTemplate && idx < ((DelegateRepTemplate)$typeCtxt).Invoke.Params.Count ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params[idx++] : null] )+ )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	PARAMS326=(CommonTree)Match(input,PARAMS,FOLLOW_PARAMS_in_anonymous_function_signature5869); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{PARAMS326_tree = (CommonTree)adaptor.DupNode(PARAMS326);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(PARAMS326_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2600:11: ( fixed_parameter[$typeCtxt != null && $typeCtxt is DelegateRepTemplate && idx < ((DelegateRepTemplate)$typeCtxt).Invoke.Params.Count ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params[idx++] : null] )+
                        	int cnt105 = 0;
                        	do 
                        	{
                        	    int alt105 = 2;
                        	    int LA105_0 = input.LA(1);

                        	    if ( (LA105_0 == THIS || LA105_0 == TYPE || (LA105_0 >= 212 && LA105_0 <= 213)) )
                        	    {
                        	        alt105 = 1;
                        	    }


                        	    switch (alt105) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2600:11: fixed_parameter[$typeCtxt != null && $typeCtxt is DelegateRepTemplate && idx < ((DelegateRepTemplate)$typeCtxt).Invoke.Params.Count ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params[idx++] : null]
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_fixed_parameter_in_anonymous_function_signature5871);
                        			    	fixed_parameter327 = fixed_parameter(typeCtxt != null && typeCtxt is DelegateRepTemplate && idx < ((DelegateRepTemplate)typeCtxt).Invoke.Params.Count ? ((DelegateRepTemplate)typeCtxt).Invoke.Params[idx++] : null);
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) 
                        			    	adaptor.AddChild(root_1, fixed_parameter327.Tree);

                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    if ( cnt105 >= 1 ) goto loop105;
                        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        		            EarlyExitException eee105 =
                        		                new EarlyExitException(105, input);
                        		            throw eee105;
                        	    }
                        	    cnt105++;
                        	} while (true);

                        	loop105:
                        		;	// Stops C# compiler whining that label 'loop105' has no statements


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2601:4: ^(p= PARAMS_TYPELESS ( identifier )+ )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	p=(CommonTree)Match(input,PARAMS_TYPELESS,FOLLOW_PARAMS_TYPELESS_in_anonymous_function_signature5882); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{p_tree = (CommonTree)adaptor.DupNode(p);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(p_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2601:24: ( identifier )+
                        	int cnt106 = 0;
                        	do 
                        	{
                        	    int alt106 = 2;
                        	    int LA106_0 = input.LA(1);

                        	    if ( (LA106_0 == IDENTIFIER || (LA106_0 >= ELIF && LA106_0 <= UNDEF) || LA106_0 == 195 || LA106_0 == 221 || (LA106_0 >= 224 && LA106_0 <= 239) || (LA106_0 >= 241 && LA106_0 <= 244) || (LA106_0 >= 247 && LA106_0 <= 250) || LA106_0 == 256 || (LA106_0 >= 263 && LA106_0 <= 264) || LA106_0 == 274 || LA106_0 == 277) )
                        	    {
                        	        alt106 = 1;
                        	    }


                        	    switch (alt106) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2601:25: identifier
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_identifier_in_anonymous_function_signature5885);
                        			    	identifier328 = identifier();
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) 
                        			    	adaptor.AddChild(root_1, identifier328.Tree);
                        			    	if ( (state.backtracking==0) )
                        			    	{
                        			    	   ids.Add(((identifier328 != null) ? ((CommonTree)identifier328.Tree) : null)); 
                        			    	}

                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    if ( cnt106 >= 1 ) goto loop106;
                        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        		            EarlyExitException eee106 =
                        		                new EarlyExitException(106, input);
                        		            throw eee106;
                        	    }
                        	    cnt106++;
                        	} while (true);

                        	loop106:
                        		;	// Stops C# compiler whining that label 'loop106' has no statements


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	           if (typeCtxt != null && typeCtxt is DelegateRepTemplate && ids.Count == ((DelegateRepTemplate)typeCtxt).Invoke.Params.Count) {
                        	              ret = mkTypedParams(((DelegateRepTemplate)typeCtxt).Invoke.Params, ids, p.token);
                        	           }
                        	           else {
                        	              retval.isTypedParams =  false;
                        	           }
                        	        
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (ret != null)
                          retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_function_signature"

        public class anonymous_function_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_function_body"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2611:1: anonymous_function_body : ( expression[ObjectType] -> {$expression.dotNetType != null && $expression.dotNetType.IsA(VoidType, AppEnv)}? OPEN_BRACE[$expression.tree.Token, \"{\"] expression SEMI[$expression.tree.Token, \";\"] CLOSE_BRACE[$expression.tree.Token, \"}\"] -> OPEN_BRACE[$expression.tree.Token, \"{\"] ^( RETURN[$expression.tree.Token, \"return\"] expression ) CLOSE_BRACE[$expression.tree.Token, \"}\"] | block );
        public NetMaker.anonymous_function_body_return anonymous_function_body() // throws RecognitionException [1]
        {   
            NetMaker.anonymous_function_body_return retval = new NetMaker.anonymous_function_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression329 = default(NetMaker.expression_return);

            NetMaker.block_return block330 = default(NetMaker.block_return);


            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2611:24: ( expression[ObjectType] -> {$expression.dotNetType != null && $expression.dotNetType.IsA(VoidType, AppEnv)}? OPEN_BRACE[$expression.tree.Token, \"{\"] expression SEMI[$expression.tree.Token, \";\"] CLOSE_BRACE[$expression.tree.Token, \"}\"] -> OPEN_BRACE[$expression.tree.Token, \"{\"] ^( RETURN[$expression.tree.Token, \"return\"] expression ) CLOSE_BRACE[$expression.tree.Token, \"}\"] | block )
                int alt108 = 2;
                int LA108_0 = input.LA(1);

                if ( ((LA108_0 >= PARAMS && LA108_0 <= PARAMS_TYPELESS) || (LA108_0 >= MONOPLUS && LA108_0 <= APPLY) || (LA108_0 >= NEW && LA108_0 <= NEW_ARRAY) || LA108_0 == NEW_ANON_OBJECT || (LA108_0 >= OBJECT && LA108_0 <= THIS) || LA108_0 == NULL_COALESCE || (LA108_0 >= COND_EXPR && LA108_0 <= LEFT_SHIFT) || (LA108_0 >= SUPER && LA108_0 <= LAMBDA) || LA108_0 == CAST_EXPR || (LA108_0 >= BOOL && LA108_0 <= GT) || (LA108_0 >= ELIF && LA108_0 <= UNDEF) || LA108_0 == 195 || LA108_0 == 208 || (LA108_0 >= 214 && LA108_0 <= 219) || LA108_0 == 221 || (LA108_0 >= 224 && LA108_0 <= 239) || (LA108_0 >= 241 && LA108_0 <= 244) || (LA108_0 >= 247 && LA108_0 <= 254) || LA108_0 == 256 || (LA108_0 >= 263 && LA108_0 <= 264) || (LA108_0 >= 274 && LA108_0 <= 277)) )
                {
                    alt108 = 1;
                }
                else if ( (LA108_0 == OPEN_BRACE || LA108_0 == SEMI) )
                {
                    alt108 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d108s0 =
                        new NoViableAltException("", 108, 0, input);

                    throw nvae_d108s0;
                }
                switch (alt108) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2612:2: expression[ObjectType]
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_anonymous_function_body5907);
                        	expression329 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_expression.Add(expression329.Tree);


                        	// AST REWRITE
                        	// elements:          expression, expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2613:7: -> {$expression.dotNetType != null && $expression.dotNetType.IsA(VoidType, AppEnv)}? OPEN_BRACE[$expression.tree.Token, \"{\"] expression SEMI[$expression.tree.Token, \";\"] CLOSE_BRACE[$expression.tree.Token, \"}\"]
                        	if (((expression329 != null) ? expression329.dotNetType : default(TypeRepTemplate)) != null && ((expression329 != null) ? expression329.dotNetType : default(TypeRepTemplate)).IsA(VoidType, AppEnv))
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, ((expression329 != null) ? ((CommonTree)expression329.Tree) : null).Token, "{"));
                        	    adaptor.AddChild(root_0, stream_expression.NextTree());
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, ((expression329 != null) ? ((CommonTree)expression329.Tree) : null).Token, ";"));
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, ((expression329 != null) ? ((CommonTree)expression329.Tree) : null).Token, "}"));

                        	}
                        	else // 2614:7: -> OPEN_BRACE[$expression.tree.Token, \"{\"] ^( RETURN[$expression.tree.Token, \"return\"] expression ) CLOSE_BRACE[$expression.tree.Token, \"}\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, ((expression329 != null) ? ((CommonTree)expression329.Tree) : null).Token, "{"));
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2614:50: ^( RETURN[$expression.tree.Token, \"return\"] expression )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, ((expression329 != null) ? ((CommonTree)expression329.Tree) : null).Token, "return"), root_1);

                        	    adaptor.AddChild(root_1, stream_expression.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, ((expression329 != null) ? ((CommonTree)expression329.Tree) : null).Token, "}"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2615:4: block
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_anonymous_function_body5956);
                        	block330 = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, block330.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_function_body"

        public class query_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2620:1: query_expression : from_clause query_body ;
        public NetMaker.query_expression_return query_expression() // throws RecognitionException [1]
        {   
            NetMaker.query_expression_return retval = new NetMaker.query_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.from_clause_return from_clause331 = default(NetMaker.from_clause_return);

            NetMaker.query_body_return query_body332 = default(NetMaker.query_body_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2620:17: ( from_clause query_body )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2621:2: from_clause query_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_from_clause_in_query_expression5968);
                	from_clause331 = from_clause();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, from_clause331.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_query_body_in_query_expression5972);
                	query_body332 = query_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, query_body332.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_expression"

        public class query_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_body"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2622:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
        public NetMaker.query_body_return query_body() // throws RecognitionException [1]
        {   
            NetMaker.query_body_return retval = new NetMaker.query_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.query_body_clauses_return query_body_clauses333 = default(NetMaker.query_body_clauses_return);

            NetMaker.select_or_group_clause_return select_or_group_clause334 = default(NetMaker.select_or_group_clause_return);

            NetMaker.query_continuation_return query_continuation335 = default(NetMaker.query_continuation_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2622:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2624:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2624:2: ( query_body_clauses )?
                	int alt109 = 2;
                	int LA109_0 = input.LA(1);

                	if ( ((LA109_0 >= 225 && LA109_0 <= 226) || (LA109_0 >= 229 && LA109_0 <= 230) || LA109_0 == 236) )
                	{
                	    alt109 = 1;
                	}
                	switch (alt109) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2624:2: query_body_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_query_body_clauses_in_query_body5982);
                	        	query_body_clauses333 = query_body_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, query_body_clauses333.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_select_or_group_clause_in_query_body5987);
                	select_or_group_clause334 = select_or_group_clause();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, select_or_group_clause334.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2624:49: ( ( 'into' )=> query_continuation )?
                	int alt110 = 2;
                	int LA110_0 = input.LA(1);

                	if ( (LA110_0 == 224) )
                	{
                	    int LA110_1 = input.LA(2);

                	    if ( (synpred13_NetMaker()) )
                	    {
                	        alt110 = 1;
                	    }
                	}
                	switch (alt110) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2624:50: ( 'into' )=> query_continuation
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_query_continuation_in_query_body5998);
                	        	query_continuation335 = query_continuation();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, query_continuation335.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_body"

        public class query_continuation_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_continuation"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2625:1: query_continuation : 'into' identifier query_body ;
        public NetMaker.query_continuation_return query_continuation() // throws RecognitionException [1]
        {   
            NetMaker.query_continuation_return retval = new NetMaker.query_continuation_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal336 = null;
            NetMaker.identifier_return identifier337 = default(NetMaker.identifier_return);

            NetMaker.query_body_return query_body338 = default(NetMaker.query_body_return);


            CommonTree string_literal336_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2625:19: ( 'into' identifier query_body )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2626:2: 'into' identifier query_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal336=(CommonTree)Match(input,224,FOLLOW_224_in_query_continuation6008); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal336_tree = (CommonTree)adaptor.DupNode(string_literal336);

                		adaptor.AddChild(root_0, string_literal336_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_query_continuation6012);
                	identifier337 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier337.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_query_body_in_query_continuation6016);
                	query_body338 = query_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, query_body338.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_continuation"

        public class query_body_clauses_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_body_clauses"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2627:1: query_body_clauses : ( query_body_clause )+ ;
        public NetMaker.query_body_clauses_return query_body_clauses() // throws RecognitionException [1]
        {   
            NetMaker.query_body_clauses_return retval = new NetMaker.query_body_clauses_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.query_body_clause_return query_body_clause339 = default(NetMaker.query_body_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2627:19: ( ( query_body_clause )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2628:2: ( query_body_clause )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2628:2: ( query_body_clause )+
                	int cnt111 = 0;
                	do 
                	{
                	    int alt111 = 2;
                	    int LA111_0 = input.LA(1);

                	    if ( ((LA111_0 >= 225 && LA111_0 <= 226) || (LA111_0 >= 229 && LA111_0 <= 230) || LA111_0 == 236) )
                	    {
                	        alt111 = 1;
                	    }


                	    switch (alt111) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2628:2: query_body_clause
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_query_body_clause_in_query_body_clauses6023);
                			    	query_body_clause339 = query_body_clause();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, query_body_clause339.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt111 >= 1 ) goto loop111;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee111 =
                		                new EarlyExitException(111, input);
                		            throw eee111;
                	    }
                	    cnt111++;
                	} while (true);

                	loop111:
                		;	// Stops C# compiler whining that label 'loop111' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_body_clauses"

        public class query_body_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_body_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2629:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
        public NetMaker.query_body_clause_return query_body_clause() // throws RecognitionException [1]
        {   
            NetMaker.query_body_clause_return retval = new NetMaker.query_body_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.from_clause_return from_clause340 = default(NetMaker.from_clause_return);

            NetMaker.let_clause_return let_clause341 = default(NetMaker.let_clause_return);

            NetMaker.where_clause_return where_clause342 = default(NetMaker.where_clause_return);

            NetMaker.join_clause_return join_clause343 = default(NetMaker.join_clause_return);

            NetMaker.orderby_clause_return orderby_clause344 = default(NetMaker.orderby_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2629:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
                int alt112 = 5;
                switch ( input.LA(1) ) 
                {
                case 225:
                	{
                    alt112 = 1;
                    }
                    break;
                case 229:
                	{
                    alt112 = 2;
                    }
                    break;
                case 236:
                	{
                    alt112 = 3;
                    }
                    break;
                case 226:
                	{
                    alt112 = 4;
                    }
                    break;
                case 230:
                	{
                    alt112 = 5;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d112s0 =
                	        new NoViableAltException("", 112, 0, input);

                	    throw nvae_d112s0;
                }

                switch (alt112) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2630:2: from_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_from_clause_in_query_body_clause6032);
                        	from_clause340 = from_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, from_clause340.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2631:4: let_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_let_clause_in_query_body_clause6037);
                        	let_clause341 = let_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, let_clause341.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2632:4: where_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_where_clause_in_query_body_clause6042);
                        	where_clause342 = where_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, where_clause342.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2633:4: join_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_join_clause_in_query_body_clause6047);
                        	join_clause343 = join_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, join_clause343.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2634:4: orderby_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_orderby_clause_in_query_body_clause6052);
                        	orderby_clause344 = orderby_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, orderby_clause344.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_body_clause"

        public class from_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "from_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2635:1: from_clause : 'from' ( type )? identifier 'in' expression[ObjectType] ;
        public NetMaker.from_clause_return from_clause() // throws RecognitionException [1]
        {   
            NetMaker.from_clause_return retval = new NetMaker.from_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal345 = null;
            CommonTree string_literal348 = null;
            NetMaker.type_return type346 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier347 = default(NetMaker.identifier_return);

            NetMaker.expression_return expression349 = default(NetMaker.expression_return);


            CommonTree string_literal345_tree=null;
            CommonTree string_literal348_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2635:12: ( 'from' ( type )? identifier 'in' expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2636:2: 'from' ( type )? identifier 'in' expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal345=(CommonTree)Match(input,225,FOLLOW_225_in_from_clause6059); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal345_tree = (CommonTree)adaptor.DupNode(string_literal345);

                		adaptor.AddChild(root_0, string_literal345_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2636:11: ( type )?
                	int alt113 = 2;
                	int LA113_0 = input.LA(1);

                	if ( (LA113_0 == TYPE) )
                	{
                	    alt113 = 1;
                	}
                	switch (alt113) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2636:11: type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_from_clause6063);
                	        	type346 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type346.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_from_clause6068);
                	identifier347 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier347.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal348=(CommonTree)Match(input,IN,FOLLOW_IN_in_from_clause6072); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal348_tree = (CommonTree)adaptor.DupNode(string_literal348);

                		adaptor.AddChild(root_0, string_literal348_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_from_clause6076);
                	expression349 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression349.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "from_clause"

        public class join_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "join_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2637:1: join_clause : 'join' ( type )? identifier 'in' expression[ObjectType] 'on' expression[ObjectType] 'equals' expression[ObjectType] ( 'into' identifier )? ;
        public NetMaker.join_clause_return join_clause() // throws RecognitionException [1]
        {   
            NetMaker.join_clause_return retval = new NetMaker.join_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal350 = null;
            CommonTree string_literal353 = null;
            CommonTree string_literal355 = null;
            CommonTree string_literal357 = null;
            CommonTree string_literal359 = null;
            NetMaker.type_return type351 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier352 = default(NetMaker.identifier_return);

            NetMaker.expression_return expression354 = default(NetMaker.expression_return);

            NetMaker.expression_return expression356 = default(NetMaker.expression_return);

            NetMaker.expression_return expression358 = default(NetMaker.expression_return);

            NetMaker.identifier_return identifier360 = default(NetMaker.identifier_return);


            CommonTree string_literal350_tree=null;
            CommonTree string_literal353_tree=null;
            CommonTree string_literal355_tree=null;
            CommonTree string_literal357_tree=null;
            CommonTree string_literal359_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2637:12: ( 'join' ( type )? identifier 'in' expression[ObjectType] 'on' expression[ObjectType] 'equals' expression[ObjectType] ( 'into' identifier )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2638:2: 'join' ( type )? identifier 'in' expression[ObjectType] 'on' expression[ObjectType] 'equals' expression[ObjectType] ( 'into' identifier )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal350=(CommonTree)Match(input,226,FOLLOW_226_in_join_clause6085); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal350_tree = (CommonTree)adaptor.DupNode(string_literal350);

                		adaptor.AddChild(root_0, string_literal350_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2638:11: ( type )?
                	int alt114 = 2;
                	int LA114_0 = input.LA(1);

                	if ( (LA114_0 == TYPE) )
                	{
                	    alt114 = 1;
                	}
                	switch (alt114) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2638:11: type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_join_clause6089);
                	        	type351 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type351.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_join_clause6094);
                	identifier352 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier352.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal353=(CommonTree)Match(input,IN,FOLLOW_IN_in_join_clause6098); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal353_tree = (CommonTree)adaptor.DupNode(string_literal353);

                		adaptor.AddChild(root_0, string_literal353_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_join_clause6102);
                	expression354 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression354.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal355=(CommonTree)Match(input,227,FOLLOW_227_in_join_clause6107); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal355_tree = (CommonTree)adaptor.DupNode(string_literal355);

                		adaptor.AddChild(root_0, string_literal355_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_join_clause6111);
                	expression356 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression356.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal357=(CommonTree)Match(input,228,FOLLOW_228_in_join_clause6116); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal357_tree = (CommonTree)adaptor.DupNode(string_literal357);

                		adaptor.AddChild(root_0, string_literal357_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_join_clause6120);
                	expression358 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression358.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2638:130: ( 'into' identifier )?
                	int alt115 = 2;
                	int LA115_0 = input.LA(1);

                	if ( (LA115_0 == 224) )
                	{
                	    alt115 = 1;
                	}
                	switch (alt115) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2638:131: 'into' identifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal359=(CommonTree)Match(input,224,FOLLOW_224_in_join_clause6124); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal359_tree = (CommonTree)adaptor.DupNode(string_literal359);

                	        		adaptor.AddChild(root_0, string_literal359_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_join_clause6126);
                	        	identifier360 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier360.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "join_clause"

        public class let_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "let_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2639:1: let_clause : 'let' identifier '=' expression[ObjectType] ;
        public NetMaker.let_clause_return let_clause() // throws RecognitionException [1]
        {   
            NetMaker.let_clause_return retval = new NetMaker.let_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal361 = null;
            CommonTree char_literal363 = null;
            NetMaker.identifier_return identifier362 = default(NetMaker.identifier_return);

            NetMaker.expression_return expression364 = default(NetMaker.expression_return);


            CommonTree string_literal361_tree=null;
            CommonTree char_literal363_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2639:11: ( 'let' identifier '=' expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2640:2: 'let' identifier '=' expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal361=(CommonTree)Match(input,229,FOLLOW_229_in_let_clause6136); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal361_tree = (CommonTree)adaptor.DupNode(string_literal361);

                		adaptor.AddChild(root_0, string_literal361_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_let_clause6140);
                	identifier362 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier362.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal363=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_let_clause6144); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal363_tree = (CommonTree)adaptor.DupNode(char_literal363);

                		adaptor.AddChild(root_0, char_literal363_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_let_clause6148);
                	expression364 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression364.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "let_clause"

        public class orderby_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "orderby_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2641:1: orderby_clause : 'orderby' ordering_list ;
        public NetMaker.orderby_clause_return orderby_clause() // throws RecognitionException [1]
        {   
            NetMaker.orderby_clause_return retval = new NetMaker.orderby_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal365 = null;
            NetMaker.ordering_list_return ordering_list366 = default(NetMaker.ordering_list_return);


            CommonTree string_literal365_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2641:15: ( 'orderby' ordering_list )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2642:2: 'orderby' ordering_list
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal365=(CommonTree)Match(input,230,FOLLOW_230_in_orderby_clause6156); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal365_tree = (CommonTree)adaptor.DupNode(string_literal365);

                		adaptor.AddChild(root_0, string_literal365_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_ordering_list_in_orderby_clause6160);
                	ordering_list366 = ordering_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, ordering_list366.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "orderby_clause"

        public class ordering_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ordering_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2643:1: ordering_list : ordering ( ',' ordering )* ;
        public NetMaker.ordering_list_return ordering_list() // throws RecognitionException [1]
        {   
            NetMaker.ordering_list_return retval = new NetMaker.ordering_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal368 = null;
            NetMaker.ordering_return ordering367 = default(NetMaker.ordering_return);

            NetMaker.ordering_return ordering369 = default(NetMaker.ordering_return);


            CommonTree char_literal368_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2643:14: ( ordering ( ',' ordering )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2644:2: ordering ( ',' ordering )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_ordering_in_ordering_list6168);
                	ordering367 = ordering();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, ordering367.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2644:13: ( ',' ordering )*
                	do 
                	{
                	    int alt116 = 2;
                	    int LA116_0 = input.LA(1);

                	    if ( (LA116_0 == COMMA) )
                	    {
                	        alt116 = 1;
                	    }


                	    switch (alt116) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2644:14: ',' ordering
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal368=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_ordering_list6173); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal368_tree = (CommonTree)adaptor.DupNode(char_literal368);

                			    		adaptor.AddChild(root_0, char_literal368_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_ordering_in_ordering_list6177);
                			    	ordering369 = ordering();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, ordering369.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop116;
                	    }
                	} while (true);

                	loop116:
                		;	// Stops C# compiler whining that label 'loop116' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ordering_list"

        public class ordering_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ordering"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2645:1: ordering : expression[ObjectType] ( ordering_direction )? ;
        public NetMaker.ordering_return ordering() // throws RecognitionException [1]
        {   
            NetMaker.ordering_return retval = new NetMaker.ordering_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression370 = default(NetMaker.expression_return);

            NetMaker.ordering_direction_return ordering_direction371 = default(NetMaker.ordering_direction_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2645:9: ( expression[ObjectType] ( ordering_direction )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2646:2: expression[ObjectType] ( ordering_direction )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_ordering6187);
                	expression370 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression370.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2646:28: ( ordering_direction )?
                	int alt117 = 2;
                	int LA117_0 = input.LA(1);

                	if ( ((LA117_0 >= 231 && LA117_0 <= 232)) )
                	{
                	    alt117 = 1;
                	}
                	switch (alt117) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2646:28: ordering_direction
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_ordering_direction_in_ordering6193);
                	        	ordering_direction371 = ordering_direction();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, ordering_direction371.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ordering"

        public class ordering_direction_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ordering_direction"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2648:1: ordering_direction : ( 'ascending' | 'descending' );
        public NetMaker.ordering_direction_return ordering_direction() // throws RecognitionException [1]
        {   
            NetMaker.ordering_direction_return retval = new NetMaker.ordering_direction_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set372 = null;

            CommonTree set372_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2648:19: ( 'ascending' | 'descending' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set372 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= 231 && input.LA(1) <= 232) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set372_tree = (CommonTree)adaptor.DupNode(set372);

                	    adaptor.AddChild(root_0, set372_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ordering_direction"

        public class select_or_group_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "select_or_group_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2651:1: select_or_group_clause : ( select_clause | group_clause );
        public NetMaker.select_or_group_clause_return select_or_group_clause() // throws RecognitionException [1]
        {   
            NetMaker.select_or_group_clause_return retval = new NetMaker.select_or_group_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.select_clause_return select_clause373 = default(NetMaker.select_clause_return);

            NetMaker.group_clause_return group_clause374 = default(NetMaker.group_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2651:23: ( select_clause | group_clause )
                int alt118 = 2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0 == 233) )
                {
                    alt118 = 1;
                }
                else if ( (LA118_0 == 234) )
                {
                    alt118 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d118s0 =
                        new NoViableAltException("", 118, 0, input);

                    throw nvae_d118s0;
                }
                switch (alt118) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2652:2: select_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_select_clause_in_select_or_group_clause6216);
                        	select_clause373 = select_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, select_clause373.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2653:4: group_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_group_clause_in_select_or_group_clause6221);
                        	group_clause374 = group_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, group_clause374.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "select_or_group_clause"

        public class select_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "select_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2654:1: select_clause : 'select' expression[ObjectType] ;
        public NetMaker.select_clause_return select_clause() // throws RecognitionException [1]
        {   
            NetMaker.select_clause_return retval = new NetMaker.select_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal375 = null;
            NetMaker.expression_return expression376 = default(NetMaker.expression_return);


            CommonTree string_literal375_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2654:14: ( 'select' expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2655:2: 'select' expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal375=(CommonTree)Match(input,233,FOLLOW_233_in_select_clause6229); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal375_tree = (CommonTree)adaptor.DupNode(string_literal375);

                		adaptor.AddChild(root_0, string_literal375_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_select_clause6233);
                	expression376 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression376.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "select_clause"

        public class group_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "group_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2656:1: group_clause : 'group' expression[ObjectType] 'by' expression[ObjectType] ;
        public NetMaker.group_clause_return group_clause() // throws RecognitionException [1]
        {   
            NetMaker.group_clause_return retval = new NetMaker.group_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal377 = null;
            CommonTree string_literal379 = null;
            NetMaker.expression_return expression378 = default(NetMaker.expression_return);

            NetMaker.expression_return expression380 = default(NetMaker.expression_return);


            CommonTree string_literal377_tree=null;
            CommonTree string_literal379_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2656:13: ( 'group' expression[ObjectType] 'by' expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2657:2: 'group' expression[ObjectType] 'by' expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal377=(CommonTree)Match(input,234,FOLLOW_234_in_group_clause6242); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal377_tree = (CommonTree)adaptor.DupNode(string_literal377);

                		adaptor.AddChild(root_0, string_literal377_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_group_clause6246);
                	expression378 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression378.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal379=(CommonTree)Match(input,235,FOLLOW_235_in_group_clause6251); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal379_tree = (CommonTree)adaptor.DupNode(string_literal379);

                		adaptor.AddChild(root_0, string_literal379_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_group_clause6255);
                	expression380 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression380.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "group_clause"

        public class where_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "where_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2658:1: where_clause : 'where' boolean_expression ;
        public NetMaker.where_clause_return where_clause() // throws RecognitionException [1]
        {   
            NetMaker.where_clause_return retval = new NetMaker.where_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal381 = null;
            NetMaker.boolean_expression_return boolean_expression382 = default(NetMaker.boolean_expression_return);


            CommonTree string_literal381_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2658:13: ( 'where' boolean_expression )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2659:2: 'where' boolean_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal381=(CommonTree)Match(input,236,FOLLOW_236_in_where_clause6264); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal381_tree = (CommonTree)adaptor.DupNode(string_literal381);

                		adaptor.AddChild(root_0, string_literal381_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_where_clause6268);
                	boolean_expression382 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, boolean_expression382.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "where_clause"

        public class boolean_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "boolean_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2660:1: boolean_expression : expression[ObjectType] ;
        public NetMaker.boolean_expression_return boolean_expression() // throws RecognitionException [1]
        {   
            NetMaker.boolean_expression_return retval = new NetMaker.boolean_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression383 = default(NetMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2660:19: ( expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2661:2: expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_boolean_expression6276);
                	expression383 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression383.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "boolean_expression"

        public class global_attributes_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attributes"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2666:1: global_attributes : ( global_attribute )+ ;
        public NetMaker.global_attributes_return global_attributes() // throws RecognitionException [1]
        {   
            NetMaker.global_attributes_return retval = new NetMaker.global_attributes_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.global_attribute_return global_attribute384 = default(NetMaker.global_attribute_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2666:18: ( ( global_attribute )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2667:2: ( global_attribute )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2667:2: ( global_attribute )+
                	int cnt119 = 0;
                	do 
                	{
                	    int alt119 = 2;
                	    int LA119_0 = input.LA(1);

                	    if ( (LA119_0 == GLOBAL_ATTRIBUTE) )
                	    {
                	        alt119 = 1;
                	    }


                	    switch (alt119) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2667:2: global_attribute
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_global_attribute_in_global_attributes6289);
                			    	global_attribute384 = global_attribute();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, global_attribute384.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt119 >= 1 ) goto loop119;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee119 =
                		                new EarlyExitException(119, input);
                		            throw eee119;
                	    }
                	    cnt119++;
                	} while (true);

                	loop119:
                		;	// Stops C# compiler whining that label 'loop119' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attributes"

        public class global_attribute_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attribute"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2668:1: global_attribute : ^( GLOBAL_ATTRIBUTE global_attribute_target_specifier attribute_list ) ;
        public NetMaker.global_attribute_return global_attribute() // throws RecognitionException [1]
        {   
            NetMaker.global_attribute_return retval = new NetMaker.global_attribute_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree GLOBAL_ATTRIBUTE385 = null;
            NetMaker.global_attribute_target_specifier_return global_attribute_target_specifier386 = default(NetMaker.global_attribute_target_specifier_return);

            NetMaker.attribute_list_return attribute_list387 = default(NetMaker.attribute_list_return);


            CommonTree GLOBAL_ATTRIBUTE385_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2668:17: ( ^( GLOBAL_ATTRIBUTE global_attribute_target_specifier attribute_list ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2669:2: ^( GLOBAL_ATTRIBUTE global_attribute_target_specifier attribute_list )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	GLOBAL_ATTRIBUTE385=(CommonTree)Match(input,GLOBAL_ATTRIBUTE,FOLLOW_GLOBAL_ATTRIBUTE_in_global_attribute6300); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{GLOBAL_ATTRIBUTE385_tree = (CommonTree)adaptor.DupNode(GLOBAL_ATTRIBUTE385);

                		root_1 = (CommonTree)adaptor.BecomeRoot(GLOBAL_ATTRIBUTE385_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute6302);
                	global_attribute_target_specifier386 = global_attribute_target_specifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, global_attribute_target_specifier386.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_list_in_global_attribute6306);
                	attribute_list387 = attribute_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, attribute_list387.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attribute"

        public class global_attribute_target_specifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attribute_target_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2670:1: global_attribute_target_specifier : global_attribute_target ':' ;
        public NetMaker.global_attribute_target_specifier_return global_attribute_target_specifier() // throws RecognitionException [1]
        {   
            NetMaker.global_attribute_target_specifier_return retval = new NetMaker.global_attribute_target_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal389 = null;
            NetMaker.global_attribute_target_return global_attribute_target388 = default(NetMaker.global_attribute_target_return);


            CommonTree char_literal389_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2670:34: ( global_attribute_target ':' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2671:2: global_attribute_target ':'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier6315);
                	global_attribute_target388 = global_attribute_target();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, global_attribute_target388.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal389=(CommonTree)Match(input,211,FOLLOW_211_in_global_attribute_target_specifier6319); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal389_tree = (CommonTree)adaptor.DupNode(char_literal389);

                		adaptor.AddChild(root_0, char_literal389_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attribute_target_specifier"

        public class global_attribute_target_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attribute_target"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2672:1: global_attribute_target : ( 'assembly' | 'module' );
        public NetMaker.global_attribute_target_return global_attribute_target() // throws RecognitionException [1]
        {   
            NetMaker.global_attribute_target_return retval = new NetMaker.global_attribute_target_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set390 = null;

            CommonTree set390_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2672:24: ( 'assembly' | 'module' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set390 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= 237 && input.LA(1) <= 238) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set390_tree = (CommonTree)adaptor.DupNode(set390);

                	    adaptor.AddChild(root_0, set390_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attribute_target"

        public class attributes_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attributes"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2674:1: attributes : attribute_sections ;
        public NetMaker.attributes_return attributes() // throws RecognitionException [1]
        {   
            NetMaker.attributes_return retval = new NetMaker.attributes_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.attribute_sections_return attribute_sections391 = default(NetMaker.attribute_sections_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2674:11: ( attribute_sections )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2675:2: attribute_sections
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_sections_in_attributes6341);
                	attribute_sections391 = attribute_sections();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_sections391.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attributes"

        public class attribute_sections_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_sections"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2676:1: attribute_sections : ( attribute_section )+ ;
        public NetMaker.attribute_sections_return attribute_sections() // throws RecognitionException [1]
        {   
            NetMaker.attribute_sections_return retval = new NetMaker.attribute_sections_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.attribute_section_return attribute_section392 = default(NetMaker.attribute_section_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2676:19: ( ( attribute_section )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2677:2: ( attribute_section )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2677:2: ( attribute_section )+
                	int cnt120 = 0;
                	do 
                	{
                	    int alt120 = 2;
                	    int LA120_0 = input.LA(1);

                	    if ( (LA120_0 == ATTRIBUTE) )
                	    {
                	        alt120 = 1;
                	    }


                	    switch (alt120) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2677:2: attribute_section
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_attribute_section_in_attribute_sections6350);
                			    	attribute_section392 = attribute_section();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, attribute_section392.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt120 >= 1 ) goto loop120;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee120 =
                		                new EarlyExitException(120, input);
                		            throw eee120;
                	    }
                	    cnt120++;
                	} while (true);

                	loop120:
                		;	// Stops C# compiler whining that label 'loop120' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_sections"

        public class attribute_section_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_section"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2678:1: attribute_section : ^( ATTRIBUTE ( attribute_target_specifier )? attribute_list ) ;
        public NetMaker.attribute_section_return attribute_section() // throws RecognitionException [1]
        {   
            NetMaker.attribute_section_return retval = new NetMaker.attribute_section_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree ATTRIBUTE393 = null;
            NetMaker.attribute_target_specifier_return attribute_target_specifier394 = default(NetMaker.attribute_target_specifier_return);

            NetMaker.attribute_list_return attribute_list395 = default(NetMaker.attribute_list_return);


            CommonTree ATTRIBUTE393_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2678:18: ( ^( ATTRIBUTE ( attribute_target_specifier )? attribute_list ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2679:2: ^( ATTRIBUTE ( attribute_target_specifier )? attribute_list )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	ATTRIBUTE393=(CommonTree)Match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_section6361); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{ATTRIBUTE393_tree = (CommonTree)adaptor.DupNode(ATTRIBUTE393);

                		root_1 = (CommonTree)adaptor.BecomeRoot(ATTRIBUTE393_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2679:14: ( attribute_target_specifier )?
                	int alt121 = 2;
                	int LA121_0 = input.LA(1);

                	if ( (LA121_0 == 239 || (LA121_0 >= 241 && LA121_0 <= 244)) )
                	{
                	    int LA121_1 = input.LA(2);

                	    if ( (LA121_1 == 211) )
                	    {
                	        alt121 = 1;
                	    }
                	}
                	else if ( (LA121_0 == RETURN || LA121_0 == 240) )
                	{
                	    alt121 = 1;
                	}
                	switch (alt121) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2679:14: attribute_target_specifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attribute_target_specifier_in_attribute_section6363);
                	        	attribute_target_specifier394 = attribute_target_specifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, attribute_target_specifier394.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_list_in_attribute_section6368);
                	attribute_list395 = attribute_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, attribute_list395.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_section"

        public class attribute_target_specifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_target_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2680:1: attribute_target_specifier : attribute_target ':' ;
        public NetMaker.attribute_target_specifier_return attribute_target_specifier() // throws RecognitionException [1]
        {   
            NetMaker.attribute_target_specifier_return retval = new NetMaker.attribute_target_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal397 = null;
            NetMaker.attribute_target_return attribute_target396 = default(NetMaker.attribute_target_return);


            CommonTree char_literal397_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2680:27: ( attribute_target ':' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2681:2: attribute_target ':'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_target_in_attribute_target_specifier6378);
                	attribute_target396 = attribute_target();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_target396.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal397=(CommonTree)Match(input,211,FOLLOW_211_in_attribute_target_specifier6382); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal397_tree = (CommonTree)adaptor.DupNode(char_literal397);

                		adaptor.AddChild(root_0, char_literal397_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_target_specifier"

        public class attribute_target_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_target"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2682:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
        public NetMaker.attribute_target_return attribute_target() // throws RecognitionException [1]
        {   
            NetMaker.attribute_target_return retval = new NetMaker.attribute_target_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set398 = null;

            CommonTree set398_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2682:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set398 = (CommonTree)input.LT(1);
                	if ( input.LA(1) == RETURN || (input.LA(1) >= 239 && input.LA(1) <= 244) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set398_tree = (CommonTree)adaptor.DupNode(set398);

                	    adaptor.AddChild(root_0, set398_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_target"

        public class attribute_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2684:1: attribute_list : attribute ( ',' attribute )* ;
        public NetMaker.attribute_list_return attribute_list() // throws RecognitionException [1]
        {   
            NetMaker.attribute_list_return retval = new NetMaker.attribute_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal400 = null;
            NetMaker.attribute_return attribute399 = default(NetMaker.attribute_return);

            NetMaker.attribute_return attribute401 = default(NetMaker.attribute_return);


            CommonTree char_literal400_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2684:15: ( attribute ( ',' attribute )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2685:2: attribute ( ',' attribute )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_in_attribute_list6424);
                	attribute399 = attribute();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute399.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2685:12: ( ',' attribute )*
                	do 
                	{
                	    int alt122 = 2;
                	    int LA122_0 = input.LA(1);

                	    if ( (LA122_0 == COMMA) )
                	    {
                	        alt122 = 1;
                	    }


                	    switch (alt122) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2685:13: ',' attribute
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal400=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_attribute_list6427); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal400_tree = (CommonTree)adaptor.DupNode(char_literal400);

                			    		adaptor.AddChild(root_0, char_literal400_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_attribute_in_attribute_list6429);
                			    	attribute401 = attribute();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, attribute401.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop122;
                	    }
                	} while (true);

                	loop122:
                		;	// Stops C# compiler whining that label 'loop122' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_list"

        public class attribute_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2686:1: attribute : type_name ( attribute_arguments )? ;
        public NetMaker.attribute_return attribute() // throws RecognitionException [1]
        {   
            NetMaker.attribute_return retval = new NetMaker.attribute_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_name_return type_name402 = default(NetMaker.type_name_return);

            NetMaker.attribute_arguments_return attribute_arguments403 = default(NetMaker.attribute_arguments_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2686:10: ( type_name ( attribute_arguments )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2687:2: type_name ( attribute_arguments )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_attribute6441);
                	type_name402 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_name402.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2687:14: ( attribute_arguments )?
                	int alt123 = 2;
                	int LA123_0 = input.LA(1);

                	if ( (LA123_0 == LPAREN) )
                	{
                	    alt123 = 1;
                	}
                	switch (alt123) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2687:14: attribute_arguments
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attribute_arguments_in_attribute6445);
                	        	attribute_arguments403 = attribute_arguments();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attribute_arguments403.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute"

        public class attribute_arguments_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_arguments"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2689:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
        public NetMaker.attribute_arguments_return attribute_arguments() // throws RecognitionException [1]
        {   
            NetMaker.attribute_arguments_return retval = new NetMaker.attribute_arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal404 = null;
            CommonTree char_literal405 = null;
            CommonTree char_literal408 = null;
            CommonTree char_literal410 = null;
            NetMaker.positional_argument_return positional_argument406 = default(NetMaker.positional_argument_return);

            NetMaker.named_argument_return named_argument407 = default(NetMaker.named_argument_return);

            NetMaker.positional_argument_return positional_argument409 = default(NetMaker.positional_argument_return);


            CommonTree char_literal404_tree=null;
            CommonTree char_literal405_tree=null;
            CommonTree char_literal408_tree=null;
            CommonTree char_literal410_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2689:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2690:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal404=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_attribute_arguments6456); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal404_tree = (CommonTree)adaptor.DupNode(char_literal404);

                		adaptor.AddChild(root_0, char_literal404_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2690:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
                	int alt125 = 2;
                	int LA125_0 = input.LA(1);

                	if ( (LA125_0 == RPAREN) )
                	{
                	    alt125 = 1;
                	}
                	else if ( ((LA125_0 >= PARAMS && LA125_0 <= PARAMS_TYPELESS) || (LA125_0 >= MONOPLUS && LA125_0 <= APPLY) || (LA125_0 >= NEW && LA125_0 <= NEW_ARRAY) || LA125_0 == NEW_ANON_OBJECT || (LA125_0 >= OBJECT && LA125_0 <= THIS) || LA125_0 == NULL_COALESCE || (LA125_0 >= COND_EXPR && LA125_0 <= LEFT_SHIFT) || (LA125_0 >= SUPER && LA125_0 <= LAMBDA) || LA125_0 == CAST_EXPR || (LA125_0 >= BOOL && LA125_0 <= GT) || (LA125_0 >= ELIF && LA125_0 <= UNDEF) || LA125_0 == 195 || LA125_0 == 208 || (LA125_0 >= 214 && LA125_0 <= 219) || LA125_0 == 221 || (LA125_0 >= 224 && LA125_0 <= 239) || (LA125_0 >= 241 && LA125_0 <= 244) || (LA125_0 >= 247 && LA125_0 <= 254) || LA125_0 == 256 || (LA125_0 >= 263 && LA125_0 <= 264) || (LA125_0 >= 274 && LA125_0 <= 277)) )
                	{
                	    alt125 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d125s0 =
                	        new NoViableAltException("", 125, 0, input);

                	    throw nvae_d125s0;
                	}
                	switch (alt125) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2690:9: ')'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal405=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments6461); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal405_tree = (CommonTree)adaptor.DupNode(char_literal405);

                	        		adaptor.AddChild(root_0, char_literal405_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2691:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
                	        {
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2691:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2691:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                	        	{
                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_positional_argument_in_attribute_arguments6481);
                	        		positional_argument406 = positional_argument();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, positional_argument406.Tree);
                	        		// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2691:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                	        		do 
                	        		{
                	        		    int alt124 = 3;
                	        		    int LA124_0 = input.LA(1);

                	        		    if ( (LA124_0 == IDENTIFIER) && (synpred14_NetMaker()) )
                	        		    {
                	        		        alt124 = 1;
                	        		    }
                	        		    else if ( ((LA124_0 >= ELIF && LA124_0 <= UNDEF) || LA124_0 == 195 || LA124_0 == 221 || (LA124_0 >= 224 && LA124_0 <= 239) || (LA124_0 >= 241 && LA124_0 <= 244) || (LA124_0 >= 247 && LA124_0 <= 250) || LA124_0 == 256 || (LA124_0 >= 263 && LA124_0 <= 264) || LA124_0 == 274 || LA124_0 == 277) && (synpred14_NetMaker()) )
                	        		    {
                	        		        alt124 = 1;
                	        		    }
                	        		    else if ( (LA124_0 == COMMA) )
                	        		    {
                	        		        alt124 = 2;
                	        		    }


                	        		    switch (alt124) 
                	        			{
                	        				case 1 :
                	        				    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2691:32: ( ',' identifier '=' )=> named_argument
                	        				    {
                	        				    	_last = (CommonTree)input.LT(1);
                	        				    	PushFollow(FOLLOW_named_argument_in_attribute_arguments6500);
                	        				    	named_argument407 = named_argument();
                	        				    	state._fsp--;
                	        				    	if (state.failed) return retval;
                	        				    	if ( (state.backtracking==0) ) 
                	        				    	adaptor.AddChild(root_0, named_argument407.Tree);

                	        				    	if ( (state.backtracking==0) ) {
                	        				    	}
                	        				    }
                	        				    break;
                	        				case 2 :
                	        				    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2692:15: ',' positional_argument
                	        				    {
                	        				    	_last = (CommonTree)input.LT(1);
                	        				    	char_literal408=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_attribute_arguments6516); if (state.failed) return retval;
                	        				    	if ( state.backtracking == 0 )
                	        				    	{char_literal408_tree = (CommonTree)adaptor.DupNode(char_literal408);

                	        				    		adaptor.AddChild(root_0, char_literal408_tree);
                	        				    	}
                	        				    	_last = (CommonTree)input.LT(1);
                	        				    	PushFollow(FOLLOW_positional_argument_in_attribute_arguments6518);
                	        				    	positional_argument409 = positional_argument();
                	        				    	state._fsp--;
                	        				    	if (state.failed) return retval;
                	        				    	if ( (state.backtracking==0) ) 
                	        				    	adaptor.AddChild(root_0, positional_argument409.Tree);

                	        				    	if ( (state.backtracking==0) ) {
                	        				    	}
                	        				    }
                	        				    break;

                	        				default:
                	        				    goto loop124;
                	        		    }
                	        		} while (true);

                	        		loop124:
                	        			;	// Stops C# compiler whining that label 'loop124' has no statements


                	        		if ( (state.backtracking==0) ) {
                	        		}
                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal410=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments6529); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal410_tree = (CommonTree)adaptor.DupNode(char_literal410);

                	        		adaptor.AddChild(root_0, char_literal410_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_arguments"

        public class positional_argument_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "positional_argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2695:1: positional_argument_list : ^( ARGS ( positional_argument )+ ) ;
        public NetMaker.positional_argument_list_return positional_argument_list() // throws RecognitionException [1]
        {   
            NetMaker.positional_argument_list_return retval = new NetMaker.positional_argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree ARGS411 = null;
            NetMaker.positional_argument_return positional_argument412 = default(NetMaker.positional_argument_return);


            CommonTree ARGS411_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2695:25: ( ^( ARGS ( positional_argument )+ ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2696:2: ^( ARGS ( positional_argument )+ )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	ARGS411=(CommonTree)Match(input,ARGS,FOLLOW_ARGS_in_positional_argument_list6544); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{ARGS411_tree = (CommonTree)adaptor.DupNode(ARGS411);

                		root_1 = (CommonTree)adaptor.BecomeRoot(ARGS411_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2696:9: ( positional_argument )+
                	int cnt126 = 0;
                	do 
                	{
                	    int alt126 = 2;
                	    int LA126_0 = input.LA(1);

                	    if ( ((LA126_0 >= PARAMS && LA126_0 <= PARAMS_TYPELESS) || (LA126_0 >= MONOPLUS && LA126_0 <= APPLY) || (LA126_0 >= NEW && LA126_0 <= NEW_ARRAY) || LA126_0 == NEW_ANON_OBJECT || (LA126_0 >= OBJECT && LA126_0 <= THIS) || LA126_0 == NULL_COALESCE || (LA126_0 >= COND_EXPR && LA126_0 <= LEFT_SHIFT) || (LA126_0 >= SUPER && LA126_0 <= LAMBDA) || LA126_0 == CAST_EXPR || (LA126_0 >= BOOL && LA126_0 <= GT) || (LA126_0 >= ELIF && LA126_0 <= UNDEF) || LA126_0 == 195 || LA126_0 == 208 || (LA126_0 >= 214 && LA126_0 <= 219) || LA126_0 == 221 || (LA126_0 >= 224 && LA126_0 <= 239) || (LA126_0 >= 241 && LA126_0 <= 244) || (LA126_0 >= 247 && LA126_0 <= 254) || LA126_0 == 256 || (LA126_0 >= 263 && LA126_0 <= 264) || (LA126_0 >= 274 && LA126_0 <= 277)) )
                	    {
                	        alt126 = 1;
                	    }


                	    switch (alt126) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2696:9: positional_argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_positional_argument_in_positional_argument_list6546);
                			    	positional_argument412 = positional_argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_1, positional_argument412.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt126 >= 1 ) goto loop126;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee126 =
                		                new EarlyExitException(126, input);
                		            throw eee126;
                	    }
                	    cnt126++;
                	} while (true);

                	loop126:
                		;	// Stops C# compiler whining that label 'loop126' has no statements


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "positional_argument_list"

        public class positional_argument_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "positional_argument"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2697:1: positional_argument : attribute_argument_expression ;
        public NetMaker.positional_argument_return positional_argument() // throws RecognitionException [1]
        {   
            NetMaker.positional_argument_return retval = new NetMaker.positional_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.attribute_argument_expression_return attribute_argument_expression413 = default(NetMaker.attribute_argument_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2697:20: ( attribute_argument_expression )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2698:2: attribute_argument_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_argument_expression_in_positional_argument6557);
                	attribute_argument_expression413 = attribute_argument_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_argument_expression413.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "positional_argument"

        public class named_argument_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "named_argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2699:1: named_argument_list : ^( ARGS ( named_argument )+ ) ;
        public NetMaker.named_argument_list_return named_argument_list() // throws RecognitionException [1]
        {   
            NetMaker.named_argument_list_return retval = new NetMaker.named_argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree ARGS414 = null;
            NetMaker.named_argument_return named_argument415 = default(NetMaker.named_argument_return);


            CommonTree ARGS414_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2699:20: ( ^( ARGS ( named_argument )+ ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2700:2: ^( ARGS ( named_argument )+ )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	ARGS414=(CommonTree)Match(input,ARGS,FOLLOW_ARGS_in_named_argument_list6567); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{ARGS414_tree = (CommonTree)adaptor.DupNode(ARGS414);

                		root_1 = (CommonTree)adaptor.BecomeRoot(ARGS414_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2700:9: ( named_argument )+
                	int cnt127 = 0;
                	do 
                	{
                	    int alt127 = 2;
                	    int LA127_0 = input.LA(1);

                	    if ( (LA127_0 == IDENTIFIER || (LA127_0 >= ELIF && LA127_0 <= UNDEF) || LA127_0 == 195 || LA127_0 == 221 || (LA127_0 >= 224 && LA127_0 <= 239) || (LA127_0 >= 241 && LA127_0 <= 244) || (LA127_0 >= 247 && LA127_0 <= 250) || LA127_0 == 256 || (LA127_0 >= 263 && LA127_0 <= 264) || LA127_0 == 274 || LA127_0 == 277) )
                	    {
                	        alt127 = 1;
                	    }


                	    switch (alt127) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2700:9: named_argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_named_argument_in_named_argument_list6569);
                			    	named_argument415 = named_argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_1, named_argument415.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt127 >= 1 ) goto loop127;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee127 =
                		                new EarlyExitException(127, input);
                		            throw eee127;
                	    }
                	    cnt127++;
                	} while (true);

                	loop127:
                		;	// Stops C# compiler whining that label 'loop127' has no statements


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "named_argument_list"

        public class named_argument_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "named_argument"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2701:1: named_argument : identifier '=' attribute_argument_expression ;
        public NetMaker.named_argument_return named_argument() // throws RecognitionException [1]
        {   
            NetMaker.named_argument_return retval = new NetMaker.named_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal417 = null;
            NetMaker.identifier_return identifier416 = default(NetMaker.identifier_return);

            NetMaker.attribute_argument_expression_return attribute_argument_expression418 = default(NetMaker.attribute_argument_expression_return);


            CommonTree char_literal417_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2701:15: ( identifier '=' attribute_argument_expression )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2702:2: identifier '=' attribute_argument_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_named_argument6580);
                	identifier416 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier416.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal417=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_named_argument6584); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal417_tree = (CommonTree)adaptor.DupNode(char_literal417);

                		adaptor.AddChild(root_0, char_literal417_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_argument_expression_in_named_argument6588);
                	attribute_argument_expression418 = attribute_argument_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_argument_expression418.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "named_argument"

        public class attribute_argument_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_argument_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2703:1: attribute_argument_expression : expression[ObjectType] ;
        public NetMaker.attribute_argument_expression_return attribute_argument_expression() // throws RecognitionException [1]
        {   
            NetMaker.attribute_argument_expression_return retval = new NetMaker.attribute_argument_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression419 = default(NetMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2703:30: ( expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2704:2: expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_attribute_argument_expression6597);
                	expression419 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression419.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_argument_expression"

        public class class_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2710:1: class_declaration : ^(c= CLASS ( 'partial' )? ( PAYLOAD )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_implements )? class_body magicAnnotation[$modifiers.tree, $identifier.tree, null, $c.token] ) -> {$class_implements.hasExtends && $class_implements.extendDotNetType.IsA(findType(\"System.Attribute\"), AppEnv)}? magicAnnotation -> ^( $c ( 'partial' )? ( PAYLOAD )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_implements )? class_body ) ;
        public NetMaker.class_declaration_return class_declaration() // throws RecognitionException [1]
        {   
            NSContext_stack.Push(new NSContext_scope());
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.class_declaration_return retval = new NetMaker.class_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree string_literal420 = null;
            CommonTree PAYLOAD421 = null;
            NetMaker.attributes_return attributes422 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers423 = default(NetMaker.modifiers_return);

            NetMaker.identifier_return identifier424 = default(NetMaker.identifier_return);

            NetMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses425 = default(NetMaker.type_parameter_constraints_clauses_return);

            NetMaker.type_parameter_list_return type_parameter_list426 = default(NetMaker.type_parameter_list_return);

            NetMaker.class_implements_return class_implements427 = default(NetMaker.class_implements_return);

            NetMaker.class_body_return class_body428 = default(NetMaker.class_body_return);

            NetMaker.magicAnnotation_return magicAnnotation429 = default(NetMaker.magicAnnotation_return);


            CommonTree c_tree=null;
            CommonTree string_literal420_tree=null;
            CommonTree PAYLOAD421_tree=null;
            RewriteRuleNodeStream stream_CLASS = new RewriteRuleNodeStream(adaptor,"token CLASS");
            RewriteRuleNodeStream stream_PAYLOAD = new RewriteRuleNodeStream(adaptor,"token PAYLOAD");
            RewriteRuleNodeStream stream_196 = new RewriteRuleNodeStream(adaptor,"token 196");
            RewriteRuleSubtreeStream stream_class_body = new RewriteRuleSubtreeStream(adaptor,"rule class_body");
            RewriteRuleSubtreeStream stream_magicAnnotation = new RewriteRuleSubtreeStream(adaptor,"rule magicAnnotation");
            RewriteRuleSubtreeStream stream_class_implements = new RewriteRuleSubtreeStream(adaptor,"rule class_implements");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_type_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_list");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            RewriteRuleSubtreeStream stream_modifiers = new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

                ((NSContext_scope)NSContext_stack.Peek()).namespaces =  new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).globalNamespaces =  new List<string>(((NSContext_scope)NSContext_stack.ToArray()[1]).globalNamespaces);
                ((NSContext_scope)NSContext_stack.Peek()).typeVariables =  new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).globalTypeVariables =  new List<string>(((NSContext_scope)NSContext_stack.ToArray()[1]).globalTypeVariables);

                ((NSContext_scope)NSContext_stack.Peek()).baseClass =  ObjectType;
                ((NSContext_scope)NSContext_stack.Peek()).interfaceList =  new List<InterfaceRepTemplate>();
                ((NSContext_scope)NSContext_stack.Peek()).blackListedMethods =  new List<string>();

                ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string, TypeRepTemplate>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2724:1: ( ^(c= CLASS ( 'partial' )? ( PAYLOAD )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_implements )? class_body magicAnnotation[$modifiers.tree, $identifier.tree, null, $c.token] ) -> {$class_implements.hasExtends && $class_implements.extendDotNetType.IsA(findType(\"System.Attribute\"), AppEnv)}? magicAnnotation -> ^( $c ( 'partial' )? ( PAYLOAD )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_implements )? class_body ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:4: ^(c= CLASS ( 'partial' )? ( PAYLOAD )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_implements )? class_body magicAnnotation[$modifiers.tree, $identifier.tree, null, $c.token] )
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,CLASS,FOLLOW_CLASS_in_class_declaration6630); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLASS.Add(c);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:15: ( 'partial' )?
                	int alt128 = 2;
                	int LA128_0 = input.LA(1);

                	if ( (LA128_0 == 196) )
                	{
                	    alt128 = 1;
                	}
                	switch (alt128) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:15: 'partial'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal420=(CommonTree)Match(input,196,FOLLOW_196_in_class_declaration6633); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_196.Add(string_literal420);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:26: ( PAYLOAD )?
                	int alt129 = 2;
                	int LA129_0 = input.LA(1);

                	if ( (LA129_0 == PAYLOAD) )
                	{
                	    alt129 = 1;
                	}
                	switch (alt129) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:26: PAYLOAD
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PAYLOAD421=(CommonTree)Match(input,PAYLOAD,FOLLOW_PAYLOAD_in_class_declaration6636); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_PAYLOAD.Add(PAYLOAD421);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:35: ( attributes )?
                	int alt130 = 2;
                	int LA130_0 = input.LA(1);

                	if ( (LA130_0 == ATTRIBUTE) )
                	{
                	    alt130 = 1;
                	}
                	switch (alt130) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:35: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_class_declaration6639);
                	        	attributes422 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(attributes422.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:47: ( modifiers )?
                	int alt131 = 2;
                	int LA131_0 = input.LA(1);

                	if ( (LA131_0 == FINAL || (LA131_0 >= PUBLIC && LA131_0 <= PRIVATE) || LA131_0 == STATIC || LA131_0 == 194 || LA131_0 == 197 || (LA131_0 >= 199 && LA131_0 <= 204)) )
                	{
                	    alt131 = 1;
                	}
                	switch (alt131) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:47: modifiers
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_modifiers_in_class_declaration6642);
                	        	modifiers423 = modifiers();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_modifiers.Add(modifiers423.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_class_declaration6645);
                	identifier424 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier424.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:69: ( type_parameter_constraints_clauses )?
                	int alt132 = 2;
                	int LA132_0 = input.LA(1);

                	if ( (LA132_0 == TYPE_PARAM_CONSTRAINT) )
                	{
                	    alt132 = 1;
                	}
                	switch (alt132) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2725:69: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration6647);
                	        	type_parameter_constraints_clauses425 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses425.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2726:9: ( type_parameter_list )?
                	int alt133 = 2;
                	int LA133_0 = input.LA(1);

                	if ( (LA133_0 == ATTRIBUTE || LA133_0 == IDENTIFIER || (LA133_0 >= ELIF && LA133_0 <= UNDEF) || LA133_0 == 195 || LA133_0 == 221 || (LA133_0 >= 224 && LA133_0 <= 239) || (LA133_0 >= 241 && LA133_0 <= 244) || (LA133_0 >= 247 && LA133_0 <= 250) || LA133_0 == 256 || (LA133_0 >= 263 && LA133_0 <= 264) || LA133_0 == 274 || LA133_0 == 277) )
                	{
                	    alt133 = 1;
                	}
                	switch (alt133) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2726:9: type_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_list_in_class_declaration6659);
                	        	type_parameter_list426 = type_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_list.Add(type_parameter_list426.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   ((NSContext_scope)NSContext_stack.Peek()).currentNS =  NSPrefix(ParentNameSpace) + mkGenericTypeAlias(((identifier424 != null) ? identifier424.thetext : default(string)), ((type_parameter_list426 != null) ? type_parameter_list426.tyParams : default(List<string>))); if (CompUnitName == null) CompUnitName = ((NSContext_scope)NSContext_stack.Peek()).currentNS; 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2728:10: ( class_implements )?
                	int alt134 = 2;
                	int LA134_0 = input.LA(1);

                	if ( (LA134_0 == IMPLEMENTS) )
                	{
                	    alt134 = 1;
                	}
                	switch (alt134) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2728:10: class_implements
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_implements_in_class_declaration6687);
                	        	class_implements427 = class_implements();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_class_implements.Add(class_implements427.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   
                	              ((NSContext_scope)NSContext_stack.Peek()).namespaces.Add(((NSContext_scope)NSContext_stack.Peek()).currentNS);
                	              ((NSContext_scope)NSContext_stack.Peek()).globalNamespaces.Add(((NSContext_scope)NSContext_stack.Peek()).currentNS);
                	              if (((type_parameter_list426 != null) ? type_parameter_list426.tyParams : default(List<string>)) != null) {
                	                  ((NSContext_scope)NSContext_stack.Peek()).typeVariables.AddRange(((type_parameter_list426 != null) ? type_parameter_list426.tyParams : default(List<string>)));
                	                  ((NSContext_scope)NSContext_stack.Peek()).globalTypeVariables.AddRange(((type_parameter_list426 != null) ? type_parameter_list426.tyParams : default(List<string>)));
                	              }
                	              ClassRepTemplate classTypeRep = (ClassRepTemplate)AppEnv.Search(((NSContext_scope)NSContext_stack.Peek()).currentNS);
                	  			if (classTypeRep == null) {
                	  			    Error(((c != null) ? c.Line : 0), "Could not find class " + ((NSContext_scope)NSContext_stack.Peek()).currentNS + " in the type environment");
                	  			}
                	  			else {
                	  				((SymTab_scope)SymTab_stack.Peek()).symtab["this"] = classTypeRep;
                	  				ClassRepTemplate baseType = ObjectType;
                	  				if (classTypeRep.Inherits != null && classTypeRep.Inherits.Length > 0) {
                	                     // Find a class that we extend
                	                     foreach (String super in classTypeRep.Inherits) {
                	  					  ClassRepTemplate parent = AppEnv.Search(classTypeRep.Uses, super, null) as ClassRepTemplate;
                	                        if (parent != null) {
                	                          baseType = parent;
                	                          break;
                	                        }
                	                      }    
                	  				}
                	  				((SymTab_scope)SymTab_stack.Peek()).symtab["super"] = baseType;
                	  			}
                	           
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_class_body_in_class_declaration6711);
                	class_body428 = class_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_class_body.Add(class_body428.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicAnnotation_in_class_declaration6713);
                	magicAnnotation429 = magicAnnotation(((modifiers423 != null) ? ((CommonTree)modifiers423.Tree) : null), ((identifier424 != null) ? ((CommonTree)identifier424.Tree) : null), null, c.token);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicAnnotation.Add(magicAnnotation429.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}



                	// AST REWRITE
                	// elements:          type_parameter_constraints_clauses, attributes, magicAnnotation, class_body, class_implements, identifier, PAYLOAD, 196, modifiers, c, type_parameter_list
                	// token labels:      c
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_c = new RewriteRuleNodeStream(adaptor, "token c", c);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2757:5: -> {$class_implements.hasExtends && $class_implements.extendDotNetType.IsA(findType(\"System.Attribute\"), AppEnv)}? magicAnnotation
                	if (((class_implements427 != null) ? class_implements427.hasExtends : default(bool)) && ((class_implements427 != null) ? class_implements427.extendDotNetType : default(TypeRepTemplate)).IsA(findType("System.Attribute"), AppEnv))
                	{
                	    adaptor.AddChild(root_0, stream_magicAnnotation.NextTree());

                	}
                	else // 2758:5: -> ^( $c ( 'partial' )? ( PAYLOAD )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_implements )? class_body )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:8: ^( $c ( 'partial' )? ( PAYLOAD )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_implements )? class_body )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_c.NextNode(), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:13: ( 'partial' )?
                	    if ( stream_196.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_196.NextNode());

                	    }
                	    stream_196.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:24: ( PAYLOAD )?
                	    if ( stream_PAYLOAD.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_PAYLOAD.NextNode());

                	    }
                	    stream_PAYLOAD.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:33: ( attributes )?
                	    if ( stream_attributes.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_attributes.NextTree());

                	    }
                	    stream_attributes.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:45: ( modifiers )?
                	    if ( stream_modifiers.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_modifiers.NextTree());

                	    }
                	    stream_modifiers.Reset();
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:67: ( type_parameter_constraints_clauses )?
                	    if ( stream_type_parameter_constraints_clauses.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_constraints_clauses.NextTree());

                	    }
                	    stream_type_parameter_constraints_clauses.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:103: ( type_parameter_list )?
                	    if ( stream_type_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_list.NextTree());

                	    }
                	    stream_type_parameter_list.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2758:124: ( class_implements )?
                	    if ( stream_class_implements.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_class_implements.NextTree());

                	    }
                	    stream_class_implements.Reset();
                	    adaptor.AddChild(root_1, stream_class_body.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                NSContext_stack.Pop();
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "class_declaration"

        public class type_parameter_list_return : TreeRuleReturnScope
        {
            public List<string> tyParams;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2760:1: type_parameter_list returns [List<string> tyParams] : ( ( attributes )? type_parameter )+ ;
        public NetMaker.type_parameter_list_return type_parameter_list() // throws RecognitionException [1]
        {   
            NetMaker.type_parameter_list_return retval = new NetMaker.type_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.attributes_return attributes430 = default(NetMaker.attributes_return);

            NetMaker.type_parameter_return type_parameter431 = default(NetMaker.type_parameter_return);




                retval.tyParams =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2763:2: ( ( ( attributes )? type_parameter )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2764:5: ( ( attributes )? type_parameter )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2764:5: ( ( attributes )? type_parameter )+
                	int cnt136 = 0;
                	do 
                	{
                	    int alt136 = 2;
                	    int LA136_0 = input.LA(1);

                	    if ( (LA136_0 == ATTRIBUTE || LA136_0 == IDENTIFIER || (LA136_0 >= ELIF && LA136_0 <= UNDEF) || LA136_0 == 195 || LA136_0 == 221 || (LA136_0 >= 224 && LA136_0 <= 239) || (LA136_0 >= 241 && LA136_0 <= 244) || (LA136_0 >= 247 && LA136_0 <= 250) || LA136_0 == 256 || (LA136_0 >= 263 && LA136_0 <= 264) || LA136_0 == 274 || LA136_0 == 277) )
                	    {
                	        alt136 = 1;
                	    }


                	    switch (alt136) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2764:6: ( attributes )? type_parameter
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2764:6: ( attributes )?
                			    	int alt135 = 2;
                			    	int LA135_0 = input.LA(1);

                			    	if ( (LA135_0 == ATTRIBUTE) )
                			    	{
                			    	    alt135 = 1;
                			    	}
                			    	switch (alt135) 
                			    	{
                			    	    case 1 :
                			    	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2764:6: attributes
                			    	        {
                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	PushFollow(FOLLOW_attributes_in_type_parameter_list6782);
                			    	        	attributes430 = attributes();
                			    	        	state._fsp--;
                			    	        	if (state.failed) return retval;
                			    	        	if ( (state.backtracking==0) ) 
                			    	        	adaptor.AddChild(root_0, attributes430.Tree);

                			    	        	if ( (state.backtracking==0) ) {
                			    	        	}
                			    	        }
                			    	        break;

                			    	}

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_parameter_in_type_parameter_list6785);
                			    	type_parameter431 = type_parameter();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, type_parameter431.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.tyParams.Add(((type_parameter431 != null) ? type_parameter431.thetext : default(string))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt136 >= 1 ) goto loop136;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee136 =
                		                new EarlyExitException(136, input);
                		            throw eee136;
                	    }
                	    cnt136++;
                	} while (true);

                	loop136:
                		;	// Stops C# compiler whining that label 'loop136' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter_list"

        public class type_parameter_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2766:1: type_parameter returns [string thetext] : identifier ;
        public NetMaker.type_parameter_return type_parameter() // throws RecognitionException [1]
        {   
            NetMaker.type_parameter_return retval = new NetMaker.type_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.identifier_return identifier432 = default(NetMaker.identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2766:40: ( identifier )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2767:5: identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_type_parameter6805);
                	identifier432 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier432.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext =  ((identifier432 != null) ? identifier432.thetext : default(string)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter"

        public class class_extends_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_extends"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2769:1: class_extends : ( class_extend )+ ;
        public NetMaker.class_extends_return class_extends() // throws RecognitionException [1]
        {   
            NetMaker.class_extends_return retval = new NetMaker.class_extends_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.class_extend_return class_extend433 = default(NetMaker.class_extend_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2769:14: ( ( class_extend )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2770:2: ( class_extend )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2770:2: ( class_extend )+
                	int cnt137 = 0;
                	do 
                	{
                	    int alt137 = 2;
                	    int LA137_0 = input.LA(1);

                	    if ( (LA137_0 == EXTENDS) )
                	    {
                	        alt137 = 1;
                	    }


                	    switch (alt137) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2770:2: class_extend
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_class_extend_in_class_extends6815);
                			    	class_extend433 = class_extend();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, class_extend433.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt137 >= 1 ) goto loop137;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee137 =
                		                new EarlyExitException(137, input);
                		            throw eee137;
                	    }
                	    cnt137++;
                	} while (true);

                	loop137:
                		;	// Stops C# compiler whining that label 'loop137' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_extends"

        public class class_extend_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_extend"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2771:1: class_extend : ^( EXTENDS type ) ;
        public NetMaker.class_extend_return class_extend() // throws RecognitionException [1]
        {   
            NetMaker.class_extend_return retval = new NetMaker.class_extend_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree EXTENDS434 = null;
            NetMaker.type_return type435 = default(NetMaker.type_return);


            CommonTree EXTENDS434_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2771:13: ( ^( EXTENDS type ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2772:2: ^( EXTENDS type )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	EXTENDS434=(CommonTree)Match(input,EXTENDS,FOLLOW_EXTENDS_in_class_extend6825); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{EXTENDS434_tree = (CommonTree)adaptor.DupNode(EXTENDS434);

                		root_1 = (CommonTree)adaptor.BecomeRoot(EXTENDS434_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_class_extend6827);
                	type435 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, type435.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_extend"

        public class class_implements_return : TreeRuleReturnScope
        {
            public bool hasExtends;
            public TypeRepTemplate extendDotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_implements"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2775:1: class_implements returns [bool hasExtends, TypeRepTemplate extendDotNetType] : ( class_implement_or_extend[extends == null] )+ -> ( class_implement_or_extend )* ;
        public NetMaker.class_implements_return class_implements() // throws RecognitionException [1]
        {   
            NetMaker.class_implements_return retval = new NetMaker.class_implements_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.class_implement_or_extend_return class_implement_or_extend436 = default(NetMaker.class_implement_or_extend_return);


            RewriteRuleSubtreeStream stream_class_implement_or_extend = new RewriteRuleSubtreeStream(adaptor,"rule class_implement_or_extend");

                CommonTree extends = null; 

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2778:2: ( ( class_implement_or_extend[extends == null] )+ -> ( class_implement_or_extend )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2779:2: ( class_implement_or_extend[extends == null] )+
                {
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2779:2: ( class_implement_or_extend[extends == null] )+
                	int cnt138 = 0;
                	do 
                	{
                	    int alt138 = 2;
                	    int LA138_0 = input.LA(1);

                	    if ( (LA138_0 == IMPLEMENTS) )
                	    {
                	        alt138 = 1;
                	    }


                	    switch (alt138) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2779:3: class_implement_or_extend[extends == null]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_class_implement_or_extend_in_class_implements6847);
                			    	class_implement_or_extend436 = class_implement_or_extend(extends == null);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_class_implement_or_extend.Add(class_implement_or_extend436.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   if (((class_implement_or_extend436 != null) ? class_implement_or_extend436.extends : default(CommonTree)) != null) {
                			    	                 extends = ((class_implement_or_extend436 != null) ? class_implement_or_extend436.extends : default(CommonTree));
                			    	                 retval.hasExtends =  true; 
                			    	                 retval.extendDotNetType =  ((class_implement_or_extend436 != null) ? class_implement_or_extend436.dotNetType : default(TypeRepTemplate));  
                			    	                 ((NSContext_scope)NSContext_stack.Peek()).baseClass =  ((ClassRepTemplate)((class_implement_or_extend436 != null) ? class_implement_or_extend436.dotNetType : default(TypeRepTemplate)));
                			    	              }
                			    	              else {
                			    	                 // An interface
                			    	                 ((NSContext_scope)NSContext_stack.Peek()).interfaceList.Add((InterfaceRepTemplate)((class_implement_or_extend436 != null) ? class_implement_or_extend436.dotNetType : default(TypeRepTemplate)));
                			    	              }
                			    	           
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt138 >= 1 ) goto loop138;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee138 =
                		                new EarlyExitException(138, input);
                		            throw eee138;
                	    }
                	    cnt138++;
                	} while (true);

                	loop138:
                		;	// Stops C# compiler whining that label 'loop138' has no statements



                	// AST REWRITE
                	// elements:          class_implement_or_extend
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2791:5: -> ( class_implement_or_extend )*
                	{
                	    adaptor.AddChild(root_0,  extends );
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2791:21: ( class_implement_or_extend )*
                	    while ( stream_class_implement_or_extend.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_class_implement_or_extend.NextTree());

                	    }
                	    stream_class_implement_or_extend.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_implements"

        public class class_implement_or_extend_return : TreeRuleReturnScope
        {
            public CommonTree extends;
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_implement_or_extend"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2793:1: class_implement_or_extend[bool lookingForBase] returns [CommonTree extends, TypeRepTemplate dotNetType] : ^(i= IMPLEMENTS t= type magicExtends[$lookingForBase && $t.dotNetType is ClassRepTemplate, $i.token, $t.tree] ) -> { $lookingForBase && $t.dotNetType is ClassRepTemplate }? -> ^( $i $t) ;
        public NetMaker.class_implement_or_extend_return class_implement_or_extend(bool lookingForBase) // throws RecognitionException [1]
        {   
            NetMaker.class_implement_or_extend_return retval = new NetMaker.class_implement_or_extend_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree i = null;
            NetMaker.type_return t = default(NetMaker.type_return);

            NetMaker.magicExtends_return magicExtends437 = default(NetMaker.magicExtends_return);


            CommonTree i_tree=null;
            RewriteRuleNodeStream stream_IMPLEMENTS = new RewriteRuleNodeStream(adaptor,"token IMPLEMENTS");
            RewriteRuleSubtreeStream stream_magicExtends = new RewriteRuleSubtreeStream(adaptor,"rule magicExtends");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");

                retval.extends =  null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2796:2: ( ^(i= IMPLEMENTS t= type magicExtends[$lookingForBase && $t.dotNetType is ClassRepTemplate, $i.token, $t.tree] ) -> { $lookingForBase && $t.dotNetType is ClassRepTemplate }? -> ^( $i $t) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2797:2: ^(i= IMPLEMENTS t= type magicExtends[$lookingForBase && $t.dotNetType is ClassRepTemplate, $i.token, $t.tree] )
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	i=(CommonTree)Match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_class_implement_or_extend6895); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_IMPLEMENTS.Add(i);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_class_implement_or_extend6899);
                	t = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(t.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicExtends_in_class_implement_or_extend6902);
                	magicExtends437 = magicExtends(lookingForBase && ((t != null) ? t.dotNetType : default(TypeRepTemplate)) is ClassRepTemplate, i.token, ((t != null) ? ((CommonTree)t.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicExtends.Add(magicExtends437.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   if (lookingForBase && ((t != null) ? t.dotNetType : default(TypeRepTemplate)) is ClassRepTemplate) {
                	                      retval.extends =  ((magicExtends437 != null) ? ((CommonTree)magicExtends437.Tree) : null);
                	                  }
                	                  retval.dotNetType =  ((t != null) ? t.dotNetType : default(TypeRepTemplate));
                	              
                	}

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}



                	// AST REWRITE
                	// elements:          t, i
                	// token labels:      i
                	// rule labels:       retval, t
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_i = new RewriteRuleNodeStream(adaptor, "token i", i);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_t = new RewriteRuleSubtreeStream(adaptor, "rule t", t!=null ? t.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2803:15: -> { $lookingForBase && $t.dotNetType is ClassRepTemplate }?
                	if ( lookingForBase && ((t != null) ? t.dotNetType : default(TypeRepTemplate)) is ClassRepTemplate )
                	{
                	    root_0 = null;
                	}
                	else // 2804:15: -> ^( $i $t)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2804:18: ^( $i $t)
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_i.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_t.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_implement_or_extend"

        public class class_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_body"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2806:1: class_body : '{' ( class_member_declarations )? '}' -> '{' ( class_member_declarations )? '}' ;
        public NetMaker.class_body_return class_body() // throws RecognitionException [1]
        {   
            NetMaker.class_body_return retval = new NetMaker.class_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal438 = null;
            CommonTree char_literal440 = null;
            NetMaker.class_member_declarations_return class_member_declarations439 = default(NetMaker.class_member_declarations_return);


            CommonTree char_literal438_tree=null;
            CommonTree char_literal440_tree=null;
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleSubtreeStream stream_class_member_declarations = new RewriteRuleSubtreeStream(adaptor,"rule class_member_declarations");

                CommonTree collectNodes = null;
                string newMethods = "";
                foreach (KeyValuePair<InterfaceRepTemplate,SupportedInterfaceInfo> member in SupportedInterfaces) {
                   InterfaceRepTemplate supportedIface = member.Key;
                   IList<string> supportedIfaceImports = member.Value.Imports;
                   IList<string> supportedIfaceBlackList = member.Value.BlackListedMethods;
                   bool sup = false;
                   List<String> targs = new List<String>(); 
                   foreach (InterfaceRepTemplate implementedIface in ((NSContext_scope)NSContext_stack.Peek()).interfaceList) {
                      if (implementedIface.IsA(supportedIface, AppEnv)) {
                         sup = true;
                         foreach (TypeRepTemplate t in implementedIface.InstantiatedTypes) {
                            targs.Add(t.mkFormattedTypeName());
                         }
                         break;
                      }
                   }
                   if (sup) {
                     newMethods = newMethods + this.getMethods(supportedIface.TypeName, targs);
                     AddToImports(supportedIfaceImports);
                     ((NSContext_scope)NSContext_stack.Peek()).blackListedMethods.AddRange(supportedIfaceBlackList);
                   }
                }
                if (!String.IsNullOrEmpty(newMethods)) {
                    collectNodes = this.parseString("class_member_declarations", newMethods);
                }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2834:2: ( '{' ( class_member_declarations )? '}' -> '{' ( class_member_declarations )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2835:2: '{' ( class_member_declarations )? '}'
                {
                	_last = (CommonTree)input.LT(1);
                	char_literal438=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_class_body6977); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(char_literal438);

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2835:6: ( class_member_declarations )?
                	int alt139 = 2;
                	int LA139_0 = input.LA(1);

                	if ( (LA139_0 == CLASS || LA139_0 == INTERFACE || (LA139_0 >= CONST && LA139_0 <= METHOD) || (LA139_0 >= FIELD && LA139_0 <= ENUM) || (LA139_0 >= CONVERSION_OPERATOR && LA139_0 <= CONSTRUCTOR)) )
                	{
                	    alt139 = 1;
                	}
                	switch (alt139) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2835:6: class_member_declarations
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_member_declarations_in_class_body6979);
                	        	class_member_declarations439 = class_member_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_class_member_declarations.Add(class_member_declarations439.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal440=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_class_body6982); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(char_literal440);



                	// AST REWRITE
                	// elements:          OPEN_BRACE, class_member_declarations, CLOSE_BRACE
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2835:37: -> '{' ( class_member_declarations )? '}'
                	{
                	    adaptor.AddChild(root_0, stream_OPEN_BRACE.NextNode());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2835:44: ( class_member_declarations )?
                	    if ( stream_class_member_declarations.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_class_member_declarations.NextTree());

                	    }
                	    stream_class_member_declarations.Reset();
                	    adaptor.AddChild(root_0,  dupTree(collectNodes) );
                	    adaptor.AddChild(root_0, stream_CLOSE_BRACE.NextNode());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_body"

        public class class_member_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_member_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2836:1: class_member_declarations : ( class_member_declaration )+ ;
        public NetMaker.class_member_declarations_return class_member_declarations() // throws RecognitionException [1]
        {   
            NetMaker.class_member_declarations_return retval = new NetMaker.class_member_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.class_member_declaration_return class_member_declaration441 = default(NetMaker.class_member_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2836:26: ( ( class_member_declaration )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2837:2: ( class_member_declaration )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2837:2: ( class_member_declaration )+
                	int cnt140 = 0;
                	do 
                	{
                	    int alt140 = 2;
                	    int LA140_0 = input.LA(1);

                	    if ( (LA140_0 == CLASS || LA140_0 == INTERFACE || (LA140_0 >= CONST && LA140_0 <= METHOD) || (LA140_0 >= FIELD && LA140_0 <= ENUM) || (LA140_0 >= CONVERSION_OPERATOR && LA140_0 <= CONSTRUCTOR)) )
                	    {
                	        alt140 = 1;
                	    }


                	    switch (alt140) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2837:2: class_member_declaration
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_class_member_declaration_in_class_member_declarations7001);
                			    	class_member_declaration441 = class_member_declaration();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, class_member_declaration441.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt140 >= 1 ) goto loop140;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee140 =
                		                new EarlyExitException(140, input);
                		            throw eee140;
                	    }
                	    cnt140++;
                	} while (true);

                	loop140:
                		;	// Stops C# compiler whining that label 'loop140' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_member_declarations"

        public class constant_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2840:1: constant_declaration : 'const' type constant_declarators[$type.dotNetType] ';' ;
        public NetMaker.constant_declaration_return constant_declaration() // throws RecognitionException [1]
        {   
            NetMaker.constant_declaration_return retval = new NetMaker.constant_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal442 = null;
            CommonTree char_literal445 = null;
            NetMaker.type_return type443 = default(NetMaker.type_return);

            NetMaker.constant_declarators_return constant_declarators444 = default(NetMaker.constant_declarators_return);


            CommonTree string_literal442_tree=null;
            CommonTree char_literal445_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2840:21: ( 'const' type constant_declarators[$type.dotNetType] ';' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2841:2: 'const' type constant_declarators[$type.dotNetType] ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal442=(CommonTree)Match(input,205,FOLLOW_205_in_constant_declaration7012); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal442_tree = (CommonTree)adaptor.DupNode(string_literal442);

                		adaptor.AddChild(root_0, string_literal442_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_constant_declaration7016);
                	type443 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type443.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_constant_declarators_in_constant_declaration7020);
                	constant_declarators444 = constant_declarators(((type443 != null) ? type443.dotNetType : default(TypeRepTemplate)));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, constant_declarators444.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal445=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_constant_declaration7025); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal445_tree = (CommonTree)adaptor.DupNode(char_literal445);

                		adaptor.AddChild(root_0, char_literal445_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_declaration"

        public class constant_declarators_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2842:1: constant_declarators[TypeRepTemplate ty] : constant_declarator[$ty] ( ',' constant_declarator[$ty] )* ;
        public NetMaker.constant_declarators_return constant_declarators(TypeRepTemplate ty) // throws RecognitionException [1]
        {   
            NetMaker.constant_declarators_return retval = new NetMaker.constant_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal447 = null;
            NetMaker.constant_declarator_return constant_declarator446 = default(NetMaker.constant_declarator_return);

            NetMaker.constant_declarator_return constant_declarator448 = default(NetMaker.constant_declarator_return);


            CommonTree char_literal447_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2842:41: ( constant_declarator[$ty] ( ',' constant_declarator[$ty] )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2843:2: constant_declarator[$ty] ( ',' constant_declarator[$ty] )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_constant_declarator_in_constant_declarators7034);
                	constant_declarator446 = constant_declarator(ty);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, constant_declarator446.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2843:27: ( ',' constant_declarator[$ty] )*
                	do 
                	{
                	    int alt141 = 2;
                	    int LA141_0 = input.LA(1);

                	    if ( (LA141_0 == COMMA) )
                	    {
                	        alt141 = 1;
                	    }


                	    switch (alt141) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2843:28: ',' constant_declarator[$ty]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal447=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_constant_declarators7038); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal447_tree = (CommonTree)adaptor.DupNode(char_literal447);

                			    		adaptor.AddChild(root_0, char_literal447_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_constant_declarator_in_constant_declarators7040);
                			    	constant_declarator448 = constant_declarator(ty);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, constant_declarator448.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop141;
                	    }
                	} while (true);

                	loop141:
                		;	// Stops C# compiler whining that label 'loop141' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_declarators"

        public class constant_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2844:1: constant_declarator[TypeRepTemplate ty] : identifier ( '=' constant_expression[$ty] )? ;
        public NetMaker.constant_declarator_return constant_declarator(TypeRepTemplate ty) // throws RecognitionException [1]
        {   
            NetMaker.constant_declarator_return retval = new NetMaker.constant_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal450 = null;
            NetMaker.identifier_return identifier449 = default(NetMaker.identifier_return);

            NetMaker.constant_expression_return constant_expression451 = default(NetMaker.constant_expression_return);


            CommonTree char_literal450_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2844:40: ( identifier ( '=' constant_expression[$ty] )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2845:2: identifier ( '=' constant_expression[$ty] )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_constant_declarator7052);
                	identifier449 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier449.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   ((SymTab_scope)SymTab_stack.Peek()).symtab[((identifier449 != null) ? identifier449.thetext : default(string))] = ty; 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2845:62: ( '=' constant_expression[$ty] )?
                	int alt142 = 2;
                	int LA142_0 = input.LA(1);

                	if ( (LA142_0 == ASSIGN) )
                	{
                	    alt142 = 1;
                	}
                	switch (alt142) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2845:63: '=' constant_expression[$ty]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal450=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_constant_declarator7058); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal450_tree = (CommonTree)adaptor.DupNode(char_literal450);

                	        		adaptor.AddChild(root_0, char_literal450_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_constant_expression_in_constant_declarator7062);
                	        	constant_expression451 = constant_expression(ty);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, constant_expression451.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_declarator"

        public class constant_expression_return : TreeRuleReturnScope
        {
            public string rmId;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2846:1: constant_expression[TypeRepTemplate tyCtxt] returns [string rmId] : expression[$tyCtxt] ;
        public NetMaker.constant_expression_return constant_expression(TypeRepTemplate tyCtxt) // throws RecognitionException [1]
        {   
            NetMaker.constant_expression_return retval = new NetMaker.constant_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression452 = default(NetMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2846:66: ( expression[$tyCtxt] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2847:2: expression[$tyCtxt]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_constant_expression7078);
                	expression452 = expression(tyCtxt);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression452.Tree);
                	if ( (state.backtracking==0) )
                	{
                	  retval.rmId =  ((expression452 != null) ? expression452.rmId : default(string)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_expression"

        public class field_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "field_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2850:1: field_declaration[CommonTree tyTree, TypeRepTemplate ty] : variable_declarators[$tyTree, $ty] ;
        public NetMaker.field_declaration_return field_declaration(CommonTree tyTree, TypeRepTemplate ty) // throws RecognitionException [1]
        {   
            NetMaker.field_declaration_return retval = new NetMaker.field_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.variable_declarators_return variable_declarators453 = default(NetMaker.variable_declarators_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2850:57: ( variable_declarators[$tyTree, $ty] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2851:2: variable_declarators[$tyTree, $ty]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variable_declarators_in_field_declaration7091);
                	variable_declarators453 = variable_declarators(tyTree, ty);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, variable_declarators453.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "field_declaration"

        public class variable_declarators_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2852:1: variable_declarators[CommonTree tyTree, TypeRepTemplate ty] : variable_declarator[$tyTree, $ty] ( ',' variable_declarator[$tyTree, $ty] )* ;
        public NetMaker.variable_declarators_return variable_declarators(CommonTree tyTree, TypeRepTemplate ty) // throws RecognitionException [1]
        {   
            NetMaker.variable_declarators_return retval = new NetMaker.variable_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal455 = null;
            NetMaker.variable_declarator_return variable_declarator454 = default(NetMaker.variable_declarator_return);

            NetMaker.variable_declarator_return variable_declarator456 = default(NetMaker.variable_declarator_return);


            CommonTree char_literal455_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2852:60: ( variable_declarator[$tyTree, $ty] ( ',' variable_declarator[$tyTree, $ty] )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2853:2: variable_declarator[$tyTree, $ty] ( ',' variable_declarator[$tyTree, $ty] )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7101);
                	variable_declarator454 = variable_declarator(tyTree, ty);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, variable_declarator454.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2853:36: ( ',' variable_declarator[$tyTree, $ty] )*
                	do 
                	{
                	    int alt143 = 2;
                	    int LA143_0 = input.LA(1);

                	    if ( (LA143_0 == COMMA) )
                	    {
                	        alt143 = 1;
                	    }


                	    switch (alt143) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2853:37: ',' variable_declarator[$tyTree, $ty]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal455=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_variable_declarators7105); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal455_tree = (CommonTree)adaptor.DupNode(char_literal455);

                			    		adaptor.AddChild(root_0, char_literal455_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7109);
                			    	variable_declarator456 = variable_declarator(tyTree, ty);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, variable_declarator456.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop143;
                	    }
                	} while (true);

                	loop143:
                		;	// Stops C# compiler whining that label 'loop143' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_declarators"

        public class variable_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2854:1: variable_declarator[CommonTree tyTree, TypeRepTemplate ty] : identifier (e= '=' variable_initializer[$ty] )? magicConstructStruct[constructStruct, $tyTree, $identifier.tree != null ? $identifier.tree.Token : null] magicConstructDefaultEnum[constructEnum, $ty, zeroEnum, $identifier.tree != null ? $identifier.tree.Token : null] -> {hasInit}? identifier $e variable_initializer -> {constructStruct}? identifier ASSIGN[$identifier.tree.Token, \"=\"] magicConstructStruct -> {constructEnum}? identifier ASSIGN[$identifier.tree.Token, \"=\"] magicConstructDefaultEnum -> identifier ;
        public NetMaker.variable_declarator_return variable_declarator(CommonTree tyTree, TypeRepTemplate ty) // throws RecognitionException [1]
        {   
            NetMaker.variable_declarator_return retval = new NetMaker.variable_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree e = null;
            NetMaker.identifier_return identifier457 = default(NetMaker.identifier_return);

            NetMaker.variable_initializer_return variable_initializer458 = default(NetMaker.variable_initializer_return);

            NetMaker.magicConstructStruct_return magicConstructStruct459 = default(NetMaker.magicConstructStruct_return);

            NetMaker.magicConstructDefaultEnum_return magicConstructDefaultEnum460 = default(NetMaker.magicConstructDefaultEnum_return);


            CommonTree e_tree=null;
            RewriteRuleNodeStream stream_ASSIGN = new RewriteRuleNodeStream(adaptor,"token ASSIGN");
            RewriteRuleSubtreeStream stream_magicConstructDefaultEnum = new RewriteRuleSubtreeStream(adaptor,"rule magicConstructDefaultEnum");
            RewriteRuleSubtreeStream stream_magicConstructStruct = new RewriteRuleSubtreeStream(adaptor,"rule magicConstructStruct");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_variable_initializer = new RewriteRuleSubtreeStream(adaptor,"rule variable_initializer");

                bool hasInit = false;
                bool constructStruct = ty != null && ty is StructRepTemplate ;
                EnumRepTemplate enumRep = ty as EnumRepTemplate;
                bool constructEnum = enumRep != null && enumRep.Members.Count > 0;
                string zeroEnum = "WhoopsEnum";
                if (constructEnum)
                {
                    zeroEnum = enumRep.Members[0].Name;
                }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2865:2: ( identifier (e= '=' variable_initializer[$ty] )? magicConstructStruct[constructStruct, $tyTree, $identifier.tree != null ? $identifier.tree.Token : null] magicConstructDefaultEnum[constructEnum, $ty, zeroEnum, $identifier.tree != null ? $identifier.tree.Token : null] -> {hasInit}? identifier $e variable_initializer -> {constructStruct}? identifier ASSIGN[$identifier.tree.Token, \"=\"] magicConstructStruct -> {constructEnum}? identifier ASSIGN[$identifier.tree.Token, \"=\"] magicConstructDefaultEnum -> identifier )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2866:2: identifier (e= '=' variable_initializer[$ty] )? magicConstructStruct[constructStruct, $tyTree, $identifier.tree != null ? $identifier.tree.Token : null] magicConstructDefaultEnum[constructEnum, $ty, zeroEnum, $identifier.tree != null ? $identifier.tree.Token : null]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_variable_declarator7126);
                	identifier457 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier457.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2867:8: (e= '=' variable_initializer[$ty] )?
                	int alt144 = 2;
                	int LA144_0 = input.LA(1);

                	if ( (LA144_0 == ASSIGN) )
                	{
                	    alt144 = 1;
                	}
                	switch (alt144) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2867:9: e= '=' variable_initializer[$ty]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	e=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_variable_declarator7139); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_ASSIGN.Add(e);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variable_initializer_in_variable_declarator7143);
                	        	variable_initializer458 = variable_initializer(ty);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_variable_initializer.Add(variable_initializer458.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   hasInit = true; constructStruct = false; constructEnum = false; 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicConstructStruct_in_variable_declarator7159);
                	magicConstructStruct459 = magicConstructStruct(constructStruct, tyTree, ((identifier457 != null) ? ((CommonTree)identifier457.Tree) : null) != null ? ((identifier457 != null) ? ((CommonTree)identifier457.Tree) : null).Token : null);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicConstructStruct.Add(magicConstructStruct459.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicConstructDefaultEnum_in_variable_declarator7170);
                	magicConstructDefaultEnum460 = magicConstructDefaultEnum(constructEnum, ty, zeroEnum, ((identifier457 != null) ? ((CommonTree)identifier457.Tree) : null) != null ? ((identifier457 != null) ? ((CommonTree)identifier457.Tree) : null).Token : null);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicConstructDefaultEnum.Add(magicConstructDefaultEnum460.Tree);


                	// AST REWRITE
                	// elements:          identifier, magicConstructStruct, identifier, e, magicConstructDefaultEnum, variable_initializer, identifier, identifier
                	// token labels:      e
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_e = new RewriteRuleNodeStream(adaptor, "token e", e);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2871:5: -> {hasInit}? identifier $e variable_initializer
                	if (hasInit)
                	{
                	    adaptor.AddChild(root_0, stream_identifier.NextTree());
                	    adaptor.AddChild(root_0, stream_e.NextNode());
                	    adaptor.AddChild(root_0, stream_variable_initializer.NextTree());

                	}
                	else // 2872:5: -> {constructStruct}? identifier ASSIGN[$identifier.tree.Token, \"=\"] magicConstructStruct
                	if (constructStruct)
                	{
                	    adaptor.AddChild(root_0, stream_identifier.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, ((identifier457 != null) ? ((CommonTree)identifier457.Tree) : null).Token, "="));
                	    adaptor.AddChild(root_0, stream_magicConstructStruct.NextTree());

                	}
                	else // 2873:5: -> {constructEnum}? identifier ASSIGN[$identifier.tree.Token, \"=\"] magicConstructDefaultEnum
                	if (constructEnum)
                	{
                	    adaptor.AddChild(root_0, stream_identifier.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, ((identifier457 != null) ? ((CommonTree)identifier457.Tree) : null).Token, "="));
                	    adaptor.AddChild(root_0, stream_magicConstructDefaultEnum.NextTree());

                	}
                	else // 2874:5: -> identifier
                	{
                	    adaptor.AddChild(root_0, stream_identifier.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_declarator"

        public class method_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "method_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2877:1: method_declaration : method_header method_body ;
        public NetMaker.method_declaration_return method_declaration() // throws RecognitionException [1]
        {   
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.method_declaration_return retval = new NetMaker.method_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.method_header_return method_header461 = default(NetMaker.method_header_return);

            NetMaker.method_body_return method_body462 = default(NetMaker.method_body_return);




                ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2881:2: ( method_header method_body )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2882:2: method_header method_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_method_header_in_method_declaration7258);
                	method_header461 = method_header();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, method_header461.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_method_body_in_method_declaration7262);
                	method_body462 = method_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, method_body462.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "method_declaration"

        public class method_header_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "method_header"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2883:1: method_header : ^( METHOD_HEADER ( attributes )? ( modifiers )? type member_name ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? ) ;
        public NetMaker.method_header_return method_header() // throws RecognitionException [1]
        {   
            NetMaker.method_header_return retval = new NetMaker.method_header_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree METHOD_HEADER463 = null;
            NetMaker.attributes_return attributes464 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers465 = default(NetMaker.modifiers_return);

            NetMaker.type_return type466 = default(NetMaker.type_return);

            NetMaker.member_name_return member_name467 = default(NetMaker.member_name_return);

            NetMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses468 = default(NetMaker.type_parameter_constraints_clauses_return);

            NetMaker.type_parameter_list_return type_parameter_list469 = default(NetMaker.type_parameter_list_return);

            NetMaker.formal_parameter_list_return formal_parameter_list470 = default(NetMaker.formal_parameter_list_return);


            CommonTree METHOD_HEADER463_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2883:14: ( ^( METHOD_HEADER ( attributes )? ( modifiers )? type member_name ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:5: ^( METHOD_HEADER ( attributes )? ( modifiers )? type member_name ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	METHOD_HEADER463=(CommonTree)Match(input,METHOD_HEADER,FOLLOW_METHOD_HEADER_in_method_header7274); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{METHOD_HEADER463_tree = (CommonTree)adaptor.DupNode(METHOD_HEADER463);

                		root_1 = (CommonTree)adaptor.BecomeRoot(METHOD_HEADER463_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:21: ( attributes )?
                	int alt145 = 2;
                	int LA145_0 = input.LA(1);

                	if ( (LA145_0 == ATTRIBUTE) )
                	{
                	    alt145 = 1;
                	}
                	switch (alt145) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:21: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_method_header7276);
                	        	attributes464 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, attributes464.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:33: ( modifiers )?
                	int alt146 = 2;
                	int LA146_0 = input.LA(1);

                	if ( (LA146_0 == FINAL || (LA146_0 >= PUBLIC && LA146_0 <= PRIVATE) || LA146_0 == STATIC || LA146_0 == 194 || LA146_0 == 197 || (LA146_0 >= 199 && LA146_0 <= 204)) )
                	{
                	    alt146 = 1;
                	}
                	switch (alt146) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:33: modifiers
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_modifiers_in_method_header7279);
                	        	modifiers465 = modifiers();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, modifiers465.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_method_header7282);
                	type466 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, type466.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_name_in_method_header7284);
                	member_name467 = member_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, member_name467.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:61: ( type_parameter_constraints_clauses )?
                	int alt147 = 2;
                	int LA147_0 = input.LA(1);

                	if ( (LA147_0 == TYPE_PARAM_CONSTRAINT) )
                	{
                	    alt147 = 1;
                	}
                	switch (alt147) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:61: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header7286);
                	        	type_parameter_constraints_clauses468 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, type_parameter_constraints_clauses468.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:97: ( type_parameter_list )?
                	int alt148 = 2;
                	int LA148_0 = input.LA(1);

                	if ( (LA148_0 == ATTRIBUTE || LA148_0 == IDENTIFIER || (LA148_0 >= ELIF && LA148_0 <= UNDEF) || LA148_0 == 195 || LA148_0 == 221 || (LA148_0 >= 224 && LA148_0 <= 239) || (LA148_0 >= 241 && LA148_0 <= 244) || (LA148_0 >= 247 && LA148_0 <= 250) || LA148_0 == 256 || (LA148_0 >= 263 && LA148_0 <= 264) || LA148_0 == 274 || LA148_0 == 277) )
                	{
                	    alt148 = 1;
                	}
                	switch (alt148) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:97: type_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_list_in_method_header7289);
                	        	type_parameter_list469 = type_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, type_parameter_list469.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:118: ( formal_parameter_list[null,null] )?
                	int alt149 = 2;
                	int LA149_0 = input.LA(1);

                	if ( (LA149_0 == PARAMS) )
                	{
                	    alt149 = 1;
                	}
                	switch (alt149) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2884:118: formal_parameter_list[null,null]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_formal_parameter_list_in_method_header7292);
                	        	formal_parameter_list470 = formal_parameter_list(null, null);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, formal_parameter_list470.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "method_header"

        public class method_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "method_body"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2885:1: method_body : block ;
        public NetMaker.method_body_return method_body() // throws RecognitionException [1]
        {   
            NetMaker.method_body_return retval = new NetMaker.method_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.block_return block471 = default(NetMaker.block_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2885:12: ( block )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2886:2: block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_method_body7302);
                	block471 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block471.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "method_body"

        public class member_name_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_name"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2887:1: member_name returns [string thetext] : t1= type_or_generic[\"\"] ( '.' tn= type_or_generic[preTy+\".\"] )* ;
        public NetMaker.member_name_return member_name() // throws RecognitionException [1]
        {   
            NetMaker.member_name_return retval = new NetMaker.member_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal472 = null;
            NetMaker.type_or_generic_return t1 = default(NetMaker.type_or_generic_return);

            NetMaker.type_or_generic_return tn = default(NetMaker.type_or_generic_return);


            CommonTree char_literal472_tree=null;


               // in_member_name is used by type_or-generic so that we don't treat the member name as a type.
                string preTy = null;
                bool save_in_member_name = this.in_member_name;
                this.in_member_name = true;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2896:2: (t1= type_or_generic[\"\"] ( '.' tn= type_or_generic[preTy+\".\"] )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2897:5: t1= type_or_generic[\"\"] ( '.' tn= type_or_generic[preTy+\".\"] )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_or_generic_in_member_name7328);
                	t1 = type_or_generic("");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, t1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext =  ((t1 != null) ? t1.thetext : default(string)); preTy = (((t1 != null) ? t1.dotNetType : default(TypeRepTemplate)) == null ? "" : ((t1 != null) ? t1.dotNetType : default(TypeRepTemplate)).TypeName); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2897:120: ( '.' tn= type_or_generic[preTy+\".\"] )*
                	do 
                	{
                	    int alt150 = 2;
                	    int LA150_0 = input.LA(1);

                	    if ( (LA150_0 == DOT) )
                	    {
                	        alt150 = 1;
                	    }


                	    switch (alt150) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2897:121: '.' tn= type_or_generic[preTy+\".\"]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal472=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_member_name7333); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal472_tree = (CommonTree)adaptor.DupNode(char_literal472);

                			    		adaptor.AddChild(root_0, char_literal472_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_or_generic_in_member_name7337);
                			    	tn = type_or_generic(preTy+".");
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, tn.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.thetext += "." + ((tn != null) ? tn.thetext : default(string)); preTy = (((tn != null) ? tn.dotNetType : default(TypeRepTemplate)) == null ? "" : ((tn != null) ? tn.dotNetType : default(TypeRepTemplate)).TypeName); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop150;
                	    }
                	} while (true);

                	loop150:
                		;	// Stops C# compiler whining that label 'loop150' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      this.in_member_name = save_in_member_name;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_name"

        public class event_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "event_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2906:1: event_declaration : type member_name '{' event_accessor_declarations '}' ;
        public NetMaker.event_declaration_return event_declaration() // throws RecognitionException [1]
        {   
            NetMaker.event_declaration_return retval = new NetMaker.event_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal475 = null;
            CommonTree char_literal477 = null;
            NetMaker.type_return type473 = default(NetMaker.type_return);

            NetMaker.member_name_return member_name474 = default(NetMaker.member_name_return);

            NetMaker.event_accessor_declarations_return event_accessor_declarations476 = default(NetMaker.event_accessor_declarations_return);


            CommonTree char_literal475_tree=null;
            CommonTree char_literal477_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2906:18: ( type member_name '{' event_accessor_declarations '}' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2907:2: type member_name '{' event_accessor_declarations '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_event_declaration7374);
                	type473 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type473.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_name_in_event_declaration7376);
                	member_name474 = member_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, member_name474.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal475=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_event_declaration7380); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal475_tree = (CommonTree)adaptor.DupNode(char_literal475);

                		adaptor.AddChild(root_0, char_literal475_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_event_accessor_declarations_in_event_declaration7384);
                	event_accessor_declarations476 = event_accessor_declarations();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, event_accessor_declarations476.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal477=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_event_declaration7388); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal477_tree = (CommonTree)adaptor.DupNode(char_literal477);

                		adaptor.AddChild(root_0, char_literal477_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "event_declaration"

        public class event_modifiers_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "event_modifiers"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2909:1: event_modifiers : ( modifier )+ ;
        public NetMaker.event_modifiers_return event_modifiers() // throws RecognitionException [1]
        {   
            NetMaker.event_modifiers_return retval = new NetMaker.event_modifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.modifier_return modifier478 = default(NetMaker.modifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2909:16: ( ( modifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2910:2: ( modifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2910:2: ( modifier )+
                	int cnt151 = 0;
                	do 
                	{
                	    int alt151 = 2;
                	    int LA151_0 = input.LA(1);

                	    if ( (LA151_0 == FINAL || (LA151_0 >= PUBLIC && LA151_0 <= PRIVATE) || LA151_0 == STATIC || LA151_0 == 194 || LA151_0 == 197 || (LA151_0 >= 199 && LA151_0 <= 204)) )
                	    {
                	        alt151 = 1;
                	    }


                	    switch (alt151) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2910:2: modifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_modifier_in_event_modifiers7398);
                			    	modifier478 = modifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, modifier478.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt151 >= 1 ) goto loop151;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee151 =
                		                new EarlyExitException(151, input);
                		            throw eee151;
                	    }
                	    cnt151++;
                	} while (true);

                	loop151:
                		;	// Stops C# compiler whining that label 'loop151' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "event_modifiers"

        public class event_accessor_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "event_accessor_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2911:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
        public NetMaker.event_accessor_declarations_return event_accessor_declarations() // throws RecognitionException [1]
        {   
            NetMaker.event_accessor_declarations_return retval = new NetMaker.event_accessor_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.attributes_return attributes479 = default(NetMaker.attributes_return);

            NetMaker.add_accessor_declaration_return add_accessor_declaration480 = default(NetMaker.add_accessor_declaration_return);

            NetMaker.attributes_return attributes481 = default(NetMaker.attributes_return);

            NetMaker.remove_accessor_declaration_return remove_accessor_declaration482 = default(NetMaker.remove_accessor_declaration_return);

            NetMaker.remove_accessor_declaration_return remove_accessor_declaration483 = default(NetMaker.remove_accessor_declaration_return);

            NetMaker.attributes_return attributes484 = default(NetMaker.attributes_return);

            NetMaker.add_accessor_declaration_return add_accessor_declaration485 = default(NetMaker.add_accessor_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2911:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:2: ( attributes )?
                	int alt152 = 2;
                	int LA152_0 = input.LA(1);

                	if ( (LA152_0 == ATTRIBUTE) )
                	{
                	    alt152 = 1;
                	}
                	switch (alt152) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:2: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations7407);
                	        	attributes479 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attributes479.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
                	int alt155 = 2;
                	int LA155_0 = input.LA(1);

                	if ( (LA155_0 == 249) )
                	{
                	    alt155 = 1;
                	}
                	else if ( (LA155_0 == 250) )
                	{
                	    alt155 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d155s0 =
                	        new NoViableAltException("", 155, 0, input);

                	    throw nvae_d155s0;
                	}
                	switch (alt155) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                	        {
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
                	        	{
                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations7414);
                	        		add_accessor_declaration480 = add_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, add_accessor_declaration480.Tree);
                	        		// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:45: ( attributes )?
                	        		int alt153 = 2;
                	        		int LA153_0 = input.LA(1);

                	        		if ( (LA153_0 == ATTRIBUTE) )
                	        		{
                	        		    alt153 = 1;
                	        		}
                	        		switch (alt153) 
                	        		{
                	        		    case 1 :
                	        		        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2912:45: attributes
                	        		        {
                	        		        	_last = (CommonTree)input.LT(1);
                	        		        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations7418);
                	        		        	attributes481 = attributes();
                	        		        	state._fsp--;
                	        		        	if (state.failed) return retval;
                	        		        	if ( (state.backtracking==0) ) 
                	        		        	adaptor.AddChild(root_0, attributes481.Tree);

                	        		        	if ( (state.backtracking==0) ) {
                	        		        	}
                	        		        }
                	        		        break;

                	        		}

                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7423);
                	        		remove_accessor_declaration482 = remove_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, remove_accessor_declaration482.Tree);

                	        		if ( (state.backtracking==0) ) {
                	        		}
                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2913:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                	        {
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2913:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2913:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
                	        	{
                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7444);
                	        		remove_accessor_declaration483 = remove_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, remove_accessor_declaration483.Tree);
                	        		// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2913:49: ( attributes )?
                	        		int alt154 = 2;
                	        		int LA154_0 = input.LA(1);

                	        		if ( (LA154_0 == ATTRIBUTE) )
                	        		{
                	        		    alt154 = 1;
                	        		}
                	        		switch (alt154) 
                	        		{
                	        		    case 1 :
                	        		        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2913:49: attributes
                	        		        {
                	        		        	_last = (CommonTree)input.LT(1);
                	        		        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations7448);
                	        		        	attributes484 = attributes();
                	        		        	state._fsp--;
                	        		        	if (state.failed) return retval;
                	        		        	if ( (state.backtracking==0) ) 
                	        		        	adaptor.AddChild(root_0, attributes484.Tree);

                	        		        	if ( (state.backtracking==0) ) {
                	        		        	}
                	        		        }
                	        		        break;

                	        		}

                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations7453);
                	        		add_accessor_declaration485 = add_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, add_accessor_declaration485.Tree);

                	        		if ( (state.backtracking==0) ) {
                	        		}
                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "event_accessor_declarations"

        public class add_accessor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "add_accessor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2914:1: add_accessor_declaration : 'add' block ;
        public NetMaker.add_accessor_declaration_return add_accessor_declaration() // throws RecognitionException [1]
        {   
            NetMaker.add_accessor_declaration_return retval = new NetMaker.add_accessor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal486 = null;
            NetMaker.block_return block487 = default(NetMaker.block_return);


            CommonTree string_literal486_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2914:25: ( 'add' block )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2915:2: 'add' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal486=(CommonTree)Match(input,249,FOLLOW_249_in_add_accessor_declaration7463); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal486_tree = (CommonTree)adaptor.DupNode(string_literal486);

                		adaptor.AddChild(root_0, string_literal486_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_add_accessor_declaration7467);
                	block487 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block487.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "add_accessor_declaration"

        public class remove_accessor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "remove_accessor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2916:1: remove_accessor_declaration : 'remove' block ;
        public NetMaker.remove_accessor_declaration_return remove_accessor_declaration() // throws RecognitionException [1]
        {   
            NetMaker.remove_accessor_declaration_return retval = new NetMaker.remove_accessor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal488 = null;
            NetMaker.block_return block489 = default(NetMaker.block_return);


            CommonTree string_literal488_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2916:28: ( 'remove' block )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2917:2: 'remove' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal488=(CommonTree)Match(input,250,FOLLOW_250_in_remove_accessor_declaration7475); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal488_tree = (CommonTree)adaptor.DupNode(string_literal488);

                		adaptor.AddChild(root_0, string_literal488_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_remove_accessor_declaration7479);
                	block489 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block489.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "remove_accessor_declaration"

        public class enum_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2922:1: enum_declaration : ^( ENUM ( attributes )? ( modifiers )? identifier ( enum_base )? enum_body ) ;
        public NetMaker.enum_declaration_return enum_declaration() // throws RecognitionException [1]
        {   
            NetMaker.enum_declaration_return retval = new NetMaker.enum_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree ENUM490 = null;
            NetMaker.attributes_return attributes491 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers492 = default(NetMaker.modifiers_return);

            NetMaker.identifier_return identifier493 = default(NetMaker.identifier_return);

            NetMaker.enum_base_return enum_base494 = default(NetMaker.enum_base_return);

            NetMaker.enum_body_return enum_body495 = default(NetMaker.enum_body_return);


            CommonTree ENUM490_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2922:17: ( ^( ENUM ( attributes )? ( modifiers )? identifier ( enum_base )? enum_body ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2923:2: ^( ENUM ( attributes )? ( modifiers )? identifier ( enum_base )? enum_body )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	ENUM490=(CommonTree)Match(input,ENUM,FOLLOW_ENUM_in_enum_declaration7492); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{ENUM490_tree = (CommonTree)adaptor.DupNode(ENUM490);

                		root_1 = (CommonTree)adaptor.BecomeRoot(ENUM490_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2923:9: ( attributes )?
                	int alt156 = 2;
                	int LA156_0 = input.LA(1);

                	if ( (LA156_0 == ATTRIBUTE) )
                	{
                	    alt156 = 1;
                	}
                	switch (alt156) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2923:9: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_enum_declaration7494);
                	        	attributes491 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, attributes491.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2923:21: ( modifiers )?
                	int alt157 = 2;
                	int LA157_0 = input.LA(1);

                	if ( (LA157_0 == FINAL || (LA157_0 >= PUBLIC && LA157_0 <= PRIVATE) || LA157_0 == STATIC || LA157_0 == 194 || LA157_0 == 197 || (LA157_0 >= 199 && LA157_0 <= 204)) )
                	{
                	    alt157 = 1;
                	}
                	switch (alt157) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2923:21: modifiers
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_modifiers_in_enum_declaration7497);
                	        	modifiers492 = modifiers();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, modifiers492.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_enum_declaration7502);
                	identifier493 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, identifier493.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2923:47: ( enum_base )?
                	int alt158 = 2;
                	int LA158_0 = input.LA(1);

                	if ( (LA158_0 == TYPE) )
                	{
                	    alt158 = 1;
                	}
                	switch (alt158) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2923:47: enum_base
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_enum_base_in_enum_declaration7506);
                	        	enum_base494 = enum_base();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, enum_base494.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_enum_body_in_enum_declaration7511);
                	enum_body495 = enum_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, enum_body495.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_declaration"

        public class enum_base_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_base"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2924:1: enum_base : type ;
        public NetMaker.enum_base_return enum_base() // throws RecognitionException [1]
        {   
            NetMaker.enum_base_return retval = new NetMaker.enum_base_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type496 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2924:10: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2925:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_enum_base7520);
                	type496 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type496.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_base"

        public class enum_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_body"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2926:1: enum_body : ^( ENUM_BODY ( enum_member_declarations )? ) ;
        public NetMaker.enum_body_return enum_body() // throws RecognitionException [1]
        {   
            NetMaker.enum_body_return retval = new NetMaker.enum_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree ENUM_BODY497 = null;
            NetMaker.enum_member_declarations_return enum_member_declarations498 = default(NetMaker.enum_member_declarations_return);


            CommonTree ENUM_BODY497_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2926:10: ( ^( ENUM_BODY ( enum_member_declarations )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2927:2: ^( ENUM_BODY ( enum_member_declarations )? )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	ENUM_BODY497=(CommonTree)Match(input,ENUM_BODY,FOLLOW_ENUM_BODY_in_enum_body7529); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{ENUM_BODY497_tree = (CommonTree)adaptor.DupNode(ENUM_BODY497);

                		root_1 = (CommonTree)adaptor.BecomeRoot(ENUM_BODY497_tree, root_1);
                	}


                	if ( input.LA(1) == Token.DOWN )
                	{
                	    Match(input, Token.DOWN, null); if (state.failed) return retval;
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2927:14: ( enum_member_declarations )?
                	    int alt159 = 2;
                	    int LA159_0 = input.LA(1);

                	    if ( (LA159_0 == ATTRIBUTE || LA159_0 == IDENTIFIER || (LA159_0 >= ELIF && LA159_0 <= UNDEF) || LA159_0 == 195 || LA159_0 == 221 || (LA159_0 >= 224 && LA159_0 <= 239) || (LA159_0 >= 241 && LA159_0 <= 244) || (LA159_0 >= 247 && LA159_0 <= 250) || LA159_0 == 256 || (LA159_0 >= 263 && LA159_0 <= 264) || LA159_0 == 274 || LA159_0 == 277) )
                	    {
                	        alt159 = 1;
                	    }
                	    switch (alt159) 
                	    {
                	        case 1 :
                	            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2927:14: enum_member_declarations
                	            {
                	            	_last = (CommonTree)input.LT(1);
                	            	PushFollow(FOLLOW_enum_member_declarations_in_enum_body7531);
                	            	enum_member_declarations498 = enum_member_declarations();
                	            	state._fsp--;
                	            	if (state.failed) return retval;
                	            	if ( (state.backtracking==0) ) 
                	            	adaptor.AddChild(root_1, enum_member_declarations498.Tree);

                	            	if ( (state.backtracking==0) ) {
                	            	}
                	            }
                	            break;

                	    }


                	    Match(input, Token.UP, null); if (state.failed) return retval;
                	}adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_body"

        public class enum_member_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_member_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2928:1: enum_member_declarations : ( enum_member_declaration )+ ;
        public NetMaker.enum_member_declarations_return enum_member_declarations() // throws RecognitionException [1]
        {   
            NetMaker.enum_member_declarations_return retval = new NetMaker.enum_member_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.enum_member_declaration_return enum_member_declaration499 = default(NetMaker.enum_member_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2928:25: ( ( enum_member_declaration )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2929:2: ( enum_member_declaration )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2929:2: ( enum_member_declaration )+
                	int cnt160 = 0;
                	do 
                	{
                	    int alt160 = 2;
                	    int LA160_0 = input.LA(1);

                	    if ( (LA160_0 == ATTRIBUTE || LA160_0 == IDENTIFIER || (LA160_0 >= ELIF && LA160_0 <= UNDEF) || LA160_0 == 195 || LA160_0 == 221 || (LA160_0 >= 224 && LA160_0 <= 239) || (LA160_0 >= 241 && LA160_0 <= 244) || (LA160_0 >= 247 && LA160_0 <= 250) || LA160_0 == 256 || (LA160_0 >= 263 && LA160_0 <= 264) || LA160_0 == 274 || LA160_0 == 277) )
                	    {
                	        alt160 = 1;
                	    }


                	    switch (alt160) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2929:2: enum_member_declaration
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations7541);
                			    	enum_member_declaration499 = enum_member_declaration();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, enum_member_declaration499.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt160 >= 1 ) goto loop160;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee160 =
                		                new EarlyExitException(160, input);
                		            throw eee160;
                	    }
                	    cnt160++;
                	} while (true);

                	loop160:
                		;	// Stops C# compiler whining that label 'loop160' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_member_declarations"

        public class enum_member_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_member_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2930:1: enum_member_declaration : ( attributes )? identifier ;
        public NetMaker.enum_member_declaration_return enum_member_declaration() // throws RecognitionException [1]
        {   
            NetMaker.enum_member_declaration_return retval = new NetMaker.enum_member_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.attributes_return attributes500 = default(NetMaker.attributes_return);

            NetMaker.identifier_return identifier501 = default(NetMaker.identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2930:24: ( ( attributes )? identifier )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2931:2: ( attributes )? identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2931:2: ( attributes )?
                	int alt161 = 2;
                	int LA161_0 = input.LA(1);

                	if ( (LA161_0 == ATTRIBUTE) )
                	{
                	    alt161 = 1;
                	}
                	switch (alt161) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2931:2: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_enum_member_declaration7550);
                	        	attributes500 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attributes500.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_enum_member_declaration7555);
                	identifier501 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier501.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_member_declaration"

        public class integral_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "integral_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2936:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
        public NetMaker.integral_type_return integral_type() // throws RecognitionException [1]
        {   
            NetMaker.integral_type_return retval = new NetMaker.integral_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set502 = null;

            CommonTree set502_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2936:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set502 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= BYTE && input.LA(1) <= LONG) || (input.LA(1) >= 251 && input.LA(1) <= 254) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set502_tree = (CommonTree)adaptor.DupNode(set502);

                	    adaptor.AddChild(root_0, set502_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "integral_type"

        public class variant_generic_parameter_list_return : TreeRuleReturnScope
        {
            public List<string> tyParams;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variant_generic_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2940:1: variant_generic_parameter_list returns [List<string> tyParams] : ( variant_type_variable_name )+ ;
        public NetMaker.variant_generic_parameter_list_return variant_generic_parameter_list() // throws RecognitionException [1]
        {   
            NetMaker.variant_generic_parameter_list_return retval = new NetMaker.variant_generic_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.variant_type_variable_name_return variant_type_variable_name503 = default(NetMaker.variant_type_variable_name_return);




                retval.tyParams =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2943:2: ( ( variant_type_variable_name )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2944:7: ( variant_type_variable_name )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2944:7: ( variant_type_variable_name )+
                	int cnt162 = 0;
                	do 
                	{
                	    int alt162 = 2;
                	    int LA162_0 = input.LA(1);

                	    if ( (LA162_0 == OUT || LA162_0 == ATTRIBUTE || LA162_0 == IN || LA162_0 == IDENTIFIER || (LA162_0 >= ELIF && LA162_0 <= UNDEF) || LA162_0 == 195 || LA162_0 == 221 || (LA162_0 >= 224 && LA162_0 <= 239) || (LA162_0 >= 241 && LA162_0 <= 244) || (LA162_0 >= 247 && LA162_0 <= 250) || LA162_0 == 256 || (LA162_0 >= 263 && LA162_0 <= 264) || LA162_0 == 274 || LA162_0 == 277) )
                	    {
                	        alt162 = 1;
                	    }


                	    switch (alt162) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2944:8: variant_type_variable_name
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_variant_type_variable_name_in_variant_generic_parameter_list7625);
                			    	variant_type_variable_name503 = variant_type_variable_name();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, variant_type_variable_name503.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	  retval.tyParams.Add(((variant_type_variable_name503 != null) ? variant_type_variable_name503.thetext : default(string))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt162 >= 1 ) goto loop162;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee162 =
                		                new EarlyExitException(162, input);
                		            throw eee162;
                	    }
                	    cnt162++;
                	} while (true);

                	loop162:
                		;	// Stops C# compiler whining that label 'loop162' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variant_generic_parameter_list"

        public class variant_type_variable_name_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variant_type_variable_name"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2945:1: variant_type_variable_name returns [string thetext] : ( attributes )? ( variance_annotation )? type_variable_name ;
        public NetMaker.variant_type_variable_name_return variant_type_variable_name() // throws RecognitionException [1]
        {   
            NetMaker.variant_type_variable_name_return retval = new NetMaker.variant_type_variable_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.attributes_return attributes504 = default(NetMaker.attributes_return);

            NetMaker.variance_annotation_return variance_annotation505 = default(NetMaker.variance_annotation_return);

            NetMaker.type_variable_name_return type_variable_name506 = default(NetMaker.type_variable_name_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2945:52: ( ( attributes )? ( variance_annotation )? type_variable_name )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2946:2: ( attributes )? ( variance_annotation )? type_variable_name
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2946:2: ( attributes )?
                	int alt163 = 2;
                	int LA163_0 = input.LA(1);

                	if ( (LA163_0 == ATTRIBUTE) )
                	{
                	    alt163 = 1;
                	}
                	switch (alt163) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2946:2: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_variant_type_variable_name7641);
                	        	attributes504 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attributes504.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2946:16: ( variance_annotation )?
                	int alt164 = 2;
                	int LA164_0 = input.LA(1);

                	if ( (LA164_0 == OUT || LA164_0 == IN) )
                	{
                	    alt164 = 1;
                	}
                	switch (alt164) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2946:16: variance_annotation
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variance_annotation_in_variant_type_variable_name7646);
                	        	variance_annotation505 = variance_annotation();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, variance_annotation505.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_variable_name_in_variant_type_variable_name7651);
                	type_variable_name506 = type_variable_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_variable_name506.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext =  ((type_variable_name506 != null) ? type_variable_name506.thetext : default(string)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variant_type_variable_name"

        public class variance_annotation_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variance_annotation"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2947:1: variance_annotation : ( IN | OUT );
        public NetMaker.variance_annotation_return variance_annotation() // throws RecognitionException [1]
        {   
            NetMaker.variance_annotation_return retval = new NetMaker.variance_annotation_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set507 = null;

            CommonTree set507_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2947:20: ( IN | OUT )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set507 = (CommonTree)input.LT(1);
                	if ( input.LA(1) == OUT || input.LA(1) == IN ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set507_tree = (CommonTree)adaptor.DupNode(set507);

                	    adaptor.AddChild(root_0, set507_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variance_annotation"

        public class type_parameter_constraints_clauses_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter_constraints_clauses"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2950:1: type_parameter_constraints_clauses : ( type_parameter_constraints_clause )+ -> ( type_parameter_constraints_clause )* ;
        public NetMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() // throws RecognitionException [1]
        {   
            NetMaker.type_parameter_constraints_clauses_return retval = new NetMaker.type_parameter_constraints_clauses_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_parameter_constraints_clause_return type_parameter_constraints_clause508 = default(NetMaker.type_parameter_constraints_clause_return);


            RewriteRuleSubtreeStream stream_type_parameter_constraints_clause = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clause");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2950:35: ( ( type_parameter_constraints_clause )+ -> ( type_parameter_constraints_clause )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2951:2: ( type_parameter_constraints_clause )+
                {
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2951:2: ( type_parameter_constraints_clause )+
                	int cnt165 = 0;
                	do 
                	{
                	    int alt165 = 2;
                	    int LA165_0 = input.LA(1);

                	    if ( (LA165_0 == TYPE_PARAM_CONSTRAINT) )
                	    {
                	        alt165 = 1;
                	    }


                	    switch (alt165) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2951:2: type_parameter_constraints_clause
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses7673);
                			    	type_parameter_constraints_clause508 = type_parameter_constraints_clause();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clause.Add(type_parameter_constraints_clause508.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt165 >= 1 ) goto loop165;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee165 =
                		                new EarlyExitException(165, input);
                		            throw eee165;
                	    }
                	    cnt165++;
                	} while (true);

                	loop165:
                		;	// Stops C# compiler whining that label 'loop165' has no statements



                	// AST REWRITE
                	// elements:          type_parameter_constraints_clause
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2951:37: -> ( type_parameter_constraints_clause )*
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2951:40: ( type_parameter_constraints_clause )*
                	    while ( stream_type_parameter_constraints_clause.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_type_parameter_constraints_clause.NextTree());

                	    }
                	    stream_type_parameter_constraints_clause.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter_constraints_clauses"

        public class type_parameter_constraints_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter_constraints_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2952:1: type_parameter_constraints_clause : ( ^( TYPE_PARAM_CONSTRAINT type_variable_name ) -> | ^( TYPE_PARAM_CONSTRAINT type_variable_name ( type_name )+ ) );
        public NetMaker.type_parameter_constraints_clause_return type_parameter_constraints_clause() // throws RecognitionException [1]
        {   
            NetMaker.type_parameter_constraints_clause_return retval = new NetMaker.type_parameter_constraints_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree TYPE_PARAM_CONSTRAINT509 = null;
            CommonTree TYPE_PARAM_CONSTRAINT511 = null;
            NetMaker.type_variable_name_return type_variable_name510 = default(NetMaker.type_variable_name_return);

            NetMaker.type_variable_name_return type_variable_name512 = default(NetMaker.type_variable_name_return);

            NetMaker.type_name_return type_name513 = default(NetMaker.type_name_return);


            CommonTree TYPE_PARAM_CONSTRAINT509_tree=null;
            CommonTree TYPE_PARAM_CONSTRAINT511_tree=null;
            RewriteRuleNodeStream stream_TYPE_PARAM_CONSTRAINT = new RewriteRuleNodeStream(adaptor,"token TYPE_PARAM_CONSTRAINT");
            RewriteRuleSubtreeStream stream_type_variable_name = new RewriteRuleSubtreeStream(adaptor,"rule type_variable_name");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2952:34: ( ^( TYPE_PARAM_CONSTRAINT type_variable_name ) -> | ^( TYPE_PARAM_CONSTRAINT type_variable_name ( type_name )+ ) )
                int alt167 = 2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0 == TYPE_PARAM_CONSTRAINT) )
                {
                    int LA167_1 = input.LA(2);

                    if ( (LA167_1 == DOWN) )
                    {
                        int LA167_2 = input.LA(3);

                        if ( (LA167_2 == IDENTIFIER) )
                        {
                            int LA167_3 = input.LA(4);

                            if ( (LA167_3 == UP) )
                            {
                                alt167 = 1;
                            }
                            else if ( (LA167_3 == IDENTIFIER || LA167_3 == DOT || (LA167_3 >= ELIF && LA167_3 <= UNDEF) || LA167_3 == 195 || LA167_3 == 208 || LA167_3 == 221 || (LA167_3 >= 224 && LA167_3 <= 239) || (LA167_3 >= 241 && LA167_3 <= 244) || (LA167_3 >= 247 && LA167_3 <= 250) || LA167_3 == 256 || (LA167_3 >= 263 && LA167_3 <= 264) || LA167_3 == 274 || LA167_3 == 277) )
                            {
                                alt167 = 2;
                            }
                            else 
                            {
                                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                                NoViableAltException nvae_d167s3 =
                                    new NoViableAltException("", 167, 3, input);

                                throw nvae_d167s3;
                            }
                        }
                        else if ( ((LA167_2 >= ELIF && LA167_2 <= UNDEF) || LA167_2 == 195 || LA167_2 == 221 || (LA167_2 >= 224 && LA167_2 <= 239) || (LA167_2 >= 241 && LA167_2 <= 244) || (LA167_2 >= 247 && LA167_2 <= 250) || LA167_2 == 256 || (LA167_2 >= 263 && LA167_2 <= 264) || LA167_2 == 274 || LA167_2 == 277) )
                        {
                            int LA167_4 = input.LA(4);

                            if ( (LA167_4 == IDENTIFIER || LA167_4 == DOT || (LA167_4 >= ELIF && LA167_4 <= UNDEF) || LA167_4 == 195 || LA167_4 == 208 || LA167_4 == 221 || (LA167_4 >= 224 && LA167_4 <= 239) || (LA167_4 >= 241 && LA167_4 <= 244) || (LA167_4 >= 247 && LA167_4 <= 250) || LA167_4 == 256 || (LA167_4 >= 263 && LA167_4 <= 264) || LA167_4 == 274 || LA167_4 == 277) )
                            {
                                alt167 = 2;
                            }
                            else if ( (LA167_4 == UP) )
                            {
                                alt167 = 1;
                            }
                            else 
                            {
                                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                                NoViableAltException nvae_d167s4 =
                                    new NoViableAltException("", 167, 4, input);

                                throw nvae_d167s4;
                            }
                        }
                        else 
                        {
                            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                            NoViableAltException nvae_d167s2 =
                                new NoViableAltException("", 167, 2, input);

                            throw nvae_d167s2;
                        }
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d167s1 =
                            new NoViableAltException("", 167, 1, input);

                        throw nvae_d167s1;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d167s0 =
                        new NoViableAltException("", 167, 0, input);

                    throw nvae_d167s0;
                }
                switch (alt167) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2954:2: ^( TYPE_PARAM_CONSTRAINT type_variable_name )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	TYPE_PARAM_CONSTRAINT509=(CommonTree)Match(input,TYPE_PARAM_CONSTRAINT,FOLLOW_TYPE_PARAM_CONSTRAINT_in_type_parameter_constraints_clause7692); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_TYPE_PARAM_CONSTRAINT.Add(TYPE_PARAM_CONSTRAINT509);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause7694);
                        	type_variable_name510 = type_variable_name();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_type_variable_name.Add(type_variable_name510.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2954:46: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2955:7: ^( TYPE_PARAM_CONSTRAINT type_variable_name ( type_name )+ )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	TYPE_PARAM_CONSTRAINT511=(CommonTree)Match(input,TYPE_PARAM_CONSTRAINT,FOLLOW_TYPE_PARAM_CONSTRAINT_in_type_parameter_constraints_clause7707); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{TYPE_PARAM_CONSTRAINT511_tree = (CommonTree)adaptor.DupNode(TYPE_PARAM_CONSTRAINT511);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(TYPE_PARAM_CONSTRAINT511_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause7709);
                        	type_variable_name512 = type_variable_name();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, type_variable_name512.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2955:50: ( type_name )+
                        	int cnt166 = 0;
                        	do 
                        	{
                        	    int alt166 = 2;
                        	    int LA166_0 = input.LA(1);

                        	    if ( (LA166_0 == IDENTIFIER || LA166_0 == DOT || (LA166_0 >= ELIF && LA166_0 <= UNDEF) || LA166_0 == 195 || LA166_0 == 208 || LA166_0 == 221 || (LA166_0 >= 224 && LA166_0 <= 239) || (LA166_0 >= 241 && LA166_0 <= 244) || (LA166_0 >= 247 && LA166_0 <= 250) || LA166_0 == 256 || (LA166_0 >= 263 && LA166_0 <= 264) || LA166_0 == 274 || LA166_0 == 277) )
                        	    {
                        	        alt166 = 1;
                        	    }


                        	    switch (alt166) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2955:50: type_name
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_type_name_in_type_parameter_constraints_clause7711);
                        			    	type_name513 = type_name();
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) 
                        			    	adaptor.AddChild(root_1, type_name513.Tree);

                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    if ( cnt166 >= 1 ) goto loop166;
                        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        		            EarlyExitException eee166 =
                        		                new EarlyExitException(166, input);
                        		            throw eee166;
                        	    }
                        	    cnt166++;
                        	} while (true);

                        	loop166:
                        		;	// Stops C# compiler whining that label 'loop166' has no statements


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter_constraints_clause"

        public class type_variable_name_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_variable_name"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2956:1: type_variable_name returns [string thetext] : identifier ;
        public NetMaker.type_variable_name_return type_variable_name() // throws RecognitionException [1]
        {   
            NetMaker.type_variable_name_return retval = new NetMaker.type_variable_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.identifier_return identifier514 = default(NetMaker.identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2956:44: ( identifier )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2957:2: identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_type_variable_name7726);
                	identifier514 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier514.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext =  ((identifier514 != null) ? identifier514.thetext : default(string)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_variable_name"

        public class constructor_constraint_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constructor_constraint"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2958:1: constructor_constraint : 'new' '(' ')' ;
        public NetMaker.constructor_constraint_return constructor_constraint() // throws RecognitionException [1]
        {   
            NetMaker.constructor_constraint_return retval = new NetMaker.constructor_constraint_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal515 = null;
            CommonTree char_literal516 = null;
            CommonTree char_literal517 = null;

            CommonTree string_literal515_tree=null;
            CommonTree char_literal516_tree=null;
            CommonTree char_literal517_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2958:23: ( 'new' '(' ')' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2959:2: 'new' '(' ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal515=(CommonTree)Match(input,197,FOLLOW_197_in_constructor_constraint7735); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal515_tree = (CommonTree)adaptor.DupNode(string_literal515);

                		adaptor.AddChild(root_0, string_literal515_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal516=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_constraint7739); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal516_tree = (CommonTree)adaptor.DupNode(char_literal516);

                		adaptor.AddChild(root_0, char_literal516_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal517=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_constraint7743); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal517_tree = (CommonTree)adaptor.DupNode(char_literal517);

                		adaptor.AddChild(root_0, char_literal517_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constructor_constraint"

        public class return_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "return_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2960:1: return_type : type ;
        public NetMaker.return_type_return return_type() // throws RecognitionException [1]
        {   
            NetMaker.return_type_return retval = new NetMaker.return_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.type_return type518 = default(NetMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2960:12: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2961:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_return_type7751);
                	type518 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type518.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "return_type"

        public class formal_parameter_list_return : TreeRuleReturnScope
        {
            public IList<TypeRepTemplate> paramTypes;
            public IList<CommonTree> boxedTypeTrees;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "formal_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2962:1: formal_parameter_list[IList<ParamRepTemplate> pInfos, ParamArrayRepTemplate paInfo] returns [IList<TypeRepTemplate> paramTypes, IList<CommonTree> boxedTypeTrees] : ^( PARAMS ( formal_parameter[$pInfos != null && idx < $pInfos.Count ? $pInfos[idx++] : null, $paInfo] )+ ) ;
        public NetMaker.formal_parameter_list_return formal_parameter_list(IList<ParamRepTemplate> pInfos, ParamArrayRepTemplate paInfo) // throws RecognitionException [1]
        {   
            NetMaker.formal_parameter_list_return retval = new NetMaker.formal_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree PARAMS519 = null;
            NetMaker.formal_parameter_return formal_parameter520 = default(NetMaker.formal_parameter_return);


            CommonTree PARAMS519_tree=null;


               int idx = 0;
               retval.paramTypes =  new List<TypeRepTemplate>();
               retval.boxedTypeTrees =  new List<CommonTree>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2967:2: ( ^( PARAMS ( formal_parameter[$pInfos != null && idx < $pInfos.Count ? $pInfos[idx++] : null, $paInfo] )+ ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2968:5: ^( PARAMS ( formal_parameter[$pInfos != null && idx < $pInfos.Count ? $pInfos[idx++] : null, $paInfo] )+ )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	PARAMS519=(CommonTree)Match(input,PARAMS,FOLLOW_PARAMS_in_formal_parameter_list7773); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{PARAMS519_tree = (CommonTree)adaptor.DupNode(PARAMS519);

                		root_1 = (CommonTree)adaptor.BecomeRoot(PARAMS519_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2968:14: ( formal_parameter[$pInfos != null && idx < $pInfos.Count ? $pInfos[idx++] : null, $paInfo] )+
                	int cnt168 = 0;
                	do 
                	{
                	    int alt168 = 2;
                	    int LA168_0 = input.LA(1);

                	    if ( (LA168_0 == ATTRIBUTE || LA168_0 == THIS || LA168_0 == TYPE || (LA168_0 >= 212 && LA168_0 <= 213) || (LA168_0 >= 256 && LA168_0 <= 257)) )
                	    {
                	        alt168 = 1;
                	    }


                	    switch (alt168) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2968:15: formal_parameter[$pInfos != null && idx < $pInfos.Count ? $pInfos[idx++] : null, $paInfo]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_formal_parameter_in_formal_parameter_list7776);
                			    	formal_parameter520 = formal_parameter(pInfos != null && idx < pInfos.Count ? pInfos[idx++] : null, paInfo);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_1, formal_parameter520.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.paramTypes.Add(((formal_parameter520 != null) ? formal_parameter520.paramType : default(TypeRepTemplate))); retval.boxedTypeTrees.Add(((formal_parameter520 != null) ? formal_parameter520.boxedTypeTree : default(CommonTree))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt168 >= 1 ) goto loop168;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee168 =
                		                new EarlyExitException(168, input);
                		            throw eee168;
                	    }
                	    cnt168++;
                	} while (true);

                	loop168:
                		;	// Stops C# compiler whining that label 'loop168' has no statements


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "formal_parameter_list"

        public class formal_parameter_return : TreeRuleReturnScope
        {
            public TypeRepTemplate paramType;
            public CommonTree boxedTypeTree;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "formal_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2973:1: formal_parameter[ParamRepTemplate pInfo, ParamArrayRepTemplate paInfo] returns [TypeRepTemplate paramType, CommonTree boxedTypeTree] : ( ( attributes )? ( fixed_parameter[$pInfo] | parameter_array[$paInfo] ) | '__arglist' );
        public NetMaker.formal_parameter_return formal_parameter(ParamRepTemplate pInfo, ParamArrayRepTemplate paInfo) // throws RecognitionException [1]
        {   
            NetMaker.formal_parameter_return retval = new NetMaker.formal_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal524 = null;
            NetMaker.attributes_return attributes521 = default(NetMaker.attributes_return);

            NetMaker.fixed_parameter_return fixed_parameter522 = default(NetMaker.fixed_parameter_return);

            NetMaker.parameter_array_return parameter_array523 = default(NetMaker.parameter_array_return);


            CommonTree string_literal524_tree=null;


               retval.boxedTypeTree =  null;
               retval.paramType =  null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2978:1: ( ( attributes )? ( fixed_parameter[$pInfo] | parameter_array[$paInfo] ) | '__arglist' )
                int alt171 = 2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0 == ATTRIBUTE || LA171_0 == THIS || LA171_0 == TYPE || (LA171_0 >= 212 && LA171_0 <= 213) || LA171_0 == 257) )
                {
                    alt171 = 1;
                }
                else if ( (LA171_0 == 256) )
                {
                    alt171 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d171s0 =
                        new NoViableAltException("", 171, 0, input);

                    throw nvae_d171s0;
                }
                switch (alt171) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2979:2: ( attributes )? ( fixed_parameter[$pInfo] | parameter_array[$paInfo] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2979:2: ( attributes )?
                        	int alt169 = 2;
                        	int LA169_0 = input.LA(1);

                        	if ( (LA169_0 == ATTRIBUTE) )
                        	{
                        	    alt169 = 1;
                        	}
                        	switch (alt169) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2979:2: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_formal_parameter7842);
                        	        	attributes521 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, attributes521.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2979:16: ( fixed_parameter[$pInfo] | parameter_array[$paInfo] )
                        	int alt170 = 2;
                        	int LA170_0 = input.LA(1);

                        	if ( (LA170_0 == THIS || LA170_0 == TYPE || (LA170_0 >= 212 && LA170_0 <= 213)) )
                        	{
                        	    alt170 = 1;
                        	}
                        	else if ( (LA170_0 == 257) )
                        	{
                        	    alt170 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d170s0 =
                        	        new NoViableAltException("", 170, 0, input);

                        	    throw nvae_d170s0;
                        	}
                        	switch (alt170) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2979:17: fixed_parameter[$pInfo]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_fixed_parameter_in_formal_parameter7848);
                        	        	fixed_parameter522 = fixed_parameter(pInfo);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, fixed_parameter522.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	  retval.paramType =  ((fixed_parameter522 != null) ? fixed_parameter522.paramType : default(TypeRepTemplate)); retval.boxedTypeTree =  ((fixed_parameter522 != null) ? fixed_parameter522.boxedTypeTree : default(CommonTree)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2980:22: parameter_array[$paInfo]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_parameter_array_in_formal_parameter7874);
                        	        	parameter_array523 = parameter_array(paInfo);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, parameter_array523.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.paramType =  ((parameter_array523 != null) ? parameter_array523.paramType : default(TypeRepTemplate)); retval.boxedTypeTree =  ((parameter_array523 != null) ? parameter_array523.boxedTypeTree : default(CommonTree)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2981:4: '__arglist'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal524=(CommonTree)Match(input,256,FOLLOW_256_in_formal_parameter7885); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal524_tree = (CommonTree)adaptor.DupNode(string_literal524);

                        		adaptor.AddChild(root_0, string_literal524_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "formal_parameter"

        public class fixed_parameter_return : TreeRuleReturnScope
        {
            public TypeRepTemplate paramType;
            public CommonTree boxedTypeTree;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2987:1: fixed_parameter[ParamRepTemplate pInfo] returns [TypeRepTemplate paramType, CommonTree boxedTypeTree] : ( parameter_modifier )? type identifier ( default_argument )? magicRef[isRefOut, $type.tree != null ? $type.tree.Token : null, $type.tree] -> {isRefOut}? magicRef identifier ( default_argument )? -> ( parameter_modifier )? type identifier ( default_argument )? ;
        public NetMaker.fixed_parameter_return fixed_parameter(ParamRepTemplate pInfo) // throws RecognitionException [1]
        {   
            ForceUnsharedType_stack.Push(new ForceUnsharedType_scope());

            NetMaker.fixed_parameter_return retval = new NetMaker.fixed_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.parameter_modifier_return parameter_modifier525 = default(NetMaker.parameter_modifier_return);

            NetMaker.type_return type526 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier527 = default(NetMaker.identifier_return);

            NetMaker.default_argument_return default_argument528 = default(NetMaker.default_argument_return);

            NetMaker.magicRef_return magicRef529 = default(NetMaker.magicRef_return);


            RewriteRuleSubtreeStream stream_magicRef = new RewriteRuleSubtreeStream(adaptor,"rule magicRef");
            RewriteRuleSubtreeStream stream_default_argument = new RewriteRuleSubtreeStream(adaptor,"rule default_argument");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_parameter_modifier = new RewriteRuleSubtreeStream(adaptor,"rule parameter_modifier");

                ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  pInfo != null ? pInfo.Type.ForceBoxed : false;
                bool isRefOut = false;
                bool oldFresh = false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2994:2: ( ( parameter_modifier )? type identifier ( default_argument )? magicRef[isRefOut, $type.tree != null ? $type.tree.Token : null, $type.tree] -> {isRefOut}? magicRef identifier ( default_argument )? -> ( parameter_modifier )? type identifier ( default_argument )? )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2995:7: ( parameter_modifier )? type identifier ( default_argument )? magicRef[isRefOut, $type.tree != null ? $type.tree.Token : null, $type.tree]
                {
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2995:7: ( parameter_modifier )?
                	int alt172 = 2;
                	int LA172_0 = input.LA(1);

                	if ( (LA172_0 == THIS || (LA172_0 >= 212 && LA172_0 <= 213)) )
                	{
                	    alt172 = 1;
                	}
                	switch (alt172) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2995:8: parameter_modifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_parameter_modifier_in_fixed_parameter7924);
                	        	parameter_modifier525 = parameter_modifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_parameter_modifier.Add(parameter_modifier525.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isRefOut = ((parameter_modifier525 != null) ? parameter_modifier525.isRefOut : default(bool)); 
                	        	             if (isRefOut) { 
                	        	                ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  true; 
                	        	                AddToImports("CS2JNet.JavaSupport.language.RefSupport");
                	        	             } 
                	        	           
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   oldFresh = ((ForceUnsharedType_scope)ForceUnsharedType_stack.Peek()).fresh; ((ForceUnsharedType_scope)ForceUnsharedType_stack.Peek()).fresh =  isRefOut;
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_fixed_parameter7964);
                	type526 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(type526.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   ((ForceUnsharedType_scope)ForceUnsharedType_stack.Peek()).fresh =  oldFresh; 
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_fixed_parameter7983);
                	identifier527 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier527.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.paramType =  ((type526 != null) ? type526.dotNetType : default(TypeRepTemplate)); ((type526 != null) ? type526.dotNetType : default(TypeRepTemplate)).IsWrapped = isRefOut; ((SymTab_scope)SymTab_stack.Peek()).symtab[((identifier527 != null) ? identifier527.thetext : default(string))] = ((type526 != null) ? type526.dotNetType : default(TypeRepTemplate)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3007:7: ( default_argument )?
                	int alt173 = 2;
                	int LA173_0 = input.LA(1);

                	if ( (LA173_0 == ASSIGN) )
                	{
                	    alt173 = 1;
                	}
                	switch (alt173) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3007:7: default_argument
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_default_argument_in_fixed_parameter7996);
                	        	default_argument528 = default_argument();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_default_argument.Add(default_argument528.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicRef_in_fixed_parameter8006);
                	magicRef529 = magicRef(isRefOut, ((type526 != null) ? ((CommonTree)type526.Tree) : null) != null ? ((type526 != null) ? ((CommonTree)type526.Tree) : null).Token : null, ((type526 != null) ? ((CommonTree)type526.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicRef.Add(magicRef529.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.boxedTypeTree =  isRefOut ? dupTree(((magicRef529 != null) ? ((CommonTree)magicRef529.Tree) : null)) : ((type526 != null) ? type526.boxedTree : default(CommonTree)); 
                	}


                	// AST REWRITE
                	// elements:          default_argument, magicRef, identifier, type, identifier, default_argument, parameter_modifier
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3010:4: -> {isRefOut}? magicRef identifier ( default_argument )?
                	if (isRefOut)
                	{
                	    adaptor.AddChild(root_0, stream_magicRef.NextTree());
                	    adaptor.AddChild(root_0, stream_identifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3010:39: ( default_argument )?
                	    if ( stream_default_argument.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_default_argument.NextTree());

                	    }
                	    stream_default_argument.Reset();

                	}
                	else // 3011:4: -> ( parameter_modifier )? type identifier ( default_argument )?
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3011:7: ( parameter_modifier )?
                	    if ( stream_parameter_modifier.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_parameter_modifier.NextTree());

                	    }
                	    stream_parameter_modifier.Reset();
                	    adaptor.AddChild(root_0, stream_type.NextTree());
                	    adaptor.AddChild(root_0, stream_identifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3011:43: ( default_argument )?
                	    if ( stream_default_argument.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_default_argument.NextTree());

                	    }
                	    stream_default_argument.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                ForceUnsharedType_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "fixed_parameter"

        public class default_argument_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "default_argument"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3014:1: default_argument : '=' expression[ObjectType] ;
        public NetMaker.default_argument_return default_argument() // throws RecognitionException [1]
        {   
            NetMaker.default_argument_return retval = new NetMaker.default_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal530 = null;
            NetMaker.expression_return expression531 = default(NetMaker.expression_return);


            CommonTree char_literal530_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3014:17: ( '=' expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3015:2: '=' expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal530=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_default_argument8059); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal530_tree = (CommonTree)adaptor.DupNode(char_literal530);

                		adaptor.AddChild(root_0, char_literal530_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_default_argument8061);
                	expression531 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression531.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "default_argument"

        public class parameter_modifier_return : TreeRuleReturnScope
        {
            public bool isRefOut;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "parameter_modifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3016:1: parameter_modifier returns [bool isRefOut] : ( 'ref' -> | 'out' -> | 'this' );
        public NetMaker.parameter_modifier_return parameter_modifier() // throws RecognitionException [1]
        {   
            NetMaker.parameter_modifier_return retval = new NetMaker.parameter_modifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal532 = null;
            CommonTree string_literal533 = null;
            CommonTree string_literal534 = null;

            CommonTree string_literal532_tree=null;
            CommonTree string_literal533_tree=null;
            CommonTree string_literal534_tree=null;
            RewriteRuleNodeStream stream_212 = new RewriteRuleNodeStream(adaptor,"token 212");
            RewriteRuleNodeStream stream_213 = new RewriteRuleNodeStream(adaptor,"token 213");


               retval.isRefOut =  true;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3019:2: ( 'ref' -> | 'out' -> | 'this' )
                int alt174 = 3;
                switch ( input.LA(1) ) 
                {
                case 213:
                	{
                    alt174 = 1;
                    }
                    break;
                case 212:
                	{
                    alt174 = 2;
                    }
                    break;
                case THIS:
                	{
                    alt174 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d174s0 =
                	        new NoViableAltException("", 174, 0, input);

                	    throw nvae_d174s0;
                }

                switch (alt174) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3020:2: 'ref'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal532=(CommonTree)Match(input,213,FOLLOW_213_in_parameter_modifier8078); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_213.Add(string_literal532);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3020:8: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3020:13: 'out'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal533=(CommonTree)Match(input,212,FOLLOW_212_in_parameter_modifier8084); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_212.Add(string_literal533);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3020:19: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3020:24: 'this'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal534=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_parameter_modifier8090); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal534_tree = (CommonTree)adaptor.DupNode(string_literal534);

                        		adaptor.AddChild(root_0, string_literal534_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.isRefOut =  false;
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "parameter_modifier"

        public class parameter_array_return : TreeRuleReturnScope
        {
            public TypeRepTemplate paramType;
            public CommonTree boxedTypeTree;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "parameter_array"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3022:1: parameter_array[ParamArrayRepTemplate paInfo] returns [TypeRepTemplate paramType, CommonTree boxedTypeTree] : ^(p= 'params' type identifier ) ;
        public NetMaker.parameter_array_return parameter_array(ParamArrayRepTemplate paInfo) // throws RecognitionException [1]
        {   
            PrimitiveRep_stack.Push(new PrimitiveRep_scope());

            NetMaker.parameter_array_return retval = new NetMaker.parameter_array_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree p = null;
            NetMaker.type_return type535 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier536 = default(NetMaker.identifier_return);


            CommonTree p_tree=null;


                ((PrimitiveRep_scope)PrimitiveRep_stack.Peek()).primitiveTypeAsObject =  paInfo != null ? paInfo.Type.ForceBoxed : false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3026:2: ( ^(p= 'params' type identifier ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3027:2: ^(p= 'params' type identifier )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	p=(CommonTree)Match(input,257,FOLLOW_257_in_parameter_array8118); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{p_tree = (CommonTree)adaptor.DupNode(p);

                		root_1 = (CommonTree)adaptor.BecomeRoot(p_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_parameter_array8122);
                	type535 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, type535.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.boxedTypeTree =  ((type535 != null) ? type535.boxedTree : default(CommonTree)); 
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_parameter_array8127);
                	identifier536 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, identifier536.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   ((SymTab_scope)SymTab_stack.Peek()).symtab[((identifier536 != null) ? identifier536.thetext : default(string))] = findType("System.Array", new TypeRepTemplate[] {((type535 != null) ? type535.dotNetType : default(TypeRepTemplate))}); retval.paramType =  ((SymTab_scope)SymTab_stack.Peek()).symtab[((identifier536 != null) ? identifier536.thetext : default(string))]; 
                	}

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                PrimitiveRep_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "parameter_array"

        public class interface_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3031:1: interface_declaration : ^( INTERFACE ( 'partial' )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( variant_generic_parameter_list )? ( class_extends )? interface_body ) ;
        public NetMaker.interface_declaration_return interface_declaration() // throws RecognitionException [1]
        {   
            NetMaker.interface_declaration_return retval = new NetMaker.interface_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree INTERFACE537 = null;
            CommonTree string_literal538 = null;
            NetMaker.attributes_return attributes539 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers540 = default(NetMaker.modifiers_return);

            NetMaker.identifier_return identifier541 = default(NetMaker.identifier_return);

            NetMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses542 = default(NetMaker.type_parameter_constraints_clauses_return);

            NetMaker.variant_generic_parameter_list_return variant_generic_parameter_list543 = default(NetMaker.variant_generic_parameter_list_return);

            NetMaker.class_extends_return class_extends544 = default(NetMaker.class_extends_return);

            NetMaker.interface_body_return interface_body545 = default(NetMaker.interface_body_return);


            CommonTree INTERFACE537_tree=null;
            CommonTree string_literal538_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3031:22: ( ^( INTERFACE ( 'partial' )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( variant_generic_parameter_list )? ( class_extends )? interface_body ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:4: ^( INTERFACE ( 'partial' )? ( attributes )? ( modifiers )? identifier ( type_parameter_constraints_clauses )? ( variant_generic_parameter_list )? ( class_extends )? interface_body )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	INTERFACE537=(CommonTree)Match(input,INTERFACE,FOLLOW_INTERFACE_in_interface_declaration8144); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{INTERFACE537_tree = (CommonTree)adaptor.DupNode(INTERFACE537);

                		root_1 = (CommonTree)adaptor.BecomeRoot(INTERFACE537_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:16: ( 'partial' )?
                	int alt175 = 2;
                	int LA175_0 = input.LA(1);

                	if ( (LA175_0 == 196) )
                	{
                	    alt175 = 1;
                	}
                	switch (alt175) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:16: 'partial'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal538=(CommonTree)Match(input,196,FOLLOW_196_in_interface_declaration8146); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal538_tree = (CommonTree)adaptor.DupNode(string_literal538);

                	        		adaptor.AddChild(root_1, string_literal538_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:27: ( attributes )?
                	int alt176 = 2;
                	int LA176_0 = input.LA(1);

                	if ( (LA176_0 == ATTRIBUTE) )
                	{
                	    alt176 = 1;
                	}
                	switch (alt176) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:27: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_interface_declaration8149);
                	        	attributes539 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, attributes539.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:39: ( modifiers )?
                	int alt177 = 2;
                	int LA177_0 = input.LA(1);

                	if ( (LA177_0 == FINAL || (LA177_0 >= PUBLIC && LA177_0 <= PRIVATE) || LA177_0 == STATIC || LA177_0 == 194 || LA177_0 == 197 || (LA177_0 >= 199 && LA177_0 <= 204)) )
                	{
                	    alt177 = 1;
                	}
                	switch (alt177) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:39: modifiers
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_modifiers_in_interface_declaration8152);
                	        	modifiers540 = modifiers();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, modifiers540.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_interface_declaration8155);
                	identifier541 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, identifier541.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:61: ( type_parameter_constraints_clauses )?
                	int alt178 = 2;
                	int LA178_0 = input.LA(1);

                	if ( (LA178_0 == TYPE_PARAM_CONSTRAINT) )
                	{
                	    alt178 = 1;
                	}
                	switch (alt178) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:61: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration8157);
                	        	type_parameter_constraints_clauses542 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, type_parameter_constraints_clauses542.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:99: ( variant_generic_parameter_list )?
                	int alt179 = 2;
                	int LA179_0 = input.LA(1);

                	if ( (LA179_0 == OUT || LA179_0 == ATTRIBUTE || LA179_0 == IN || LA179_0 == IDENTIFIER || (LA179_0 >= ELIF && LA179_0 <= UNDEF) || LA179_0 == 195 || LA179_0 == 221 || (LA179_0 >= 224 && LA179_0 <= 239) || (LA179_0 >= 241 && LA179_0 <= 244) || (LA179_0 >= 247 && LA179_0 <= 250) || LA179_0 == 256 || (LA179_0 >= 263 && LA179_0 <= 264) || LA179_0 == 274 || LA179_0 == 277) )
                	{
                	    alt179 = 1;
                	}
                	switch (alt179) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3032:99: variant_generic_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variant_generic_parameter_list_in_interface_declaration8162);
                	        	variant_generic_parameter_list543 = variant_generic_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, variant_generic_parameter_list543.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3033:6: ( class_extends )?
                	int alt180 = 2;
                	int LA180_0 = input.LA(1);

                	if ( (LA180_0 == EXTENDS) )
                	{
                	    alt180 = 1;
                	}
                	switch (alt180) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3033:6: class_extends
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_extends_in_interface_declaration8171);
                	        	class_extends544 = class_extends();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_1, class_extends544.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_interface_body_in_interface_declaration8177);
                	interface_body545 = interface_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, interface_body545.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_declaration"

        public class interface_modifiers_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_modifiers"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3034:1: interface_modifiers : ( modifier )+ ;
        public NetMaker.interface_modifiers_return interface_modifiers() // throws RecognitionException [1]
        {   
            NetMaker.interface_modifiers_return retval = new NetMaker.interface_modifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.modifier_return modifier546 = default(NetMaker.modifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3034:20: ( ( modifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3035:2: ( modifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3035:2: ( modifier )+
                	int cnt181 = 0;
                	do 
                	{
                	    int alt181 = 2;
                	    int LA181_0 = input.LA(1);

                	    if ( (LA181_0 == FINAL || (LA181_0 >= PUBLIC && LA181_0 <= PRIVATE) || LA181_0 == STATIC || LA181_0 == 194 || LA181_0 == 197 || (LA181_0 >= 199 && LA181_0 <= 204)) )
                	    {
                	        alt181 = 1;
                	    }


                	    switch (alt181) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3035:2: modifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_modifier_in_interface_modifiers8188);
                			    	modifier546 = modifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, modifier546.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt181 >= 1 ) goto loop181;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee181 =
                		                new EarlyExitException(181, input);
                		            throw eee181;
                	    }
                	    cnt181++;
                	} while (true);

                	loop181:
                		;	// Stops C# compiler whining that label 'loop181' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_modifiers"

        public class interface_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_body"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3036:1: interface_body : '{' ( interface_member_declarations )? '}' ;
        public NetMaker.interface_body_return interface_body() // throws RecognitionException [1]
        {   
            NetMaker.interface_body_return retval = new NetMaker.interface_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal547 = null;
            CommonTree char_literal549 = null;
            NetMaker.interface_member_declarations_return interface_member_declarations548 = default(NetMaker.interface_member_declarations_return);


            CommonTree char_literal547_tree=null;
            CommonTree char_literal549_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3036:15: ( '{' ( interface_member_declarations )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3037:2: '{' ( interface_member_declarations )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal547=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_body8197); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal547_tree = (CommonTree)adaptor.DupNode(char_literal547);

                		adaptor.AddChild(root_0, char_literal547_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3037:8: ( interface_member_declarations )?
                	int alt182 = 2;
                	int LA182_0 = input.LA(1);

                	if ( ((LA182_0 >= EVENT && LA182_0 <= METHOD)) )
                	{
                	    alt182 = 1;
                	}
                	switch (alt182) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3037:8: interface_member_declarations
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_interface_member_declarations_in_interface_body8201);
                	        	interface_member_declarations548 = interface_member_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, interface_member_declarations548.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal549=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_body8206); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal549_tree = (CommonTree)adaptor.DupNode(char_literal549);

                		adaptor.AddChild(root_0, char_literal549_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_body"

        public class interface_member_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_member_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3038:1: interface_member_declarations : ( interface_member_declaration )+ ;
        public NetMaker.interface_member_declarations_return interface_member_declarations() // throws RecognitionException [1]
        {   
            NetMaker.interface_member_declarations_return retval = new NetMaker.interface_member_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.interface_member_declaration_return interface_member_declaration550 = default(NetMaker.interface_member_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3038:30: ( ( interface_member_declaration )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3039:2: ( interface_member_declaration )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3039:2: ( interface_member_declaration )+
                	int cnt183 = 0;
                	do 
                	{
                	    int alt183 = 2;
                	    int LA183_0 = input.LA(1);

                	    if ( ((LA183_0 >= EVENT && LA183_0 <= METHOD)) )
                	    {
                	        alt183 = 1;
                	    }


                	    switch (alt183) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3039:2: interface_member_declaration
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations8214);
                			    	interface_member_declaration550 = interface_member_declaration();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, interface_member_declaration550.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt183 >= 1 ) goto loop183;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee183 =
                		                new EarlyExitException(183, input);
                		            throw eee183;
                	    }
                	    cnt183++;
                	} while (true);

                	loop183:
                		;	// Stops C# compiler whining that label 'loop183' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_member_declarations"

        public class interface_member_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_member_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3040:1: interface_member_declaration : ( ^(e= EVENT ( attributes )? ( modifiers )? t= type i= identifier magicEventCollectionType[$t.tree.Token, $t.tree] ) -> ^( METHOD[$e.token, \"METHOD\"] ( attributes )? ( modifiers )? magicEventCollectionType identifier EXCEPTION[$i.tree.Token, \"Exception\"] ) | ^( METHOD ( attributes )? ( modifiers )? type identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? ( exception )* ) );
        public NetMaker.interface_member_declaration_return interface_member_declaration() // throws RecognitionException [1]
        {   
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.interface_member_declaration_return retval = new NetMaker.interface_member_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree e = null;
            CommonTree METHOD554 = null;
            NetMaker.type_return t = default(NetMaker.type_return);

            NetMaker.identifier_return i = default(NetMaker.identifier_return);

            NetMaker.attributes_return attributes551 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers552 = default(NetMaker.modifiers_return);

            NetMaker.magicEventCollectionType_return magicEventCollectionType553 = default(NetMaker.magicEventCollectionType_return);

            NetMaker.attributes_return attributes555 = default(NetMaker.attributes_return);

            NetMaker.modifiers_return modifiers556 = default(NetMaker.modifiers_return);

            NetMaker.type_return type557 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier558 = default(NetMaker.identifier_return);

            NetMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses559 = default(NetMaker.type_parameter_constraints_clauses_return);

            NetMaker.type_parameter_list_return type_parameter_list560 = default(NetMaker.type_parameter_list_return);

            NetMaker.formal_parameter_list_return formal_parameter_list561 = default(NetMaker.formal_parameter_list_return);

            NetMaker.exception_return exception562 = default(NetMaker.exception_return);


            CommonTree e_tree=null;
            CommonTree METHOD554_tree=null;
            RewriteRuleNodeStream stream_EVENT = new RewriteRuleNodeStream(adaptor,"token EVENT");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            RewriteRuleSubtreeStream stream_modifiers = new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_magicEventCollectionType = new RewriteRuleSubtreeStream(adaptor,"rule magicEventCollectionType");

                ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3044:2: ( ^(e= EVENT ( attributes )? ( modifiers )? t= type i= identifier magicEventCollectionType[$t.tree.Token, $t.tree] ) -> ^( METHOD[$e.token, \"METHOD\"] ( attributes )? ( modifiers )? magicEventCollectionType identifier EXCEPTION[$i.tree.Token, \"Exception\"] ) | ^( METHOD ( attributes )? ( modifiers )? type identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? ( exception )* ) )
                int alt192 = 2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0 == EVENT) )
                {
                    alt192 = 1;
                }
                else if ( (LA192_0 == METHOD) )
                {
                    alt192 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d192s0 =
                        new NoViableAltException("", 192, 0, input);

                    throw nvae_d192s0;
                }
                switch (alt192) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3045:5: ^(e= EVENT ( attributes )? ( modifiers )? t= type i= identifier magicEventCollectionType[$t.tree.Token, $t.tree] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	e=(CommonTree)Match(input,EVENT,FOLLOW_EVENT_in_interface_member_declaration8239); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_EVENT.Add(e);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3045:15: ( attributes )?
                        	int alt184 = 2;
                        	int LA184_0 = input.LA(1);

                        	if ( (LA184_0 == ATTRIBUTE) )
                        	{
                        	    alt184 = 1;
                        	}
                        	switch (alt184) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3045:15: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_interface_member_declaration8241);
                        	        	attributes551 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_attributes.Add(attributes551.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3045:27: ( modifiers )?
                        	int alt185 = 2;
                        	int LA185_0 = input.LA(1);

                        	if ( (LA185_0 == FINAL || (LA185_0 >= PUBLIC && LA185_0 <= PRIVATE) || LA185_0 == STATIC || LA185_0 == 194 || LA185_0 == 197 || (LA185_0 >= 199 && LA185_0 <= 204)) )
                        	{
                        	    alt185 = 1;
                        	}
                        	switch (alt185) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3045:27: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_interface_member_declaration8244);
                        	        	modifiers552 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_modifiers.Add(modifiers552.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_interface_member_declaration8249);
                        	t = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_type.Add(t.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_interface_member_declaration8253);
                        	i = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_identifier.Add(i.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicEventCollectionType_in_interface_member_declaration8255);
                        	magicEventCollectionType553 = magicEventCollectionType(((t != null) ? ((CommonTree)t.Tree) : null).Token, ((t != null) ? ((CommonTree)t.Tree) : null));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicEventCollectionType.Add(magicEventCollectionType553.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   AddToImports("CS2JNet.JavaSupport.language.IEventCollection"); 
                        	}


                        	// AST REWRITE
                        	// elements:          identifier, magicEventCollectionType, modifiers, attributes
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3047:7: -> ^( METHOD[$e.token, \"METHOD\"] ( attributes )? ( modifiers )? magicEventCollectionType identifier EXCEPTION[$i.tree.Token, \"Exception\"] )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3047:12: ^( METHOD[$e.token, \"METHOD\"] ( attributes )? ( modifiers )? magicEventCollectionType identifier EXCEPTION[$i.tree.Token, \"Exception\"] )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, e.token, "METHOD"), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3047:41: ( attributes )?
                        	    if ( stream_attributes.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_attributes.NextTree());

                        	    }
                        	    stream_attributes.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3047:53: ( modifiers )?
                        	    if ( stream_modifiers.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_modifiers.NextTree());

                        	    }
                        	    stream_modifiers.Reset();
                        	    adaptor.AddChild(root_1, stream_magicEventCollectionType.NextTree());
                        	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(EXCEPTION, ((i != null) ? ((CommonTree)i.Tree) : null).Token, "Exception"));

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:7: ^( METHOD ( attributes )? ( modifiers )? type identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list[null,null] )? ( exception )* )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	METHOD554=(CommonTree)Match(input,METHOD,FOLLOW_METHOD_in_interface_member_declaration8303); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{METHOD554_tree = (CommonTree)adaptor.DupNode(METHOD554);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(METHOD554_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:16: ( attributes )?
                        	int alt186 = 2;
                        	int LA186_0 = input.LA(1);

                        	if ( (LA186_0 == ATTRIBUTE) )
                        	{
                        	    alt186 = 1;
                        	}
                        	switch (alt186) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:16: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_interface_member_declaration8305);
                        	        	attributes555 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, attributes555.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:28: ( modifiers )?
                        	int alt187 = 2;
                        	int LA187_0 = input.LA(1);

                        	if ( (LA187_0 == FINAL || (LA187_0 >= PUBLIC && LA187_0 <= PRIVATE) || LA187_0 == STATIC || LA187_0 == 194 || LA187_0 == 197 || (LA187_0 >= 199 && LA187_0 <= 204)) )
                        	{
                        	    alt187 = 1;
                        	}
                        	switch (alt187) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:28: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_interface_member_declaration8308);
                        	        	modifiers556 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, modifiers556.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_interface_member_declaration8311);
                        	type557 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, type557.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_interface_member_declaration8313);
                        	identifier558 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, identifier558.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:55: ( type_parameter_constraints_clauses )?
                        	int alt188 = 2;
                        	int LA188_0 = input.LA(1);

                        	if ( (LA188_0 == TYPE_PARAM_CONSTRAINT) )
                        	{
                        	    alt188 = 1;
                        	}
                        	switch (alt188) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:55: type_parameter_constraints_clauses
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration8315);
                        	        	type_parameter_constraints_clauses559 = type_parameter_constraints_clauses();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, type_parameter_constraints_clauses559.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:91: ( type_parameter_list )?
                        	int alt189 = 2;
                        	int LA189_0 = input.LA(1);

                        	if ( (LA189_0 == ATTRIBUTE || LA189_0 == IDENTIFIER || (LA189_0 >= ELIF && LA189_0 <= UNDEF) || LA189_0 == 195 || LA189_0 == 221 || (LA189_0 >= 224 && LA189_0 <= 239) || (LA189_0 >= 241 && LA189_0 <= 244) || (LA189_0 >= 247 && LA189_0 <= 250) || LA189_0 == 256 || (LA189_0 >= 263 && LA189_0 <= 264) || LA189_0 == 274 || LA189_0 == 277) )
                        	{
                        	    alt189 = 1;
                        	}
                        	switch (alt189) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:91: type_parameter_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_parameter_list_in_interface_member_declaration8318);
                        	        	type_parameter_list560 = type_parameter_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, type_parameter_list560.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:112: ( formal_parameter_list[null,null] )?
                        	int alt190 = 2;
                        	int LA190_0 = input.LA(1);

                        	if ( (LA190_0 == PARAMS) )
                        	{
                        	    alt190 = 1;
                        	}
                        	switch (alt190) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:112: formal_parameter_list[null,null]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_formal_parameter_list_in_interface_member_declaration8321);
                        	        	formal_parameter_list561 = formal_parameter_list(null, null);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, formal_parameter_list561.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:146: ( exception )*
                        	do 
                        	{
                        	    int alt191 = 2;
                        	    int LA191_0 = input.LA(1);

                        	    if ( (LA191_0 == EXCEPTION) )
                        	    {
                        	        alt191 = 1;
                        	    }


                        	    switch (alt191) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3048:146: exception
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_exception_in_interface_member_declaration8325);
                        			    	exception562 = exception();
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) 
                        			    	adaptor.AddChild(root_1, exception562.Tree);

                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    goto loop191;
                        	    }
                        	} while (true);

                        	loop191:
                        		;	// Stops C# compiler whining that label 'loop191' has no statements


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	if ( (state.backtracking==0) )
                        	{

                        	           ((identifier558 != null) ? ((CommonTree)identifier558.Tree) : null).Token.Text = rewriteMethodName(((identifier558 != null) ? identifier558.thetext : default(string)));
                        	        
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "interface_member_declaration"

        public class operator_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "operator_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3055:1: operator_declaration : operator_declarator operator_body ;
        public NetMaker.operator_declaration_return operator_declaration() // throws RecognitionException [1]
        {   
            NetMaker.operator_declaration_return retval = new NetMaker.operator_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.operator_declarator_return operator_declarator563 = default(NetMaker.operator_declarator_return);

            NetMaker.operator_body_return operator_body564 = default(NetMaker.operator_body_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3055:21: ( operator_declarator operator_body )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3056:2: operator_declarator operator_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_operator_declarator_in_operator_declaration8347);
                	operator_declarator563 = operator_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, operator_declarator563.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_operator_body_in_operator_declaration8351);
                	operator_body564 = operator_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, operator_body564.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "operator_declaration"

        public class operator_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3057:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) ;
        public NetMaker.operator_declarator_return operator_declarator() // throws RecognitionException [1]
        {   
            NetMaker.operator_declarator_return retval = new NetMaker.operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal565 = null;
            CommonTree set566 = null;
            CommonTree char_literal567 = null;
            CommonTree char_literal573 = null;
            CommonTree char_literal578 = null;
            NetMaker.type_return type568 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier569 = default(NetMaker.identifier_return);

            NetMaker.binary_operator_declarator_return binary_operator_declarator570 = default(NetMaker.binary_operator_declarator_return);

            NetMaker.unary_operator_declarator_return unary_operator_declarator571 = default(NetMaker.unary_operator_declarator_return);

            NetMaker.overloadable_unary_operator_return overloadable_unary_operator572 = default(NetMaker.overloadable_unary_operator_return);

            NetMaker.type_return type574 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier575 = default(NetMaker.identifier_return);

            NetMaker.unary_operator_declarator_return unary_operator_declarator576 = default(NetMaker.unary_operator_declarator_return);

            NetMaker.overloadable_binary_operator_return overloadable_binary_operator577 = default(NetMaker.overloadable_binary_operator_return);

            NetMaker.type_return type579 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier580 = default(NetMaker.identifier_return);

            NetMaker.binary_operator_declarator_return binary_operator_declarator581 = default(NetMaker.binary_operator_declarator_return);


            CommonTree string_literal565_tree=null;
            CommonTree set566_tree=null;
            CommonTree char_literal567_tree=null;
            CommonTree char_literal573_tree=null;
            CommonTree char_literal578_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3057:20: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3058:2: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal565=(CommonTree)Match(input,259,FOLLOW_259_in_operator_declarator8359); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal565_tree = (CommonTree)adaptor.DupNode(string_literal565);

                		adaptor.AddChild(root_0, string_literal565_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3059:2: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
                	int alt194 = 3;
                	switch ( input.LA(1) ) 
                	{
                	case PLUS:
                	case MINUS:
                		{
                	    alt194 = 1;
                	    }
                	    break;
                	case MONONOT:
                	case MONOTWIDDLE:
                	case TRUE:
                	case FALSE:
                	case 209:
                	case 210:
                		{
                	    alt194 = 2;
                	    }
                	    break;
                	case BIT_OR:
                	case BIT_XOR:
                	case BIT_AND:
                	case NOT_EQUAL:
                	case EQUAL:
                	case LTHAN:
                	case LTE:
                	case GTE:
                	case LEFT_SHIFT:
                	case DIV:
                	case MOD:
                	case STAR:
                	case GT:
                		{
                	    alt194 = 3;
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d194s0 =
                		        new NoViableAltException("", 194, 0, input);

                		    throw nvae_d194s0;
                	}

                	switch (alt194) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3059:3: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	set566 = (CommonTree)input.LT(1);
                	        	if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) 
                	        	{
                	        	    input.Consume();

                	        	    if ( (state.backtracking==0) ) {
                	        	    set566_tree = (CommonTree)adaptor.DupNode(set566);

                	        	    adaptor.AddChild(root_0, set566_tree);
                	        	    }
                	        	    state.errorRecovery = false;state.failed = false;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	        	    throw mse;
                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal567=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator8374); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal567_tree = (CommonTree)adaptor.DupNode(char_literal567);

                	        		adaptor.AddChild(root_0, char_literal567_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_operator_declarator8378);
                	        	type568 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type568.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_operator_declarator8382);
                	        	identifier569 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier569.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3059:43: ( binary_operator_declarator | unary_operator_declarator )
                	        	int alt193 = 2;
                	        	int LA193_0 = input.LA(1);

                	        	if ( (LA193_0 == COMMA) )
                	        	{
                	        	    alt193 = 1;
                	        	}
                	        	else if ( (LA193_0 == RPAREN) )
                	        	{
                	        	    alt193 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d193s0 =
                	        	        new NoViableAltException("", 193, 0, input);

                	        	    throw nvae_d193s0;
                	        	}
                	        	switch (alt193) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3059:44: binary_operator_declarator
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator8387);
                	        	        	binary_operator_declarator570 = binary_operator_declarator();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, binary_operator_declarator570.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3059:73: unary_operator_declarator
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator8391);
                	        	        	unary_operator_declarator571 = unary_operator_declarator();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, unary_operator_declarator571.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3060:5: overloadable_unary_operator '(' type identifier unary_operator_declarator
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_overloadable_unary_operator_in_operator_declarator8398);
                	        	overloadable_unary_operator572 = overloadable_unary_operator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, overloadable_unary_operator572.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal573=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator8402); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal573_tree = (CommonTree)adaptor.DupNode(char_literal573);

                	        		adaptor.AddChild(root_0, char_literal573_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_operator_declarator8406);
                	        	type574 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type574.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_operator_declarator8408);
                	        	identifier575 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier575.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator8412);
                	        	unary_operator_declarator576 = unary_operator_declarator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, unary_operator_declarator576.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3061:5: overloadable_binary_operator '(' type identifier binary_operator_declarator
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_overloadable_binary_operator_in_operator_declarator8418);
                	        	overloadable_binary_operator577 = overloadable_binary_operator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, overloadable_binary_operator577.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal578=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator8422); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal578_tree = (CommonTree)adaptor.DupNode(char_literal578);

                	        		adaptor.AddChild(root_0, char_literal578_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_operator_declarator8426);
                	        	type579 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type579.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_operator_declarator8428);
                	        	identifier580 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier580.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator8432);
                	        	binary_operator_declarator581 = binary_operator_declarator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, binary_operator_declarator581.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "operator_declarator"

        public class unary_operator_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unary_operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3062:1: unary_operator_declarator : ')' ;
        public NetMaker.unary_operator_declarator_return unary_operator_declarator() // throws RecognitionException [1]
        {   
            NetMaker.unary_operator_declarator_return retval = new NetMaker.unary_operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal582 = null;

            CommonTree char_literal582_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3062:26: ( ')' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3063:5: ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal582=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_unary_operator_declarator8444); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal582_tree = (CommonTree)adaptor.DupNode(char_literal582);

                		adaptor.AddChild(root_0, char_literal582_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unary_operator_declarator"

        public class overloadable_unary_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "overloadable_unary_operator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3064:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
        public NetMaker.overloadable_unary_operator_return overloadable_unary_operator() // throws RecognitionException [1]
        {   
            NetMaker.overloadable_unary_operator_return retval = new NetMaker.overloadable_unary_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set583 = null;

            CommonTree set583_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3064:28: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set583 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= MONONOT && input.LA(1) <= MONOTWIDDLE) || (input.LA(1) >= TRUE && input.LA(1) <= FALSE) || (input.LA(1) >= 209 && input.LA(1) <= 210) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set583_tree = (CommonTree)adaptor.DupNode(set583);

                	    adaptor.AddChild(root_0, set583_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "overloadable_unary_operator"

        public class binary_operator_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "binary_operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3066:1: binary_operator_declarator : ',' type identifier ')' ;
        public NetMaker.binary_operator_declarator_return binary_operator_declarator() // throws RecognitionException [1]
        {   
            NetMaker.binary_operator_declarator_return retval = new NetMaker.binary_operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal584 = null;
            CommonTree char_literal587 = null;
            NetMaker.type_return type585 = default(NetMaker.type_return);

            NetMaker.identifier_return identifier586 = default(NetMaker.identifier_return);


            CommonTree char_literal584_tree=null;
            CommonTree char_literal587_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3066:27: ( ',' type identifier ')' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3067:2: ',' type identifier ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal584=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_binary_operator_declarator8487); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal584_tree = (CommonTree)adaptor.DupNode(char_literal584);

                		adaptor.AddChild(root_0, char_literal584_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_binary_operator_declarator8491);
                	type585 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type585.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_binary_operator_declarator8495);
                	identifier586 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier586.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal587=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_binary_operator_declarator8499); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal587_tree = (CommonTree)adaptor.DupNode(char_literal587);

                		adaptor.AddChild(root_0, char_literal587_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "binary_operator_declarator"

        public class overloadable_binary_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "overloadable_binary_operator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3069:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
        public NetMaker.overloadable_binary_operator_return overloadable_binary_operator() // throws RecognitionException [1]
        {   
            NetMaker.overloadable_binary_operator_return retval = new NetMaker.overloadable_binary_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal588 = null;
            CommonTree char_literal589 = null;
            CommonTree char_literal590 = null;
            CommonTree char_literal591 = null;
            CommonTree char_literal592 = null;
            CommonTree char_literal593 = null;
            CommonTree string_literal594 = null;
            CommonTree char_literal595 = null;
            CommonTree char_literal596 = null;
            CommonTree string_literal597 = null;
            CommonTree string_literal598 = null;
            CommonTree char_literal599 = null;
            CommonTree char_literal600 = null;
            CommonTree string_literal601 = null;
            CommonTree string_literal602 = null;

            CommonTree char_literal588_tree=null;
            CommonTree char_literal589_tree=null;
            CommonTree char_literal590_tree=null;
            CommonTree char_literal591_tree=null;
            CommonTree char_literal592_tree=null;
            CommonTree char_literal593_tree=null;
            CommonTree string_literal594_tree=null;
            CommonTree char_literal595_tree=null;
            CommonTree char_literal596_tree=null;
            CommonTree string_literal597_tree=null;
            CommonTree string_literal598_tree=null;
            CommonTree char_literal599_tree=null;
            CommonTree char_literal600_tree=null;
            CommonTree string_literal601_tree=null;
            CommonTree string_literal602_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3069:29: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
                int alt195 = 14;
                alt195 = dfa195.Predict(input);
                switch (alt195) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:19: '*'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal588=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_overloadable_binary_operator8510); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal588_tree = (CommonTree)adaptor.DupNode(char_literal588);

                        		adaptor.AddChild(root_0, char_literal588_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:25: '/'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal589=(CommonTree)Match(input,DIV,FOLLOW_DIV_in_overloadable_binary_operator8514); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal589_tree = (CommonTree)adaptor.DupNode(char_literal589);

                        		adaptor.AddChild(root_0, char_literal589_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:31: '%'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal590=(CommonTree)Match(input,MOD,FOLLOW_MOD_in_overloadable_binary_operator8518); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal590_tree = (CommonTree)adaptor.DupNode(char_literal590);

                        		adaptor.AddChild(root_0, char_literal590_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:37: '&'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal591=(CommonTree)Match(input,BIT_AND,FOLLOW_BIT_AND_in_overloadable_binary_operator8522); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal591_tree = (CommonTree)adaptor.DupNode(char_literal591);

                        		adaptor.AddChild(root_0, char_literal591_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:43: '|'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal592=(CommonTree)Match(input,BIT_OR,FOLLOW_BIT_OR_in_overloadable_binary_operator8526); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal592_tree = (CommonTree)adaptor.DupNode(char_literal592);

                        		adaptor.AddChild(root_0, char_literal592_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:49: '^'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal593=(CommonTree)Match(input,BIT_XOR,FOLLOW_BIT_XOR_in_overloadable_binary_operator8530); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal593_tree = (CommonTree)adaptor.DupNode(char_literal593);

                        		adaptor.AddChild(root_0, char_literal593_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:55: '<<'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal594=(CommonTree)Match(input,LEFT_SHIFT,FOLLOW_LEFT_SHIFT_in_overloadable_binary_operator8534); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal594_tree = (CommonTree)adaptor.DupNode(string_literal594);

                        		adaptor.AddChild(root_0, string_literal594_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:62: '>' '>'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal595=(CommonTree)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8538); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal595_tree = (CommonTree)adaptor.DupNode(char_literal595);

                        		adaptor.AddChild(root_0, char_literal595_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	char_literal596=(CommonTree)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8540); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal596_tree = (CommonTree)adaptor.DupNode(char_literal596);

                        		adaptor.AddChild(root_0, char_literal596_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:72: '=='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal597=(CommonTree)Match(input,EQUAL,FOLLOW_EQUAL_in_overloadable_binary_operator8544); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal597_tree = (CommonTree)adaptor.DupNode(string_literal597);

                        		adaptor.AddChild(root_0, string_literal597_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:79: '!='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal598=(CommonTree)Match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_overloadable_binary_operator8548); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal598_tree = (CommonTree)adaptor.DupNode(string_literal598);

                        		adaptor.AddChild(root_0, string_literal598_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:86: '>'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal599=(CommonTree)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8552); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal599_tree = (CommonTree)adaptor.DupNode(char_literal599);

                        		adaptor.AddChild(root_0, char_literal599_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:92: '<'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal600=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_overloadable_binary_operator8556); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal600_tree = (CommonTree)adaptor.DupNode(char_literal600);

                        		adaptor.AddChild(root_0, char_literal600_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:98: '>='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal601=(CommonTree)Match(input,GTE,FOLLOW_GTE_in_overloadable_binary_operator8560); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal601_tree = (CommonTree)adaptor.DupNode(string_literal601);

                        		adaptor.AddChild(root_0, string_literal601_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3070:105: '<='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal602=(CommonTree)Match(input,LTE,FOLLOW_LTE_in_overloadable_binary_operator8564); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal602_tree = (CommonTree)adaptor.DupNode(string_literal602);

                        		adaptor.AddChild(root_0, string_literal602_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "overloadable_binary_operator"

        public class conversion_operator_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "conversion_operator_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3073:1: conversion_operator_declaration[CommonTree atts, CommonTree mods] : h= conversion_operator_declarator b= operator_body meth= magicCastOperator[$mods, methodName, $h.tree, $b.tree] -> $meth;
        public NetMaker.conversion_operator_declaration_return conversion_operator_declaration(CommonTree atts, CommonTree mods) // throws RecognitionException [1]
        {   
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.conversion_operator_declaration_return retval = new NetMaker.conversion_operator_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.conversion_operator_declarator_return h = default(NetMaker.conversion_operator_declarator_return);

            NetMaker.operator_body_return b = default(NetMaker.operator_body_return);

            NetMaker.magicCastOperator_return meth = default(NetMaker.magicCastOperator_return);


            RewriteRuleSubtreeStream stream_conversion_operator_declarator = new RewriteRuleSubtreeStream(adaptor,"rule conversion_operator_declarator");
            RewriteRuleSubtreeStream stream_operator_body = new RewriteRuleSubtreeStream(adaptor,"rule operator_body");
            RewriteRuleSubtreeStream stream_magicCastOperator = new RewriteRuleSubtreeStream(adaptor,"rule magicCastOperator");

                ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();
                string methodName = "__cast";

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3078:2: (h= conversion_operator_declarator b= operator_body meth= magicCastOperator[$mods, methodName, $h.tree, $b.tree] -> $meth)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3079:2: h= conversion_operator_declarator b= operator_body meth= magicCastOperator[$mods, methodName, $h.tree, $b.tree]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration8588);
                	h = conversion_operator_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_conversion_operator_declarator.Add(h.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   
                	              ((SymTab_scope)SymTab_stack.Peek()).symtab[((h != null) ? h.var : default(string))] = ((h != null) ? h.varTy : default(TypeRepTemplate)); 
                	              // if varTy is same as this class then need to include toType in methodname
                	              if (((NSContext_scope)NSContext_stack.Peek()).currentNS == ((h != null) ? h.varTy : default(TypeRepTemplate)).TypeName) 
                	              {
                	                  methodName += ((h != null) ? h.toTy : default(TypeRepTemplate)).Java;
                	              }
                	          
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_operator_body_in_conversion_operator_declaration8609);
                	b = operator_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_operator_body.Add(b.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicCastOperator_in_conversion_operator_declaration8613);
                	meth = magicCastOperator(mods, methodName, ((h != null) ? ((CommonTree)h.Tree) : null), ((b != null) ? ((CommonTree)b.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicCastOperator.Add(meth.Tree);


                	// AST REWRITE
                	// elements:          meth
                	// token labels:      
                	// rule labels:       retval, meth
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_meth = new RewriteRuleSubtreeStream(adaptor, "rule meth", meth!=null ? meth.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3088:81: -> $meth
                	{
                	    adaptor.AddChild(root_0, stream_meth.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "conversion_operator_declaration"

        public class conversion_operator_declarator_return : TreeRuleReturnScope
        {
            public string var;
            public TypeRepTemplate varTy;
            public TypeRepTemplate toTy;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "conversion_operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3089:1: conversion_operator_declarator returns [ string var, TypeRepTemplate varTy, TypeRepTemplate toTy ] : ( 'implicit' | 'explicit' ) o= 'operator' t= type '(' f= type n= identifier ')' -> $o $t $f $n;
        public NetMaker.conversion_operator_declarator_return conversion_operator_declarator() // throws RecognitionException [1]
        {   
            NetMaker.conversion_operator_declarator_return retval = new NetMaker.conversion_operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o = null;
            CommonTree string_literal603 = null;
            CommonTree string_literal604 = null;
            CommonTree char_literal605 = null;
            CommonTree char_literal606 = null;
            NetMaker.type_return t = default(NetMaker.type_return);

            NetMaker.type_return f = default(NetMaker.type_return);

            NetMaker.identifier_return n = default(NetMaker.identifier_return);


            CommonTree o_tree=null;
            CommonTree string_literal603_tree=null;
            CommonTree string_literal604_tree=null;
            CommonTree char_literal605_tree=null;
            CommonTree char_literal606_tree=null;
            RewriteRuleNodeStream stream_260 = new RewriteRuleNodeStream(adaptor,"token 260");
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_261 = new RewriteRuleNodeStream(adaptor,"token 261");
            RewriteRuleNodeStream stream_259 = new RewriteRuleNodeStream(adaptor,"token 259");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3089:100: ( ( 'implicit' | 'explicit' ) o= 'operator' t= type '(' f= type n= identifier ')' -> $o $t $f $n)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3090:2: ( 'implicit' | 'explicit' ) o= 'operator' t= type '(' f= type n= identifier ')'
                {
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3090:2: ( 'implicit' | 'explicit' )
                	int alt196 = 2;
                	int LA196_0 = input.LA(1);

                	if ( (LA196_0 == 260) )
                	{
                	    alt196 = 1;
                	}
                	else if ( (LA196_0 == 261) )
                	{
                	    alt196 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d196s0 =
                	        new NoViableAltException("", 196, 0, input);

                	    throw nvae_d196s0;
                	}
                	switch (alt196) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3090:3: 'implicit'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal603=(CommonTree)Match(input,260,FOLLOW_260_in_conversion_operator_declarator8632); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_260.Add(string_literal603);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3090:16: 'explicit'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal604=(CommonTree)Match(input,261,FOLLOW_261_in_conversion_operator_declarator8636); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_261.Add(string_literal604);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	o=(CommonTree)Match(input,259,FOLLOW_259_in_conversion_operator_declarator8642); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_259.Add(o);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_conversion_operator_declarator8648);
                	t = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(t.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal605=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_conversion_operator_declarator8652); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal605);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_conversion_operator_declarator8658);
                	f = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(f.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_conversion_operator_declarator8664);
                	n = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(n.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal606=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_conversion_operator_declarator8668); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal606);

                	if ( (state.backtracking==0) )
                	{
                	   retval.var =  ((n != null) ? n.thetext : default(string)); retval.varTy =  ((f != null) ? f.dotNetType : default(TypeRepTemplate)); retval.toTy =  ((t != null) ? t.dotNetType : default(TypeRepTemplate)); 
                	}


                	// AST REWRITE
                	// elements:          n, t, f, o
                	// token labels:      o
                	// rule labels:       f, retval, t, n
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_o = new RewriteRuleNodeStream(adaptor, "token o", o);
                	RewriteRuleSubtreeStream stream_f = new RewriteRuleSubtreeStream(adaptor, "rule f", f!=null ? f.Tree : null);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_t = new RewriteRuleSubtreeStream(adaptor, "rule t", t!=null ? t.Tree : null);
                	RewriteRuleSubtreeStream stream_n = new RewriteRuleSubtreeStream(adaptor, "rule n", n!=null ? n.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3092:7: -> $o $t $f $n
                	{
                	    adaptor.AddChild(root_0, stream_o.NextNode());
                	    adaptor.AddChild(root_0, stream_t.NextTree());
                	    adaptor.AddChild(root_0, stream_f.NextTree());
                	    adaptor.AddChild(root_0, stream_n.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "conversion_operator_declarator"

        public class operator_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "operator_body"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3093:1: operator_body : block ;
        public NetMaker.operator_body_return operator_body() // throws RecognitionException [1]
        {   
            NetMaker.operator_body_return retval = new NetMaker.operator_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.block_return block607 = default(NetMaker.block_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3093:14: ( block )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3094:2: block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_operator_body8709);
                	block607 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block607.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "operator_body"

        public class invocation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "invocation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3097:1: invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
        public NetMaker.invocation_expression_return invocation_expression() // throws RecognitionException [1]
        {   
            NetMaker.invocation_expression_return retval = new NetMaker.invocation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.invocation_start_return invocation_start608 = default(NetMaker.invocation_start_return);

            NetMaker.arguments_return arguments609 = default(NetMaker.arguments_return);

            NetMaker.invocation_part_return invocation_part610 = default(NetMaker.invocation_part_return);

            NetMaker.invocation_part_return invocation_part611 = default(NetMaker.invocation_part_return);

            NetMaker.arguments_return arguments612 = default(NetMaker.arguments_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3097:22: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3098:2: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_invocation_start_in_invocation_expression8719);
                	invocation_start608 = invocation_start();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, invocation_start608.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3098:21: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
                	do 
                	{
                	    int alt197 = 3;
                	    int LA197_0 = input.LA(1);

                	    if ( (LA197_0 == LPAREN) )
                	    {
                	        int LA197_1 = input.LA(2);

                	        if ( (synpred15_NetMaker()) )
                	        {
                	            alt197 = 1;
                	        }


                	    }
                	    else if ( (LA197_0 == OPEN_BRACKET || (LA197_0 >= DOT && LA197_0 <= PTR)) )
                	    {
                	        alt197 = 2;
                	    }


                	    switch (alt197) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3098:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3098:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
                			    	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3098:23: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
                			    	{
                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_arguments_in_invocation_expression8741);
                			    		arguments609 = arguments();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) 
                			    		adaptor.AddChild(root_0, arguments609.Tree);
                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_invocation_part_in_invocation_expression8745);
                			    		invocation_part610 = invocation_part();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) 
                			    		adaptor.AddChild(root_0, invocation_part610.Tree);

                			    		if ( (state.backtracking==0) ) {
                			    		}
                			    	}


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;
                			case 2 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3099:9: invocation_part
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_invocation_part_in_invocation_expression8756);
                			    	invocation_part611 = invocation_part();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, invocation_part611.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop197;
                	    }
                	} while (true);

                	loop197:
                		;	// Stops C# compiler whining that label 'loop197' has no statements

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_arguments_in_invocation_expression8762);
                	arguments612 = arguments();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, arguments612.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "invocation_expression"

        public class invocation_start_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "invocation_start"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3100:1: invocation_start returns [TypeRepTemplate dotNetType] : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | 'this' | SUPER | identifier ( '::' identifier )? | typeof_expression );
        public NetMaker.invocation_start_return invocation_start() // throws RecognitionException [1]
        {   
            NetMaker.invocation_start_return retval = new NetMaker.invocation_start_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal616 = null;
            CommonTree SUPER617 = null;
            CommonTree string_literal619 = null;
            NetMaker.predefined_type_return predefined_type613 = default(NetMaker.predefined_type_return);

            NetMaker.identifier_return identifier614 = default(NetMaker.identifier_return);

            NetMaker.generic_argument_list_return generic_argument_list615 = default(NetMaker.generic_argument_list_return);

            NetMaker.identifier_return identifier618 = default(NetMaker.identifier_return);

            NetMaker.identifier_return identifier620 = default(NetMaker.identifier_return);

            NetMaker.typeof_expression_return typeof_expression621 = default(NetMaker.typeof_expression_return);


            CommonTree string_literal616_tree=null;
            CommonTree SUPER617_tree=null;
            CommonTree string_literal619_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3100:54: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | 'this' | SUPER | identifier ( '::' identifier )? | typeof_expression )
                int alt199 = 6;
                switch ( input.LA(1) ) 
                {
                case OBJECT:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case 251:
                case 252:
                case 253:
                case 254:
                case 275:
                case 276:
                	{
                    alt199 = 1;
                    }
                    break;
                case IDENTIFIER:
                	{
                    int LA199_2 = input.LA(2);

                    if ( (LA199_2 == OPEN_BRACKET || LA199_2 == LPAREN || (LA199_2 >= DOT && LA199_2 <= PTR) || LA199_2 == 208) )
                    {
                        alt199 = 5;
                    }
                    else if ( (LA199_2 == LTHAN) && (synpred16_NetMaker()) )
                    {
                        alt199 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d199s2 =
                            new NoViableAltException("", 199, 2, input);

                        throw nvae_d199s2;
                    }
                    }
                    break;
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    int LA199_3 = input.LA(2);

                    if ( (LA199_3 == OPEN_BRACKET || LA199_3 == LPAREN || (LA199_3 >= DOT && LA199_3 <= PTR) || LA199_3 == 208) )
                    {
                        alt199 = 5;
                    }
                    else if ( (LA199_3 == LTHAN) && (synpred16_NetMaker()) )
                    {
                        alt199 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d199s3 =
                            new NoViableAltException("", 199, 3, input);

                        throw nvae_d199s3;
                    }
                    }
                    break;
                case THIS:
                	{
                    alt199 = 3;
                    }
                    break;
                case SUPER:
                	{
                    alt199 = 4;
                    }
                    break;
                case 219:
                	{
                    alt199 = 6;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d199s0 =
                	        new NoViableAltException("", 199, 0, input);

                	    throw nvae_d199s0;
                }

                switch (alt199) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3101:2: predefined_type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_predefined_type_in_invocation_start8774);
                        	predefined_type613 = predefined_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, predefined_type613.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((predefined_type613 != null) ? predefined_type613.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3102:4: ( identifier generic_argument_list )=> identifier generic_argument_list
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_invocation_start8792);
                        	identifier614 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, identifier614.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_generic_argument_list_in_invocation_start8796);
                        	generic_argument_list615 = generic_argument_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, generic_argument_list615.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3103:4: 'this'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal616=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_invocation_start8801); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal616_tree = (CommonTree)adaptor.DupNode(string_literal616);

                        		adaptor.AddChild(root_0, string_literal616_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3104:4: SUPER
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	SUPER617=(CommonTree)Match(input,SUPER,FOLLOW_SUPER_in_invocation_start8807); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{SUPER617_tree = (CommonTree)adaptor.DupNode(SUPER617);

                        		adaptor.AddChild(root_0, SUPER617_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3105:4: identifier ( '::' identifier )?
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_invocation_start8812);
                        	identifier618 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, identifier618.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3105:17: ( '::' identifier )?
                        	int alt198 = 2;
                        	int LA198_0 = input.LA(1);

                        	if ( (LA198_0 == 208) )
                        	{
                        	    alt198 = 1;
                        	}
                        	switch (alt198) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3105:18: '::' identifier
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	string_literal619=(CommonTree)Match(input,208,FOLLOW_208_in_invocation_start8817); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{string_literal619_tree = (CommonTree)adaptor.DupNode(string_literal619);

                        	        		adaptor.AddChild(root_0, string_literal619_tree);
                        	        	}
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_identifier_in_invocation_start8821);
                        	        	identifier620 = identifier();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, identifier620.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3106:4: typeof_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_typeof_expression_in_invocation_start8828);
                        	typeof_expression621 = typeof_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, typeof_expression621.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "invocation_start"

        public class invocation_part_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "invocation_part"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3108:1: invocation_part : ( access_identifier | brackets );
        public NetMaker.invocation_part_return invocation_part() // throws RecognitionException [1]
        {   
            NetMaker.invocation_part_return retval = new NetMaker.invocation_part_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.access_identifier_return access_identifier622 = default(NetMaker.access_identifier_return);

            NetMaker.brackets_return brackets623 = default(NetMaker.brackets_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3108:16: ( access_identifier | brackets )
                int alt200 = 2;
                int LA200_0 = input.LA(1);

                if ( ((LA200_0 >= DOT && LA200_0 <= PTR)) )
                {
                    alt200 = 1;
                }
                else if ( (LA200_0 == OPEN_BRACKET) )
                {
                    alt200 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d200s0 =
                        new NoViableAltException("", 200, 0, input);

                    throw nvae_d200s0;
                }
                switch (alt200) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3109:3: access_identifier
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_access_identifier_in_invocation_part8851);
                        	access_identifier622 = access_identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, access_identifier622.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3110:4: brackets
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_brackets_in_invocation_part8856);
                        	brackets623 = brackets();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, brackets623.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "invocation_part"

        protected class statement_scope 
        {
            protected internal CommonTree preStatements;
            protected internal CommonTree postStatements;
        }
        protected Stack statement_stack = new Stack();

        public class statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3116:1: statement[bool isStatementListCtxt] : ( ( declaration_statement )=> declaration_statement | statement_plus[isStatementListCtxt] ) -> {isStatementListCtxt || !hasPreOrPost }? -> OPEN_BRACE[statTree.Token, \"{\"] CLOSE_BRACE[statTree.Token, \"}\"] ;
        public NetMaker.statement_return statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            statement_stack.Push(new statement_scope());
            NetMaker.statement_return retval = new NetMaker.statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.declaration_statement_return declaration_statement624 = default(NetMaker.declaration_statement_return);

            NetMaker.statement_plus_return statement_plus625 = default(NetMaker.statement_plus_return);


            RewriteRuleSubtreeStream stream_declaration_statement = new RewriteRuleSubtreeStream(adaptor,"rule declaration_statement");
            RewriteRuleSubtreeStream stream_statement_plus = new RewriteRuleSubtreeStream(adaptor,"rule statement_plus");

               ((statement_scope)statement_stack.Peek()).preStatements =  (CommonTree)adaptor.Nil;
               ((statement_scope)statement_stack.Peek()).postStatements =  (CommonTree)adaptor.Nil;
               bool hasPreOrPost = false;
               CommonTree statTree = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3126:2: ( ( ( declaration_statement )=> declaration_statement | statement_plus[isStatementListCtxt] ) -> {isStatementListCtxt || !hasPreOrPost }? -> OPEN_BRACE[statTree.Token, \"{\"] CLOSE_BRACE[statTree.Token, \"}\"] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3127:7: ( ( declaration_statement )=> declaration_statement | statement_plus[isStatementListCtxt] )
                {
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3127:7: ( ( declaration_statement )=> declaration_statement | statement_plus[isStatementListCtxt] )
                	int alt201 = 2;
                	int LA201_0 = input.LA(1);

                	if ( (LA201_0 == TYPE_VAR) && (synpred17_NetMaker()) )
                	{
                	    alt201 = 1;
                	}
                	else if ( (LA201_0 == TYPE_DYNAMIC) && (synpred17_NetMaker()) )
                	{
                	    alt201 = 1;
                	}
                	else if ( (LA201_0 == TYPE) && (synpred17_NetMaker()) )
                	{
                	    alt201 = 1;
                	}
                	else if ( (LA201_0 == 205) && (synpred17_NetMaker()) )
                	{
                	    alt201 = 1;
                	}
                	else if ( ((LA201_0 >= PARAMS && LA201_0 <= PARAMS_TYPELESS) || (LA201_0 >= YIELD_RETURN && LA201_0 <= UNCHECKED) || (LA201_0 >= MONOPLUS && LA201_0 <= APPLY) || (LA201_0 >= NEW && LA201_0 <= NEW_ARRAY) || LA201_0 == NEW_ANON_OBJECT || (LA201_0 >= RETURN && LA201_0 <= TRY) || LA201_0 == THROW || (LA201_0 >= BREAK && LA201_0 <= FOREACH) || LA201_0 == OPEN_BRACE || (LA201_0 >= NULL_COALESCE && LA201_0 <= IF) || (LA201_0 >= COND_EXPR && LA201_0 <= LEFT_SHIFT) || (LA201_0 >= SUPER && LA201_0 <= LAMBDA) || LA201_0 == CAST_EXPR || LA201_0 == SYNCHRONIZED || (LA201_0 >= BOOL && LA201_0 <= GT) || (LA201_0 >= ELIF && LA201_0 <= SEMI) || LA201_0 == 195 || LA201_0 == 198 || LA201_0 == 208 || (LA201_0 >= 214 && LA201_0 <= 219) || LA201_0 == 221 || (LA201_0 >= 224 && LA201_0 <= 239) || (LA201_0 >= 241 && LA201_0 <= 244) || (LA201_0 >= 247 && LA201_0 <= 254) || LA201_0 == 256 || (LA201_0 >= 262 && LA201_0 <= 264) || LA201_0 == 266 || (LA201_0 >= 268 && LA201_0 <= 272) || (LA201_0 >= 274 && LA201_0 <= 277)) )
                	{
                	    alt201 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d201s0 =
                	        new NoViableAltException("", 201, 0, input);

                	    throw nvae_d201s0;
                	}
                	switch (alt201) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3127:8: ( declaration_statement )=> declaration_statement
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_declaration_statement_in_statement8891);
                	        	declaration_statement624 = declaration_statement();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_declaration_statement.Add(declaration_statement624.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   statTree = dupTree(((declaration_statement624 != null) ? ((CommonTree)declaration_statement624.Tree) : null)); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3128:11: statement_plus[isStatementListCtxt]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_statement_plus_in_statement8905);
                	        	statement_plus625 = statement_plus(isStatementListCtxt);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_statement_plus.Add(statement_plus625.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   statTree = dupTree(((statement_plus625 != null) ? ((CommonTree)statement_plus625.Tree) : null)); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   hasPreOrPost = adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).preStatements) > 0 || adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).postStatements) > 0; 
                	}


                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3130:11: -> {isStatementListCtxt || !hasPreOrPost }?
                	if (isStatementListCtxt || !hasPreOrPost )
                	{
                	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                	    adaptor.AddChild(root_0,  statTree );
                	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );

                	}
                	else // 3131:11: -> OPEN_BRACE[statTree.Token, \"{\"] CLOSE_BRACE[statTree.Token, \"}\"]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, statTree.Token, "{"));
                	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                	    adaptor.AddChild(root_0,  statTree );
                	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, statTree.Token, "}"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                statement_stack.Pop();
            }
            return retval;
        }
        // $ANTLR end "statement"

        public class statement_plus_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement_plus"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3133:1: statement_plus[bool isStatementListCtxt] : ( labeled_statement[isStatementListCtxt] | embedded_statement[isStatementListCtxt] );
        public NetMaker.statement_plus_return statement_plus(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            NetMaker.statement_plus_return retval = new NetMaker.statement_plus_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.labeled_statement_return labeled_statement626 = default(NetMaker.labeled_statement_return);

            NetMaker.embedded_statement_return embedded_statement627 = default(NetMaker.embedded_statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3133:41: ( labeled_statement[isStatementListCtxt] | embedded_statement[isStatementListCtxt] )
                int alt202 = 2;
                switch ( input.LA(1) ) 
                {
                case IDENTIFIER:
                	{
                    int LA202_1 = input.LA(2);

                    if ( ((LA202_1 >= ASSIGN && LA202_1 <= RIGHT_SHIFT_ASSIGN) || LA202_1 == LTHAN || LA202_1 == SEMI) )
                    {
                        alt202 = 2;
                    }
                    else if ( (LA202_1 == 211) )
                    {
                        alt202 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d202s1 =
                            new NoViableAltException("", 202, 1, input);

                        throw nvae_d202s1;
                    }
                    }
                    break;
                case 225:
                	{
                    int LA202_2 = input.LA(2);

                    if ( ((LA202_2 >= ASSIGN && LA202_2 <= RIGHT_SHIFT_ASSIGN) || LA202_2 == LTHAN || LA202_2 == TYPE || LA202_2 == IDENTIFIER || (LA202_2 >= ELIF && LA202_2 <= SEMI) || LA202_2 == 195 || LA202_2 == 221 || (LA202_2 >= 224 && LA202_2 <= 239) || (LA202_2 >= 241 && LA202_2 <= 244) || (LA202_2 >= 247 && LA202_2 <= 250) || LA202_2 == 256 || (LA202_2 >= 263 && LA202_2 <= 264) || LA202_2 == 274 || LA202_2 == 277) )
                    {
                        alt202 = 2;
                    }
                    else if ( (LA202_2 == 211) )
                    {
                        alt202 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d202s2 =
                            new NoViableAltException("", 202, 2, input);

                        throw nvae_d202s2;
                    }
                    }
                    break;
                case PARAMS:
                case PARAMS_TYPELESS:
                case YIELD_RETURN:
                case YIELD_BREAK:
                case UNCHECKED:
                case MONOPLUS:
                case MONOMINUS:
                case MONONOT:
                case MONOTWIDDLE:
                case MONOSTAR:
                case ADDRESSOF:
                case PREINC:
                case PREDEC:
                case POSTINC:
                case POSTDEC:
                case PARENS:
                case INDEX:
                case APPLY:
                case NEW:
                case NEW_ARRAY:
                case NEW_ANON_OBJECT:
                case RETURN:
                case TRY:
                case THROW:
                case BREAK:
                case OBJECT:
                case THIS:
                case FOREACH:
                case OPEN_BRACE:
                case NULL_COALESCE:
                case IF:
                case COND_EXPR:
                case RIGHT_SHIFT:
                case INSTANCEOF:
                case LOG_OR:
                case LOG_AND:
                case BIT_OR:
                case BIT_XOR:
                case BIT_AND:
                case NOT_EQUAL:
                case EQUAL:
                case LTHAN:
                case LTE:
                case GTE:
                case LEFT_SHIFT:
                case SUPER:
                case LONGNUMBER:
                case PLUS:
                case MINUS:
                case DIV:
                case MOD:
                case STAR:
                case LAMBDA:
                case CAST_EXPR:
                case SYNCHRONIZED:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case DOT:
                case PTR:
                case GT:
                case SEMI:
                case 198:
                case 208:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 251:
                case 252:
                case 253:
                case 254:
                case 262:
                case 266:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 275:
                case 276:
                	{
                    alt202 = 2;
                    }
                    break;
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    int LA202_4 = input.LA(2);

                    if ( ((LA202_4 >= ASSIGN && LA202_4 <= RIGHT_SHIFT_ASSIGN) || LA202_4 == LTHAN || LA202_4 == SEMI) )
                    {
                        alt202 = 2;
                    }
                    else if ( (LA202_4 == 211) )
                    {
                        alt202 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d202s4 =
                            new NoViableAltException("", 202, 4, input);

                        throw nvae_d202s4;
                    }
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d202s0 =
                	        new NoViableAltException("", 202, 0, input);

                	    throw nvae_d202s0;
                }

                switch (alt202) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3134:5: labeled_statement[isStatementListCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_labeled_statement_in_statement_plus8987);
                        	labeled_statement626 = labeled_statement(isStatementListCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, labeled_statement626.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3135:7: embedded_statement[isStatementListCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_embedded_statement_in_statement_plus8997);
                        	embedded_statement627 = embedded_statement(isStatementListCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, embedded_statement627.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement_plus"

        public class embedded_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "embedded_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3137:1: embedded_statement[bool isStatementListCtxt] : ( block | ^(ift= IF boolean_expression SEP embedded_statement[/* isStatementListCtxt */ false] ( else_statement )? ) magicType[emitPrePost, $ift.token, \"boolean\", null] magicAssignment[emitPrePost, $ift.token, $magicType.tree, idName, $boolean_expression.tree] -> {!emitPrePost }? ^( $ift boolean_expression SEP embedded_statement ( else_statement )? ) -> {isStatementListCtxt}? magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? ) -> OPEN_BRACE[$ift.token, \"{\"] magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? ) CLOSE_BRACE[$ift.token, \"}\"] | switch_statement[isStatementListCtxt] | iteration_statement | jump_statement | ( ^( ( 'return' | 'throw' ) ( expression[ObjectType] )? ) )=> ( ^(jt= 'return' (je= expression[ObjectType] )? ) | ^(jt= 'throw' (je= expression[ObjectType] )? ) ) magicAssignment[emitPrePost, $jt.token, jumpStatementHasExpression ? ($je.dotNetType != null ? (CommonTree)$je.dotNetType.Tree : null) : null, idName, $je.tree] -> {!emitPrePost }? ^( $jt ( $je)? ) -> {isStatementListCtxt}? magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] ) -> OPEN_BRACE[$jt.token, \"{\"] magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] ) CLOSE_BRACE[$jt.token, \"}\"] | ^( 'try' block ( catch_clauses )? ( finally_clause )? ) | checked_statement | unchecked_statement | synchronized_statement | yield_statement | ^( 'unsafe' block ) | fixed_statement | expression_statement -> {!emitPrePost }? expression_statement -> {isStatementListCtxt}? expression_statement -> OPEN_BRACE[$expression_statement.tree.Token, \"{\"] expression_statement CLOSE_BRACE[$expression_statement.tree.Token, \"}\"] );
        public NetMaker.embedded_statement_return embedded_statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            NetMaker.embedded_statement_return retval = new NetMaker.embedded_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree ift = null;
            CommonTree jt = null;
            CommonTree SEP630 = null;
            CommonTree string_literal639 = null;
            CommonTree string_literal647 = null;
            NetMaker.expression_return je = default(NetMaker.expression_return);

            NetMaker.block_return block628 = default(NetMaker.block_return);

            NetMaker.boolean_expression_return boolean_expression629 = default(NetMaker.boolean_expression_return);

            NetMaker.embedded_statement_return embedded_statement631 = default(NetMaker.embedded_statement_return);

            NetMaker.else_statement_return else_statement632 = default(NetMaker.else_statement_return);

            NetMaker.magicType_return magicType633 = default(NetMaker.magicType_return);

            NetMaker.magicAssignment_return magicAssignment634 = default(NetMaker.magicAssignment_return);

            NetMaker.switch_statement_return switch_statement635 = default(NetMaker.switch_statement_return);

            NetMaker.iteration_statement_return iteration_statement636 = default(NetMaker.iteration_statement_return);

            NetMaker.jump_statement_return jump_statement637 = default(NetMaker.jump_statement_return);

            NetMaker.magicAssignment_return magicAssignment638 = default(NetMaker.magicAssignment_return);

            NetMaker.block_return block640 = default(NetMaker.block_return);

            NetMaker.catch_clauses_return catch_clauses641 = default(NetMaker.catch_clauses_return);

            NetMaker.finally_clause_return finally_clause642 = default(NetMaker.finally_clause_return);

            NetMaker.checked_statement_return checked_statement643 = default(NetMaker.checked_statement_return);

            NetMaker.unchecked_statement_return unchecked_statement644 = default(NetMaker.unchecked_statement_return);

            NetMaker.synchronized_statement_return synchronized_statement645 = default(NetMaker.synchronized_statement_return);

            NetMaker.yield_statement_return yield_statement646 = default(NetMaker.yield_statement_return);

            NetMaker.block_return block648 = default(NetMaker.block_return);

            NetMaker.fixed_statement_return fixed_statement649 = default(NetMaker.fixed_statement_return);

            NetMaker.expression_statement_return expression_statement650 = default(NetMaker.expression_statement_return);


            CommonTree ift_tree=null;
            CommonTree jt_tree=null;
            CommonTree SEP630_tree=null;
            CommonTree string_literal639_tree=null;
            CommonTree string_literal647_tree=null;
            RewriteRuleNodeStream stream_SEP = new RewriteRuleNodeStream(adaptor,"token SEP");
            RewriteRuleNodeStream stream_THROW = new RewriteRuleNodeStream(adaptor,"token THROW");
            RewriteRuleNodeStream stream_IF = new RewriteRuleNodeStream(adaptor,"token IF");
            RewriteRuleNodeStream stream_RETURN = new RewriteRuleNodeStream(adaptor,"token RETURN");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_expression_statement = new RewriteRuleSubtreeStream(adaptor,"rule expression_statement");
            RewriteRuleSubtreeStream stream_else_statement = new RewriteRuleSubtreeStream(adaptor,"rule else_statement");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");
            RewriteRuleSubtreeStream stream_magicType = new RewriteRuleSubtreeStream(adaptor,"rule magicType");
            RewriteRuleSubtreeStream stream_boolean_expression = new RewriteRuleSubtreeStream(adaptor,"rule boolean_expression");
            RewriteRuleSubtreeStream stream_magicAssignment = new RewriteRuleSubtreeStream(adaptor,"rule magicAssignment");

               string idName = null;
               bool emitPrePost = false;
               bool jumpStatementHasExpression = false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3150:1: ( block | ^(ift= IF boolean_expression SEP embedded_statement[/* isStatementListCtxt */ false] ( else_statement )? ) magicType[emitPrePost, $ift.token, \"boolean\", null] magicAssignment[emitPrePost, $ift.token, $magicType.tree, idName, $boolean_expression.tree] -> {!emitPrePost }? ^( $ift boolean_expression SEP embedded_statement ( else_statement )? ) -> {isStatementListCtxt}? magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? ) -> OPEN_BRACE[$ift.token, \"{\"] magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? ) CLOSE_BRACE[$ift.token, \"}\"] | switch_statement[isStatementListCtxt] | iteration_statement | jump_statement | ( ^( ( 'return' | 'throw' ) ( expression[ObjectType] )? ) )=> ( ^(jt= 'return' (je= expression[ObjectType] )? ) | ^(jt= 'throw' (je= expression[ObjectType] )? ) ) magicAssignment[emitPrePost, $jt.token, jumpStatementHasExpression ? ($je.dotNetType != null ? (CommonTree)$je.dotNetType.Tree : null) : null, idName, $je.tree] -> {!emitPrePost }? ^( $jt ( $je)? ) -> {isStatementListCtxt}? magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] ) -> OPEN_BRACE[$jt.token, \"{\"] magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] ) CLOSE_BRACE[$jt.token, \"}\"] | ^( 'try' block ( catch_clauses )? ( finally_clause )? ) | checked_statement | unchecked_statement | synchronized_statement | yield_statement | ^( 'unsafe' block ) | fixed_statement | expression_statement -> {!emitPrePost }? expression_statement -> {isStatementListCtxt}? expression_statement -> OPEN_BRACE[$expression_statement.tree.Token, \"{\"] expression_statement CLOSE_BRACE[$expression_statement.tree.Token, \"}\"] )
                int alt209 = 14;
                alt209 = dfa209.Predict(input);
                switch (alt209) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3151:7: block
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_embedded_statement9022);
                        	block628 = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, block628.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3152:4: ^(ift= IF boolean_expression SEP embedded_statement[/* isStatementListCtxt */ false] ( else_statement )? ) magicType[emitPrePost, $ift.token, \"boolean\", null] magicAssignment[emitPrePost, $ift.token, $magicType.tree, idName, $boolean_expression.tree]
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	ift=(CommonTree)Match(input,IF,FOLLOW_IF_in_embedded_statement9030); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_IF.Add(ift);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_boolean_expression_in_embedded_statement9032);
                        	boolean_expression629 = boolean_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_boolean_expression.Add(boolean_expression629.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   emitPrePost = adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).preStatements) > 0 || adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).postStatements) > 0; 
                        	                      if (emitPrePost) {
                        	                          idName = "boolVar___" + dummyVarCtr++;
                        	                      }
                        	                    
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	SEP630=(CommonTree)Match(input,SEP,FOLLOW_SEP_in_embedded_statement9068); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_SEP.Add(SEP630);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_embedded_statement_in_embedded_statement9070);
                        	embedded_statement631 = embedded_statement(/* isStatementListCtxt */ false);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement631.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3158:69: ( else_statement )?
                        	int alt203 = 2;
                        	int LA203_0 = input.LA(1);

                        	if ( (LA203_0 == ELSE) )
                        	{
                        	    alt203 = 1;
                        	}
                        	switch (alt203) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3158:69: else_statement
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_else_statement_in_embedded_statement9073);
                        	        	else_statement632 = else_statement();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_else_statement.Add(else_statement632.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicType_in_embedded_statement9089);
                        	magicType633 = magicType(emitPrePost, ift.token, "boolean", null);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicType.Add(magicType633.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicAssignment_in_embedded_statement9104);
                        	magicAssignment634 = magicAssignment(emitPrePost, ift.token, ((magicType633 != null) ? ((CommonTree)magicType633.Tree) : null), idName, ((boolean_expression629 != null) ? ((CommonTree)boolean_expression629.Tree) : null));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicAssignment.Add(magicAssignment634.Tree);


                        	// AST REWRITE
                        	// elements:          ift, else_statement, else_statement, magicAssignment, else_statement, embedded_statement, ift, magicAssignment, SEP, SEP, boolean_expression, SEP, embedded_statement, ift, embedded_statement
                        	// token labels:      ift
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_ift = new RewriteRuleNodeStream(adaptor, "token ift", ift);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3161:11: -> {!emitPrePost }? ^( $ift boolean_expression SEP embedded_statement ( else_statement )? )
                        	if (!emitPrePost )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3161:31: ^( $ift boolean_expression SEP embedded_statement ( else_statement )? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_ift.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_boolean_expression.NextTree());
                        	    adaptor.AddChild(root_1, stream_SEP.NextNode());
                        	    adaptor.AddChild(root_1, stream_embedded_statement.NextTree());
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3161:80: ( else_statement )?
                        	    if ( stream_else_statement.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_else_statement.NextTree());

                        	    }
                        	    stream_else_statement.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}
                        	else // 3162:11: -> {isStatementListCtxt}? magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? )
                        	if (isStatementListCtxt)
                        	{
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                        	    adaptor.AddChild(root_0, stream_magicAssignment.NextTree());
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3163:96: ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_ift.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, ift.token, idName));
                        	    adaptor.AddChild(root_1, stream_SEP.NextNode());
                        	    adaptor.AddChild(root_1, stream_embedded_statement.NextTree());
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3163:157: ( else_statement )?
                        	    if ( stream_else_statement.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_else_statement.NextTree());

                        	    }
                        	    stream_else_statement.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}
                        	else // 3164:11: -> OPEN_BRACE[$ift.token, \"{\"] magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? ) CLOSE_BRACE[$ift.token, \"}\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, ift.token, "{"));
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                        	    adaptor.AddChild(root_0, stream_magicAssignment.NextTree());
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3164:120: ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_ift.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, ift.token, idName));
                        	    adaptor.AddChild(root_1, stream_SEP.NextNode());
                        	    adaptor.AddChild(root_1, stream_embedded_statement.NextTree());
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3164:181: ( else_statement )?
                        	    if ( stream_else_statement.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_else_statement.NextTree());

                        	    }
                        	    stream_else_statement.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, ift.token, "}"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3165:7: switch_statement[isStatementListCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_switch_statement_in_embedded_statement9235);
                        	switch_statement635 = switch_statement(isStatementListCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, switch_statement635.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3166:4: iteration_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_iteration_statement_in_embedded_statement9241);
                        	iteration_statement636 = iteration_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, iteration_statement636.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3167:4: jump_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_jump_statement_in_embedded_statement9247);
                        	jump_statement637 = jump_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, jump_statement637.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:8: ( ^( ( 'return' | 'throw' ) ( expression[ObjectType] )? ) )=> ( ^(jt= 'return' (je= expression[ObjectType] )? ) | ^(jt= 'throw' (je= expression[ObjectType] )? ) ) magicAssignment[emitPrePost, $jt.token, jumpStatementHasExpression ? ($je.dotNetType != null ? (CommonTree)$je.dotNetType.Tree : null) : null, idName, $je.tree]
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:61: ( ^(jt= 'return' (je= expression[ObjectType] )? ) | ^(jt= 'throw' (je= expression[ObjectType] )? ) )
                        	int alt206 = 2;
                        	int LA206_0 = input.LA(1);

                        	if ( (LA206_0 == RETURN) )
                        	{
                        	    alt206 = 1;
                        	}
                        	else if ( (LA206_0 == THROW) )
                        	{
                        	    alt206 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d206s0 =
                        	        new NoViableAltException("", 206, 0, input);

                        	    throw nvae_d206s0;
                        	}
                        	switch (alt206) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:62: ^(jt= 'return' (je= expression[ObjectType] )? )
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	{
                        	        	CommonTree _save_last_1 = _last;
                        	        	CommonTree _first_1 = null;
                        	        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	jt=(CommonTree)Match(input,RETURN,FOLLOW_RETURN_in_embedded_statement9278); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_RETURN.Add(jt);



                        	        	if ( input.LA(1) == Token.DOWN )
                        	        	{
                        	        	    Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:76: (je= expression[ObjectType] )?
                        	        	    int alt204 = 2;
                        	        	    int LA204_0 = input.LA(1);

                        	        	    if ( ((LA204_0 >= PARAMS && LA204_0 <= PARAMS_TYPELESS) || (LA204_0 >= MONOPLUS && LA204_0 <= APPLY) || (LA204_0 >= NEW && LA204_0 <= NEW_ARRAY) || LA204_0 == NEW_ANON_OBJECT || (LA204_0 >= OBJECT && LA204_0 <= THIS) || LA204_0 == NULL_COALESCE || (LA204_0 >= COND_EXPR && LA204_0 <= LEFT_SHIFT) || (LA204_0 >= SUPER && LA204_0 <= LAMBDA) || LA204_0 == CAST_EXPR || (LA204_0 >= BOOL && LA204_0 <= GT) || (LA204_0 >= ELIF && LA204_0 <= UNDEF) || LA204_0 == 195 || LA204_0 == 208 || (LA204_0 >= 214 && LA204_0 <= 219) || LA204_0 == 221 || (LA204_0 >= 224 && LA204_0 <= 239) || (LA204_0 >= 241 && LA204_0 <= 244) || (LA204_0 >= 247 && LA204_0 <= 254) || LA204_0 == 256 || (LA204_0 >= 263 && LA204_0 <= 264) || (LA204_0 >= 274 && LA204_0 <= 277)) )
                        	        	    {
                        	        	        alt204 = 1;
                        	        	    }
                        	        	    switch (alt204) 
                        	        	    {
                        	        	        case 1 :
                        	        	            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:77: je= expression[ObjectType]
                        	        	            {
                        	        	            	_last = (CommonTree)input.LT(1);
                        	        	            	PushFollow(FOLLOW_expression_in_embedded_statement9283);
                        	        	            	je = expression(ObjectType);
                        	        	            	state._fsp--;
                        	        	            	if (state.failed) return retval;
                        	        	            	if ( (state.backtracking==0) ) stream_expression.Add(je.Tree);
                        	        	            	if ( (state.backtracking==0) )
                        	        	            	{
                        	        	            	  jumpStatementHasExpression = true;
                        	        	            	}

                        	        	            	if ( (state.backtracking==0) ) {
                        	        	            	}
                        	        	            }
                        	        	            break;

                        	        	    }


                        	        	    Match(input, Token.UP, null); if (state.failed) return retval;
                        	        	}adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:145: ^(jt= 'throw' (je= expression[ObjectType] )? )
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	{
                        	        	CommonTree _save_last_1 = _last;
                        	        	CommonTree _first_1 = null;
                        	        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	        	jt=(CommonTree)Match(input,THROW,FOLLOW_THROW_in_embedded_statement9296); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_THROW.Add(jt);



                        	        	if ( input.LA(1) == Token.DOWN )
                        	        	{
                        	        	    Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:158: (je= expression[ObjectType] )?
                        	        	    int alt205 = 2;
                        	        	    int LA205_0 = input.LA(1);

                        	        	    if ( ((LA205_0 >= PARAMS && LA205_0 <= PARAMS_TYPELESS) || (LA205_0 >= MONOPLUS && LA205_0 <= APPLY) || (LA205_0 >= NEW && LA205_0 <= NEW_ARRAY) || LA205_0 == NEW_ANON_OBJECT || (LA205_0 >= OBJECT && LA205_0 <= THIS) || LA205_0 == NULL_COALESCE || (LA205_0 >= COND_EXPR && LA205_0 <= LEFT_SHIFT) || (LA205_0 >= SUPER && LA205_0 <= LAMBDA) || LA205_0 == CAST_EXPR || (LA205_0 >= BOOL && LA205_0 <= GT) || (LA205_0 >= ELIF && LA205_0 <= UNDEF) || LA205_0 == 195 || LA205_0 == 208 || (LA205_0 >= 214 && LA205_0 <= 219) || LA205_0 == 221 || (LA205_0 >= 224 && LA205_0 <= 239) || (LA205_0 >= 241 && LA205_0 <= 244) || (LA205_0 >= 247 && LA205_0 <= 254) || LA205_0 == 256 || (LA205_0 >= 263 && LA205_0 <= 264) || (LA205_0 >= 274 && LA205_0 <= 277)) )
                        	        	    {
                        	        	        alt205 = 1;
                        	        	    }
                        	        	    switch (alt205) 
                        	        	    {
                        	        	        case 1 :
                        	        	            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:159: je= expression[ObjectType]
                        	        	            {
                        	        	            	_last = (CommonTree)input.LT(1);
                        	        	            	PushFollow(FOLLOW_expression_in_embedded_statement9301);
                        	        	            	je = expression(ObjectType);
                        	        	            	state._fsp--;
                        	        	            	if (state.failed) return retval;
                        	        	            	if ( (state.backtracking==0) ) stream_expression.Add(je.Tree);
                        	        	            	if ( (state.backtracking==0) )
                        	        	            	{
                        	        	            	   jumpStatementHasExpression = true; 
                        	        	            	}

                        	        	            	if ( (state.backtracking==0) ) {
                        	        	            	}
                        	        	            }
                        	        	            break;

                        	        	    }


                        	        	    Match(input, Token.UP, null); if (state.failed) return retval;
                        	        	}adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	        	}


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   emitPrePost = adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).preStatements) > 0 || adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).postStatements) > 0;
                        	             if (emitPrePost) {
                        	                idName = "resVar___" + dummyVarCtr++;
                        	             }
                        	           
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicAssignment_in_embedded_statement9327);
                        	magicAssignment638 = magicAssignment(emitPrePost, jt.token, jumpStatementHasExpression ? (((je != null) ? je.dotNetType : default(TypeRepTemplate)) != null ? (CommonTree)((je != null) ? je.dotNetType : default(TypeRepTemplate)).Tree : null) : null, idName, ((je != null) ? ((CommonTree)je.Tree) : null));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicAssignment.Add(magicAssignment638.Tree);


                        	// AST REWRITE
                        	// elements:          jt, je, magicAssignment, jt, jt, magicAssignment
                        	// token labels:      jt
                        	// rule labels:       retval, je
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_jt = new RewriteRuleNodeStream(adaptor, "token jt", jt);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_je = new RewriteRuleSubtreeStream(adaptor, "rule je", je!=null ? je.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3176:11: -> {!emitPrePost }? ^( $jt ( $je)? )
                        	if (!emitPrePost )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3176:31: ^( $jt ( $je)? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_jt.NextNode(), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3176:37: ( $je)?
                        	    if ( stream_je.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_je.NextTree());

                        	    }
                        	    stream_je.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}
                        	else // 3177:11: -> {isStatementListCtxt}? magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] )
                        	if (isStatementListCtxt)
                        	{
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                        	    adaptor.AddChild(root_0, stream_magicAssignment.NextTree());
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3177:114: ^( $jt IDENTIFIER[$jt.token, idName] )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_jt.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, jt.token, idName));

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}
                        	else // 3178:11: -> OPEN_BRACE[$jt.token, \"{\"] magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] ) CLOSE_BRACE[$jt.token, \"}\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, jt.token, "{"));
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                        	    adaptor.AddChild(root_0, stream_magicAssignment.NextTree());
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3178:118: ^( $jt IDENTIFIER[$jt.token, idName] )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_jt.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, jt.token, idName));

                        	    adaptor.AddChild(root_0, root_1);
                        	    }
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, jt.token, "}"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3181:4: ^( 'try' block ( catch_clauses )? ( finally_clause )? )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal639=(CommonTree)Match(input,TRY,FOLLOW_TRY_in_embedded_statement9444); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal639_tree = (CommonTree)adaptor.DupNode(string_literal639);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal639_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_embedded_statement9446);
                        	block640 = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, block640.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3181:18: ( catch_clauses )?
                        	int alt207 = 2;
                        	int LA207_0 = input.LA(1);

                        	if ( (LA207_0 == CATCH) )
                        	{
                        	    alt207 = 1;
                        	}
                        	switch (alt207) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3181:18: catch_clauses
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_catch_clauses_in_embedded_statement9448);
                        	        	catch_clauses641 = catch_clauses();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, catch_clauses641.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3181:33: ( finally_clause )?
                        	int alt208 = 2;
                        	int LA208_0 = input.LA(1);

                        	if ( (LA208_0 == FINALLY) )
                        	{
                        	    alt208 = 1;
                        	}
                        	switch (alt208) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3181:33: finally_clause
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_finally_clause_in_embedded_statement9451);
                        	        	finally_clause642 = finally_clause();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, finally_clause642.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3182:4: checked_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_checked_statement_in_embedded_statement9458);
                        	checked_statement643 = checked_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, checked_statement643.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3183:4: unchecked_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unchecked_statement_in_embedded_statement9463);
                        	unchecked_statement644 = unchecked_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, unchecked_statement644.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3184:4: synchronized_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_synchronized_statement_in_embedded_statement9468);
                        	synchronized_statement645 = synchronized_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, synchronized_statement645.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3185:7: yield_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_yield_statement_in_embedded_statement9492);
                        	yield_statement646 = yield_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, yield_statement646.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3186:7: ^( 'unsafe' block )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal647=(CommonTree)Match(input,198,FOLLOW_198_in_embedded_statement9501); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal647_tree = (CommonTree)adaptor.DupNode(string_literal647);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal647_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_embedded_statement9505);
                        	block648 = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, block648.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3187:4: fixed_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_fixed_statement_in_embedded_statement9511);
                        	fixed_statement649 = fixed_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, fixed_statement649.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3188:4: expression_statement
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_statement_in_embedded_statement9516);
                        	expression_statement650 = expression_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_expression_statement.Add(expression_statement650.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   emitPrePost = adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).preStatements) > 0 || adaptor.GetChildCount(((statement_scope)statement_stack.Peek()).postStatements) > 0; 
                        	}


                        	// AST REWRITE
                        	// elements:          expression_statement, expression_statement, expression_statement
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3189:11: -> {!emitPrePost }? expression_statement
                        	if (!emitPrePost )
                        	{
                        	    adaptor.AddChild(root_0, stream_expression_statement.NextTree());

                        	}
                        	else // 3190:11: -> {isStatementListCtxt}? expression_statement
                        	if (isStatementListCtxt)
                        	{
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                        	    adaptor.AddChild(root_0, stream_expression_statement.NextTree());
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );

                        	}
                        	else // 3191:11: -> OPEN_BRACE[$expression_statement.tree.Token, \"{\"] expression_statement CLOSE_BRACE[$expression_statement.tree.Token, \"}\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, ((expression_statement650 != null) ? ((CommonTree)expression_statement650.Tree) : null).Token, "{"));
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).preStatements );
                        	    adaptor.AddChild(root_0, stream_expression_statement.NextTree());
                        	    adaptor.AddChild(root_0,  ((statement_scope)statement_stack.Peek()).postStatements );
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, ((expression_statement650 != null) ? ((CommonTree)expression_statement650.Tree) : null).Token, "}"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                     if(emitPrePost) {
                        // reset (just in case) they have already been emitted
                        ((statement_scope)statement_stack.Peek()).preStatements =  (CommonTree)adaptor.Nil;
                        ((statement_scope)statement_stack.Peek()).postStatements =  (CommonTree)adaptor.Nil;
                     }

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "embedded_statement"

        protected class switch_statement_scope 
        {
            protected internal bool isEnum;
            protected internal bool convertToIfThenElse;
            protected internal string scrutVar;
            protected internal bool isFirstCase;
            protected internal CommonTree defaultTree;
        }
        protected Stack switch_statement_stack = new Stack();

        public class switch_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3194:1: switch_statement[ bool isStatementListCtxt] : ^(s= 'switch' se= expression[ObjectType] sv= magicScrutineeVar[$s.token] (ss+= switch_section )* ) -> { $switch_statement::convertToIfThenElse && isStatementListCtxt }? ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] ) $sv ASSIGN[$s.token, \"=\"] SEMI[$s.token, \";\"] -> { $switch_statement::convertToIfThenElse }? OPEN_BRACE[$s.token, \"{\"] ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] ) $sv ASSIGN[$s.token, \"=\"] SEMI[$s.token, \";\"] CLOSE_BRACE[$s.token, \"}\"] -> ^( $s expression ( $ss)* ) ;
        public NetMaker.switch_statement_return switch_statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            switch_statement_stack.Push(new switch_statement_scope());
            NetMaker.switch_statement_return retval = new NetMaker.switch_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            List list_ss = null;
            NetMaker.expression_return se = default(NetMaker.expression_return);

            NetMaker.magicScrutineeVar_return sv = default(NetMaker.magicScrutineeVar_return);

            RuleReturnScope ss = null;
            CommonTree s_tree=null;
            RewriteRuleNodeStream stream_266 = new RewriteRuleNodeStream(adaptor,"token 266");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_magicScrutineeVar = new RewriteRuleSubtreeStream(adaptor,"rule magicScrutineeVar");
            RewriteRuleSubtreeStream stream_switch_section = new RewriteRuleSubtreeStream(adaptor,"rule switch_section");

                ((switch_statement_scope)switch_statement_stack.Peek()).isEnum =  false;
                ((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse =  false;
                ((switch_statement_scope)switch_statement_stack.Peek()).scrutVar =  "WHOOPS";
                ((switch_statement_scope)switch_statement_stack.Peek()).isFirstCase =  true;
                ((switch_statement_scope)switch_statement_stack.Peek()).defaultTree =  null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3208:2: ( ^(s= 'switch' se= expression[ObjectType] sv= magicScrutineeVar[$s.token] (ss+= switch_section )* ) -> { $switch_statement::convertToIfThenElse && isStatementListCtxt }? ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] ) $sv ASSIGN[$s.token, \"=\"] SEMI[$s.token, \";\"] -> { $switch_statement::convertToIfThenElse }? OPEN_BRACE[$s.token, \"{\"] ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] ) $sv ASSIGN[$s.token, \"=\"] SEMI[$s.token, \";\"] CLOSE_BRACE[$s.token, \"}\"] -> ^( $s expression ( $ss)* ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3209:5: ^(s= 'switch' se= expression[ObjectType] sv= magicScrutineeVar[$s.token] (ss+= switch_section )* )
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,266,FOLLOW_266_in_switch_statement9611); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_266.Add(s);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_switch_statement9615);
                	se = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_expression.Add(se.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicScrutineeVar_in_switch_statement9620);
                	sv = magicScrutineeVar(s.token);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicScrutineeVar.Add(sv.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   
                	                      if (((se != null) ? se.dotNetType : default(TypeRepTemplate)) != null) {
                	                          ((switch_statement_scope)switch_statement_stack.Peek()).isEnum =  ((se != null) ? se.dotNetType : default(TypeRepTemplate)).IsA(findType("System.Enum"), AppEnv); 
                	                          ((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse =  typeIsInvalidForScrutinee(((se != null) ? se.dotNetType : default(TypeRepTemplate)));
                	                          ((switch_statement_scope)switch_statement_stack.Peek()).scrutVar =  ((sv != null) ? sv.thetext : default(string));
                	                      }
                	                  
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3217:15: (ss+= switch_section )*
                	do 
                	{
                	    int alt210 = 2;
                	    int LA210_0 = input.LA(1);

                	    if ( (LA210_0 == SWITCH_SECTION) )
                	    {
                	        alt210 = 1;
                	    }


                	    switch (alt210) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3217:15: ss+= switch_section
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_switch_section_in_switch_statement9656);
                			    	ss = switch_section();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_switch_section.Add(ss.Tree);
                			    	if (list_ss == null) list_ss = new ArrayList();
                			    	list_ss.Add(ss.Tree);


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop210;
                	    }
                	} while (true);

                	loop210:
                		;	// Stops C# compiler whining that label 'loop210' has no statements


                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}



                	// AST REWRITE
                	// elements:          expression, s, sv, ss, sv
                	// token labels:      s
                	// rule labels:       retval, sv
                	// token list labels: 
                	// rule list labels:  ss
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_s = new RewriteRuleNodeStream(adaptor, "token s", s);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_sv = new RewriteRuleSubtreeStream(adaptor, "rule sv", sv!=null ? sv.Tree : null);
                	RewriteRuleSubtreeStream stream_ss = new RewriteRuleSubtreeStream(adaptor, "token ss", list_ss);
                	root_0 = (CommonTree)adaptor.Nil;
                	// 3218:9: -> { $switch_statement::convertToIfThenElse && isStatementListCtxt }? ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] ) $sv ASSIGN[$s.token, \"=\"] SEMI[$s.token, \";\"]
                	if ( ((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse && isStatementListCtxt )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3220:17: ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, s.token, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, s.token, ((se != null) ? se.dotNetType : default(TypeRepTemplate)).Java));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, stream_sv.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, s.token, "="));
                	    adaptor.AddChild(root_0,  dupTree(((se != null) ? ((CommonTree)se.Tree) : null)) );
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, s.token, ";"));
                	    adaptor.AddChild(root_0,  convertSectionsToITE(list_ss, ((switch_statement_scope)switch_statement_stack.Peek()).defaultTree) );

                	}
                	else // 3222:9: -> { $switch_statement::convertToIfThenElse }? OPEN_BRACE[$s.token, \"{\"] ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] ) $sv ASSIGN[$s.token, \"=\"] SEMI[$s.token, \";\"] CLOSE_BRACE[$s.token, \"}\"]
                	if ( ((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse )
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, s.token, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3225:17: ^( TYPE[$s.token, \"TYPE\"] IDENTIFIER[$s.token,$expression.dotNetType.Java] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, s.token, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, s.token, ((se != null) ? se.dotNetType : default(TypeRepTemplate)).Java));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, stream_sv.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, s.token, "="));
                	    adaptor.AddChild(root_0,  dupTree(((se != null) ? ((CommonTree)se.Tree) : null)) );
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, s.token, ";"));
                	    adaptor.AddChild(root_0,  convertSectionsToITE(list_ss, ((switch_statement_scope)switch_statement_stack.Peek()).defaultTree) );
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, s.token, "}"));

                	}
                	else // 3228:9: -> ^( $s expression ( $ss)* )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3228:12: ^( $s expression ( $ss)* )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_s.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_expression.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3228:28: ( $ss)*
                	    while ( stream_ss.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_ss.NextTree());

                	    }
                	    stream_ss.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                switch_statement_stack.Pop();
            }
            return retval;
        }
        // $ANTLR end "switch_statement"

        public class fixed_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3230:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement[ /* isStatementListCtxt */ false] ;
        public NetMaker.fixed_statement_return fixed_statement() // throws RecognitionException [1]
        {   
            NetMaker.fixed_statement_return retval = new NetMaker.fixed_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal651 = null;
            CommonTree char_literal652 = null;
            CommonTree char_literal655 = null;
            NetMaker.pointer_type_return pointer_type653 = default(NetMaker.pointer_type_return);

            NetMaker.fixed_pointer_declarators_return fixed_pointer_declarators654 = default(NetMaker.fixed_pointer_declarators_return);

            NetMaker.embedded_statement_return embedded_statement656 = default(NetMaker.embedded_statement_return);


            CommonTree string_literal651_tree=null;
            CommonTree char_literal652_tree=null;
            CommonTree char_literal655_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3230:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement[ /* isStatementListCtxt */ false] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3231:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement[ /* isStatementListCtxt */ false]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal651=(CommonTree)Match(input,262,FOLLOW_262_in_fixed_statement9897); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal651_tree = (CommonTree)adaptor.DupNode(string_literal651);

                		adaptor.AddChild(root_0, string_literal651_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal652=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_fixed_statement9901); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal652_tree = (CommonTree)adaptor.DupNode(char_literal652);

                		adaptor.AddChild(root_0, char_literal652_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_pointer_type_in_fixed_statement9905);
                	pointer_type653 = pointer_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, pointer_type653.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement9907);
                	fixed_pointer_declarators654 = fixed_pointer_declarators();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, fixed_pointer_declarators654.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal655=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_fixed_statement9911); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal655_tree = (CommonTree)adaptor.DupNode(char_literal655);

                		adaptor.AddChild(root_0, char_literal655_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_fixed_statement9915);
                	embedded_statement656 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, embedded_statement656.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_statement"

        public class fixed_pointer_declarators_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_pointer_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3232:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
        public NetMaker.fixed_pointer_declarators_return fixed_pointer_declarators() // throws RecognitionException [1]
        {   
            NetMaker.fixed_pointer_declarators_return retval = new NetMaker.fixed_pointer_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal658 = null;
            NetMaker.fixed_pointer_declarator_return fixed_pointer_declarator657 = default(NetMaker.fixed_pointer_declarator_return);

            NetMaker.fixed_pointer_declarator_return fixed_pointer_declarator659 = default(NetMaker.fixed_pointer_declarator_return);


            CommonTree char_literal658_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3232:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3233:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9924);
                	fixed_pointer_declarator657 = fixed_pointer_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, fixed_pointer_declarator657.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3233:29: ( ',' fixed_pointer_declarator )*
                	do 
                	{
                	    int alt211 = 2;
                	    int LA211_0 = input.LA(1);

                	    if ( (LA211_0 == COMMA) )
                	    {
                	        alt211 = 1;
                	    }


                	    switch (alt211) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3233:30: ',' fixed_pointer_declarator
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal658=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_fixed_pointer_declarators9929); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal658_tree = (CommonTree)adaptor.DupNode(char_literal658);

                			    		adaptor.AddChild(root_0, char_literal658_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9933);
                			    	fixed_pointer_declarator659 = fixed_pointer_declarator();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, fixed_pointer_declarator659.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop211;
                	    }
                	} while (true);

                	loop211:
                		;	// Stops C# compiler whining that label 'loop211' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_pointer_declarators"

        public class fixed_pointer_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_pointer_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3234:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
        public NetMaker.fixed_pointer_declarator_return fixed_pointer_declarator() // throws RecognitionException [1]
        {   
            NetMaker.fixed_pointer_declarator_return retval = new NetMaker.fixed_pointer_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal661 = null;
            NetMaker.identifier_return identifier660 = default(NetMaker.identifier_return);

            NetMaker.fixed_pointer_initializer_return fixed_pointer_initializer662 = default(NetMaker.fixed_pointer_initializer_return);


            CommonTree char_literal661_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3234:25: ( identifier '=' fixed_pointer_initializer )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3235:2: identifier '=' fixed_pointer_initializer
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_fixed_pointer_declarator9943);
                	identifier660 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier660.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal661=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_fixed_pointer_declarator9947); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal661_tree = (CommonTree)adaptor.DupNode(char_literal661);

                		adaptor.AddChild(root_0, char_literal661_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator9951);
                	fixed_pointer_initializer662 = fixed_pointer_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, fixed_pointer_initializer662.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_pointer_declarator"

        public class fixed_pointer_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_pointer_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3236:1: fixed_pointer_initializer : expression[ObjectType] ;
        public NetMaker.fixed_pointer_initializer_return fixed_pointer_initializer() // throws RecognitionException [1]
        {   
            NetMaker.fixed_pointer_initializer_return retval = new NetMaker.fixed_pointer_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression663 = default(NetMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3236:26: ( expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3238:2: expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_fixed_pointer_initializer9961);
                	expression663 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression663.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_pointer_initializer"

        public class labeled_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "labeled_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3239:1: labeled_statement[bool isStatementListCtxt] : identifier ':' statement[isStatementListCtxt] ;
        public NetMaker.labeled_statement_return labeled_statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            NetMaker.labeled_statement_return retval = new NetMaker.labeled_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal665 = null;
            NetMaker.identifier_return identifier664 = default(NetMaker.identifier_return);

            NetMaker.statement_return statement666 = default(NetMaker.statement_return);


            CommonTree char_literal665_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3239:44: ( identifier ':' statement[isStatementListCtxt] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3240:2: identifier ':' statement[isStatementListCtxt]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_labeled_statement9970);
                	identifier664 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier664.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal665=(CommonTree)Match(input,211,FOLLOW_211_in_labeled_statement9972); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal665_tree = (CommonTree)adaptor.DupNode(char_literal665);

                		adaptor.AddChild(root_0, char_literal665_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_in_labeled_statement9974);
                	statement666 = statement(isStatementListCtxt);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, statement666.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "labeled_statement"

        public class declaration_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "declaration_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3241:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
        public NetMaker.declaration_statement_return declaration_statement() // throws RecognitionException [1]
        {   
            NetMaker.declaration_statement_return retval = new NetMaker.declaration_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal669 = null;
            NetMaker.local_variable_declaration_return local_variable_declaration667 = default(NetMaker.local_variable_declaration_return);

            NetMaker.local_constant_declaration_return local_constant_declaration668 = default(NetMaker.local_constant_declaration_return);


            CommonTree char_literal669_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3241:22: ( ( local_variable_declaration | local_constant_declaration ) ';' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3242:2: ( local_variable_declaration | local_constant_declaration ) ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3242:2: ( local_variable_declaration | local_constant_declaration )
                	int alt212 = 2;
                	int LA212_0 = input.LA(1);

                	if ( ((LA212_0 >= TYPE && LA212_0 <= TYPE_DYNAMIC)) )
                	{
                	    alt212 = 1;
                	}
                	else if ( (LA212_0 == 205) )
                	{
                	    alt212 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d212s0 =
                	        new NoViableAltException("", 212, 0, input);

                	    throw nvae_d212s0;
                	}
                	switch (alt212) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3242:3: local_variable_declaration
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_local_variable_declaration_in_declaration_statement9984);
                	        	local_variable_declaration667 = local_variable_declaration();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, local_variable_declaration667.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3243:4: local_constant_declaration
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_local_constant_declaration_in_declaration_statement9990);
                	        	local_constant_declaration668 = local_constant_declaration();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, local_constant_declaration668.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal669=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_declaration_statement9993); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal669_tree = (CommonTree)adaptor.DupNode(char_literal669);

                		adaptor.AddChild(root_0, char_literal669_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "declaration_statement"

        public class local_variable_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3244:1: local_variable_declaration : local_variable_type local_variable_declarators[$local_variable_type.tree, $local_variable_type.dotNetType, $local_variable_type.isVar] -> {$local_variable_type.isVar && $local_variable_declarators.bestTy != null && !$local_variable_declarators.bestTy.IsUnknownType}? ^( TYPE[$local_variable_type.tree.Token, \"TYPE\"] IDENTIFIER[$local_variable_type.tree.Token, $local_variable_declarators.bestTy.mkFormattedTypeName(false, \"<\",\">\")] ) local_variable_declarators -> local_variable_type local_variable_declarators ;
        public NetMaker.local_variable_declaration_return local_variable_declaration() // throws RecognitionException [1]
        {   
            NetMaker.local_variable_declaration_return retval = new NetMaker.local_variable_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.local_variable_type_return local_variable_type670 = default(NetMaker.local_variable_type_return);

            NetMaker.local_variable_declarators_return local_variable_declarators671 = default(NetMaker.local_variable_declarators_return);


            RewriteRuleSubtreeStream stream_local_variable_type = new RewriteRuleSubtreeStream(adaptor,"rule local_variable_type");
            RewriteRuleSubtreeStream stream_local_variable_declarators = new RewriteRuleSubtreeStream(adaptor,"rule local_variable_declarators");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3244:27: ( local_variable_type local_variable_declarators[$local_variable_type.tree, $local_variable_type.dotNetType, $local_variable_type.isVar] -> {$local_variable_type.isVar && $local_variable_declarators.bestTy != null && !$local_variable_declarators.bestTy.IsUnknownType}? ^( TYPE[$local_variable_type.tree.Token, \"TYPE\"] IDENTIFIER[$local_variable_type.tree.Token, $local_variable_declarators.bestTy.mkFormattedTypeName(false, \"<\",\">\")] ) local_variable_declarators -> local_variable_type local_variable_declarators )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3245:2: local_variable_type local_variable_declarators[$local_variable_type.tree, $local_variable_type.dotNetType, $local_variable_type.isVar]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_local_variable_type_in_local_variable_declaration10001);
                	local_variable_type670 = local_variable_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_local_variable_type.Add(local_variable_type670.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration10005);
                	local_variable_declarators671 = local_variable_declarators(((local_variable_type670 != null) ? ((CommonTree)local_variable_type670.Tree) : null), ((local_variable_type670 != null) ? local_variable_type670.dotNetType : default(TypeRepTemplate)), ((local_variable_type670 != null) ? local_variable_type670.isVar : default(bool)));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_local_variable_declarators.Add(local_variable_declarators671.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   
                	             if (((local_variable_type670 != null) ? local_variable_type670.isVar : default(bool)) && ((local_variable_declarators671 != null) ? local_variable_declarators671.bestTy : default(TypeRepTemplate)) != null && !((local_variable_declarators671 != null) ? local_variable_declarators671.bestTy : default(TypeRepTemplate)).IsUnknownType) {
                	                foreach (string id in  ((local_variable_declarators671 != null) ? local_variable_declarators671.identifiers : default(List<String>))) {
                	                    ((SymTab_scope)SymTab_stack.Peek()).symtab[id] = ((local_variable_declarators671 != null) ? local_variable_declarators671.bestTy : default(TypeRepTemplate)); 
                	                }
                	             } 
                	      
                	}


                	// AST REWRITE
                	// elements:          local_variable_declarators, local_variable_type, local_variable_declarators
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3253:5: -> {$local_variable_type.isVar && $local_variable_declarators.bestTy != null && !$local_variable_declarators.bestTy.IsUnknownType}? ^( TYPE[$local_variable_type.tree.Token, \"TYPE\"] IDENTIFIER[$local_variable_type.tree.Token, $local_variable_declarators.bestTy.mkFormattedTypeName(false, \"<\",\">\")] ) local_variable_declarators
                	if (((local_variable_type670 != null) ? local_variable_type670.isVar : default(bool)) && ((local_variable_declarators671 != null) ? local_variable_declarators671.bestTy : default(TypeRepTemplate)) != null && !((local_variable_declarators671 != null) ? local_variable_declarators671.bestTy : default(TypeRepTemplate)).IsUnknownType)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3254:10: ^( TYPE[$local_variable_type.tree.Token, \"TYPE\"] IDENTIFIER[$local_variable_type.tree.Token, $local_variable_declarators.bestTy.mkFormattedTypeName(false, \"<\",\">\")] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, ((local_variable_type670 != null) ? ((CommonTree)local_variable_type670.Tree) : null).Token, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, ((local_variable_type670 != null) ? ((CommonTree)local_variable_type670.Tree) : null).Token, ((local_variable_declarators671 != null) ? local_variable_declarators671.bestTy : default(TypeRepTemplate)).mkFormattedTypeName(false, "<",">")));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, stream_local_variable_declarators.NextTree());

                	}
                	else // 3255:5: -> local_variable_type local_variable_declarators
                	{
                	    adaptor.AddChild(root_0, stream_local_variable_type.NextTree());
                	    adaptor.AddChild(root_0, stream_local_variable_declarators.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_declaration"

        public class local_variable_type_return : TreeRuleReturnScope
        {
            public bool isTypeNode;
            public bool isVar;
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3257:1: local_variable_type returns [bool isTypeNode, bool isVar, TypeRepTemplate dotNetType] : ( TYPE_VAR | TYPE_DYNAMIC | type );
        public NetMaker.local_variable_type_return local_variable_type() // throws RecognitionException [1]
        {   
            NetMaker.local_variable_type_return retval = new NetMaker.local_variable_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree TYPE_VAR672 = null;
            CommonTree TYPE_DYNAMIC673 = null;
            NetMaker.type_return type674 = default(NetMaker.type_return);


            CommonTree TYPE_VAR672_tree=null;
            CommonTree TYPE_DYNAMIC673_tree=null;


               retval.isTypeNode =  false;
               retval.isVar =  false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3261:2: ( TYPE_VAR | TYPE_DYNAMIC | type )
                int alt213 = 3;
                switch ( input.LA(1) ) 
                {
                case TYPE_VAR:
                	{
                    alt213 = 1;
                    }
                    break;
                case TYPE_DYNAMIC:
                	{
                    alt213 = 2;
                    }
                    break;
                case TYPE:
                	{
                    alt213 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d213s0 =
                	        new NoViableAltException("", 213, 0, input);

                	    throw nvae_d213s0;
                }

                switch (alt213) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3262:2: TYPE_VAR
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	TYPE_VAR672=(CommonTree)Match(input,TYPE_VAR,FOLLOW_TYPE_VAR_in_local_variable_type10073); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{TYPE_VAR672_tree = (CommonTree)adaptor.DupNode(TYPE_VAR672);

                        		adaptor.AddChild(root_0, TYPE_VAR672_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  new UnknownRepTemplate("System.Object"); retval.isVar =  true;
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3263:4: TYPE_DYNAMIC
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	TYPE_DYNAMIC673=(CommonTree)Match(input,TYPE_DYNAMIC,FOLLOW_TYPE_DYNAMIC_in_local_variable_type10100); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{TYPE_DYNAMIC673_tree = (CommonTree)adaptor.DupNode(TYPE_DYNAMIC673);

                        		adaptor.AddChild(root_0, TYPE_DYNAMIC673_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  new UnknownRepTemplate("System.Object"); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3264:4: type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_local_variable_type10121);
                        	type674 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type674.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((type674 != null) ? type674.dotNetType : default(TypeRepTemplate)); retval.isTypeNode =  true; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_type"

        public class local_variable_declarators_return : TreeRuleReturnScope
        {
            public TypeRepTemplate bestTy;
            public List<String> identifiers;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3265:1: local_variable_declarators[CommonTree tyTree, TypeRepTemplate ty, bool isVar] returns [TypeRepTemplate bestTy, List<String> identifiers] : d1= local_variable_declarator[$tyTree, $ty] ( ',' dn= local_variable_declarator[$tyTree, $ty] )* ;
        public NetMaker.local_variable_declarators_return local_variable_declarators(CommonTree tyTree, TypeRepTemplate ty, bool isVar) // throws RecognitionException [1]
        {   
            NetMaker.local_variable_declarators_return retval = new NetMaker.local_variable_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal675 = null;
            NetMaker.local_variable_declarator_return d1 = default(NetMaker.local_variable_declarator_return);

            NetMaker.local_variable_declarator_return dn = default(NetMaker.local_variable_declarator_return);


            CommonTree char_literal675_tree=null;


               retval.identifiers =  new List<String>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3268:2: (d1= local_variable_declarator[$tyTree, $ty] ( ',' dn= local_variable_declarator[$tyTree, $ty] )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3269:2: d1= local_variable_declarator[$tyTree, $ty] ( ',' dn= local_variable_declarator[$tyTree, $ty] )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators10164);
                	d1 = local_variable_declarator(tyTree, ty);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, d1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.identifiers.Add(((d1 != null) ? d1.identifier : default(String))); if (isVar) retval.bestTy =  ((d1 != null) ? d1.dotNetType : default(TypeRepTemplate)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3270:9: ( ',' dn= local_variable_declarator[$tyTree, $ty] )*
                	do 
                	{
                	    int alt214 = 2;
                	    int LA214_0 = input.LA(1);

                	    if ( (LA214_0 == COMMA) )
                	    {
                	        alt214 = 1;
                	    }


                	    switch (alt214) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3270:10: ',' dn= local_variable_declarator[$tyTree, $ty]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal675=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_local_variable_declarators10179); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal675_tree = (CommonTree)adaptor.DupNode(char_literal675);

                			    		adaptor.AddChild(root_0, char_literal675_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators10183);
                			    	dn = local_variable_declarator(tyTree, ty);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, dn.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{

                			    	              retval.identifiers.Add(((d1 != null) ? d1.identifier : default(String)));
                			    	              if (isVar) {
                			    	                 if (!((dn != null) ? dn.dotNetType : default(TypeRepTemplate)).IsUnknownType && retval.bestTy.IsA(((dn != null) ? dn.dotNetType : default(TypeRepTemplate)), AppEnv)) {
                			    	                    retval.bestTy =  ((dn != null) ? dn.dotNetType : default(TypeRepTemplate));
                			    	                 }
                			    	              }
                			    	           
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop214;
                	    }
                	} while (true);

                	loop214:
                		;	// Stops C# compiler whining that label 'loop214' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_declarators"

        public class local_variable_declarator_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            public String identifier;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3280:1: local_variable_declarator[CommonTree tyTree, TypeRepTemplate ty] returns [TypeRepTemplate dotNetType, String identifier] : i= identifier (e= '=' local_variable_initializer[$ty ?? ObjectType] )? magicConstructStruct[constructStruct, $tyTree, ($i.tree != null ? $i.tree.Token : null)] magicConstructDefaultEnum[constructEnum, $ty, zeroEnum, $identifier.tree != null ? $identifier.tree.Token : null] -> {hasInit}? $i $e local_variable_initializer -> {constructStruct}? $i ASSIGN[$i.tree.Token, \"=\"] magicConstructStruct -> {constructEnum}? $i ASSIGN[$i.tree.Token, \"=\"] magicConstructDefaultEnum -> $i;
        public NetMaker.local_variable_declarator_return local_variable_declarator(CommonTree tyTree, TypeRepTemplate ty) // throws RecognitionException [1]
        {   
            NetMaker.local_variable_declarator_return retval = new NetMaker.local_variable_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree e = null;
            NetMaker.identifier_return i = default(NetMaker.identifier_return);

            NetMaker.local_variable_initializer_return local_variable_initializer676 = default(NetMaker.local_variable_initializer_return);

            NetMaker.magicConstructStruct_return magicConstructStruct677 = default(NetMaker.magicConstructStruct_return);

            NetMaker.magicConstructDefaultEnum_return magicConstructDefaultEnum678 = default(NetMaker.magicConstructDefaultEnum_return);


            CommonTree e_tree=null;
            RewriteRuleNodeStream stream_ASSIGN = new RewriteRuleNodeStream(adaptor,"token ASSIGN");
            RewriteRuleSubtreeStream stream_magicConstructDefaultEnum = new RewriteRuleSubtreeStream(adaptor,"rule magicConstructDefaultEnum");
            RewriteRuleSubtreeStream stream_magicConstructStruct = new RewriteRuleSubtreeStream(adaptor,"rule magicConstructStruct");
            RewriteRuleSubtreeStream stream_local_variable_initializer = new RewriteRuleSubtreeStream(adaptor,"rule local_variable_initializer");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

                bool hasInit = false;
                bool constructStruct = ty != null && ty is StructRepTemplate ;
                EnumRepTemplate enumRep = ty as EnumRepTemplate;
                bool constructEnum = enumRep != null && enumRep.Members.Count > 0;
                string zeroEnum = "WhoopsEnum";
                if (constructEnum)
                {
                    zeroEnum = enumRep.Members[0].Name;
                }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3291:2: (i= identifier (e= '=' local_variable_initializer[$ty ?? ObjectType] )? magicConstructStruct[constructStruct, $tyTree, ($i.tree != null ? $i.tree.Token : null)] magicConstructDefaultEnum[constructEnum, $ty, zeroEnum, $identifier.tree != null ? $identifier.tree.Token : null] -> {hasInit}? $i $e local_variable_initializer -> {constructStruct}? $i ASSIGN[$i.tree.Token, \"=\"] magicConstructStruct -> {constructEnum}? $i ASSIGN[$i.tree.Token, \"=\"] magicConstructDefaultEnum -> $i)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3292:2: i= identifier (e= '=' local_variable_initializer[$ty ?? ObjectType] )? magicConstructStruct[constructStruct, $tyTree, ($i.tree != null ? $i.tree.Token : null)] magicConstructDefaultEnum[constructEnum, $ty, zeroEnum, $identifier.tree != null ? $identifier.tree.Token : null]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_local_variable_declarator10227);
                	i = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(i.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.identifier =  ((i != null) ? i.thetext : default(string)); ((SymTab_scope)SymTab_stack.Peek()).symtab[((i != null) ? i.thetext : default(string))] = ty; 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3293:8: (e= '=' local_variable_initializer[$ty ?? ObjectType] )?
                	int alt215 = 2;
                	int LA215_0 = input.LA(1);

                	if ( (LA215_0 == ASSIGN) )
                	{
                	    alt215 = 1;
                	}
                	switch (alt215) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3293:9: e= '=' local_variable_initializer[$ty ?? ObjectType]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	e=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_local_variable_declarator10242); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_ASSIGN.Add(e);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator10246);
                	        	local_variable_initializer676 = local_variable_initializer(ty ?? ObjectType);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_local_variable_initializer.Add(local_variable_initializer676.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   hasInit = true; constructStruct = false; constructEnum = false; retval.dotNetType =  ((local_variable_initializer676 != null) ? local_variable_initializer676.dotNetType : default(TypeRepTemplate)); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicConstructStruct_in_local_variable_declarator10262);
                	magicConstructStruct677 = magicConstructStruct(constructStruct, tyTree, (((i != null) ? ((CommonTree)i.Tree) : null) != null ? ((i != null) ? ((CommonTree)i.Tree) : null).Token : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicConstructStruct.Add(magicConstructStruct677.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicConstructDefaultEnum_in_local_variable_declarator10273);
                	magicConstructDefaultEnum678 = magicConstructDefaultEnum(constructEnum, ty, zeroEnum, ((i != null) ? ((CommonTree)i.Tree) : null) != null ? ((i != null) ? ((CommonTree)i.Tree) : null).Token : null);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicConstructDefaultEnum.Add(magicConstructDefaultEnum678.Tree);


                	// AST REWRITE
                	// elements:          i, magicConstructStruct, i, local_variable_initializer, magicConstructDefaultEnum, i, i, e
                	// token labels:      e
                	// rule labels:       retval, i
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_e = new RewriteRuleNodeStream(adaptor, "token e", e);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_i = new RewriteRuleSubtreeStream(adaptor, "rule i", i!=null ? i.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3297:5: -> {hasInit}? $i $e local_variable_initializer
                	if (hasInit)
                	{
                	    adaptor.AddChild(root_0, stream_i.NextTree());
                	    adaptor.AddChild(root_0, stream_e.NextNode());
                	    adaptor.AddChild(root_0, stream_local_variable_initializer.NextTree());

                	}
                	else // 3298:5: -> {constructStruct}? $i ASSIGN[$i.tree.Token, \"=\"] magicConstructStruct
                	if (constructStruct)
                	{
                	    adaptor.AddChild(root_0, stream_i.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, ((i != null) ? ((CommonTree)i.Tree) : null).Token, "="));
                	    adaptor.AddChild(root_0, stream_magicConstructStruct.NextTree());

                	}
                	else // 3299:5: -> {constructEnum}? $i ASSIGN[$i.tree.Token, \"=\"] magicConstructDefaultEnum
                	if (constructEnum)
                	{
                	    adaptor.AddChild(root_0, stream_i.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, ((i != null) ? ((CommonTree)i.Tree) : null).Token, "="));
                	    adaptor.AddChild(root_0, stream_magicConstructDefaultEnum.NextTree());

                	}
                	else // 3300:5: -> $i
                	{
                	    adaptor.AddChild(root_0, stream_i.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_declarator"

        public class local_variable_initializer_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3302:1: local_variable_initializer[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType] : ( expression[$typeCtxt] | array_initializer | stackalloc_initializer );
        public NetMaker.local_variable_initializer_return local_variable_initializer(TypeRepTemplate typeCtxt) // throws RecognitionException [1]
        {   
            NetMaker.local_variable_initializer_return retval = new NetMaker.local_variable_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression679 = default(NetMaker.expression_return);

            NetMaker.array_initializer_return array_initializer680 = default(NetMaker.array_initializer_return);

            NetMaker.stackalloc_initializer_return stackalloc_initializer681 = default(NetMaker.stackalloc_initializer_return);




               retval.dotNetType =  ObjectType;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3305:2: ( expression[$typeCtxt] | array_initializer | stackalloc_initializer )
                int alt216 = 3;
                switch ( input.LA(1) ) 
                {
                case PARAMS:
                case PARAMS_TYPELESS:
                case MONOPLUS:
                case MONOMINUS:
                case MONONOT:
                case MONOTWIDDLE:
                case MONOSTAR:
                case ADDRESSOF:
                case PREINC:
                case PREDEC:
                case POSTINC:
                case POSTDEC:
                case PARENS:
                case INDEX:
                case APPLY:
                case NEW:
                case NEW_ARRAY:
                case NEW_ANON_OBJECT:
                case OBJECT:
                case THIS:
                case NULL_COALESCE:
                case COND_EXPR:
                case RIGHT_SHIFT:
                case INSTANCEOF:
                case LOG_OR:
                case LOG_AND:
                case BIT_OR:
                case BIT_XOR:
                case BIT_AND:
                case NOT_EQUAL:
                case EQUAL:
                case LTHAN:
                case LTE:
                case GTE:
                case LEFT_SHIFT:
                case SUPER:
                case LONGNUMBER:
                case PLUS:
                case MINUS:
                case DIV:
                case MOD:
                case STAR:
                case LAMBDA:
                case CAST_EXPR:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case DOT:
                case PTR:
                case GT:
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 208:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 251:
                case 252:
                case 253:
                case 254:
                case 256:
                case 263:
                case 264:
                case 274:
                case 275:
                case 276:
                case 277:
                	{
                    alt216 = 1;
                    }
                    break;
                case OPEN_BRACE:
                	{
                    alt216 = 2;
                    }
                    break;
                case 265:
                	{
                    alt216 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d216s0 =
                	        new NoViableAltException("", 216, 0, input);

                	    throw nvae_d216s0;
                }

                switch (alt216) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3306:2: expression[$typeCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_local_variable_initializer10364);
                        	expression679 = expression(typeCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression679.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.dotNetType =  ((expression679 != null) ? expression679.dotNetType : default(TypeRepTemplate)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3307:4: array_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_array_initializer_in_local_variable_initializer10372);
                        	array_initializer680 = array_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, array_initializer680.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3308:4: stackalloc_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer10378);
                        	stackalloc_initializer681 = stackalloc_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, stackalloc_initializer681.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_initializer"

        public class stackalloc_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "stackalloc_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3309:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression[ObjectType] ']' ;
        public NetMaker.stackalloc_initializer_return stackalloc_initializer() // throws RecognitionException [1]
        {   
            NetMaker.stackalloc_initializer_return retval = new NetMaker.stackalloc_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal682 = null;
            CommonTree char_literal684 = null;
            CommonTree char_literal686 = null;
            NetMaker.unmanaged_type_return unmanaged_type683 = default(NetMaker.unmanaged_type_return);

            NetMaker.expression_return expression685 = default(NetMaker.expression_return);


            CommonTree string_literal682_tree=null;
            CommonTree char_literal684_tree=null;
            CommonTree char_literal686_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3309:23: ( 'stackalloc' unmanaged_type '[' expression[ObjectType] ']' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3310:2: 'stackalloc' unmanaged_type '[' expression[ObjectType] ']'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal682=(CommonTree)Match(input,265,FOLLOW_265_in_stackalloc_initializer10385); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal682_tree = (CommonTree)adaptor.DupNode(string_literal682);

                		adaptor.AddChild(root_0, string_literal682_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer10389);
                	unmanaged_type683 = unmanaged_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, unmanaged_type683.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal684=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_stackalloc_initializer10393); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal684_tree = (CommonTree)adaptor.DupNode(char_literal684);

                		adaptor.AddChild(root_0, char_literal684_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_stackalloc_initializer10397);
                	expression685 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression685.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal686=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer10402); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal686_tree = (CommonTree)adaptor.DupNode(char_literal686);

                		adaptor.AddChild(root_0, char_literal686_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "stackalloc_initializer"

        public class local_constant_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_constant_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3311:1: local_constant_declaration : 'const' type constant_declarators[$type.dotNetType] ;
        public NetMaker.local_constant_declaration_return local_constant_declaration() // throws RecognitionException [1]
        {   
            NetMaker.local_constant_declaration_return retval = new NetMaker.local_constant_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal687 = null;
            NetMaker.type_return type688 = default(NetMaker.type_return);

            NetMaker.constant_declarators_return constant_declarators689 = default(NetMaker.constant_declarators_return);


            CommonTree string_literal687_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3311:27: ( 'const' type constant_declarators[$type.dotNetType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3312:2: 'const' type constant_declarators[$type.dotNetType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal687=(CommonTree)Match(input,205,FOLLOW_205_in_local_constant_declaration10410); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal687_tree = (CommonTree)adaptor.DupNode(string_literal687);

                		adaptor.AddChild(root_0, string_literal687_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_local_constant_declaration10414);
                	type688 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type688.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_constant_declarators_in_local_constant_declaration10418);
                	constant_declarators689 = constant_declarators(((type688 != null) ? type688.dotNetType : default(TypeRepTemplate)));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, constant_declarators689.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_constant_declaration"

        public class expression_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "expression_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3313:1: expression_statement : expression[ObjectType] ';' ;
        public NetMaker.expression_statement_return expression_statement() // throws RecognitionException [1]
        {   
            NetMaker.expression_statement_return retval = new NetMaker.expression_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal691 = null;
            NetMaker.expression_return expression690 = default(NetMaker.expression_return);


            CommonTree char_literal691_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3313:21: ( expression[ObjectType] ';' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3314:2: expression[ObjectType] ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_expression_statement10427);
                	expression690 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression690.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal691=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_expression_statement10432); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal691_tree = (CommonTree)adaptor.DupNode(char_literal691);

                		adaptor.AddChild(root_0, char_literal691_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "expression_statement"

        public class statement_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement_expression"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3317:1: statement_expression : expression[ObjectType] ;
        public NetMaker.statement_expression_return statement_expression() // throws RecognitionException [1]
        {   
            NetMaker.statement_expression_return retval = new NetMaker.statement_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.expression_return expression692 = default(NetMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3317:21: ( expression[ObjectType] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3318:2: expression[ObjectType]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_statement_expression10442);
                	expression692 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression692.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement_expression"

        public class else_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "else_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3320:1: else_statement : 'else' embedded_statement[/* isStatementListCtxt */ false] ;
        public NetMaker.else_statement_return else_statement() // throws RecognitionException [1]
        {   
            NetMaker.else_statement_return retval = new NetMaker.else_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal693 = null;
            NetMaker.embedded_statement_return embedded_statement694 = default(NetMaker.embedded_statement_return);


            CommonTree string_literal693_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3320:15: ( 'else' embedded_statement[/* isStatementListCtxt */ false] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3321:2: 'else' embedded_statement[/* isStatementListCtxt */ false]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal693=(CommonTree)Match(input,ELSE,FOLLOW_ELSE_in_else_statement10452); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal693_tree = (CommonTree)adaptor.DupNode(string_literal693);

                		adaptor.AddChild(root_0, string_literal693_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_else_statement10456);
                	embedded_statement694 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, embedded_statement694.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "else_statement"

        public class switch_section_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_section"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3322:1: switch_section : ^(s= SWITCH_SECTION ({...}? ite_switch_labels | switch_labels ) sl= statement_list ) -> {$switch_statement::convertToIfThenElse && $ite_switch_labels.isDefault}? -> {$switch_statement::convertToIfThenElse && isFirstCase}? ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] ) -> {$switch_statement::convertToIfThenElse}? ELSE[$s.token, \"else\"] ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] ) -> ^( $s switch_labels statement_list ) ;
        public NetMaker.switch_section_return switch_section() // throws RecognitionException [1]
        {   
            NetMaker.switch_section_return retval = new NetMaker.switch_section_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            NetMaker.statement_list_return sl = default(NetMaker.statement_list_return);

            NetMaker.ite_switch_labels_return ite_switch_labels695 = default(NetMaker.ite_switch_labels_return);

            NetMaker.switch_labels_return switch_labels696 = default(NetMaker.switch_labels_return);


            CommonTree s_tree=null;
            RewriteRuleNodeStream stream_SWITCH_SECTION = new RewriteRuleNodeStream(adaptor,"token SWITCH_SECTION");
            RewriteRuleSubtreeStream stream_ite_switch_labels = new RewriteRuleSubtreeStream(adaptor,"rule ite_switch_labels");
            RewriteRuleSubtreeStream stream_switch_labels = new RewriteRuleSubtreeStream(adaptor,"rule switch_labels");
            RewriteRuleSubtreeStream stream_statement_list = new RewriteRuleSubtreeStream(adaptor,"rule statement_list");

                bool defaultSection = false;
                bool isFirstCase = ((switch_statement_scope)switch_statement_stack.Peek()).isFirstCase;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3327:1: ( ^(s= SWITCH_SECTION ({...}? ite_switch_labels | switch_labels ) sl= statement_list ) -> {$switch_statement::convertToIfThenElse && $ite_switch_labels.isDefault}? -> {$switch_statement::convertToIfThenElse && isFirstCase}? ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] ) -> {$switch_statement::convertToIfThenElse}? ELSE[$s.token, \"else\"] ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] ) -> ^( $s switch_labels statement_list ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3328:2: ^(s= SWITCH_SECTION ({...}? ite_switch_labels | switch_labels ) sl= statement_list )
                {
                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,SWITCH_SECTION,FOLLOW_SWITCH_SECTION_in_switch_section10474); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_SWITCH_SECTION.Add(s);



                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3328:21: ({...}? ite_switch_labels | switch_labels )
                	int alt217 = 2;
                	int LA217_0 = input.LA(1);

                	if ( (LA217_0 == 267) )
                	{
                	    int LA217_1 = input.LA(2);

                	    if ( ((((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse)) )
                	    {
                	        alt217 = 1;
                	    }
                	    else if ( (true) )
                	    {
                	        alt217 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d217s1 =
                	            new NoViableAltException("", 217, 1, input);

                	        throw nvae_d217s1;
                	    }
                	}
                	else if ( (LA217_0 == 217) )
                	{
                	    int LA217_2 = input.LA(2);

                	    if ( ((((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse)) )
                	    {
                	        alt217 = 1;
                	    }
                	    else if ( (true) )
                	    {
                	        alt217 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d217s2 =
                	            new NoViableAltException("", 217, 2, input);

                	        throw nvae_d217s2;
                	    }
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d217s0 =
                	        new NoViableAltException("", 217, 0, input);

                	    throw nvae_d217s0;
                	}
                	switch (alt217) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3328:22: {...}? ite_switch_labels
                	        {
                	        	if ( !((((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse)) ) 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    throw new FailedPredicateException(input, "switch_section", "$switch_statement::convertToIfThenElse");
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_ite_switch_labels_in_switch_section10479);
                	        	ite_switch_labels695 = ite_switch_labels();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_ite_switch_labels.Add(ite_switch_labels695.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3328:84: switch_labels
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_switch_labels_in_switch_section10483);
                	        	switch_labels696 = switch_labels();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_switch_labels.Add(switch_labels696.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_list_in_switch_section10488);
                	sl = statement_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_statement_list.Add(sl.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   if (((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse && ((ite_switch_labels695 != null) ? ite_switch_labels695.isDefault : default(bool))) {
                	                 ((switch_statement_scope)switch_statement_stack.Peek()).defaultTree =  stripFinalBreak(((sl != null) ? ((CommonTree)sl.Tree) : null));
                	              } else {
                	                 ((switch_statement_scope)switch_statement_stack.Peek()).isFirstCase =  false;
                	              }
                	            
                	}

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}



                	// AST REWRITE
                	// elements:          switch_labels, ite_switch_labels, ite_switch_labels, statement_list, s
                	// token labels:      s
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_s = new RewriteRuleNodeStream(adaptor, "token s", s);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3337:5: -> {$switch_statement::convertToIfThenElse && $ite_switch_labels.isDefault}?
                	if (((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse && ((ite_switch_labels695 != null) ? ite_switch_labels695.isDefault : default(bool)))
                	{
                	    root_0 = null;
                	}
                	else // 3339:5: -> {$switch_statement::convertToIfThenElse && isFirstCase}? ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] )
                	if (((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse && isFirstCase)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3339:65: ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF, s.token, "if"), root_1);

                	    adaptor.AddChild(root_1, stream_ite_switch_labels.NextTree());
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, s.token, "{"));
                	    adaptor.AddChild(root_1,  stripFinalBreak(((sl != null) ? ((CommonTree)sl.Tree) : null)) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, s.token, "}"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3340:5: -> {$switch_statement::convertToIfThenElse}? ELSE[$s.token, \"else\"] ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] )
                	if (((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse)
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ELSE, s.token, "else"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3340:73: ^( IF[$s.token, \"if\"] ite_switch_labels SEP OPEN_BRACE[$s.token, \"{\"] CLOSE_BRACE[$s.token, \"}\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF, s.token, "if"), root_1);

                	    adaptor.AddChild(root_1, stream_ite_switch_labels.NextTree());
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, s.token, "{"));
                	    adaptor.AddChild(root_1,  stripFinalBreak(((sl != null) ? ((CommonTree)sl.Tree) : null)) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, s.token, "}"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3341:5: -> ^( $s switch_labels statement_list )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3341:8: ^( $s switch_labels statement_list )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_s.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_switch_labels.NextTree());
                	    adaptor.AddChild(root_1, stream_statement_list.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "switch_section"

        public class ite_switch_labels_return : TreeRuleReturnScope
        {
            public bool isDefault;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ite_switch_labels"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3344:1: ite_switch_labels returns [bool isDefault] : (l1= switch_label -> $l1) (ln= switch_label -> ^( LOG_OR[$ln.tree.Token, \"||\"] ) )* ;
        public NetMaker.ite_switch_labels_return ite_switch_labels() // throws RecognitionException [1]
        {   
            NetMaker.ite_switch_labels_return retval = new NetMaker.ite_switch_labels_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.switch_label_return l1 = default(NetMaker.switch_label_return);

            NetMaker.switch_label_return ln = default(NetMaker.switch_label_return);


            RewriteRuleSubtreeStream stream_switch_label = new RewriteRuleSubtreeStream(adaptor,"rule switch_label");

                retval.isDefault =  false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3347:2: ( (l1= switch_label -> $l1) (ln= switch_label -> ^( LOG_OR[$ln.tree.Token, \"||\"] ) )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3348:9: (l1= switch_label -> $l1) (ln= switch_label -> ^( LOG_OR[$ln.tree.Token, \"||\"] ) )*
                {
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3348:9: (l1= switch_label -> $l1)
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3348:10: l1= switch_label
                	{
                		_last = (CommonTree)input.LT(1);
                		PushFollow(FOLLOW_switch_label_in_ite_switch_labels10621);
                		l1 = switch_label();
                		state._fsp--;
                		if (state.failed) return retval;
                		if ( (state.backtracking==0) ) stream_switch_label.Add(l1.Tree);
                		if ( (state.backtracking==0) )
                		{
                		   if(((l1 != null) ? l1.isDefault : default(bool))) retval.isDefault =  true; 
                		}


                		// AST REWRITE
                		// elements:          l1
                		// token labels:      
                		// rule labels:       retval, l1
                		// token list labels: 
                		// rule list labels:  
                		// wildcard labels: 
                		if ( (state.backtracking==0) ) {
                		retval.tree = root_0;
                		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                		RewriteRuleSubtreeStream stream_l1 = new RewriteRuleSubtreeStream(adaptor, "rule l1", l1!=null ? l1.Tree : null);

                		root_0 = (CommonTree)adaptor.Nil;
                		// 3348:67: -> $l1
                		{
                		    adaptor.AddChild(root_0, stream_l1.NextTree());

                		}

                		retval.tree = root_0;}
                	}

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3349:9: (ln= switch_label -> ^( LOG_OR[$ln.tree.Token, \"||\"] ) )*
                	do 
                	{
                	    int alt218 = 2;
                	    int LA218_0 = input.LA(1);

                	    if ( (LA218_0 == 217) )
                	    {
                	        int LA218_2 = input.LA(2);

                	        if ( ((LA218_2 >= PARAMS && LA218_2 <= PARAMS_TYPELESS) || (LA218_2 >= YIELD_RETURN && LA218_2 <= UNCHECKED) || (LA218_2 >= MONOPLUS && LA218_2 <= APPLY) || (LA218_2 >= NEW && LA218_2 <= NEW_ARRAY) || LA218_2 == NEW_ANON_OBJECT || (LA218_2 >= RETURN && LA218_2 <= TRY) || LA218_2 == THROW || (LA218_2 >= BREAK && LA218_2 <= FOREACH) || LA218_2 == OPEN_BRACE || (LA218_2 >= NULL_COALESCE && LA218_2 <= IF) || (LA218_2 >= COND_EXPR && LA218_2 <= LEFT_SHIFT) || (LA218_2 >= SUPER && LA218_2 <= LAMBDA) || (LA218_2 >= TYPE && LA218_2 <= TYPE_DYNAMIC) || LA218_2 == CAST_EXPR || LA218_2 == SYNCHRONIZED || (LA218_2 >= BOOL && LA218_2 <= GT) || (LA218_2 >= ELIF && LA218_2 <= SEMI) || LA218_2 == 195 || LA218_2 == 198 || LA218_2 == 205 || LA218_2 == 208 || (LA218_2 >= 214 && LA218_2 <= 219) || LA218_2 == 221 || (LA218_2 >= 224 && LA218_2 <= 239) || (LA218_2 >= 241 && LA218_2 <= 244) || (LA218_2 >= 247 && LA218_2 <= 254) || LA218_2 == 256 || (LA218_2 >= 262 && LA218_2 <= 264) || (LA218_2 >= 266 && LA218_2 <= 272) || (LA218_2 >= 274 && LA218_2 <= 277)) )
                	        {
                	            alt218 = 1;
                	        }


                	    }
                	    else if ( (LA218_0 == 267) )
                	    {
                	        alt218 = 1;
                	    }


                	    switch (alt218) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3349:10: ln= switch_label
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_switch_label_in_ite_switch_labels10642);
                			    	ln = switch_label();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_switch_label.Add(ln.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   if(((ln != null) ? ln.isDefault : default(bool))) retval.isDefault =  true; 
                			    	}


                			    	// AST REWRITE
                			    	// elements:          
                			    	// token labels:      
                			    	// rule labels:       retval
                			    	// token list labels: 
                			    	// rule list labels:  
                			    	// wildcard labels: 
                			    	if ( (state.backtracking==0) ) {
                			    	retval.tree = root_0;
                			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                			    	root_0 = (CommonTree)adaptor.Nil;
                			    	// 3349:67: -> ^( LOG_OR[$ln.tree.Token, \"||\"] )
                			    	{
                			    	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3349:70: ^( LOG_OR[$ln.tree.Token, \"||\"] )
                			    	    {
                			    	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOG_OR, ((ln != null) ? ((CommonTree)ln.Tree) : null).Token, "||"), root_1);

                			    	    adaptor.AddChild(root_1,  dupTree(((CommonTree)retval.Tree)) );
                			    	    adaptor.AddChild(root_1,  dupTree(((ln != null) ? ((CommonTree)ln.Tree) : null)) );

                			    	    adaptor.AddChild(root_0, root_1);
                			    	    }

                			    	}

                			    	retval.tree = root_0;}
                			    }
                			    break;

                			default:
                			    goto loop218;
                	    }
                	} while (true);

                	loop218:
                		;	// Stops C# compiler whining that label 'loop218' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ite_switch_labels"

        public class switch_labels_return : TreeRuleReturnScope
        {
            public bool isDefault;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_labels"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3351:1: switch_labels returns [bool isDefault] : ( switch_label )+ ;
        public NetMaker.switch_labels_return switch_labels() // throws RecognitionException [1]
        {   
            NetMaker.switch_labels_return retval = new NetMaker.switch_labels_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.switch_label_return switch_label697 = default(NetMaker.switch_label_return);




                retval.isDefault =  false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3354:2: ( ( switch_label )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3355:9: ( switch_label )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3355:9: ( switch_label )+
                	int cnt219 = 0;
                	do 
                	{
                	    int alt219 = 2;
                	    int LA219_0 = input.LA(1);

                	    if ( (LA219_0 == 217) )
                	    {
                	        int LA219_2 = input.LA(2);

                	        if ( ((LA219_2 >= PARAMS && LA219_2 <= PARAMS_TYPELESS) || (LA219_2 >= YIELD_RETURN && LA219_2 <= UNCHECKED) || (LA219_2 >= MONOPLUS && LA219_2 <= APPLY) || (LA219_2 >= NEW && LA219_2 <= NEW_ARRAY) || LA219_2 == NEW_ANON_OBJECT || (LA219_2 >= RETURN && LA219_2 <= TRY) || LA219_2 == THROW || (LA219_2 >= BREAK && LA219_2 <= FOREACH) || LA219_2 == OPEN_BRACE || (LA219_2 >= NULL_COALESCE && LA219_2 <= IF) || (LA219_2 >= COND_EXPR && LA219_2 <= LEFT_SHIFT) || (LA219_2 >= SUPER && LA219_2 <= LAMBDA) || (LA219_2 >= TYPE && LA219_2 <= TYPE_DYNAMIC) || LA219_2 == CAST_EXPR || LA219_2 == SYNCHRONIZED || (LA219_2 >= BOOL && LA219_2 <= GT) || (LA219_2 >= ELIF && LA219_2 <= SEMI) || LA219_2 == 195 || LA219_2 == 198 || LA219_2 == 205 || LA219_2 == 208 || (LA219_2 >= 214 && LA219_2 <= 219) || LA219_2 == 221 || (LA219_2 >= 224 && LA219_2 <= 239) || (LA219_2 >= 241 && LA219_2 <= 244) || (LA219_2 >= 247 && LA219_2 <= 254) || LA219_2 == 256 || (LA219_2 >= 262 && LA219_2 <= 264) || (LA219_2 >= 266 && LA219_2 <= 272) || (LA219_2 >= 274 && LA219_2 <= 277)) )
                	        {
                	            alt219 = 1;
                	        }


                	    }
                	    else if ( (LA219_0 == 267) )
                	    {
                	        alt219 = 1;
                	    }


                	    switch (alt219) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3355:9: switch_label
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_switch_label_in_switch_labels10687);
                			    	switch_label697 = switch_label();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, switch_label697.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt219 >= 1 ) goto loop219;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee219 =
                		                new EarlyExitException(219, input);
                		            throw eee219;
                	    }
                	    cnt219++;
                	} while (true);

                	loop219:
                		;	// Stops C# compiler whining that label 'loop219' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "switch_labels"

        public class switch_label_return : TreeRuleReturnScope
        {
            public bool isDefault;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_label"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3358:1: switch_label returns [bool isDefault] : ( ^(c= 'case' ce= constant_expression[ObjectType] ) -> { $switch_statement::convertToIfThenElse }? ^( APPLY[$c.token, \"APPLY\"] ^( DOT[$c.token, \".\"] IDENTIFIER[$c.token, $switch_statement::scrutVar] IDENTIFIER[$c.token, \"equals\"] ) ^( ARGS[$c.token, \"ARGS\"] $ce) ) -> { $switch_statement::isEnum && $constant_expression.rmId != null}? ^( $c IDENTIFIER[$c.token, $constant_expression.rmId] ) -> ^( $c $ce) | 'default' );
        public NetMaker.switch_label_return switch_label() // throws RecognitionException [1]
        {   
            NetMaker.switch_label_return retval = new NetMaker.switch_label_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree string_literal698 = null;
            NetMaker.constant_expression_return ce = default(NetMaker.constant_expression_return);


            CommonTree c_tree=null;
            CommonTree string_literal698_tree=null;
            RewriteRuleNodeStream stream_267 = new RewriteRuleNodeStream(adaptor,"token 267");
            RewriteRuleSubtreeStream stream_constant_expression = new RewriteRuleSubtreeStream(adaptor,"rule constant_expression");

                retval.isDefault =  false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3361:2: ( ^(c= 'case' ce= constant_expression[ObjectType] ) -> { $switch_statement::convertToIfThenElse }? ^( APPLY[$c.token, \"APPLY\"] ^( DOT[$c.token, \".\"] IDENTIFIER[$c.token, $switch_statement::scrutVar] IDENTIFIER[$c.token, \"equals\"] ) ^( ARGS[$c.token, \"ARGS\"] $ce) ) -> { $switch_statement::isEnum && $constant_expression.rmId != null}? ^( $c IDENTIFIER[$c.token, $constant_expression.rmId] ) -> ^( $c $ce) | 'default' )
                int alt220 = 2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0 == 267) )
                {
                    alt220 = 1;
                }
                else if ( (LA220_0 == 217) )
                {
                    alt220 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d220s0 =
                        new NoViableAltException("", 220, 0, input);

                    throw nvae_d220s0;
                }
                switch (alt220) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3362:5: ^(c= 'case' ce= constant_expression[ObjectType] )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	c=(CommonTree)Match(input,267,FOLLOW_267_in_switch_label10716); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_267.Add(c);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_constant_expression_in_switch_label10721);
                        	ce = constant_expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_constant_expression.Add(ce.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}



                        	// AST REWRITE
                        	// elements:          ce, c, ce, c
                        	// token labels:      c
                        	// rule labels:       retval, ce
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_c = new RewriteRuleNodeStream(adaptor, "token c", c);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_ce = new RewriteRuleSubtreeStream(adaptor, "rule ce", ce!=null ? ce.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3363:9: -> { $switch_statement::convertToIfThenElse }? ^( APPLY[$c.token, \"APPLY\"] ^( DOT[$c.token, \".\"] IDENTIFIER[$c.token, $switch_statement::scrutVar] IDENTIFIER[$c.token, \"equals\"] ) ^( ARGS[$c.token, \"ARGS\"] $ce) )
                        	if ( ((switch_statement_scope)switch_statement_stack.Peek()).convertToIfThenElse )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3365:16: ^( APPLY[$c.token, \"APPLY\"] ^( DOT[$c.token, \".\"] IDENTIFIER[$c.token, $switch_statement::scrutVar] IDENTIFIER[$c.token, \"equals\"] ) ^( ARGS[$c.token, \"ARGS\"] $ce) )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, c.token, "APPLY"), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3365:43: ^( DOT[$c.token, \".\"] IDENTIFIER[$c.token, $switch_statement::scrutVar] IDENTIFIER[$c.token, \"equals\"] )
                        	    {
                        	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                        	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, c.token, "."), root_2);

                        	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, c.token, ((switch_statement_scope)switch_statement_stack.Peek()).scrutVar));
                        	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, c.token, "equals"));

                        	    adaptor.AddChild(root_1, root_2);
                        	    }
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3365:146: ^( ARGS[$c.token, \"ARGS\"] $ce)
                        	    {
                        	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                        	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, c.token, "ARGS"), root_2);

                        	    adaptor.AddChild(root_2, stream_ce.NextTree());

                        	    adaptor.AddChild(root_1, root_2);
                        	    }

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}
                        	else // 3366:9: -> { $switch_statement::isEnum && $constant_expression.rmId != null}? ^( $c IDENTIFIER[$c.token, $constant_expression.rmId] )
                        	if ( ((switch_statement_scope)switch_statement_stack.Peek()).isEnum && ((ce != null) ? ce.rmId : default(string)) != null)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3366:79: ^( $c IDENTIFIER[$c.token, $constant_expression.rmId] )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_c.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, c.token, ((ce != null) ? ce.rmId : default(string))));

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}
                        	else // 3367:9: -> ^( $c $ce)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3367:12: ^( $c $ce)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_c.NextNode(), root_1);

                        	    adaptor.AddChild(root_1, stream_ce.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3368:4: 'default'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal698=(CommonTree)Match(input,217,FOLLOW_217_in_switch_label10836); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal698_tree = (CommonTree)adaptor.DupNode(string_literal698);

                        		adaptor.AddChild(root_0, string_literal698_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.isDefault =  true; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "switch_label"

        public class iteration_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "iteration_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3369:1: iteration_statement : ( ^( 'while' boolean_expression SEP embedded_statement[/* isStatementListCtxt */ false] ) | do_statement | ^( 'for' ( for_initializer )? SEP ( for_condition )? SEP ( for_iterator )? SEP embedded_statement[/* isStatementListCtxt */ false] ) | ^(f= 'foreach' local_variable_type identifier expression[ObjectType] s= SEP embedded_statement[/* isStatementListCtxt */ false] ) magicTypeFromTemplate[$local_variable_type.isVar && elType != null, $f.token, elType] magicObjectType[$f.token] magicForeachVar[$f.token] -> ^( $f $s) );
        public NetMaker.iteration_statement_return iteration_statement() // throws RecognitionException [1]
        {   
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.iteration_statement_return retval = new NetMaker.iteration_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree f = null;
            CommonTree s = null;
            CommonTree string_literal699 = null;
            CommonTree SEP701 = null;
            CommonTree string_literal704 = null;
            CommonTree SEP706 = null;
            CommonTree SEP708 = null;
            CommonTree SEP710 = null;
            NetMaker.boolean_expression_return boolean_expression700 = default(NetMaker.boolean_expression_return);

            NetMaker.embedded_statement_return embedded_statement702 = default(NetMaker.embedded_statement_return);

            NetMaker.do_statement_return do_statement703 = default(NetMaker.do_statement_return);

            NetMaker.for_initializer_return for_initializer705 = default(NetMaker.for_initializer_return);

            NetMaker.for_condition_return for_condition707 = default(NetMaker.for_condition_return);

            NetMaker.for_iterator_return for_iterator709 = default(NetMaker.for_iterator_return);

            NetMaker.embedded_statement_return embedded_statement711 = default(NetMaker.embedded_statement_return);

            NetMaker.local_variable_type_return local_variable_type712 = default(NetMaker.local_variable_type_return);

            NetMaker.identifier_return identifier713 = default(NetMaker.identifier_return);

            NetMaker.expression_return expression714 = default(NetMaker.expression_return);

            NetMaker.embedded_statement_return embedded_statement715 = default(NetMaker.embedded_statement_return);

            NetMaker.magicTypeFromTemplate_return magicTypeFromTemplate716 = default(NetMaker.magicTypeFromTemplate_return);

            NetMaker.magicObjectType_return magicObjectType717 = default(NetMaker.magicObjectType_return);

            NetMaker.magicForeachVar_return magicForeachVar718 = default(NetMaker.magicForeachVar_return);


            CommonTree f_tree=null;
            CommonTree s_tree=null;
            CommonTree string_literal699_tree=null;
            CommonTree SEP701_tree=null;
            CommonTree string_literal704_tree=null;
            CommonTree SEP706_tree=null;
            CommonTree SEP708_tree=null;
            CommonTree SEP710_tree=null;
            RewriteRuleNodeStream stream_FOREACH = new RewriteRuleNodeStream(adaptor,"token FOREACH");
            RewriteRuleNodeStream stream_SEP = new RewriteRuleNodeStream(adaptor,"token SEP");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_magicForeachVar = new RewriteRuleSubtreeStream(adaptor,"rule magicForeachVar");
            RewriteRuleSubtreeStream stream_magicTypeFromTemplate = new RewriteRuleSubtreeStream(adaptor,"rule magicTypeFromTemplate");
            RewriteRuleSubtreeStream stream_magicObjectType = new RewriteRuleSubtreeStream(adaptor,"rule magicObjectType");
            RewriteRuleSubtreeStream stream_local_variable_type = new RewriteRuleSubtreeStream(adaptor,"rule local_variable_type");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

                ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();
                CommonTree ret = null;
                CommonTree newType = null;
                CommonTree newIdentifier = null;
                CommonTree newExpression = null;
                CommonTree newEmbeddedStatement = null;

                TypeRepTemplate exprType = null;
                TypeRepTemplate elType = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3385:2: ( ^( 'while' boolean_expression SEP embedded_statement[/* isStatementListCtxt */ false] ) | do_statement | ^( 'for' ( for_initializer )? SEP ( for_condition )? SEP ( for_iterator )? SEP embedded_statement[/* isStatementListCtxt */ false] ) | ^(f= 'foreach' local_variable_type identifier expression[ObjectType] s= SEP embedded_statement[/* isStatementListCtxt */ false] ) magicTypeFromTemplate[$local_variable_type.isVar && elType != null, $f.token, elType] magicObjectType[$f.token] magicForeachVar[$f.token] -> ^( $f $s) )
                int alt224 = 4;
                switch ( input.LA(1) ) 
                {
                case 268:
                	{
                    alt224 = 1;
                    }
                    break;
                case 269:
                	{
                    alt224 = 2;
                    }
                    break;
                case 270:
                	{
                    alt224 = 3;
                    }
                    break;
                case FOREACH:
                	{
                    alt224 = 4;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d224s0 =
                	        new NoViableAltException("", 224, 0, input);

                	    throw nvae_d224s0;
                }

                switch (alt224) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3386:2: ^( 'while' boolean_expression SEP embedded_statement[/* isStatementListCtxt */ false] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal699=(CommonTree)Match(input,268,FOLLOW_268_in_iteration_statement10861); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal699_tree = (CommonTree)adaptor.DupNode(string_literal699);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal699_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_boolean_expression_in_iteration_statement10863);
                        	boolean_expression700 = boolean_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, boolean_expression700.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	SEP701=(CommonTree)Match(input,SEP,FOLLOW_SEP_in_iteration_statement10865); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{SEP701_tree = (CommonTree)adaptor.DupNode(SEP701);

                        		adaptor.AddChild(root_1, SEP701_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_embedded_statement_in_iteration_statement10867);
                        	embedded_statement702 = embedded_statement(/* isStatementListCtxt */ false);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, embedded_statement702.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3387:4: do_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_do_statement_in_iteration_statement10874);
                        	do_statement703 = do_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, do_statement703.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3388:4: ^( 'for' ( for_initializer )? SEP ( for_condition )? SEP ( for_iterator )? SEP embedded_statement[/* isStatementListCtxt */ false] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	string_literal704=(CommonTree)Match(input,270,FOLLOW_270_in_iteration_statement10880); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal704_tree = (CommonTree)adaptor.DupNode(string_literal704);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal704_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3388:12: ( for_initializer )?
                        	int alt221 = 2;
                        	int LA221_0 = input.LA(1);

                        	if ( ((LA221_0 >= PARAMS && LA221_0 <= PARAMS_TYPELESS) || (LA221_0 >= MONOPLUS && LA221_0 <= APPLY) || (LA221_0 >= NEW && LA221_0 <= NEW_ARRAY) || LA221_0 == NEW_ANON_OBJECT || (LA221_0 >= OBJECT && LA221_0 <= THIS) || LA221_0 == NULL_COALESCE || (LA221_0 >= COND_EXPR && LA221_0 <= LEFT_SHIFT) || (LA221_0 >= SUPER && LA221_0 <= LAMBDA) || (LA221_0 >= TYPE && LA221_0 <= TYPE_DYNAMIC) || LA221_0 == CAST_EXPR || (LA221_0 >= BOOL && LA221_0 <= GT) || (LA221_0 >= ELIF && LA221_0 <= UNDEF) || LA221_0 == 195 || LA221_0 == 208 || (LA221_0 >= 214 && LA221_0 <= 219) || LA221_0 == 221 || (LA221_0 >= 224 && LA221_0 <= 239) || (LA221_0 >= 241 && LA221_0 <= 244) || (LA221_0 >= 247 && LA221_0 <= 254) || LA221_0 == 256 || (LA221_0 >= 263 && LA221_0 <= 264) || (LA221_0 >= 274 && LA221_0 <= 277)) )
                        	{
                        	    alt221 = 1;
                        	}
                        	switch (alt221) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3388:12: for_initializer
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_for_initializer_in_iteration_statement10882);
                        	        	for_initializer705 = for_initializer();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, for_initializer705.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	SEP706=(CommonTree)Match(input,SEP,FOLLOW_SEP_in_iteration_statement10885); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{SEP706_tree = (CommonTree)adaptor.DupNode(SEP706);

                        		adaptor.AddChild(root_1, SEP706_tree);
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3388:33: ( for_condition )?
                        	int alt222 = 2;
                        	int LA222_0 = input.LA(1);

                        	if ( ((LA222_0 >= PARAMS && LA222_0 <= PARAMS_TYPELESS) || (LA222_0 >= MONOPLUS && LA222_0 <= APPLY) || (LA222_0 >= NEW && LA222_0 <= NEW_ARRAY) || LA222_0 == NEW_ANON_OBJECT || (LA222_0 >= OBJECT && LA222_0 <= THIS) || LA222_0 == NULL_COALESCE || (LA222_0 >= COND_EXPR && LA222_0 <= LEFT_SHIFT) || (LA222_0 >= SUPER && LA222_0 <= LAMBDA) || LA222_0 == CAST_EXPR || (LA222_0 >= BOOL && LA222_0 <= GT) || (LA222_0 >= ELIF && LA222_0 <= UNDEF) || LA222_0 == 195 || LA222_0 == 208 || (LA222_0 >= 214 && LA222_0 <= 219) || LA222_0 == 221 || (LA222_0 >= 224 && LA222_0 <= 239) || (LA222_0 >= 241 && LA222_0 <= 244) || (LA222_0 >= 247 && LA222_0 <= 254) || LA222_0 == 256 || (LA222_0 >= 263 && LA222_0 <= 264) || (LA222_0 >= 274 && LA222_0 <= 277)) )
                        	{
                        	    alt222 = 1;
                        	}
                        	switch (alt222) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3388:33: for_condition
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_for_condition_in_iteration_statement10887);
                        	        	for_condition707 = for_condition();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, for_condition707.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	SEP708=(CommonTree)Match(input,SEP,FOLLOW_SEP_in_iteration_statement10890); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{SEP708_tree = (CommonTree)adaptor.DupNode(SEP708);

                        		adaptor.AddChild(root_1, SEP708_tree);
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3388:52: ( for_iterator )?
                        	int alt223 = 2;
                        	int LA223_0 = input.LA(1);

                        	if ( ((LA223_0 >= PARAMS && LA223_0 <= PARAMS_TYPELESS) || (LA223_0 >= MONOPLUS && LA223_0 <= APPLY) || (LA223_0 >= NEW && LA223_0 <= NEW_ARRAY) || LA223_0 == NEW_ANON_OBJECT || (LA223_0 >= OBJECT && LA223_0 <= THIS) || LA223_0 == NULL_COALESCE || (LA223_0 >= COND_EXPR && LA223_0 <= LEFT_SHIFT) || (LA223_0 >= SUPER && LA223_0 <= LAMBDA) || LA223_0 == CAST_EXPR || (LA223_0 >= BOOL && LA223_0 <= GT) || (LA223_0 >= ELIF && LA223_0 <= UNDEF) || LA223_0 == 195 || LA223_0 == 208 || (LA223_0 >= 214 && LA223_0 <= 219) || LA223_0 == 221 || (LA223_0 >= 224 && LA223_0 <= 239) || (LA223_0 >= 241 && LA223_0 <= 244) || (LA223_0 >= 247 && LA223_0 <= 254) || LA223_0 == 256 || (LA223_0 >= 263 && LA223_0 <= 264) || (LA223_0 >= 274 && LA223_0 <= 277)) )
                        	{
                        	    alt223 = 1;
                        	}
                        	switch (alt223) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3388:52: for_iterator
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_for_iterator_in_iteration_statement10892);
                        	        	for_iterator709 = for_iterator();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_1, for_iterator709.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	SEP710=(CommonTree)Match(input,SEP,FOLLOW_SEP_in_iteration_statement10895); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{SEP710_tree = (CommonTree)adaptor.DupNode(SEP710);

                        		adaptor.AddChild(root_1, SEP710_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_embedded_statement_in_iteration_statement10897);
                        	embedded_statement711 = embedded_statement(/* isStatementListCtxt */ false);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, embedded_statement711.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3389:4: ^(f= 'foreach' local_variable_type identifier expression[ObjectType] s= SEP embedded_statement[/* isStatementListCtxt */ false] ) magicTypeFromTemplate[$local_variable_type.isVar && elType != null, $f.token, elType] magicObjectType[$f.token] magicForeachVar[$f.token]
                        {
                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	f=(CommonTree)Match(input,FOREACH,FOLLOW_FOREACH_in_iteration_statement10907); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_FOREACH.Add(f);



                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_local_variable_type_in_iteration_statement10909);
                        	local_variable_type712 = local_variable_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_local_variable_type.Add(local_variable_type712.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_iteration_statement10913);
                        	identifier713 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_identifier.Add(identifier713.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_iteration_statement10915);
                        	expression714 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_expression.Add(expression714.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	s=(CommonTree)Match(input,SEP,FOLLOW_SEP_in_iteration_statement10920); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_SEP.Add(s);

                        	if ( (state.backtracking==0) )
                        	{
                        	   
                        	              newExpression = ((expression714 != null) ? ((CommonTree)expression714.Tree) : null);
                        	              exprType = ((expression714 != null) ? expression714.dotNetType : default(TypeRepTemplate));
                        	              if (exprType != null) {
                        	                  ResolveResult iterable = exprType.ResolveIterable(AppEnv);
                        	                  if (iterable != null) {
                        	                      if (!String.IsNullOrEmpty(iterable.Result.Warning)) Warning(((expression714 != null) ? ((CommonTree)expression714.Tree) : null).Token.Line, iterable.Result.Warning);
                        	                      Dictionary<string,CommonTree> myMap = new Dictionary<string,CommonTree>();
                        	                      myMap["expr"] = wrapExpression(((expression714 != null) ? ((CommonTree)expression714.Tree) : null), ((expression714 != null) ? ((CommonTree)expression714.Tree) : null).Token);
                        	                      newExpression = mkJavaWrapper(iterable.Result.Java, myMap, ((expression714 != null) ? ((CommonTree)expression714.Tree) : null).Token);
                        	                      AddToImports(iterable.Result.Imports);
                        	                      elType = iterable.ResultType;
                        	                  }
                        	              }
                        	              // Set identifier type in symbol table
                        	              if (((local_variable_type712 != null) ? local_variable_type712.isVar : default(bool)) && elType != null) {
                        	                 ((SymTab_scope)SymTab_stack.Peek()).symtab[((identifier713 != null) ? identifier713.thetext : default(string))] = elType;
                        	              }
                        	              else {
                        	                 ((SymTab_scope)SymTab_stack.Peek()).symtab[((identifier713 != null) ? identifier713.thetext : default(string))] = ((local_variable_type712 != null) ? local_variable_type712.dotNetType : default(TypeRepTemplate)); 
                        	              }
                        	          
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_embedded_statement_in_iteration_statement10946);
                        	embedded_statement715 = embedded_statement(/* isStatementListCtxt */ false);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement715.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicTypeFromTemplate_in_iteration_statement10961);
                        	magicTypeFromTemplate716 = magicTypeFromTemplate(((local_variable_type712 != null) ? local_variable_type712.isVar : default(bool)) && elType != null, f.token, elType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicTypeFromTemplate.Add(magicTypeFromTemplate716.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicObjectType_in_iteration_statement10964);
                        	magicObjectType717 = magicObjectType(f.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicObjectType.Add(magicObjectType717.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicForeachVar_in_iteration_statement10967);
                        	magicForeachVar718 = magicForeachVar(f.token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicForeachVar.Add(magicForeachVar718.Tree);
                        	if ( (state.backtracking==0) )
                        	{

                        	              newType = ((local_variable_type712 != null) ? ((CommonTree)local_variable_type712.Tree) : null);
                        	              newIdentifier = ((identifier713 != null) ? ((CommonTree)identifier713.Tree) : null);
                        	              newEmbeddedStatement = ((embedded_statement715 != null) ? ((CommonTree)embedded_statement715.Tree) : null);
                        	              
                        	              bool needCast = true;
                        	              if (((local_variable_type712 != null) ? local_variable_type712.isVar : default(bool))) {
                        	                 // If local_type is dynamic then just leave it there, 
                        	                 if (elType != null) {
                        	                    newType = ((magicTypeFromTemplate716 != null) ? ((CommonTree)magicTypeFromTemplate716.Tree) : null);
                        	                 }
                        	                 needCast = false;
                        	              }
                        	              else {
                        	                 if (elType != null && ((local_variable_type712 != null) ? local_variable_type712.dotNetType : default(TypeRepTemplate)) != null) {
                        	                    if (elType.IsA(((local_variable_type712 != null) ? local_variable_type712.dotNetType : default(TypeRepTemplate)), AppEnv)) {
                        	                       needCast = false;
                        	                    }
                        	                 } 
                        	              }
                        	              // Construct new foreach using newExpression and needCast
                        	              if (needCast) {
                        	                  newType = ((magicObjectType717 != null) ? ((CommonTree)magicObjectType717.Tree) : null);
                        	                  newIdentifier = ((magicForeachVar718 != null) ? ((CommonTree)magicForeachVar718.Tree) : null);
                        	                  newEmbeddedStatement = prefixCast(((local_variable_type712 != null) ? ((CommonTree)local_variable_type712.Tree) : null), ((identifier713 != null) ? ((CommonTree)identifier713.Tree) : null), mkBoxedType(((local_variable_type712 != null) ? ((CommonTree)local_variable_type712.Tree) : null), ((local_variable_type712 != null) ? ((CommonTree)local_variable_type712.Tree) : null).Token), newIdentifier, ((embedded_statement715 != null) ? ((CommonTree)embedded_statement715.Tree) : null), ((embedded_statement715 != null) ? ((CommonTree)embedded_statement715.Tree) : null).Token);
                        	              }
                        	          
                        	}


                        	// AST REWRITE
                        	// elements:          s, f
                        	// token labels:      f, s
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_f = new RewriteRuleNodeStream(adaptor, "token f", f);
                        	RewriteRuleNodeStream stream_s = new RewriteRuleNodeStream(adaptor, "token s", s);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 3441:9: -> ^( $f $s)
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3441:12: ^( $f $s)
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_f.NextNode(), root_1);

                        	    adaptor.AddChild(root_1,  newType );
                        	    adaptor.AddChild(root_1,  newIdentifier );
                        	    adaptor.AddChild(root_1,  newExpression );
                        	    adaptor.AddChild(root_1, stream_s.NextNode());
                        	    adaptor.AddChild(root_1,  newEmbeddedStatement );

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (ret != null)
                          retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "iteration_statement"

        public class do_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "do_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3443:1: do_statement : 'do' embedded_statement[/* isStatementListCtxt */ false] 'while' '(' boolean_expression ')' ';' ;
        public NetMaker.do_statement_return do_statement() // throws RecognitionException [1]
        {   
            NetMaker.do_statement_return retval = new NetMaker.do_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal719 = null;
            CommonTree string_literal721 = null;
            CommonTree char_literal722 = null;
            CommonTree char_literal724 = null;
            CommonTree char_literal725 = null;
            NetMaker.embedded_statement_return embedded_statement720 = default(NetMaker.embedded_statement_return);

            NetMaker.boolean_expression_return boolean_expression723 = default(NetMaker.boolean_expression_return);


            CommonTree string_literal719_tree=null;
            CommonTree string_literal721_tree=null;
            CommonTree char_literal722_tree=null;
            CommonTree char_literal724_tree=null;
            CommonTree char_literal725_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3443:13: ( 'do' embedded_statement[/* isStatementListCtxt */ false] 'while' '(' boolean_expression ')' ';' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3444:2: 'do' embedded_statement[/* isStatementListCtxt */ false] 'while' '(' boolean_expression ')' ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal719=(CommonTree)Match(input,269,FOLLOW_269_in_do_statement11017); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal719_tree = (CommonTree)adaptor.DupNode(string_literal719);

                		adaptor.AddChild(root_0, string_literal719_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_do_statement11021);
                	embedded_statement720 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, embedded_statement720.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal721=(CommonTree)Match(input,268,FOLLOW_268_in_do_statement11026); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal721_tree = (CommonTree)adaptor.DupNode(string_literal721);

                		adaptor.AddChild(root_0, string_literal721_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal722=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_do_statement11030); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal722_tree = (CommonTree)adaptor.DupNode(char_literal722);

                		adaptor.AddChild(root_0, char_literal722_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_do_statement11034);
                	boolean_expression723 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, boolean_expression723.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal724=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_do_statement11038); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal724_tree = (CommonTree)adaptor.DupNode(char_literal724);

                		adaptor.AddChild(root_0, char_literal724_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal725=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_do_statement11042); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal725_tree = (CommonTree)adaptor.DupNode(char_literal725);

                		adaptor.AddChild(root_0, char_literal725_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "do_statement"

        public class for_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "for_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3445:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
        public NetMaker.for_initializer_return for_initializer() // throws RecognitionException [1]
        {   
            NetMaker.for_initializer_return retval = new NetMaker.for_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.local_variable_declaration_return local_variable_declaration726 = default(NetMaker.local_variable_declaration_return);

            NetMaker.statement_expression_list_return statement_expression_list727 = default(NetMaker.statement_expression_list_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3445:16: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
                int alt225 = 2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0 == TYPE_VAR) && (synpred19_NetMaker()) )
                {
                    alt225 = 1;
                }
                else if ( (LA225_0 == TYPE_DYNAMIC) && (synpred19_NetMaker()) )
                {
                    alt225 = 1;
                }
                else if ( (LA225_0 == TYPE) && (synpred19_NetMaker()) )
                {
                    alt225 = 1;
                }
                else if ( ((LA225_0 >= PARAMS && LA225_0 <= PARAMS_TYPELESS) || (LA225_0 >= MONOPLUS && LA225_0 <= APPLY) || (LA225_0 >= NEW && LA225_0 <= NEW_ARRAY) || LA225_0 == NEW_ANON_OBJECT || (LA225_0 >= OBJECT && LA225_0 <= THIS) || LA225_0 == NULL_COALESCE || (LA225_0 >= COND_EXPR && LA225_0 <= LEFT_SHIFT) || (LA225_0 >= SUPER && LA225_0 <= LAMBDA) || LA225_0 == CAST_EXPR || (LA225_0 >= BOOL && LA225_0 <= GT) || (LA225_0 >= ELIF && LA225_0 <= UNDEF) || LA225_0 == 195 || LA225_0 == 208 || (LA225_0 >= 214 && LA225_0 <= 219) || LA225_0 == 221 || (LA225_0 >= 224 && LA225_0 <= 239) || (LA225_0 >= 241 && LA225_0 <= 244) || (LA225_0 >= 247 && LA225_0 <= 254) || LA225_0 == 256 || (LA225_0 >= 263 && LA225_0 <= 264) || (LA225_0 >= 274 && LA225_0 <= 277)) )
                {
                    alt225 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d225s0 =
                        new NoViableAltException("", 225, 0, input);

                    throw nvae_d225s0;
                }
                switch (alt225) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3446:2: ( local_variable_declaration )=> local_variable_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_local_variable_declaration_in_for_initializer11056);
                        	local_variable_declaration726 = local_variable_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, local_variable_declaration726.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3447:4: statement_expression_list
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_statement_expression_list_in_for_initializer11061);
                        	statement_expression_list727 = statement_expression_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, statement_expression_list727.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "for_initializer"

        public class for_condition_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "for_condition"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3449:1: for_condition : boolean_expression ;
        public NetMaker.for_condition_return for_condition() // throws RecognitionException [1]
        {   
            NetMaker.for_condition_return retval = new NetMaker.for_condition_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.boolean_expression_return boolean_expression728 = default(NetMaker.boolean_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3449:14: ( boolean_expression )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3450:2: boolean_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_for_condition11071);
                	boolean_expression728 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, boolean_expression728.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "for_condition"

        public class for_iterator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "for_iterator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3451:1: for_iterator : statement_expression_list ;
        public NetMaker.for_iterator_return for_iterator() // throws RecognitionException [1]
        {   
            NetMaker.for_iterator_return retval = new NetMaker.for_iterator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.statement_expression_list_return statement_expression_list729 = default(NetMaker.statement_expression_list_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3451:13: ( statement_expression_list )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3452:2: statement_expression_list
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_expression_list_in_for_iterator11079);
                	statement_expression_list729 = statement_expression_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, statement_expression_list729.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "for_iterator"

        public class statement_expression_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement_expression_list"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3453:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
        public NetMaker.statement_expression_list_return statement_expression_list() // throws RecognitionException [1]
        {   
            NetMaker.statement_expression_list_return retval = new NetMaker.statement_expression_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal731 = null;
            NetMaker.statement_expression_return statement_expression730 = default(NetMaker.statement_expression_return);

            NetMaker.statement_expression_return statement_expression732 = default(NetMaker.statement_expression_return);


            CommonTree char_literal731_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3453:26: ( statement_expression ( ',' statement_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3454:2: statement_expression ( ',' statement_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_expression_in_statement_expression_list11087);
                	statement_expression730 = statement_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, statement_expression730.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3454:23: ( ',' statement_expression )*
                	do 
                	{
                	    int alt226 = 2;
                	    int LA226_0 = input.LA(1);

                	    if ( (LA226_0 == COMMA) )
                	    {
                	        alt226 = 1;
                	    }


                	    switch (alt226) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3454:24: ',' statement_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal731=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_statement_expression_list11090); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal731_tree = (CommonTree)adaptor.DupNode(char_literal731);

                			    		adaptor.AddChild(root_0, char_literal731_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_statement_expression_in_statement_expression_list11092);
                			    	statement_expression732 = statement_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, statement_expression732.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop226;
                	    }
                	} while (true);

                	loop226:
                		;	// Stops C# compiler whining that label 'loop226' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement_expression_list"

        public class jump_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "jump_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3455:1: jump_statement : ( break_statement | continue_statement | goto_statement );
        public NetMaker.jump_statement_return jump_statement() // throws RecognitionException [1]
        {   
            NetMaker.jump_statement_return retval = new NetMaker.jump_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.break_statement_return break_statement733 = default(NetMaker.break_statement_return);

            NetMaker.continue_statement_return continue_statement734 = default(NetMaker.continue_statement_return);

            NetMaker.goto_statement_return goto_statement735 = default(NetMaker.goto_statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3455:15: ( break_statement | continue_statement | goto_statement )
                int alt227 = 3;
                switch ( input.LA(1) ) 
                {
                case BREAK:
                	{
                    alt227 = 1;
                    }
                    break;
                case 271:
                	{
                    alt227 = 2;
                    }
                    break;
                case 272:
                	{
                    alt227 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d227s0 =
                	        new NoViableAltException("", 227, 0, input);

                	    throw nvae_d227s0;
                }

                switch (alt227) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3456:2: break_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_break_statement_in_jump_statement11102);
                        	break_statement733 = break_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, break_statement733.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3457:4: continue_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_continue_statement_in_jump_statement11107);
                        	continue_statement734 = continue_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, continue_statement734.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3458:4: goto_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_goto_statement_in_jump_statement11112);
                        	goto_statement735 = goto_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, goto_statement735.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "jump_statement"

        public class break_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "break_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3460:1: break_statement : 'break' ';' ;
        public NetMaker.break_statement_return break_statement() // throws RecognitionException [1]
        {   
            NetMaker.break_statement_return retval = new NetMaker.break_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal736 = null;
            CommonTree char_literal737 = null;

            CommonTree string_literal736_tree=null;
            CommonTree char_literal737_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3460:16: ( 'break' ';' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3461:2: 'break' ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal736=(CommonTree)Match(input,BREAK,FOLLOW_BREAK_in_break_statement11120); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal736_tree = (CommonTree)adaptor.DupNode(string_literal736);

                		adaptor.AddChild(root_0, string_literal736_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal737=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_break_statement11124); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal737_tree = (CommonTree)adaptor.DupNode(char_literal737);

                		adaptor.AddChild(root_0, char_literal737_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "break_statement"

        public class continue_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "continue_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3462:1: continue_statement : 'continue' ';' ;
        public NetMaker.continue_statement_return continue_statement() // throws RecognitionException [1]
        {   
            NetMaker.continue_statement_return retval = new NetMaker.continue_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal738 = null;
            CommonTree char_literal739 = null;

            CommonTree string_literal738_tree=null;
            CommonTree char_literal739_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3462:19: ( 'continue' ';' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3463:2: 'continue' ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal738=(CommonTree)Match(input,271,FOLLOW_271_in_continue_statement11132); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal738_tree = (CommonTree)adaptor.DupNode(string_literal738);

                		adaptor.AddChild(root_0, string_literal738_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal739=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_continue_statement11136); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal739_tree = (CommonTree)adaptor.DupNode(char_literal739);

                		adaptor.AddChild(root_0, char_literal739_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "continue_statement"

        public class goto_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "goto_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3464:1: goto_statement : 'goto' ( identifier | 'case' constant_expression[ObjectType] | 'default' ) ';' ;
        public NetMaker.goto_statement_return goto_statement() // throws RecognitionException [1]
        {   
            NetMaker.goto_statement_return retval = new NetMaker.goto_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal740 = null;
            CommonTree string_literal742 = null;
            CommonTree string_literal744 = null;
            CommonTree char_literal745 = null;
            NetMaker.identifier_return identifier741 = default(NetMaker.identifier_return);

            NetMaker.constant_expression_return constant_expression743 = default(NetMaker.constant_expression_return);


            CommonTree string_literal740_tree=null;
            CommonTree string_literal742_tree=null;
            CommonTree string_literal744_tree=null;
            CommonTree char_literal745_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3464:15: ( 'goto' ( identifier | 'case' constant_expression[ObjectType] | 'default' ) ';' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3465:2: 'goto' ( identifier | 'case' constant_expression[ObjectType] | 'default' ) ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal740=(CommonTree)Match(input,272,FOLLOW_272_in_goto_statement11144); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal740_tree = (CommonTree)adaptor.DupNode(string_literal740);

                		adaptor.AddChild(root_0, string_literal740_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3465:11: ( identifier | 'case' constant_expression[ObjectType] | 'default' )
                	int alt228 = 3;
                	switch ( input.LA(1) ) 
                	{
                	case IDENTIFIER:
                	case ELIF:
                	case ENDIF:
                	case DEFINE:
                	case UNDEF:
                	case 195:
                	case 221:
                	case 224:
                	case 225:
                	case 226:
                	case 227:
                	case 228:
                	case 229:
                	case 230:
                	case 231:
                	case 232:
                	case 233:
                	case 234:
                	case 235:
                	case 236:
                	case 237:
                	case 238:
                	case 239:
                	case 241:
                	case 242:
                	case 243:
                	case 244:
                	case 247:
                	case 248:
                	case 249:
                	case 250:
                	case 256:
                	case 263:
                	case 264:
                	case 274:
                	case 277:
                		{
                	    alt228 = 1;
                	    }
                	    break;
                	case 267:
                		{
                	    alt228 = 2;
                	    }
                	    break;
                	case 217:
                		{
                	    alt228 = 3;
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d228s0 =
                		        new NoViableAltException("", 228, 0, input);

                		    throw nvae_d228s0;
                	}

                	switch (alt228) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3465:13: identifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_goto_statement11150);
                	        	identifier741 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier741.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3466:7: 'case' constant_expression[ObjectType]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal742=(CommonTree)Match(input,267,FOLLOW_267_in_goto_statement11158); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal742_tree = (CommonTree)adaptor.DupNode(string_literal742);

                	        		adaptor.AddChild(root_0, string_literal742_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_constant_expression_in_goto_statement11162);
                	        	constant_expression743 = constant_expression(ObjectType);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, constant_expression743.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3467:7: 'default'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal744=(CommonTree)Match(input,217,FOLLOW_217_in_goto_statement11171); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal744_tree = (CommonTree)adaptor.DupNode(string_literal744);

                	        		adaptor.AddChild(root_0, string_literal744_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal745=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_goto_statement11176); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal745_tree = (CommonTree)adaptor.DupNode(char_literal745);

                		adaptor.AddChild(root_0, char_literal745_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "goto_statement"

        public class catch_clauses_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "catch_clauses"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3468:1: catch_clauses : ( catch_clause )+ ;
        public NetMaker.catch_clauses_return catch_clauses() // throws RecognitionException [1]
        {   
            NetMaker.catch_clauses_return retval = new NetMaker.catch_clauses_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.catch_clause_return catch_clause746 = default(NetMaker.catch_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3468:14: ( ( catch_clause )+ )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3469:5: ( catch_clause )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3469:5: ( catch_clause )+
                	int cnt229 = 0;
                	do 
                	{
                	    int alt229 = 2;
                	    int LA229_0 = input.LA(1);

                	    if ( (LA229_0 == CATCH) )
                	    {
                	        alt229 = 1;
                	    }


                	    switch (alt229) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3469:5: catch_clause
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_catch_clause_in_catch_clauses11187);
                			    	catch_clause746 = catch_clause();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, catch_clause746.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt229 >= 1 ) goto loop229;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee229 =
                		                new EarlyExitException(229, input);
                		            throw eee229;
                	    }
                	    cnt229++;
                	} while (true);

                	loop229:
                		;	// Stops C# compiler whining that label 'loop229' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "catch_clauses"

        public class catch_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "catch_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3470:1: catch_clause : ^( 'catch' class_type identifier block ) ;
        public NetMaker.catch_clause_return catch_clause() // throws RecognitionException [1]
        {   
            SymTab_stack.Push(new SymTab_scope());

            NetMaker.catch_clause_return retval = new NetMaker.catch_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal747 = null;
            NetMaker.class_type_return class_type748 = default(NetMaker.class_type_return);

            NetMaker.identifier_return identifier749 = default(NetMaker.identifier_return);

            NetMaker.block_return block750 = default(NetMaker.block_return);


            CommonTree string_literal747_tree=null;


                ((SymTab_scope)SymTab_stack.Peek()).symtab =  new Dictionary<string,TypeRepTemplate>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3474:2: ( ^( 'catch' class_type identifier block ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3475:2: ^( 'catch' class_type identifier block )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal747=(CommonTree)Match(input,CATCH,FOLLOW_CATCH_in_catch_clause11207); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal747_tree = (CommonTree)adaptor.DupNode(string_literal747);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal747_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_class_type_in_catch_clause11209);
                	class_type748 = class_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, class_type748.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_catch_clause11213);
                	identifier749 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, identifier749.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   ((SymTab_scope)SymTab_stack.Peek()).symtab[((identifier749 != null) ? identifier749.thetext : default(string))] = ((class_type748 != null) ? class_type748.dotNetType : default(TypeRepTemplate)); 
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_catch_clause11217);
                	block750 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, block750.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                SymTab_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "catch_clause"

        public class finally_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "finally_clause"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3476:1: finally_clause : ^( 'finally' block ) ;
        public NetMaker.finally_clause_return finally_clause() // throws RecognitionException [1]
        {   
            NetMaker.finally_clause_return retval = new NetMaker.finally_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal751 = null;
            NetMaker.block_return block752 = default(NetMaker.block_return);


            CommonTree string_literal751_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3476:15: ( ^( 'finally' block ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3477:2: ^( 'finally' block )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	string_literal751=(CommonTree)Match(input,FINALLY,FOLLOW_FINALLY_in_finally_clause11227); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal751_tree = (CommonTree)adaptor.DupNode(string_literal751);

                		root_1 = (CommonTree)adaptor.BecomeRoot(string_literal751_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_finally_clause11231);
                	block752 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, block752.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "finally_clause"

        public class checked_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "checked_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3478:1: checked_statement : 'checked' block ;
        public NetMaker.checked_statement_return checked_statement() // throws RecognitionException [1]
        {   
            NetMaker.checked_statement_return retval = new NetMaker.checked_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal753 = null;
            NetMaker.block_return block754 = default(NetMaker.block_return);


            CommonTree string_literal753_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3478:18: ( 'checked' block )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3479:2: 'checked' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal753=(CommonTree)Match(input,215,FOLLOW_215_in_checked_statement11240); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal753_tree = (CommonTree)adaptor.DupNode(string_literal753);

                		adaptor.AddChild(root_0, string_literal753_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_checked_statement11244);
                	block754 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block754.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "checked_statement"

        public class unchecked_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unchecked_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3480:1: unchecked_statement : ^( UNCHECKED block ) ;
        public NetMaker.unchecked_statement_return unchecked_statement() // throws RecognitionException [1]
        {   
            NetMaker.unchecked_statement_return retval = new NetMaker.unchecked_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree UNCHECKED755 = null;
            NetMaker.block_return block756 = default(NetMaker.block_return);


            CommonTree UNCHECKED755_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3480:20: ( ^( UNCHECKED block ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3481:2: ^( UNCHECKED block )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	UNCHECKED755=(CommonTree)Match(input,UNCHECKED,FOLLOW_UNCHECKED_in_unchecked_statement11253); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{UNCHECKED755_tree = (CommonTree)adaptor.DupNode(UNCHECKED755);

                		root_1 = (CommonTree)adaptor.BecomeRoot(UNCHECKED755_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_unchecked_statement11255);
                	block756 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, block756.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unchecked_statement"

        public class synchronized_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "synchronized_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3483:1: synchronized_statement : ^( SYNCHRONIZED expression[ObjectType] embedded_statement[/* isStatementListCtxt */ false] ) ;
        public NetMaker.synchronized_statement_return synchronized_statement() // throws RecognitionException [1]
        {   
            NetMaker.synchronized_statement_return retval = new NetMaker.synchronized_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree SYNCHRONIZED757 = null;
            NetMaker.expression_return expression758 = default(NetMaker.expression_return);

            NetMaker.embedded_statement_return embedded_statement759 = default(NetMaker.embedded_statement_return);


            CommonTree SYNCHRONIZED757_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3483:23: ( ^( SYNCHRONIZED expression[ObjectType] embedded_statement[/* isStatementListCtxt */ false] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3484:2: ^( SYNCHRONIZED expression[ObjectType] embedded_statement[/* isStatementListCtxt */ false] )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	{
                	CommonTree _save_last_1 = _last;
                	CommonTree _first_1 = null;
                	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                	SYNCHRONIZED757=(CommonTree)Match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_synchronized_statement11267); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{SYNCHRONIZED757_tree = (CommonTree)adaptor.DupNode(SYNCHRONIZED757);

                		root_1 = (CommonTree)adaptor.BecomeRoot(SYNCHRONIZED757_tree, root_1);
                	}


                	Match(input, Token.DOWN, null); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_synchronized_statement11269);
                	expression758 = expression(ObjectType);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, expression758.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_synchronized_statement11272);
                	embedded_statement759 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_1, embedded_statement759.Tree);

                	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "synchronized_statement"

        public class yield_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "yield_statement"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3486:1: yield_statement : ( ^( YIELD_RETURN expression[ObjectType] ) | YIELD_BREAK );
        public NetMaker.yield_statement_return yield_statement() // throws RecognitionException [1]
        {   
            NetMaker.yield_statement_return retval = new NetMaker.yield_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree YIELD_RETURN760 = null;
            CommonTree YIELD_BREAK762 = null;
            NetMaker.expression_return expression761 = default(NetMaker.expression_return);


            CommonTree YIELD_RETURN760_tree=null;
            CommonTree YIELD_BREAK762_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3486:16: ( ^( YIELD_RETURN expression[ObjectType] ) | YIELD_BREAK )
                int alt230 = 2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0 == YIELD_RETURN) )
                {
                    alt230 = 1;
                }
                else if ( (LA230_0 == YIELD_BREAK) )
                {
                    alt230 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d230s0 =
                        new NoViableAltException("", 230, 0, input);

                    throw nvae_d230s0;
                }
                switch (alt230) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3487:5: ^( YIELD_RETURN expression[ObjectType] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	{
                        	CommonTree _save_last_1 = _last;
                        	CommonTree _first_1 = null;
                        	CommonTree root_1 = (CommonTree)adaptor.Nil;_last = (CommonTree)input.LT(1);
                        	YIELD_RETURN760=(CommonTree)Match(input,YIELD_RETURN,FOLLOW_YIELD_RETURN_in_yield_statement11287); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{YIELD_RETURN760_tree = (CommonTree)adaptor.DupNode(YIELD_RETURN760);

                        		root_1 = (CommonTree)adaptor.BecomeRoot(YIELD_RETURN760_tree, root_1);
                        	}


                        	Match(input, Token.DOWN, null); if (state.failed) return retval;
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_yield_statement11289);
                        	expression761 = expression(ObjectType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_1, expression761.Tree);

                        	Match(input, Token.UP, null); if (state.failed) return retval;adaptor.AddChild(root_0, root_1);_last = _save_last_1;
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3488:7: YIELD_BREAK
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	YIELD_BREAK762=(CommonTree)Match(input,YIELD_BREAK,FOLLOW_YIELD_BREAK_in_yield_statement11299); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{YIELD_BREAK762_tree = (CommonTree)adaptor.DupNode(YIELD_BREAK762);

                        		adaptor.AddChild(root_0, YIELD_BREAK762_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "yield_statement"

        public class predefined_type_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "predefined_type"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3494:1: predefined_type returns [TypeRepTemplate dotNetType] : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
        public NetMaker.predefined_type_return predefined_type() // throws RecognitionException [1]
        {   
            NetMaker.predefined_type_return retval = new NetMaker.predefined_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal763 = null;
            CommonTree string_literal764 = null;
            CommonTree string_literal765 = null;
            CommonTree string_literal766 = null;
            CommonTree string_literal767 = null;
            CommonTree string_literal768 = null;
            CommonTree string_literal769 = null;
            CommonTree string_literal770 = null;
            CommonTree string_literal771 = null;
            CommonTree string_literal772 = null;
            CommonTree string_literal773 = null;
            CommonTree string_literal774 = null;
            CommonTree string_literal775 = null;
            CommonTree string_literal776 = null;
            CommonTree string_literal777 = null;

            CommonTree string_literal763_tree=null;
            CommonTree string_literal764_tree=null;
            CommonTree string_literal765_tree=null;
            CommonTree string_literal766_tree=null;
            CommonTree string_literal767_tree=null;
            CommonTree string_literal768_tree=null;
            CommonTree string_literal769_tree=null;
            CommonTree string_literal770_tree=null;
            CommonTree string_literal771_tree=null;
            CommonTree string_literal772_tree=null;
            CommonTree string_literal773_tree=null;
            CommonTree string_literal774_tree=null;
            CommonTree string_literal775_tree=null;
            CommonTree string_literal776_tree=null;
            CommonTree string_literal777_tree=null;


                bool unBoxed = true;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3501:2: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
                int alt231 = 15;
                switch ( input.LA(1) ) 
                {
                case BOOL:
                	{
                    alt231 = 1;
                    }
                    break;
                case BYTE:
                	{
                    alt231 = 2;
                    }
                    break;
                case CHAR:
                	{
                    alt231 = 3;
                    }
                    break;
                case 275:
                	{
                    alt231 = 4;
                    }
                    break;
                case DOUBLE:
                	{
                    alt231 = 5;
                    }
                    break;
                case FLOAT:
                	{
                    alt231 = 6;
                    }
                    break;
                case INT:
                	{
                    alt231 = 7;
                    }
                    break;
                case LONG:
                	{
                    alt231 = 8;
                    }
                    break;
                case OBJECT:
                	{
                    alt231 = 9;
                    }
                    break;
                case 251:
                	{
                    alt231 = 10;
                    }
                    break;
                case SHORT:
                	{
                    alt231 = 11;
                    }
                    break;
                case 276:
                	{
                    alt231 = 12;
                    }
                    break;
                case 253:
                	{
                    alt231 = 13;
                    }
                    break;
                case 254:
                	{
                    alt231 = 14;
                    }
                    break;
                case 252:
                	{
                    alt231 = 15;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d231s0 =
                	        new NoViableAltException("", 231, 0, input);

                	    throw nvae_d231s0;
                }

                switch (alt231) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3502:4: 'bool'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal763=(CommonTree)Match(input,BOOL,FOLLOW_BOOL_in_predefined_type11328); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal763_tree = (CommonTree)adaptor.DupNode(string_literal763);

                        		adaptor.AddChild(root_0, string_literal763_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3503:7: 'byte'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal764=(CommonTree)Match(input,BYTE,FOLLOW_BYTE_in_predefined_type11340); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal764_tree = (CommonTree)adaptor.DupNode(string_literal764);

                        		adaptor.AddChild(root_0, string_literal764_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3504:7: 'char'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal765=(CommonTree)Match(input,CHAR,FOLLOW_CHAR_in_predefined_type11352); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal765_tree = (CommonTree)adaptor.DupNode(string_literal765);

                        		adaptor.AddChild(root_0, string_literal765_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3505:7: 'decimal'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal766=(CommonTree)Match(input,275,FOLLOW_275_in_predefined_type11364); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal766_tree = (CommonTree)adaptor.DupNode(string_literal766);

                        		adaptor.AddChild(root_0, string_literal766_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3506:7: 'double'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal767=(CommonTree)Match(input,DOUBLE,FOLLOW_DOUBLE_in_predefined_type11373); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal767_tree = (CommonTree)adaptor.DupNode(string_literal767);

                        		adaptor.AddChild(root_0, string_literal767_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3507:7: 'float'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal768=(CommonTree)Match(input,FLOAT,FOLLOW_FLOAT_in_predefined_type11383); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal768_tree = (CommonTree)adaptor.DupNode(string_literal768);

                        		adaptor.AddChild(root_0, string_literal768_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3508:7: 'int'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal769=(CommonTree)Match(input,INT,FOLLOW_INT_in_predefined_type11394); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal769_tree = (CommonTree)adaptor.DupNode(string_literal769);

                        		adaptor.AddChild(root_0, string_literal769_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3509:7: 'long'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal770=(CommonTree)Match(input,LONG,FOLLOW_LONG_in_predefined_type11407); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal770_tree = (CommonTree)adaptor.DupNode(string_literal770);

                        		adaptor.AddChild(root_0, string_literal770_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3510:7: 'object'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal771=(CommonTree)Match(input,OBJECT,FOLLOW_OBJECT_in_predefined_type11419); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal771_tree = (CommonTree)adaptor.DupNode(string_literal771);

                        		adaptor.AddChild(root_0, string_literal771_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3511:7: 'sbyte'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal772=(CommonTree)Match(input,251,FOLLOW_251_in_predefined_type11429); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal772_tree = (CommonTree)adaptor.DupNode(string_literal772);

                        		adaptor.AddChild(root_0, string_literal772_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3512:4: 'short'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal773=(CommonTree)Match(input,SHORT,FOLLOW_SHORT_in_predefined_type11437); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal773_tree = (CommonTree)adaptor.DupNode(string_literal773);

                        		adaptor.AddChild(root_0, string_literal773_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3513:7: 'string'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal774=(CommonTree)Match(input,276,FOLLOW_276_in_predefined_type11448); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal774_tree = (CommonTree)adaptor.DupNode(string_literal774);

                        		adaptor.AddChild(root_0, string_literal774_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   unBoxed = false; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3514:7: 'uint'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal775=(CommonTree)Match(input,253,FOLLOW_253_in_predefined_type11459); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal775_tree = (CommonTree)adaptor.DupNode(string_literal775);

                        		adaptor.AddChild(root_0, string_literal775_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3515:7: 'ulong'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal776=(CommonTree)Match(input,254,FOLLOW_254_in_predefined_type11471); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal776_tree = (CommonTree)adaptor.DupNode(string_literal776);

                        		adaptor.AddChild(root_0, string_literal776_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 15 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3516:7: 'ushort'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal777=(CommonTree)Match(input,252,FOLLOW_252_in_predefined_type11482); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal777_tree = (CommonTree)adaptor.DupNode(string_literal777);

                        		adaptor.AddChild(root_0, string_literal777_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      retval.dotNetType =  findType(input.TokenStream.ToString(
                    input.TreeAdaptor.GetTokenStartIndex(retval.Start),
                    input.TreeAdaptor.GetTokenStopIndex(retval.Start) ));
                      retval.dotNetType.IsUnboxedType = unBoxed;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "predefined_type"

        public class identifier_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "identifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3521:1: identifier returns [string thetext] : ( IDENTIFIER | also_keyword );
        public NetMaker.identifier_return identifier() // throws RecognitionException [1]
        {   
            NetMaker.identifier_return retval = new NetMaker.identifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree IDENTIFIER778 = null;
            NetMaker.also_keyword_return also_keyword779 = default(NetMaker.also_keyword_return);


            CommonTree IDENTIFIER778_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3521:36: ( IDENTIFIER | also_keyword )
                int alt232 = 2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0 == IDENTIFIER) )
                {
                    alt232 = 1;
                }
                else if ( ((LA232_0 >= ELIF && LA232_0 <= UNDEF) || LA232_0 == 195 || LA232_0 == 221 || (LA232_0 >= 224 && LA232_0 <= 239) || (LA232_0 >= 241 && LA232_0 <= 244) || (LA232_0 >= 247 && LA232_0 <= 250) || LA232_0 == 256 || (LA232_0 >= 263 && LA232_0 <= 264) || LA232_0 == 274 || LA232_0 == 277) )
                {
                    alt232 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d232s0 =
                        new NoViableAltException("", 232, 0, input);

                    throw nvae_d232s0;
                }
                switch (alt232) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3522:3: IDENTIFIER
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	IDENTIFIER778=(CommonTree)Match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier11504); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{IDENTIFIER778_tree = (CommonTree)adaptor.DupNode(IDENTIFIER778);

                        		adaptor.AddChild(root_0, IDENTIFIER778_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  ((IDENTIFIER778 != null) ? IDENTIFIER778.Text : null); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3522:49: also_keyword
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_also_keyword_in_identifier11510);
                        	also_keyword779 = also_keyword();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, also_keyword779.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  ((also_keyword779 != null) ? input.TokenStream.ToString(
                        	    input.TreeAdaptor.GetTokenStartIndex(also_keyword779.Start),
                        	    input.TreeAdaptor.GetTokenStopIndex(also_keyword779.Start)) : null); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "identifier"

        public class keyword_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "keyword"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3524:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
        public NetMaker.keyword_return keyword() // throws RecognitionException [1]
        {   
            NetMaker.keyword_return retval = new NetMaker.keyword_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set780 = null;

            CommonTree set780_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3524:8: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set780 = (CommonTree)input.LT(1);
                	if ( input.LA(1) == ENUM || (input.LA(1) >= PUBLIC && input.LA(1) <= IN) || input.LA(1) == IF || (input.LA(1) >= BOOL && input.LA(1) <= DOUBLE) || (input.LA(1) >= TRUE && input.LA(1) <= NULL) || input.LA(1) == USING || (input.LA(1) >= 193 && input.LA(1) <= 194) || (input.LA(1) >= 197 && input.LA(1) <= 207) || (input.LA(1) >= 212 && input.LA(1) <= 219) || (input.LA(1) >= 222 && input.LA(1) <= 223) || input.LA(1) == 240 || input.LA(1) == 245 || (input.LA(1) >= 251 && input.LA(1) <= 255) || (input.LA(1) >= 257 && input.LA(1) <= 262) || (input.LA(1) >= 265 && input.LA(1) <= 267) || (input.LA(1) >= 269 && input.LA(1) <= 273) || (input.LA(1) >= 275 && input.LA(1) <= 276) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set780_tree = (CommonTree)adaptor.DupNode(set780);

                	    adaptor.AddChild(root_0, set780_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "keyword"

        public class also_keyword_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "also_keyword"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3527:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' | 'extends' );
        public NetMaker.also_keyword_return also_keyword() // throws RecognitionException [1]
        {   
            NetMaker.also_keyword_return retval = new NetMaker.also_keyword_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set781 = null;

            CommonTree set781_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3527:13: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' | 'extends' )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set781 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= ELIF && input.LA(1) <= UNDEF) || input.LA(1) == 195 || input.LA(1) == 221 || (input.LA(1) >= 224 && input.LA(1) <= 239) || (input.LA(1) >= 241 && input.LA(1) <= 244) || (input.LA(1) >= 247 && input.LA(1) <= 250) || input.LA(1) == 256 || (input.LA(1) >= 263 && input.LA(1) <= 264) || input.LA(1) == 274 || input.LA(1) == 277 ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set781_tree = (CommonTree)adaptor.DupNode(set781);

                	    adaptor.AddChild(root_0, set781_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "also_keyword"

        public class literal_return : TreeRuleReturnScope
        {
            public TypeRepTemplate dotNetType;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "literal"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3533:1: literal returns [TypeRepTemplate dotNetType] : ( Real_literal | NUMBER | LONGNUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
        public NetMaker.literal_return literal() // throws RecognitionException [1]
        {   
            NetMaker.literal_return retval = new NetMaker.literal_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree Real_literal782 = null;
            CommonTree NUMBER783 = null;
            CommonTree LONGNUMBER784 = null;
            CommonTree Hex_number785 = null;
            CommonTree Character_literal786 = null;
            CommonTree STRINGLITERAL787 = null;
            CommonTree Verbatim_string_literal788 = null;
            CommonTree TRUE789 = null;
            CommonTree FALSE790 = null;
            CommonTree NULL791 = null;

            CommonTree Real_literal782_tree=null;
            CommonTree NUMBER783_tree=null;
            CommonTree LONGNUMBER784_tree=null;
            CommonTree Hex_number785_tree=null;
            CommonTree Character_literal786_tree=null;
            CommonTree STRINGLITERAL787_tree=null;
            CommonTree Verbatim_string_literal788_tree=null;
            CommonTree TRUE789_tree=null;
            CommonTree FALSE790_tree=null;
            CommonTree NULL791_tree=null;


                string ns = "System.Object";
                bool isNull = false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3545:2: ( Real_literal | NUMBER | LONGNUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
                int alt233 = 10;
                switch ( input.LA(1) ) 
                {
                case Real_literal:
                	{
                    alt233 = 1;
                    }
                    break;
                case NUMBER:
                	{
                    alt233 = 2;
                    }
                    break;
                case LONGNUMBER:
                	{
                    alt233 = 3;
                    }
                    break;
                case Hex_number:
                	{
                    alt233 = 4;
                    }
                    break;
                case Character_literal:
                	{
                    alt233 = 5;
                    }
                    break;
                case STRINGLITERAL:
                	{
                    alt233 = 6;
                    }
                    break;
                case Verbatim_string_literal:
                	{
                    alt233 = 7;
                    }
                    break;
                case TRUE:
                	{
                    alt233 = 8;
                    }
                    break;
                case FALSE:
                	{
                    alt233 = 9;
                    }
                    break;
                case NULL:
                	{
                    alt233 = 10;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d233s0 =
                	        new NoViableAltException("", 233, 0, input);

                	    throw nvae_d233s0;
                }

                switch (alt233) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3546:2: Real_literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	Real_literal782=(CommonTree)Match(input,Real_literal,FOLLOW_Real_literal_in_literal11997); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{Real_literal782_tree = (CommonTree)adaptor.DupNode(Real_literal782);

                        		adaptor.AddChild(root_0, Real_literal782_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Double"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3547:4: NUMBER
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	NUMBER783=(CommonTree)Match(input,NUMBER,FOLLOW_NUMBER_in_literal12019); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{NUMBER783_tree = (CommonTree)adaptor.DupNode(NUMBER783);

                        		adaptor.AddChild(root_0, NUMBER783_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Int32"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3548:4: LONGNUMBER
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	LONGNUMBER784=(CommonTree)Match(input,LONGNUMBER,FOLLOW_LONGNUMBER_in_literal12045); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{LONGNUMBER784_tree = (CommonTree)adaptor.DupNode(LONGNUMBER784);

                        		adaptor.AddChild(root_0, LONGNUMBER784_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Int64"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3549:4: Hex_number
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	Hex_number785=(CommonTree)Match(input,Hex_number,FOLLOW_Hex_number_in_literal12067); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{Hex_number785_tree = (CommonTree)adaptor.DupNode(Hex_number785);

                        		adaptor.AddChild(root_0, Hex_number785_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Int32"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3550:4: Character_literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	Character_literal786=(CommonTree)Match(input,Character_literal,FOLLOW_Character_literal_in_literal12089); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{Character_literal786_tree = (CommonTree)adaptor.DupNode(Character_literal786);

                        		adaptor.AddChild(root_0, Character_literal786_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Char"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3551:4: STRINGLITERAL
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	STRINGLITERAL787=(CommonTree)Match(input,STRINGLITERAL,FOLLOW_STRINGLITERAL_in_literal12104); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{STRINGLITERAL787_tree = (CommonTree)adaptor.DupNode(STRINGLITERAL787);

                        		adaptor.AddChild(root_0, STRINGLITERAL787_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.String"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3552:4: Verbatim_string_literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	Verbatim_string_literal788=(CommonTree)Match(input,Verbatim_string_literal,FOLLOW_Verbatim_string_literal_in_literal12123); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{Verbatim_string_literal788_tree = (CommonTree)adaptor.DupNode(Verbatim_string_literal788);

                        		adaptor.AddChild(root_0, Verbatim_string_literal788_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.String"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3553:4: TRUE
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	TRUE789=(CommonTree)Match(input,TRUE,FOLLOW_TRUE_in_literal12132); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{TRUE789_tree = (CommonTree)adaptor.DupNode(TRUE789);

                        		adaptor.AddChild(root_0, TRUE789_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Boolean"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3554:4: FALSE
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	FALSE790=(CommonTree)Match(input,FALSE,FOLLOW_FALSE_in_literal12160); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{FALSE790_tree = (CommonTree)adaptor.DupNode(FALSE790);

                        		adaptor.AddChild(root_0, FALSE790_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Boolean"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3555:4: NULL
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	NULL791=(CommonTree)Match(input,NULL,FOLLOW_NULL_in_literal12187); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{NULL791_tree = (CommonTree)adaptor.DupNode(NULL791);

                        		adaptor.AddChild(root_0, NULL791_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   ns = "System.Object"; isNull = true; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      TypeRepTemplate retTy = findType(ns);
                      if (isNull) {
                          retTy = new ClassRepTemplate((ClassRepTemplate)retTy);
                          retTy.IsExplicitNull = true;
                      }
                      retval.dotNetType =  retTy; 

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "literal"

        public class magicScrutineeVar_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicScrutineeVar"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3558:1: magicScrutineeVar[IToken tok] returns [string thetext] : -> IDENTIFIER[tok,$thetext] ;
        public NetMaker.magicScrutineeVar_return magicScrutineeVar(IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicScrutineeVar_return retval = new NetMaker.magicScrutineeVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;


                retval.thetext =  "__dummyScrutVar" + dummyScrutVarCtr++;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3561:2: ( -> IDENTIFIER[tok,$thetext] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3562:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3562:3: -> IDENTIFIER[tok,$thetext]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, retval.thetext));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicScrutineeVar"

        public class magicForeachVar_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicForeachVar"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3564:1: magicForeachVar[IToken tok] returns [string thetext] : -> IDENTIFIER[tok,$thetext] ;
        public NetMaker.magicForeachVar_return magicForeachVar(IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicForeachVar_return retval = new NetMaker.magicForeachVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;


                retval.thetext =  "__dummyForeachVar" + dummyForeachVarCtr++;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3567:2: ( -> IDENTIFIER[tok,$thetext] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3568:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3568:3: -> IDENTIFIER[tok,$thetext]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, retval.thetext));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicForeachVar"

        public class magicObjectType_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicObjectType"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3570:1: magicObjectType[IToken tok] : -> ^( TYPE[tok, \"TYPE\"] OBJECT[tok, \"Object\"] ) ;
        public NetMaker.magicObjectType_return magicObjectType(IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicObjectType_return retval = new NetMaker.magicObjectType_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3570:29: ( -> ^( TYPE[tok, \"TYPE\"] OBJECT[tok, \"Object\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3571:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3571:3: -> ^( TYPE[tok, \"TYPE\"] OBJECT[tok, \"Object\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3571:6: ^( TYPE[tok, \"TYPE\"] OBJECT[tok, \"Object\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OBJECT, tok, "Object"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicObjectType"

        public class magicCastOperator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicCastOperator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3573:1: magicCastOperator[CommonTree mods, string methodName, CommonTree header, CommonTree body] : -> ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok, $methodName] ^( PARAMS[tok, \"PARAMS\"] ) EXCEPTION[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ) ;
        public NetMaker.magicCastOperator_return magicCastOperator(CommonTree mods, string methodName, CommonTree header, CommonTree body) // throws RecognitionException [1]
        {   
            NetMaker.magicCastOperator_return retval = new NetMaker.magicCastOperator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;


                IToken tok = ((CommonTree)header.Children[0]).Token;
                CommonTree toType = dupTree((CommonTree)header.Children[1]);
                CommonTree fromType = dupTree((CommonTree)header.Children[2]);
                CommonTree paramName = dupTree((CommonTree)header.Children[3]);

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3579:2: ( -> ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok, $methodName] ^( PARAMS[tok, \"PARAMS\"] ) EXCEPTION[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3580:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3580:1: -> ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok, $methodName] ^( PARAMS[tok, \"PARAMS\"] ) EXCEPTION[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3580:8: ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok, $methodName] ^( PARAMS[tok, \"PARAMS\"] ) EXCEPTION[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1,  toType );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, methodName));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3582:48: ^( PARAMS[tok, \"PARAMS\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, tok, "PARAMS"), root_2);

                	    adaptor.AddChild(root_2,  fromType );
                	    adaptor.AddChild(root_2,  paramName);

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(EXCEPTION, tok, Cfg.TranslatorExceptionIsThrowable ? "Throwable" : "Exception"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicCastOperator"

        public class magicAnnotation_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicAnnotation"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3587:1: magicAnnotation[CommonTree mods, CommonTree name, CommonTree body, IToken tok] : -> ^( ANNOTATION[tok, \"ANNOTATION\"] ) ;
        public NetMaker.magicAnnotation_return magicAnnotation(CommonTree mods, CommonTree name, CommonTree body, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicAnnotation_return retval = new NetMaker.magicAnnotation_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3587:80: ( -> ^( ANNOTATION[tok, \"ANNOTATION\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3588:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3588:3: -> ^( ANNOTATION[tok, \"ANNOTATION\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3588:6: ^( ANNOTATION[tok, \"ANNOTATION\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION, tok, "ANNOTATION"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1,  dupTree(name) );
                	    adaptor.AddChild(root_1,  dupTree(body) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicAnnotation"

        public class magicSupportOp_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicSupportOp"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3590:1: magicSupportOp[bool isOn, string supportlib, string op, CommonTree e1, CommonTree e2, IToken tok] : -> { isOn }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,supportlib] IDENTIFIER[tok,op] ) ^( ARGS[tok, \"ARGS\"] ) ) ->;
        public NetMaker.magicSupportOp_return magicSupportOp(bool isOn, string supportlib, string op, CommonTree e1, CommonTree e2, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicSupportOp_return retval = new NetMaker.magicSupportOp_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3590:98: ( -> { isOn }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,supportlib] IDENTIFIER[tok,op] ) ^( ARGS[tok, \"ARGS\"] ) ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3591:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3591:3: -> { isOn }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,supportlib] IDENTIFIER[tok,op] ) ^( ARGS[tok, \"ARGS\"] ) )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3592:6: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,supportlib] IDENTIFIER[tok,op] ) ^( ARGS[tok, \"ARGS\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3592:28: ^( DOT[tok,\".\"] IDENTIFIER[tok,supportlib] IDENTIFIER[tok,op] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, supportlib));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, op));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3592:90: ^( ARGS[tok, \"ARGS\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_2);

                	    adaptor.AddChild(root_2,  dupTree(e1) );
                	    adaptor.AddChild(root_2,  dupTree(e2) );

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3593:3: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicSupportOp"

        public class magicNegate_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicNegate"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3596:1: magicNegate[bool isOn, CommonTree e, IToken tok] : -> { isOn }? ^( MONONOT[tok, \"!\"] ) ->;
        public NetMaker.magicNegate_return magicNegate(bool isOn, CommonTree e, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicNegate_return retval = new NetMaker.magicNegate_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3596:49: ( -> { isOn }? ^( MONONOT[tok, \"!\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3597:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3597:3: -> { isOn }? ^( MONONOT[tok, \"!\"] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3598:6: ^( MONONOT[tok, \"!\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MONONOT, tok, "!"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(e) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3599:3: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicNegate"

        public class magicConstructStruct_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicConstructStruct"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3602:1: magicConstructStruct[bool isOn, CommonTree ty, IToken tok] : -> { isOn }? ^( NEW[tok, \"NEW\"] ) ->;
        public NetMaker.magicConstructStruct_return magicConstructStruct(bool isOn, CommonTree ty, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicConstructStruct_return retval = new NetMaker.magicConstructStruct_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3602:59: ( -> { isOn }? ^( NEW[tok, \"NEW\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3603:4: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3603:4: -> { isOn }? ^( NEW[tok, \"NEW\"] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3603:17: ^( NEW[tok, \"NEW\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "NEW"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(ty) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3604:4: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicConstructStruct"

        public class magicConstructDefaultEnum_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicConstructDefaultEnum"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3606:1: magicConstructDefaultEnum[bool isOn, TypeRepTemplate ty, string zero, IToken tok] : -> { isOn }? ^( DOT[tok, \".\"] IDENTIFIER[tok, ty.Java] IDENTIFIER[tok, zero] ) ->;
        public NetMaker.magicConstructDefaultEnum_return magicConstructDefaultEnum(bool isOn, TypeRepTemplate ty, string zero, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicConstructDefaultEnum_return retval = new NetMaker.magicConstructDefaultEnum_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3606:82: ( -> { isOn }? ^( DOT[tok, \".\"] IDENTIFIER[tok, ty.Java] IDENTIFIER[tok, zero] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3607:4: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3607:4: -> { isOn }? ^( DOT[tok, \".\"] IDENTIFIER[tok, ty.Java] IDENTIFIER[tok, zero] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3607:17: ^( DOT[tok, \".\"] IDENTIFIER[tok, ty.Java] IDENTIFIER[tok, zero] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, ty.Java));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, zero));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3608:4: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicConstructDefaultEnum"

        public class magicSmotherExceptionsThrow_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicSmotherExceptionsThrow"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3611:1: magicSmotherExceptionsThrow[CommonTree body, string exception] : v= magicCatchVar magicThrowableType[true, body.Token] -> OPEN_BRACE[\"{\"] ^( TRY[\"try\"] ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) ) CLOSE_BRACE[\"}\"] ;
        public NetMaker.magicSmotherExceptionsThrow_return magicSmotherExceptionsThrow(CommonTree body, string exception) // throws RecognitionException [1]
        {   
            NetMaker.magicSmotherExceptionsThrow_return retval = new NetMaker.magicSmotherExceptionsThrow_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.magicCatchVar_return v = default(NetMaker.magicCatchVar_return);

            NetMaker.magicThrowableType_return magicThrowableType792 = default(NetMaker.magicThrowableType_return);


            RewriteRuleSubtreeStream stream_magicThrowableType = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowableType");
            RewriteRuleSubtreeStream stream_magicCatchVar = new RewriteRuleSubtreeStream(adaptor,"rule magicCatchVar");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3611:63: (v= magicCatchVar magicThrowableType[true, body.Token] -> OPEN_BRACE[\"{\"] ^( TRY[\"try\"] ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) ) CLOSE_BRACE[\"}\"] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3612:3: v= magicCatchVar magicThrowableType[true, body.Token]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicCatchVar_in_magicSmotherExceptionsThrow12527);
                	v = magicCatchVar();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicCatchVar.Add(v.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowableType_in_magicSmotherExceptionsThrow12529);
                	magicThrowableType792 = magicThrowableType(true, body.Token);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowableType.Add(magicThrowableType792.Tree);


                	// AST REWRITE
                	// elements:          magicThrowableType
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3613:2: -> OPEN_BRACE[\"{\"] ^( TRY[\"try\"] ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) ) CLOSE_BRACE[\"}\"]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3614:8: ^( TRY[\"try\"] ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY, "try"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3616:10: ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH, "catch"), root_2);

                	    adaptor.AddChild(root_2, stream_magicThrowableType.NextTree());
                	    adaptor.AddChild(root_2,  dupTree(((v != null) ? ((CommonTree)v.Tree) : null)) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3617:28: ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THROW, "throw"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3617:45: ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, "new"), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3617:58: ^( TYPE[\"TYPE\"] IDENTIFIER[exception] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, exception));

                	    adaptor.AddChild(root_4, root_5);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3617:96: ^( ARGS[\"ARGS\"] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, "ARGS"), root_5);

                	    adaptor.AddChild(root_5,  dupTree(((v != null) ? ((CommonTree)v.Tree) : null)) );

                	    adaptor.AddChild(root_4, root_5);
                	    }

                	    adaptor.AddChild(root_3, root_4);
                	    }

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, "}"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicSmotherExceptionsThrow"

        public class magicCatchVar_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicCatchVar"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3621:1: magicCatchVar : -> IDENTIFIER[\"__dummyStaticConstructorCatchVar\" + dummyStaticConstructorCatchVarCtr++] ;
        public NetMaker.magicCatchVar_return magicCatchVar() // throws RecognitionException [1]
        {   
            NetMaker.magicCatchVar_return retval = new NetMaker.magicCatchVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3621:14: ( -> IDENTIFIER[\"__dummyStaticConstructorCatchVar\" + dummyStaticConstructorCatchVarCtr++] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3622:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3622:3: -> IDENTIFIER[\"__dummyStaticConstructorCatchVar\" + dummyStaticConstructorCatchVarCtr++]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, "__dummyStaticConstructorCatchVar" + dummyStaticConstructorCatchVarCtr++));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicCatchVar"

        public class magicThrowableType_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicThrowableType"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3624:1: magicThrowableType[bool isOn, IToken tok] : -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ) ->;
        public NetMaker.magicThrowableType_return magicThrowableType(bool isOn, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicThrowableType_return retval = new NetMaker.magicThrowableType_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3624:42: ( -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3625:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3625:2: -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3625:13: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, Cfg.TranslatorExceptionIsThrowable ? "Throwable" : "Exception"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3626:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicThrowableType"

        public class magicEventCollectionType_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicEventCollectionType"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3629:1: magicEventCollectionType[IToken tok, CommonTree type] : -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IEventCollection\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ;
        public NetMaker.magicEventCollectionType_return magicEventCollectionType(IToken tok, CommonTree type) // throws RecognitionException [1]
        {   
            NetMaker.magicEventCollectionType_return retval = new NetMaker.magicEventCollectionType_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3629:54: ( -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IEventCollection\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3630:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3630:3: -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IEventCollection\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3630:6: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IEventCollection\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "IEventCollection"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_1,  dupTree(type) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicEventCollectionType"

        public class magicXXGenericIterator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicXXGenericIterator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3636:1: magicXXGenericIterator[bool isOn, IToken tok, String tyVar] : -> {isOn}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"iterator\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] NULL[tok,\"null\"] SEMI[tok, \";\"] ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) ) IDENTIFIER[tok,\"iterator\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ) ^( RETURN[tok, \"return\"] IDENTIFIER[tok, \"ret\"] ) CLOSE_BRACE[tok, \"}\"] ) ->;
        public NetMaker.magicXXGenericIterator_return magicXXGenericIterator(bool isOn, IToken tok, String tyVar) // throws RecognitionException [1]
        {   
            NetMaker.magicXXGenericIterator_return retval = new NetMaker.magicXXGenericIterator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;


               if (isOn) AddToImports("java.util.Iterator");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3640:1: ( -> {isOn}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"iterator\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] NULL[tok,\"null\"] SEMI[tok, \";\"] ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) ) IDENTIFIER[tok,\"iterator\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ) ^( RETURN[tok, \"return\"] IDENTIFIER[tok, \"ret\"] ) CLOSE_BRACE[tok, \"}\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3641:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3641:1: -> {isOn}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"iterator\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] NULL[tok,\"null\"] SEMI[tok, \";\"] ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) ) IDENTIFIER[tok,\"iterator\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ) ^( RETURN[tok, \"return\"] IDENTIFIER[tok, \"ret\"] ) CLOSE_BRACE[tok, \"}\"] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3641:15: ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"iterator\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] ) IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] NULL[tok,\"null\"] SEMI[tok, \";\"] ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) ) IDENTIFIER[tok,\"iterator\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ) ^( RETURN[tok, \"return\"] IDENTIFIER[tok, \"ret\"] ) CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3643:17: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Iterator"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3643:81: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, tyVar));

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "iterator"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3647:17: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"Iterator\"] LTHAN[tok, \"<\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] ) GT[tok, \">\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Iterator"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3647:81: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, tyVar] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, tyVar));

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "ret"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(NULL, tok, "null"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3649:17: ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"ret\"] ASSIGN[tok,\"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) ) IDENTIFIER[tok,\"iterator\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY, tok, "try"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "ret"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3651:62: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) ) IDENTIFIER[tok,\"iterator\"] ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3651:84: ^( DOT[tok, \".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) ) IDENTIFIER[tok,\"iterator\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3651:100: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] ) )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_5);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3651:122: ^( DOT[tok, \".\"] THIS[tok, \"this\"] IDENTIFIER[tok, \"GetEnumerator\"] )
                	    {
                	    CommonTree root_6 = (CommonTree)adaptor.Nil;
                	    root_6 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_6);

                	    adaptor.AddChild(root_6, (CommonTree)adaptor.Create(THIS, tok, "this"));
                	    adaptor.AddChild(root_6, (CommonTree)adaptor.Create(IDENTIFIER, tok, "GetEnumerator"));

                	    adaptor.AddChild(root_5, root_6);
                	    }

                	    adaptor.AddChild(root_4, root_5);
                	    }
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "iterator"));

                	    adaptor.AddChild(root_3, root_4);
                	    }

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3653:21: ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH, tok, "catch"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3653:43: ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Exception"));

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, "e"));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3655:26: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3655:48: ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "e"));
                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "printStackTrace"));

                	    adaptor.AddChild(root_4, root_5);
                	    }

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3660:17: ^( RETURN[tok, \"return\"] IDENTIFIER[tok, \"ret\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, tok, "return"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "ret"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3664:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicXXGenericIterator"

        public class magicGenericIterator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicGenericIterator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3669:1: magicGenericIterator[bool isOn, IToken tok, String tyVar] : magicType[isOn, tok, \"Iterator\", new string[] {tyVar}] n= magicToken[isOn, tok, NULL, \"null\"] magicAssignment[isOn, tok, $magicType.tree, \"ret\", $n.tree] thisT= magicToken[isOn, tok, THIS, \"this\"] thisEnum= magicDot[isOn, tok, $thisT.tree, \"GetEnumerator\"] mkIter= magicDot[isOn, tok, $thisEnum.tree, \"iterator\"] tryBody= magicApply[isOn, tok, $mkIter.tree, null] magicTryCatch[isOn, tok, $tryBody.tree] magicMethod[isOn, tok, \"iterator\", $magicType.tree, null, $magicTryCatch.tree] -> {isOn}? magicMethod ->;
        public NetMaker.magicGenericIterator_return magicGenericIterator(bool isOn, IToken tok, String tyVar) // throws RecognitionException [1]
        {   
            NetMaker.magicGenericIterator_return retval = new NetMaker.magicGenericIterator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.magicToken_return n = default(NetMaker.magicToken_return);

            NetMaker.magicToken_return thisT = default(NetMaker.magicToken_return);

            NetMaker.magicDot_return thisEnum = default(NetMaker.magicDot_return);

            NetMaker.magicDot_return mkIter = default(NetMaker.magicDot_return);

            NetMaker.magicApply_return tryBody = default(NetMaker.magicApply_return);

            NetMaker.magicType_return magicType793 = default(NetMaker.magicType_return);

            NetMaker.magicAssignment_return magicAssignment794 = default(NetMaker.magicAssignment_return);

            NetMaker.magicTryCatch_return magicTryCatch795 = default(NetMaker.magicTryCatch_return);

            NetMaker.magicMethod_return magicMethod796 = default(NetMaker.magicMethod_return);


            RewriteRuleSubtreeStream stream_magicDot = new RewriteRuleSubtreeStream(adaptor,"rule magicDot");
            RewriteRuleSubtreeStream stream_magicType = new RewriteRuleSubtreeStream(adaptor,"rule magicType");
            RewriteRuleSubtreeStream stream_magicTryCatch = new RewriteRuleSubtreeStream(adaptor,"rule magicTryCatch");
            RewriteRuleSubtreeStream stream_magicToken = new RewriteRuleSubtreeStream(adaptor,"rule magicToken");
            RewriteRuleSubtreeStream stream_magicApply = new RewriteRuleSubtreeStream(adaptor,"rule magicApply");
            RewriteRuleSubtreeStream stream_magicMethod = new RewriteRuleSubtreeStream(adaptor,"rule magicMethod");
            RewriteRuleSubtreeStream stream_magicAssignment = new RewriteRuleSubtreeStream(adaptor,"rule magicAssignment");

               if (isOn) AddToImports("java.util.Iterator");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3673:1: ( magicType[isOn, tok, \"Iterator\", new string[] {tyVar}] n= magicToken[isOn, tok, NULL, \"null\"] magicAssignment[isOn, tok, $magicType.tree, \"ret\", $n.tree] thisT= magicToken[isOn, tok, THIS, \"this\"] thisEnum= magicDot[isOn, tok, $thisT.tree, \"GetEnumerator\"] mkIter= magicDot[isOn, tok, $thisEnum.tree, \"iterator\"] tryBody= magicApply[isOn, tok, $mkIter.tree, null] magicTryCatch[isOn, tok, $tryBody.tree] magicMethod[isOn, tok, \"iterator\", $magicType.tree, null, $magicTryCatch.tree] -> {isOn}? magicMethod ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3674:4: magicType[isOn, tok, \"Iterator\", new string[] {tyVar}] n= magicToken[isOn, tok, NULL, \"null\"] magicAssignment[isOn, tok, $magicType.tree, \"ret\", $n.tree] thisT= magicToken[isOn, tok, THIS, \"this\"] thisEnum= magicDot[isOn, tok, $thisT.tree, \"GetEnumerator\"] mkIter= magicDot[isOn, tok, $thisEnum.tree, \"iterator\"] tryBody= magicApply[isOn, tok, $mkIter.tree, null] magicTryCatch[isOn, tok, $tryBody.tree] magicMethod[isOn, tok, \"iterator\", $magicType.tree, null, $magicTryCatch.tree]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicType_in_magicGenericIterator13320);
                	magicType793 = magicType(isOn, tok, "Iterator", new string[] {tyVar});
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicType.Add(magicType793.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicToken_in_magicGenericIterator13328);
                	n = magicToken(isOn, tok, NULL, "null");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicToken.Add(n.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicAssignment_in_magicGenericIterator13334);
                	magicAssignment794 = magicAssignment(isOn, tok, ((magicType793 != null) ? ((CommonTree)magicType793.Tree) : null), "ret", ((n != null) ? ((CommonTree)n.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicAssignment.Add(magicAssignment794.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicToken_in_magicGenericIterator13343);
                	thisT = magicToken(isOn, tok, THIS, "this");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicToken.Add(thisT.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicDot_in_magicGenericIterator13351);
                	thisEnum = magicDot(isOn, tok, ((thisT != null) ? ((CommonTree)thisT.Tree) : null), "GetEnumerator");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicDot.Add(thisEnum.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicDot_in_magicGenericIterator13359);
                	mkIter = magicDot(isOn, tok, ((thisEnum != null) ? ((CommonTree)thisEnum.Tree) : null), "iterator");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicDot.Add(mkIter.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicApply_in_magicGenericIterator13367);
                	tryBody = magicApply(isOn, tok, ((mkIter != null) ? ((CommonTree)mkIter.Tree) : null), null);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicApply.Add(tryBody.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicTryCatch_in_magicGenericIterator13374);
                	magicTryCatch795 = magicTryCatch(isOn, tok, ((tryBody != null) ? ((CommonTree)tryBody.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicTryCatch.Add(magicTryCatch795.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMethod_in_magicGenericIterator13381);
                	magicMethod796 = magicMethod(isOn, tok, "iterator", ((magicType793 != null) ? ((CommonTree)magicType793.Tree) : null), null, ((magicTryCatch795 != null) ? ((CommonTree)magicTryCatch795.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMethod.Add(magicMethod796.Tree);


                	// AST REWRITE
                	// elements:          magicMethod
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3687:1: -> {isOn}? magicMethod
                	if (isOn)
                	{
                	    adaptor.AddChild(root_0, stream_magicMethod.NextTree());

                	}
                	else // 3688:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicGenericIterator"

        public class magicIterator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicIterator"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3691:1: magicIterator[bool isOn, IToken tok] : magicType[isOn, tok, \"Iterator\", null] n= magicToken[isOn, tok, NULL, \"null\"] magicAssignment[isOn, tok, $magicType.tree, \"ret\", $n.tree] magicMethod[isOn, tok, \"iterator\", $magicType.tree, null, $magicAssignment.tree] -> {isOn}? magicMethod ->;
        public NetMaker.magicIterator_return magicIterator(bool isOn, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicIterator_return retval = new NetMaker.magicIterator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            NetMaker.magicToken_return n = default(NetMaker.magicToken_return);

            NetMaker.magicType_return magicType797 = default(NetMaker.magicType_return);

            NetMaker.magicAssignment_return magicAssignment798 = default(NetMaker.magicAssignment_return);

            NetMaker.magicMethod_return magicMethod799 = default(NetMaker.magicMethod_return);


            RewriteRuleSubtreeStream stream_magicType = new RewriteRuleSubtreeStream(adaptor,"rule magicType");
            RewriteRuleSubtreeStream stream_magicToken = new RewriteRuleSubtreeStream(adaptor,"rule magicToken");
            RewriteRuleSubtreeStream stream_magicMethod = new RewriteRuleSubtreeStream(adaptor,"rule magicMethod");
            RewriteRuleSubtreeStream stream_magicAssignment = new RewriteRuleSubtreeStream(adaptor,"rule magicAssignment");

               if (isOn) AddToImports("java.util.Iterator");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3695:1: ( magicType[isOn, tok, \"Iterator\", null] n= magicToken[isOn, tok, NULL, \"null\"] magicAssignment[isOn, tok, $magicType.tree, \"ret\", $n.tree] magicMethod[isOn, tok, \"iterator\", $magicType.tree, null, $magicAssignment.tree] -> {isOn}? magicMethod ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3696:4: magicType[isOn, tok, \"Iterator\", null] n= magicToken[isOn, tok, NULL, \"null\"] magicAssignment[isOn, tok, $magicType.tree, \"ret\", $n.tree] magicMethod[isOn, tok, \"iterator\", $magicType.tree, null, $magicAssignment.tree]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicType_in_magicIterator13413);
                	magicType797 = magicType(isOn, tok, "Iterator", null);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicType.Add(magicType797.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicToken_in_magicIterator13421);
                	n = magicToken(isOn, tok, NULL, "null");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicToken.Add(n.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicAssignment_in_magicIterator13427);
                	magicAssignment798 = magicAssignment(isOn, tok, ((magicType797 != null) ? ((CommonTree)magicType797.Tree) : null), "ret", ((n != null) ? ((CommonTree)n.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicAssignment.Add(magicAssignment798.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMethod_in_magicIterator13434);
                	magicMethod799 = magicMethod(isOn, tok, "iterator", ((magicType797 != null) ? ((CommonTree)magicType797.Tree) : null), null, ((magicAssignment798 != null) ? ((CommonTree)magicAssignment798.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMethod.Add(magicMethod799.Tree);


                	// AST REWRITE
                	// elements:          magicMethod
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3701:1: -> {isOn}? magicMethod
                	if (isOn)
                	{
                	    adaptor.AddChild(root_0, stream_magicMethod.NextTree());

                	}
                	else // 3725:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicIterator"

        public class magicToken_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicToken"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3728:1: magicToken[bool isOn, IToken tok, int tokenType, string text] : -> {isOn}? ->;
        public NetMaker.magicToken_return magicToken(bool isOn, IToken tok, int tokenType, string text) // throws RecognitionException [1]
        {   
            NetMaker.magicToken_return retval = new NetMaker.magicToken_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;


               CommonTree ret = null;
               if (isOn)
                 ret = (CommonTree)adaptor.Create(tokenType, tok, text);

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3733:2: ( -> {isOn}? ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3734:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3734:1: -> {isOn}?
                	if (isOn)
                	{
                	    adaptor.AddChild(root_0,  ret );

                	}
                	else // 3735:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicToken"

        public class magicMethod_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMethod"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3739:1: magicMethod[bool isOn, IToken tok, string name, CommonTree retType, CommonTree args, CommonTree body] : -> {isOn}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) ->;
        public NetMaker.magicMethod_return magicMethod(bool isOn, IToken tok, string name, CommonTree retType, CommonTree args, CommonTree body) // throws RecognitionException [1]
        {   
            NetMaker.magicMethod_return retval = new NetMaker.magicMethod_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3739:102: ( -> {isOn}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3740:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3740:1: -> {isOn}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3741:13: ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));
                	    adaptor.AddChild(root_1,  dupTree(retType) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, name));
                	    adaptor.AddChild(root_1,  dupTree(args) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3750:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMethod"

        public class magicType_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicType"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3753:1: magicType[bool isOn, IToken tok, string name, string[] args] : -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, name] ) ->;
        public NetMaker.magicType_return magicType(bool isOn, IToken tok, string name, string[] args) // throws RecognitionException [1]
        {   
            NetMaker.magicType_return retval = new NetMaker.magicType_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;


               CommonTree argsTree = null;
               if (args != null && args.Length > 0) {
                  CommonTree root = (CommonTree)adaptor.Nil;
                  adaptor.AddChild(root, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                  foreach (string a in args) {
                    CommonTree root0 = (CommonTree)adaptor.Nil;
                    root0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root0);
                    adaptor.AddChild(root0, (CommonTree)adaptor.Create(IDENTIFIER, tok, a));
                    adaptor.AddChild(root, root0);
                  }
                  adaptor.AddChild(root, (CommonTree)adaptor.Create(GT, tok, ">"));
                  argsTree = (CommonTree)adaptor.RulePostProcessing(root);
               }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3769:1: ( -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, name] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3770:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3770:1: -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, name] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3771:13: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, name] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, name));
                	    adaptor.AddChild(root_1,  dupTree(argsTree) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3775:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicType"

        public class magicAssignment_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicAssignment"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3779:1: magicAssignment[bool isOn, IToken tok, CommonTree type, string name, CommonTree exp] : -> {isOn}? IDENTIFIER[tok, name] ASSIGN[tok, \"=\"] SEMI[tok, \";\"] ->;
        public NetMaker.magicAssignment_return magicAssignment(bool isOn, IToken tok, CommonTree type, string name, CommonTree exp) // throws RecognitionException [1]
        {   
            NetMaker.magicAssignment_return retval = new NetMaker.magicAssignment_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3779:85: ( -> {isOn}? IDENTIFIER[tok, name] ASSIGN[tok, \"=\"] SEMI[tok, \";\"] ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3780:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3780:1: -> {isOn}? IDENTIFIER[tok, name] ASSIGN[tok, \"=\"] SEMI[tok, \";\"]
                	if (isOn)
                	{
                	    adaptor.AddChild(root_0,  dupTree(type) );
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, name));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    adaptor.AddChild(root_0,  dupTree(exp) );
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	}
                	else // 3786:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicAssignment"

        public class magicTryCatch_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicTryCatch"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3789:1: magicTryCatch[bool isOn, IToken tok, CommonTree body] : -> {isOn}? ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ) ->;
        public NetMaker.magicTryCatch_return magicTryCatch(bool isOn, IToken tok, CommonTree body) // throws RecognitionException [1]
        {   
            NetMaker.magicTryCatch_return retval = new NetMaker.magicTryCatch_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3789:54: ( -> {isOn}? ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3790:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3790:1: -> {isOn}? ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3791:18: ^( TRY[tok, \"try\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY, tok, "try"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3795:22: ^( CATCH[tok, \"catch\"] ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] ) IDENTIFIER[tok, \"e\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) ) SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH, tok, "catch"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3795:44: ^( TYPE[tok,\"TYPE\"] IDENTIFIER[tok, \"Exception\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Exception"));

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "e"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3797:27: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3797:49: ^( DOT[tok, \".\"] IDENTIFIER[tok, \"e\"] IDENTIFIER[tok,\"printStackTrace\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "e"));
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "printStackTrace"));

                	    adaptor.AddChild(root_3, root_4);
                	    }

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3801:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicTryCatch"

        public class magicDot_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicDot"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3804:1: magicDot[bool isOn, IToken tok, CommonTree lhs, string rhs] : -> {isOn}? ^( DOT[tok, \".\"] IDENTIFIER[tok, rhs] ) ->;
        public NetMaker.magicDot_return magicDot(bool isOn, IToken tok, CommonTree lhs, string rhs) // throws RecognitionException [1]
        {   
            NetMaker.magicDot_return retval = new NetMaker.magicDot_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3804:60: ( -> {isOn}? ^( DOT[tok, \".\"] IDENTIFIER[tok, rhs] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3805:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3805:1: -> {isOn}? ^( DOT[tok, \".\"] IDENTIFIER[tok, rhs] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3805:13: ^( DOT[tok, \".\"] IDENTIFIER[tok, rhs] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_1);

                	    adaptor.AddChild(root_1,  dupTree(lhs) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, rhs));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3806:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicDot"

        public class magicApply_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicApply"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3809:1: magicApply[bool isOn, IToken tok, CommonTree methodExp, CommonTree args] : -> {isOn}? ^( APPLY[tok, \"APPLY\"] ) ->;
        public NetMaker.magicApply_return magicApply(bool isOn, IToken tok, CommonTree methodExp, CommonTree args) // throws RecognitionException [1]
        {   
            NetMaker.magicApply_return retval = new NetMaker.magicApply_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3809:73: ( -> {isOn}? ^( APPLY[tok, \"APPLY\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3810:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3810:1: -> {isOn}? ^( APPLY[tok, \"APPLY\"] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3810:13: ^( APPLY[tok, \"APPLY\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(methodExp) );
                	    adaptor.AddChild(root_1,  dupTree(args) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3811:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicApply"

        public class magicRef_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicRef"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3814:1: magicRef[bool isOn, IToken tok, CommonTree ty] : -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ->;
        public NetMaker.magicRef_return magicRef(bool isOn, IToken tok, CommonTree ty) // throws RecognitionException [1]
        {   
            NetMaker.magicRef_return retval = new NetMaker.magicRef_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3814:47: ( -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3815:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3815:1: -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3815:13: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_1,  dupTree(ty) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3816:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicRef"

        public class magicCreateRefVar_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicCreateRefVar"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3819:1: magicCreateRefVar[IToken tok, String id, CommonTree type, CommonTree value] : -> { type == null }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) ^( ARGS[tok, \"ARGS\"] ) ) SEMI[tok,\";\"] -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] ) ) SEMI[tok,\";\"] ;
        public NetMaker.magicCreateRefVar_return magicCreateRefVar(IToken tok, String id, CommonTree type, CommonTree value) // throws RecognitionException [1]
        {   
            NetMaker.magicCreateRefVar_return retval = new NetMaker.magicCreateRefVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3819:76: ( -> { type == null }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) ^( ARGS[tok, \"ARGS\"] ) ) SEMI[tok,\";\"] -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] ) ) SEMI[tok,\";\"] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3820:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3820:1: -> { type == null }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) ^( ARGS[tok, \"ARGS\"] ) ) SEMI[tok,\";\"]
                	if ( type == null )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3820:22: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, id));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3821:8: ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) ^( ARGS[tok, \"ARGS\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "new"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3821:26: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3821:77: ^( ARGS[tok, \"ARGS\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_2);

                	    adaptor.AddChild(root_2,  dupTree(value) );

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	}
                	else // 3823:1: -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] ) ) SEMI[tok,\";\"]
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3823:4: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_1,  dupTree(type) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, id));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3824:8: ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "new"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3824:26: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_2,  dupTree(type) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3824:124: ^( ARGS[tok, \"ARGS\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_2);

                	    adaptor.AddChild(root_2,  dupTree(value) );

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicCreateRefVar"

        public class magicCreateOutVar_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicCreateOutVar"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3828:1: magicCreateOutVar[IToken tok, String id, CommonTree type] : -> {type == null}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) ) SEMI[tok,\";\"] -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ) SEMI[tok,\";\"] ;
        public NetMaker.magicCreateOutVar_return magicCreateOutVar(IToken tok, String id, CommonTree type) // throws RecognitionException [1]
        {   
            NetMaker.magicCreateOutVar_return retval = new NetMaker.magicCreateOutVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3828:58: ( -> {type == null}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) ) SEMI[tok,\";\"] -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ) SEMI[tok,\";\"] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3829:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3829:1: -> {type == null}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) ) SEMI[tok,\";\"]
                	if (type == null)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3829:20: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, id));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3830:8: ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "new"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3830:26: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	}
                	else // 3832:1: -> ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, id] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ) SEMI[tok,\";\"]
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3832:4: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_1,  dupTree(type) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, id));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3833:8: ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "new"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3833:26: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"RefSupport\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "RefSupport"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_2,  dupTree(type) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicCreateOutVar"

        public class magicUpdateFromRefVar_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicUpdateFromRefVar"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3837:1: magicUpdateFromRefVar[IToken tok, String id, CommonTree variable_ref, bool isWrapped] : -> {isWrapped}? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"setValue\"] ) ^( ARGS[tok, \"ARGS\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) ) ) SEMI[tok,\";\"] -> ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) SEMI[tok,\";\"] ;
        public NetMaker.magicUpdateFromRefVar_return magicUpdateFromRefVar(IToken tok, String id, CommonTree variable_ref, bool isWrapped) // throws RecognitionException [1]
        {   
            NetMaker.magicUpdateFromRefVar_return retval = new NetMaker.magicUpdateFromRefVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3837:86: ( -> {isWrapped}? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"setValue\"] ) ^( ARGS[tok, \"ARGS\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) ) ) SEMI[tok,\";\"] -> ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) SEMI[tok,\";\"] )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3838:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3838:1: -> {isWrapped}? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"setValue\"] ) ^( ARGS[tok, \"ARGS\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) ) ) SEMI[tok,\";\"]
                	if (isWrapped)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3838:17: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"setValue\"] ) ^( ARGS[tok, \"ARGS\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3838:39: ^( DOT[tok, \".\"] IDENTIFIER[tok, \"setValue\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_2);

                	    adaptor.AddChild(root_2,  dupTree((CommonTree)adaptor.GetChild((CommonTree)adaptor.GetChild(variable_ref, 2),0)) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "setValue"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3838:175: ^( ARGS[tok, \"ARGS\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3838:195: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3838:217: ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, id));
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "getValue"));

                	    adaptor.AddChild(root_3, root_4);
                	    }

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	}
                	else // 3839:1: -> ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) ) SEMI[tok,\";\"]
                	{
                	    adaptor.AddChild(root_0,  dupTree(variable_ref) );
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3839:47: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3839:69: ^( DOT[tok, \".\"] IDENTIFIER[tok, id] IDENTIFIER[tok, \"getValue\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, id));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "getValue"));

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicUpdateFromRefVar"

        public class magicBoxedType_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicBoxedType"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3842:1: magicBoxedType[bool isOn, IToken tok, String boxedName] : -> { isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] ) ->;
        public NetMaker.magicBoxedType_return magicBoxedType(bool isOn, IToken tok, String boxedName) // throws RecognitionException [1]
        {   
            NetMaker.magicBoxedType_return retval = new NetMaker.magicBoxedType_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3842:56: ( -> { isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3843:5: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3843:5: -> { isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3843:18: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, boxedName));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3844:5: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicBoxedType"

        public class magicInputPeId_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicInputPeId"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3847:1: magicInputPeId[CommonTree dotTree, CommonTree idTree, CommonTree galTree] : -> { dotTree != null}? ->;
        public NetMaker.magicInputPeId_return magicInputPeId(CommonTree dotTree, CommonTree idTree, CommonTree galTree) // throws RecognitionException [1]
        {   
            NetMaker.magicInputPeId_return retval = new NetMaker.magicInputPeId_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3847:74: ( -> { dotTree != null}? ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3848:5: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3848:5: -> { dotTree != null}?
                	if ( dotTree != null)
                	{
                	    adaptor.AddChild(root_0, dupTree(dotTree));

                	}
                	else // 3849:5: ->
                	{
                	    adaptor.AddChild(root_0, dupTree(idTree));
                	    adaptor.AddChild(root_0,  dupTree(galTree) );

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicInputPeId"

        public class magicTypeFromTemplate_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicTypeFromTemplate"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3852:1: magicTypeFromTemplate[bool isOn, IToken tok, TypeRepTemplate dotNetType] : -> { $isOn && $dotNetType.Tree != null}? -> { $isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, $dotNetType.mkFormattedTypeName(false, \"<\",\">\")] ) ->;
        public NetMaker.magicTypeFromTemplate_return magicTypeFromTemplate(bool isOn, IToken tok, TypeRepTemplate dotNetType) // throws RecognitionException [1]
        {   
            NetMaker.magicTypeFromTemplate_return retval = new NetMaker.magicTypeFromTemplate_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3852:73: ( -> { $isOn && $dotNetType.Tree != null}? -> { $isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, $dotNetType.mkFormattedTypeName(false, \"<\",\">\")] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3853:4: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3853:4: -> { $isOn && $dotNetType.Tree != null}?
                	if ( isOn && dotNetType.Tree != null)
                	{
                	    adaptor.AddChild(root_0,  dupTree((CommonTree)dotNetType.Tree) );

                	}
                	else // 3854:4: -> { $isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, $dotNetType.mkFormattedTypeName(false, \"<\",\">\")] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3854:18: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, $dotNetType.mkFormattedTypeName(false, \"<\",\">\")] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, dotNetType.mkFormattedTypeName(false, "<",">")));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3855:4: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicTypeFromTemplate"

        public class magicExtends_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicExtends"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3858:1: magicExtends[bool isOn, IToken tok, CommonTree type] : -> { $isOn }? ^( EXTENDS[tok, \"extends\"] ) ->;
        public NetMaker.magicExtends_return magicExtends(bool isOn, IToken tok, CommonTree type) // throws RecognitionException [1]
        {   
            NetMaker.magicExtends_return retval = new NetMaker.magicExtends_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3858:53: ( -> { $isOn }? ^( EXTENDS[tok, \"extends\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3859:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3859:2: -> { $isOn }? ^( EXTENDS[tok, \"extends\"] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3859:16: ^( EXTENDS[tok, \"extends\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS, tok, "extends"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(type) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3860:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicExtends"

        public class magicIdentifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicIdentifier"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3863:1: magicIdentifier[bool isOn, string text, IToken tok] : -> { $isOn }? ^( IDENTIFIER[tok, text] ) ->;
        public NetMaker.magicIdentifier_return magicIdentifier(bool isOn, string text, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicIdentifier_return retval = new NetMaker.magicIdentifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3863:52: ( -> { $isOn }? ^( IDENTIFIER[tok, text] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3864:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3864:2: -> { $isOn }? ^( IDENTIFIER[tok, text] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3864:16: ^( IDENTIFIER[tok, text] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IDENTIFIER, tok, text), root_1);

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 3865:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicIdentifier"

        public class magicMethodGroup_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMethodGroup"
        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3868:1: magicMethodGroup[CommonTree d1Tree, CommonTree e1Tree, CommonTree idTree, CommonTree galTree, IToken tok] : -> { $d1Tree == null }? -> ^( DOT[tok, \".\"] ) ;
        public NetMaker.magicMethodGroup_return magicMethodGroup(CommonTree d1Tree, CommonTree e1Tree, CommonTree idTree, CommonTree galTree, IToken tok) // throws RecognitionException [1]
        {   
            NetMaker.magicMethodGroup_return retval = new NetMaker.magicMethodGroup_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3868:106: ( -> { $d1Tree == null }? -> ^( DOT[tok, \".\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3869:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 3869:2: -> { $d1Tree == null }?
                	if ( d1Tree == null )
                	{
                	    adaptor.AddChild(root_0, dupTree(idTree));
                	    adaptor.AddChild(root_0, dupTree(galTree));

                	}
                	else // 3870:2: -> ^( DOT[tok, \".\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3870:5: ^( DOT[tok, \".\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_1);

                	    adaptor.AddChild(root_1, dupTree(e1Tree));
                	    adaptor.AddChild(root_1, dupTree(idTree));
                	    adaptor.AddChild(root_1, dupTree(galTree));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMethodGroup"

        // $ANTLR start "synpred1_NetMaker"
        public void synpred1_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:7: ( ^( APPLY ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | ( identifier ( generic_argument_list )? ) ) ( argument_list )? ) )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:8: ^( APPLY ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | ( identifier ( generic_argument_list )? ) ) ( argument_list )? )
            {
            	Match(input,APPLY,FOLLOW_APPLY_in_synpred1_NetMaker770); if (state.failed) return ;

            	Match(input, Token.DOWN, null); if (state.failed) return ;
            	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:16: ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | ( identifier ( generic_argument_list )? ) )
            	int alt236 = 2;
            	int LA236_0 = input.LA(1);

            	if ( (LA236_0 == DOT) )
            	{
            	    alt236 = 1;
            	}
            	else if ( (LA236_0 == IDENTIFIER || (LA236_0 >= ELIF && LA236_0 <= UNDEF) || LA236_0 == 195 || LA236_0 == 221 || (LA236_0 >= 224 && LA236_0 <= 239) || (LA236_0 >= 241 && LA236_0 <= 244) || (LA236_0 >= 247 && LA236_0 <= 250) || LA236_0 == 256 || (LA236_0 >= 263 && LA236_0 <= 264) || LA236_0 == 274 || LA236_0 == 277) )
            	{
            	    alt236 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    NoViableAltException nvae_d236s0 =
            	        new NoViableAltException("", 236, 0, input);

            	    throw nvae_d236s0;
            	}
            	switch (alt236) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:17: ^( '.' expression[ObjectType] identifier ( generic_argument_list )? )
            	        {
            	        	Match(input,DOT,FOLLOW_DOT_in_synpred1_NetMaker774); if (state.failed) return ;

            	        	Match(input, Token.DOWN, null); if (state.failed) return ;
            	        	PushFollow(FOLLOW_expression_in_synpred1_NetMaker776);
            	        	expression(ObjectType);
            	        	state._fsp--;
            	        	if (state.failed) return ;
            	        	PushFollow(FOLLOW_identifier_in_synpred1_NetMaker779);
            	        	identifier();
            	        	state._fsp--;
            	        	if (state.failed) return ;
            	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:57: ( generic_argument_list )?
            	        	int alt234 = 2;
            	        	int LA234_0 = input.LA(1);

            	        	if ( (LA234_0 == LTHAN) )
            	        	{
            	        	    alt234 = 1;
            	        	}
            	        	switch (alt234) 
            	        	{
            	        	    case 1 :
            	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:57: generic_argument_list
            	        	        {
            	        	        	PushFollow(FOLLOW_generic_argument_list_in_synpred1_NetMaker781);
            	        	        	generic_argument_list();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return ;

            	        	        }
            	        	        break;

            	        	}


            	        	Match(input, Token.UP, null); if (state.failed) return ;

            	        }
            	        break;
            	    case 2 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:81: ( identifier ( generic_argument_list )? )
            	        {
            	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:81: ( identifier ( generic_argument_list )? )
            	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:82: identifier ( generic_argument_list )?
            	        	{
            	        		PushFollow(FOLLOW_identifier_in_synpred1_NetMaker786);
            	        		identifier();
            	        		state._fsp--;
            	        		if (state.failed) return ;
            	        		// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:93: ( generic_argument_list )?
            	        		int alt235 = 2;
            	        		int LA235_0 = input.LA(1);

            	        		if ( (LA235_0 == LTHAN) )
            	        		{
            	        		    alt235 = 1;
            	        		}
            	        		switch (alt235) 
            	        		{
            	        		    case 1 :
            	        		        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:93: generic_argument_list
            	        		        {
            	        		        	PushFollow(FOLLOW_generic_argument_list_in_synpred1_NetMaker788);
            	        		        	generic_argument_list();
            	        		        	state._fsp--;
            	        		        	if (state.failed) return ;

            	        		        }
            	        		        break;

            	        		}


            	        	}


            	        }
            	        break;

            	}

            	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:118: ( argument_list )?
            	int alt237 = 2;
            	int LA237_0 = input.LA(1);

            	if ( (LA237_0 == ARGS) )
            	{
            	    alt237 = 1;
            	}
            	switch (alt237) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1349:118: argument_list
            	        {
            	        	PushFollow(FOLLOW_argument_list_in_synpred1_NetMaker793);
            	        	argument_list();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}


            	Match(input, Token.UP, null); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred1_NetMaker"

        // $ANTLR start "synpred2_NetMaker"
        public void synpred2_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1413:7: ( ^( ( POSTINC | POSTDEC ) ( ^( '.' expression[objectType] identifier ) | identifier ) ) )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1413:8: ^( ( POSTINC | POSTDEC ) ( ^( '.' expression[objectType] identifier ) | identifier ) )
            {
            	if ( (input.LA(1) >= POSTINC && input.LA(1) <= POSTDEC) ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            	Match(input, Token.DOWN, null); if (state.failed) return ;
            	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1413:28: ( ^( '.' expression[objectType] identifier ) | identifier )
            	int alt238 = 2;
            	int LA238_0 = input.LA(1);

            	if ( (LA238_0 == DOT) )
            	{
            	    alt238 = 1;
            	}
            	else if ( (LA238_0 == IDENTIFIER || (LA238_0 >= ELIF && LA238_0 <= UNDEF) || LA238_0 == 195 || LA238_0 == 221 || (LA238_0 >= 224 && LA238_0 <= 239) || (LA238_0 >= 241 && LA238_0 <= 244) || (LA238_0 >= 247 && LA238_0 <= 250) || LA238_0 == 256 || (LA238_0 >= 263 && LA238_0 <= 264) || LA238_0 == 274 || LA238_0 == 277) )
            	{
            	    alt238 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    NoViableAltException nvae_d238s0 =
            	        new NoViableAltException("", 238, 0, input);

            	    throw nvae_d238s0;
            	}
            	switch (alt238) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1413:29: ^( '.' expression[objectType] identifier )
            	        {
            	        	Match(input,DOT,FOLLOW_DOT_in_synpred2_NetMaker896); if (state.failed) return ;

            	        	Match(input, Token.DOWN, null); if (state.failed) return ;
            	        	PushFollow(FOLLOW_expression_in_synpred2_NetMaker898);
            	        	expression(objectType);
            	        	state._fsp--;
            	        	if (state.failed) return ;
            	        	PushFollow(FOLLOW_identifier_in_synpred2_NetMaker901);
            	        	identifier();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        	Match(input, Token.UP, null); if (state.failed) return ;

            	        }
            	        break;
            	    case 2 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1413:72: identifier
            	        {
            	        	PushFollow(FOLLOW_identifier_in_synpred2_NetMaker906);
            	        	identifier();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}


            	Match(input, Token.UP, null); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred2_NetMaker"

        // $ANTLR start "synpred3_NetMaker"
        public void synpred3_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1719:4: ( '(' type ')' )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1719:5: '(' type ')'
            {
            	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred3_NetMaker1934); if (state.failed) return ;
            	PushFollow(FOLLOW_type_in_synpred3_NetMaker1938);
            	type();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred3_NetMaker1942); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred3_NetMaker"

        // $ANTLR start "synpred4_NetMaker"
        public void synpred4_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1760:2: ( array_creation_expression )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1760:3: array_creation_expression
            {
            	PushFollow(FOLLOW_array_creation_expression_in_synpred4_NetMaker2282);
            	array_creation_expression();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred4_NetMaker"

        // $ANTLR start "synpred5_NetMaker"
        public void synpred5_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1831:5: ( generic_dimension_specifier '.' )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1831:6: generic_dimension_specifier '.'
            {
            	PushFollow(FOLLOW_generic_dimension_specifier_in_synpred5_NetMaker2760);
            	generic_dimension_specifier();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,DOT,FOLLOW_DOT_in_synpred5_NetMaker2764); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred5_NetMaker"

        // $ANTLR start "synpred6_NetMaker"
        public void synpred6_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1959:4: ( identifier generic_argument_list )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1959:5: identifier generic_argument_list
            {
            	PushFollow(FOLLOW_identifier_in_synpred6_NetMaker3121);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	PushFollow(FOLLOW_generic_argument_list_in_synpred6_NetMaker3125);
            	generic_argument_list();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred6_NetMaker"

        // $ANTLR start "synpred7_NetMaker"
        public void synpred7_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1987:7: ( '?' 'extends' )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:1987:8: '?' 'extends'
            {
            	Match(input,220,FOLLOW_220_in_synpred7_NetMaker3286); if (state.failed) return ;
            	Match(input,221,FOLLOW_221_in_synpred7_NetMaker3288); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred7_NetMaker"

        // $ANTLR start "synpred8_NetMaker"
        public void synpred8_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2066:2: ( unary_expression[ObjectType] assignment_operator )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2066:3: unary_expression[ObjectType] assignment_operator
            {
            	PushFollow(FOLLOW_unary_expression_in_synpred8_NetMaker3649);
            	unary_expression(ObjectType);
            	state._fsp--;
            	if (state.failed) return ;
            	PushFollow(FOLLOW_assignment_operator_in_synpred8_NetMaker3654);
            	assignment_operator();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred8_NetMaker"

        // $ANTLR start "synpred9_NetMaker"
        public void synpred9_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:5: ( ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | identifier ) assignment_operator )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:6: ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | identifier ) assignment_operator
            {
            	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:6: ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | identifier )
            	int alt240 = 2;
            	int LA240_0 = input.LA(1);

            	if ( (LA240_0 == DOT) )
            	{
            	    alt240 = 1;
            	}
            	else if ( (LA240_0 == IDENTIFIER || (LA240_0 >= ELIF && LA240_0 <= UNDEF) || LA240_0 == 195 || LA240_0 == 221 || (LA240_0 >= 224 && LA240_0 <= 239) || (LA240_0 >= 241 && LA240_0 <= 244) || (LA240_0 >= 247 && LA240_0 <= 250) || LA240_0 == 256 || (LA240_0 >= 263 && LA240_0 <= 264) || LA240_0 == 274 || LA240_0 == 277) )
            	{
            	    alt240 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    NoViableAltException nvae_d240s0 =
            	        new NoViableAltException("", 240, 0, input);

            	    throw nvae_d240s0;
            	}
            	switch (alt240) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:7: ^( '.' expression[ObjectType] identifier ( generic_argument_list )? )
            	        {
            	        	Match(input,DOT,FOLLOW_DOT_in_synpred9_NetMaker3773); if (state.failed) return ;

            	        	Match(input, Token.DOWN, null); if (state.failed) return ;
            	        	PushFollow(FOLLOW_expression_in_synpred9_NetMaker3775);
            	        	expression(ObjectType);
            	        	state._fsp--;
            	        	if (state.failed) return ;
            	        	PushFollow(FOLLOW_identifier_in_synpred9_NetMaker3778);
            	        	identifier();
            	        	state._fsp--;
            	        	if (state.failed) return ;
            	        	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:47: ( generic_argument_list )?
            	        	int alt239 = 2;
            	        	int LA239_0 = input.LA(1);

            	        	if ( (LA239_0 == LTHAN) )
            	        	{
            	        	    alt239 = 1;
            	        	}
            	        	switch (alt239) 
            	        	{
            	        	    case 1 :
            	        	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:47: generic_argument_list
            	        	        {
            	        	        	PushFollow(FOLLOW_generic_argument_list_in_synpred9_NetMaker3780);
            	        	        	generic_argument_list();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return ;

            	        	        }
            	        	        break;

            	        	}


            	        	Match(input, Token.UP, null); if (state.failed) return ;

            	        }
            	        break;
            	    case 2 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2095:73: identifier
            	        {
            	        	PushFollow(FOLLOW_identifier_in_synpred9_NetMaker3786);
            	        	identifier();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_assignment_operator_in_synpred9_NetMaker3789);
            	assignment_operator();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred9_NetMaker"

        // $ANTLR start "synpred10_NetMaker"
        public void synpred10_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2242:7: ( ^( INDEX expression[ObjectType] ( expression_list )? ) assignment_operator )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2242:8: ^( INDEX expression[ObjectType] ( expression_list )? ) assignment_operator
            {
            	Match(input,INDEX,FOLLOW_INDEX_in_synpred10_NetMaker3898); if (state.failed) return ;

            	Match(input, Token.DOWN, null); if (state.failed) return ;
            	PushFollow(FOLLOW_expression_in_synpred10_NetMaker3900);
            	expression(ObjectType);
            	state._fsp--;
            	if (state.failed) return ;
            	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2242:39: ( expression_list )?
            	int alt241 = 2;
            	int LA241_0 = input.LA(1);

            	if ( ((LA241_0 >= PARAMS && LA241_0 <= PARAMS_TYPELESS) || (LA241_0 >= MONOPLUS && LA241_0 <= APPLY) || (LA241_0 >= NEW && LA241_0 <= NEW_ARRAY) || LA241_0 == NEW_ANON_OBJECT || (LA241_0 >= OBJECT && LA241_0 <= THIS) || LA241_0 == NULL_COALESCE || (LA241_0 >= COND_EXPR && LA241_0 <= LEFT_SHIFT) || (LA241_0 >= SUPER && LA241_0 <= LAMBDA) || LA241_0 == CAST_EXPR || (LA241_0 >= BOOL && LA241_0 <= GT) || (LA241_0 >= ELIF && LA241_0 <= UNDEF) || LA241_0 == 195 || LA241_0 == 208 || (LA241_0 >= 214 && LA241_0 <= 219) || LA241_0 == 221 || (LA241_0 >= 224 && LA241_0 <= 239) || (LA241_0 >= 241 && LA241_0 <= 244) || (LA241_0 >= 247 && LA241_0 <= 254) || LA241_0 == 256 || (LA241_0 >= 263 && LA241_0 <= 264) || (LA241_0 >= 274 && LA241_0 <= 277)) )
            	{
            	    alt241 = 1;
            	}
            	switch (alt241) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2242:39: expression_list
            	        {
            	        	PushFollow(FOLLOW_expression_list_in_synpred10_NetMaker3903);
            	        	expression_list();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}


            	Match(input, Token.UP, null); if (state.failed) return ;
            	PushFollow(FOLLOW_assignment_operator_in_synpred10_NetMaker3907);
            	assignment_operator();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred10_NetMaker"

        // $ANTLR start "synpred11_NetMaker"
        public void synpred11_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2374:2: ( ( anonymous_function_signature[null] )? '=>' )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2374:3: ( anonymous_function_signature[null] )? '=>'
            {
            	// /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2374:3: ( anonymous_function_signature[null] )?
            	int alt242 = 2;
            	int LA242_0 = input.LA(1);

            	if ( ((LA242_0 >= PARAMS && LA242_0 <= PARAMS_TYPELESS)) )
            	{
            	    alt242 = 1;
            	}
            	switch (alt242) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2374:3: anonymous_function_signature[null]
            	        {
            	        	PushFollow(FOLLOW_anonymous_function_signature_in_synpred11_NetMaker4474);
            	        	anonymous_function_signature(null);
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}

            	Match(input,LAMBDA,FOLLOW_LAMBDA_in_synpred11_NetMaker4480); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred11_NetMaker"

        // $ANTLR start "synpred12_NetMaker"
        public void synpred12_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2375:4: ( query_expression )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2375:5: query_expression
            {
            	PushFollow(FOLLOW_query_expression_in_synpred12_NetMaker4495);
            	query_expression();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred12_NetMaker"

        // $ANTLR start "synpred13_NetMaker"
        public void synpred13_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2624:50: ( 'into' )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2624:51: 'into'
            {
            	Match(input,224,FOLLOW_224_in_synpred13_NetMaker5993); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred13_NetMaker"

        // $ANTLR start "synpred14_NetMaker"
        public void synpred14_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2691:32: ( ',' identifier '=' )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:2691:33: ',' identifier '='
            {
            	Match(input,COMMA,FOLLOW_COMMA_in_synpred14_NetMaker6487); if (state.failed) return ;
            	PushFollow(FOLLOW_identifier_in_synpred14_NetMaker6491);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred14_NetMaker6495); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred14_NetMaker"

        // $ANTLR start "synpred15_NetMaker"
        public void synpred15_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3098:23: ( arguments ( '[' | '.' | '->' ) )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3098:24: arguments ( '[' | '.' | '->' )
            {
            	PushFollow(FOLLOW_arguments_in_synpred15_NetMaker8726);
            	arguments();
            	state._fsp--;
            	if (state.failed) return ;
            	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }
        }
        // $ANTLR end "synpred15_NetMaker"

        // $ANTLR start "synpred16_NetMaker"
        public void synpred16_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3102:4: ( identifier generic_argument_list )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3102:5: identifier generic_argument_list
            {
            	PushFollow(FOLLOW_identifier_in_synpred16_NetMaker8782);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	PushFollow(FOLLOW_generic_argument_list_in_synpred16_NetMaker8787);
            	generic_argument_list();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred16_NetMaker"

        // $ANTLR start "synpred17_NetMaker"
        public void synpred17_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3127:8: ( declaration_statement )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3127:9: declaration_statement
            {
            	PushFollow(FOLLOW_declaration_statement_in_synpred17_NetMaker8886);
            	declaration_statement();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred17_NetMaker"

        // $ANTLR start "synpred18_NetMaker"
        public void synpred18_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:8: ( ^( ( 'return' | 'throw' ) ( expression[ObjectType] )? ) )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:9: ^( ( 'return' | 'throw' ) ( expression[ObjectType] )? )
            {
            	if ( input.LA(1) == RETURN || input.LA(1) == THROW ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            	if ( input.LA(1) == Token.DOWN )
            	{
            	    Match(input, Token.DOWN, null); if (state.failed) return ;
            	    // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:32: ( expression[ObjectType] )?
            	    int alt243 = 2;
            	    int LA243_0 = input.LA(1);

            	    if ( ((LA243_0 >= PARAMS && LA243_0 <= PARAMS_TYPELESS) || (LA243_0 >= MONOPLUS && LA243_0 <= APPLY) || (LA243_0 >= NEW && LA243_0 <= NEW_ARRAY) || LA243_0 == NEW_ANON_OBJECT || (LA243_0 >= OBJECT && LA243_0 <= THIS) || LA243_0 == NULL_COALESCE || (LA243_0 >= COND_EXPR && LA243_0 <= LEFT_SHIFT) || (LA243_0 >= SUPER && LA243_0 <= LAMBDA) || LA243_0 == CAST_EXPR || (LA243_0 >= BOOL && LA243_0 <= GT) || (LA243_0 >= ELIF && LA243_0 <= UNDEF) || LA243_0 == 195 || LA243_0 == 208 || (LA243_0 >= 214 && LA243_0 <= 219) || LA243_0 == 221 || (LA243_0 >= 224 && LA243_0 <= 239) || (LA243_0 >= 241 && LA243_0 <= 244) || (LA243_0 >= 247 && LA243_0 <= 254) || LA243_0 == 256 || (LA243_0 >= 263 && LA243_0 <= 264) || (LA243_0 >= 274 && LA243_0 <= 277)) )
            	    {
            	        alt243 = 1;
            	    }
            	    switch (alt243) 
            	    {
            	        case 1 :
            	            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3168:32: expression[ObjectType]
            	            {
            	            	PushFollow(FOLLOW_expression_in_synpred18_NetMaker9266);
            	            	expression(ObjectType);
            	            	state._fsp--;
            	            	if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    Match(input, Token.UP, null); if (state.failed) return ;
            	}

            }
        }
        // $ANTLR end "synpred18_NetMaker"

        // $ANTLR start "synpred19_NetMaker"
        public void synpred19_NetMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3446:2: ( local_variable_declaration )
            // /project/src/CS2JTranslator/CS2JTransform/NetMaker.g:3446:3: local_variable_declaration
            {
            	PushFollow(FOLLOW_local_variable_declaration_in_synpred19_NetMaker11051);
            	local_variable_declaration();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred19_NetMaker"

        // Delegated rules

       	public bool synpred7_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred7_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred6_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred6_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred2_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred2_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred4_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred4_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred18_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred18_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred1_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred1_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred13_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred13_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred15_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred15_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred19_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred19_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred9_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred9_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred3_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred3_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred8_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred8_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred10_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred10_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred16_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred16_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred17_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred17_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred11_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred11_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred5_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred5_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred14_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred14_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred12_NetMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred12_NetMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}


       	protected DFA41 dfa41;
       	protected DFA76 dfa76;
       	protected DFA95 dfa95;
       	protected DFA100 dfa100;
       	protected DFA101 dfa101;
       	protected DFA103 dfa103;
       	protected DFA195 dfa195;
       	protected DFA209 dfa209;
    	private void InitializeCyclicDFAs()
    	{
        	this.dfa41 = new DFA41(this);
        	this.dfa76 = new DFA76(this);
        	this.dfa95 = new DFA95(this);
        	this.dfa100 = new DFA100(this);
        	this.dfa101 = new DFA101(this);
        	this.dfa103 = new DFA103(this);
        	this.dfa195 = new DFA195(this);
        	this.dfa209 = new DFA209(this);
    	    this.dfa41.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA41_SpecialStateTransition);
    	    this.dfa76.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA76_SpecialStateTransition);
    	    this.dfa95.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA95_SpecialStateTransition);
    	    this.dfa100.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA100_SpecialStateTransition);
    	    this.dfa103.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA103_SpecialStateTransition);
    	    this.dfa209.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA209_SpecialStateTransition);
    	}

        const string DFA41_eotS =
            "\x32\uffff";
        const string DFA41_eofS =
            "\x32\uffff";
        const string DFA41_minS =
            "\x01\x2a\x01\uffff\x03\x00\x2d\uffff";
        const string DFA41_maxS =
            "\x01\u0115\x01\uffff\x03\x00\x2d\uffff";
        const string DFA41_acceptS =
            "\x01\uffff\x01\x01\x03\uffff\x01\x07\x01\x08\x0e\uffff\x01\x09"+
            "\x01\x0a\x01\x0b\x02\uffff\x01\x0c\x01\x0d\x09\uffff\x01\x0e"+
            "\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01"+
            "\x02\x01\x03\x01\x04\x01\x05\x01\x06";
        const string DFA41_specialS =
            "\x02\uffff\x01\x00\x01\x01\x01\x02\x2d\uffff}>";
        static readonly string[] DFA41_transitionS = {
                "\x01\x03\x01\x04\x01\uffff\x01\x01\x01\x02\x01\uffff\x01"+
                "\x25\x02\uffff\x01\x26\x0d\uffff\x01\x06\x01\x15\x24\uffff"+
                "\x01\x16\x01\x1b\x19\uffff\x08\x06\x01\x17\x09\x1b\x01\x17"+
                "\x01\x05\x02\uffff\x04\x17\x27\uffff\x01\x17\x0c\uffff\x01"+
                "\x1a\x05\uffff\x01\x27\x01\x28\x01\x29\x01\x2a\x01\x2b\x01"+
                "\x2c\x01\uffff\x01\x17\x02\uffff\x10\x17\x01\uffff\x04\x17"+
                "\x02\uffff\x04\x17\x04\x06\x01\uffff\x01\x17\x06\uffff\x02"+
                "\x17\x09\uffff\x01\x17\x02\x06\x01\x17",
                "",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
        static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
        static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
        static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
        static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
        static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
        static readonly short[][] DFA41_transition = DFA.UnpackEncodedStringArray(DFA41_transitionS);

        protected class DFA41 : DFA
        {
            public DFA41(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 41;
                this.eot = DFA41_eot;
                this.eof = DFA41_eof;
                this.min = DFA41_min;
                this.max = DFA41_max;
                this.accept = DFA41_accept;
                this.special = DFA41_special;
                this.transition = DFA41_transition;

            }

            override public string Description
            {
                get { return "1308:1: primary_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( ^(index= INDEX ie= expression[ObjectType] ( expression_list )? ) | ( ^( APPLY ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | ( identifier ( generic_argument_list )? ) ) ( argument_list )? ) )=> ^( APPLY ( ^(d0= '.' e2= expression[ObjectType] i2= identifier ( generic_argument_list )? ) | (i2= identifier ( generic_argument_list )? ) ) ( argument_list )? ) | ^( APPLY expression[ObjectType] ( argument_list )? ) | ( ^( ( POSTINC | POSTDEC ) ( ^( '.' expression[objectType] identifier ) | identifier ) ) )=> ( ^( POSTINC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) | ^( POSTDEC ( ^( '.' pse= expression[ObjectType] pi= identifier ) | pi= identifier ) ) ) | ^( POSTINC expression[ObjectType] ) | ^( POSTDEC expression[ObjectType] ) | ^( '->' expression[ObjectType] identifier ( generic_argument_list )? ) | predefined_type | 'this' | SUPER | ( ^(d1= '.' e1= expression[ObjectType] i= identifier (dgal= generic_argument_list )? ) | (i= identifier (dgal= generic_argument_list )? ) ) magicIdentifier[true, rewriteMethodName($i.thetext), $i.tree != null ? $i.tree.Token : null] magicInputPeId[$d1.tree,$i.tree,$dgal.tree] magicMethodGroup[$d1.tree, $e1.tree, $magicIdentifier.tree, $dgal.tree, $i.tree != null ? $i.tree.Token : null] | primary_expression_start | literal | ^(n= NEW type ( argument_list )? ( object_or_collection_initializer )? ) | ^( NEW_ANON_OBJECT anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | ^(d= 'delegate' ( formal_parameter_list[$typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.Params : null,\n $typeCtxt != null && $typeCtxt is DelegateRepTemplate ? ((DelegateRepTemplate)$typeCtxt).Invoke.ParamArray : null] )? block ) | typeof_expression );"; }
            }

        }


        protected internal int DFA41_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA41_2 = input.LA(1);

                       	 
                       	int index41_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred1_NetMaker()) ) { s = 45; }

                       	else if ( (true) ) { s = 46; }

                       	 
                       	input.Seek(index41_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA41_3 = input.LA(1);

                       	 
                       	int index41_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred2_NetMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index41_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA41_4 = input.LA(1);

                       	 
                       	int index41_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred2_NetMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 49; }

                       	 
                       	input.Seek(index41_4);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae41 =
                new NoViableAltException(dfa.Description, 41, _s, input);
            dfa.Error(nvae41);
            throw nvae41;
        }
        const string DFA76_eotS =
            "\x07\uffff";
        const string DFA76_eofS =
            "\x07\uffff";
        const string DFA76_minS =
            "\x01\x62\x01\x6f\x01\uffff\x01\x6f\x01\x03\x02\uffff";
        const string DFA76_maxS =
            "\x01\u0094\x01\u0096\x01\uffff\x01\u0096\x01\u0094\x02\uffff";
        const string DFA76_acceptS =
            "\x02\uffff\x01\x02\x02\uffff\x01\x01\x01\x03";
        const string DFA76_specialS =
            "\x04\uffff\x01\x00\x02\uffff}>";
        static readonly string[] DFA76_transitionS = {
                "\x01\x01\x31\uffff\x01\x02",
                "\x01\x03\x26\uffff\x01\x04",
                "",
                "\x01\x03\x26\uffff\x01\x04",
                "\x01\x06\u0090\uffff\x01\x05",
                "",
                ""
        };

        static readonly short[] DFA76_eot = DFA.UnpackEncodedString(DFA76_eotS);
        static readonly short[] DFA76_eof = DFA.UnpackEncodedString(DFA76_eofS);
        static readonly char[] DFA76_min = DFA.UnpackEncodedStringToUnsignedChars(DFA76_minS);
        static readonly char[] DFA76_max = DFA.UnpackEncodedStringToUnsignedChars(DFA76_maxS);
        static readonly short[] DFA76_accept = DFA.UnpackEncodedString(DFA76_acceptS);
        static readonly short[] DFA76_special = DFA.UnpackEncodedString(DFA76_specialS);
        static readonly short[][] DFA76_transition = DFA.UnpackEncodedStringArray(DFA76_transitionS);

        protected class DFA76 : DFA
        {
            public DFA76(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 76;
                this.eot = DFA76_eot;
                this.eof = DFA76_eof;
                this.min = DFA76_min;
                this.max = DFA76_max;
                this.accept = DFA76_accept;
                this.special = DFA76_special;
                this.transition = DFA76_transition;

            }

            override public string Description
            {
                get { return "()* loopback of 1831:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*"; }
            }

        }


        protected internal int DFA76_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA76_4 = input.LA(1);

                       	 
                       	int index76_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA76_4 == DOT) && (synpred5_NetMaker()) ) { s = 5; }

                       	else if ( (LA76_4 == UP) ) { s = 6; }

                       	 
                       	input.Seek(index76_4);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae76 =
                new NoViableAltException(dfa.Description, 76, _s, input);
            dfa.Error(nvae76);
            throw nvae76;
        }
        const string DFA95_eotS =
            "\x52\uffff";
        const string DFA95_eofS =
            "\x52\uffff";
        const string DFA95_minS =
            "\x01\x1a\x37\x00\x03\uffff\x01\x00\x16\uffff";
        const string DFA95_maxS =
            "\x01\u0115\x37\x00\x03\uffff\x01\x00\x16\uffff";
        const string DFA95_acceptS =
            "\x38\uffff\x01\x02\x18\uffff\x01\x01";
        const string DFA95_specialS =
            "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
            "\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d"+
            "\x01\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01"+
            "\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c"+
            "\x01\x1d\x01\x1e\x01\x1f\x01\x20\x01\x21\x01\x22\x01\x23\x01"+
            "\x24\x01\x25\x01\x26\x01\x27\x01\x28\x01\x29\x01\x2a\x01\x2b"+
            "\x01\x2c\x01\x2d\x01\x2e\x01\x2f\x01\x30\x01\x31\x01\x32\x01"+
            "\x33\x01\x34\x01\x35\x01\x36\x03\uffff\x01\x37\x16\uffff}>";
        static readonly string[] DFA95_transitionS = {
                "\x02\x38\x06\uffff\x01\x2f\x01\x30\x01\x31\x01\x32\x01\x35"+
                "\x01\x36\x01\x33\x01\x34\x01\x08\x01\x09\x01\x37\x01\x04"+
                "\x01\x07\x01\uffff\x01\x27\x01\x06\x01\uffff\x01\x28\x0d"+
                "\uffff\x01\x13\x01\x1a\x07\uffff\x01\x38\x0d\uffff\x0e\x38"+
                "\x01\uffff\x01\x1b\x01\x1f\x06\x38\x07\uffff\x01\x05\x0b"+
                "\uffff\x01\x0b\x01\x0c\x01\x0d\x01\x15\x01\x11\x01\x12\x01"+
                "\x10\x01\x0f\x01\x02\x01\x1d\x01\x1e\x01\x20\x01\x21\x01"+
                "\x22\x01\x23\x01\x24\x01\x25\x01\x26\x01\x01\x01\x0a\x01"+
                "\x38\x01\uffff\x04\x3b\x27\uffff\x01\x3b\x0c\uffff\x01\x1c"+
                "\x05\uffff\x01\x29\x01\x2a\x01\x2b\x01\x2c\x01\x2d\x01\x2e"+
                "\x01\uffff\x01\x3b\x02\uffff\x01\x3b\x01\x03\x0e\x3b\x01"+
                "\uffff\x04\x3b\x02\uffff\x04\x3b\x01\x14\x01\x19\x01\x17"+
                "\x01\x18\x01\uffff\x01\x3b\x06\uffff\x02\x3b\x09\uffff\x01"+
                "\x3b\x01\x0e\x01\x16\x01\x3b",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA95_eot = DFA.UnpackEncodedString(DFA95_eotS);
        static readonly short[] DFA95_eof = DFA.UnpackEncodedString(DFA95_eofS);
        static readonly char[] DFA95_min = DFA.UnpackEncodedStringToUnsignedChars(DFA95_minS);
        static readonly char[] DFA95_max = DFA.UnpackEncodedStringToUnsignedChars(DFA95_maxS);
        static readonly short[] DFA95_accept = DFA.UnpackEncodedString(DFA95_acceptS);
        static readonly short[] DFA95_special = DFA.UnpackEncodedString(DFA95_specialS);
        static readonly short[][] DFA95_transition = DFA.UnpackEncodedStringArray(DFA95_transitionS);

        protected class DFA95 : DFA
        {
            public DFA95(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 95;
                this.eot = DFA95_eot;
                this.eof = DFA95_eof;
                this.min = DFA95_min;
                this.max = DFA95_max;
                this.accept = DFA95_accept;
                this.special = DFA95_special;
                this.transition = DFA95_transition;

            }

            override public string Description
            {
                get { return "2064:1: expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( ( unary_expression[ObjectType] assignment_operator )=> assignment | non_assignment_expression[$typeCtxt] );"; }
            }

        }


        protected internal int DFA95_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA95_1 = input.LA(1);

                       	 
                       	int index95_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA95_2 = input.LA(1);

                       	 
                       	int index95_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA95_3 = input.LA(1);

                       	 
                       	int index95_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA95_4 = input.LA(1);

                       	 
                       	int index95_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA95_5 = input.LA(1);

                       	 
                       	int index95_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA95_6 = input.LA(1);

                       	 
                       	int index95_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA95_7 = input.LA(1);

                       	 
                       	int index95_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA95_8 = input.LA(1);

                       	 
                       	int index95_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA95_9 = input.LA(1);

                       	 
                       	int index95_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA95_10 = input.LA(1);

                       	 
                       	int index95_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_10);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA95_11 = input.LA(1);

                       	 
                       	int index95_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA95_12 = input.LA(1);

                       	 
                       	int index95_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA95_13 = input.LA(1);

                       	 
                       	int index95_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA95_14 = input.LA(1);

                       	 
                       	int index95_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA95_15 = input.LA(1);

                       	 
                       	int index95_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA95_16 = input.LA(1);

                       	 
                       	int index95_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA95_17 = input.LA(1);

                       	 
                       	int index95_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_17);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 17 : 
                       	int LA95_18 = input.LA(1);

                       	 
                       	int index95_18 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_18);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 18 : 
                       	int LA95_19 = input.LA(1);

                       	 
                       	int index95_19 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_19);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 19 : 
                       	int LA95_20 = input.LA(1);

                       	 
                       	int index95_20 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_20);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 20 : 
                       	int LA95_21 = input.LA(1);

                       	 
                       	int index95_21 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_21);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 21 : 
                       	int LA95_22 = input.LA(1);

                       	 
                       	int index95_22 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_22);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 22 : 
                       	int LA95_23 = input.LA(1);

                       	 
                       	int index95_23 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_23);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 23 : 
                       	int LA95_24 = input.LA(1);

                       	 
                       	int index95_24 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_24);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 24 : 
                       	int LA95_25 = input.LA(1);

                       	 
                       	int index95_25 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_25);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 25 : 
                       	int LA95_26 = input.LA(1);

                       	 
                       	int index95_26 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_26);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 26 : 
                       	int LA95_27 = input.LA(1);

                       	 
                       	int index95_27 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_27);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 27 : 
                       	int LA95_28 = input.LA(1);

                       	 
                       	int index95_28 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_28);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 28 : 
                       	int LA95_29 = input.LA(1);

                       	 
                       	int index95_29 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_29);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 29 : 
                       	int LA95_30 = input.LA(1);

                       	 
                       	int index95_30 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_30);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 30 : 
                       	int LA95_31 = input.LA(1);

                       	 
                       	int index95_31 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_31);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 31 : 
                       	int LA95_32 = input.LA(1);

                       	 
                       	int index95_32 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_32);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 32 : 
                       	int LA95_33 = input.LA(1);

                       	 
                       	int index95_33 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_33);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 33 : 
                       	int LA95_34 = input.LA(1);

                       	 
                       	int index95_34 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_34);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 34 : 
                       	int LA95_35 = input.LA(1);

                       	 
                       	int index95_35 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_35);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 35 : 
                       	int LA95_36 = input.LA(1);

                       	 
                       	int index95_36 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_36);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 36 : 
                       	int LA95_37 = input.LA(1);

                       	 
                       	int index95_37 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_37);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 37 : 
                       	int LA95_38 = input.LA(1);

                       	 
                       	int index95_38 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_38);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 38 : 
                       	int LA95_39 = input.LA(1);

                       	 
                       	int index95_39 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_39);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 39 : 
                       	int LA95_40 = input.LA(1);

                       	 
                       	int index95_40 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_40);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 40 : 
                       	int LA95_41 = input.LA(1);

                       	 
                       	int index95_41 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_41);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 41 : 
                       	int LA95_42 = input.LA(1);

                       	 
                       	int index95_42 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_42);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 42 : 
                       	int LA95_43 = input.LA(1);

                       	 
                       	int index95_43 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_43);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 43 : 
                       	int LA95_44 = input.LA(1);

                       	 
                       	int index95_44 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_44);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 44 : 
                       	int LA95_45 = input.LA(1);

                       	 
                       	int index95_45 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_45);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 45 : 
                       	int LA95_46 = input.LA(1);

                       	 
                       	int index95_46 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_46);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 46 : 
                       	int LA95_47 = input.LA(1);

                       	 
                       	int index95_47 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_47);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 47 : 
                       	int LA95_48 = input.LA(1);

                       	 
                       	int index95_48 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_48);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 48 : 
                       	int LA95_49 = input.LA(1);

                       	 
                       	int index95_49 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_49);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 49 : 
                       	int LA95_50 = input.LA(1);

                       	 
                       	int index95_50 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_50);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 50 : 
                       	int LA95_51 = input.LA(1);

                       	 
                       	int index95_51 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_51);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 51 : 
                       	int LA95_52 = input.LA(1);

                       	 
                       	int index95_52 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_52);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 52 : 
                       	int LA95_53 = input.LA(1);

                       	 
                       	int index95_53 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_53);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 53 : 
                       	int LA95_54 = input.LA(1);

                       	 
                       	int index95_54 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_54);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 54 : 
                       	int LA95_55 = input.LA(1);

                       	 
                       	int index95_55 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_55);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 55 : 
                       	int LA95_59 = input.LA(1);

                       	 
                       	int index95_59 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred8_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 56; }

                       	 
                       	input.Seek(index95_59);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae95 =
                new NoViableAltException(dfa.Description, 95, _s, input);
            dfa.Error(nvae95);
            throw nvae95;
        }
        const string DFA100_eotS =
            "\x3a\uffff";
        const string DFA100_eofS =
            "\x3a\uffff";
        const string DFA100_minS =
            "\x01\x22\x04\x00\x35\uffff";
        const string DFA100_maxS =
            "\x01\u0115\x04\x00\x35\uffff";
        const string DFA100_acceptS =
            "\x05\uffff\x01\x03\x32\uffff\x01\x01\x01\x02";
        const string DFA100_specialS =
            "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x35\uffff}>";
        static readonly string[] DFA100_transitionS = {
                "\x0b\x05\x01\x04\x01\x05\x01\uffff\x02\x05\x01\uffff\x01"+
                "\x05\x0d\uffff\x02\x05\x24\uffff\x02\x05\x0d\uffff\x01\x05"+
                "\x0b\uffff\x08\x05\x01\x02\x09\x05\x01\x01\x01\x05\x02\uffff"+
                "\x04\x03\x27\uffff\x01\x03\x0c\uffff\x01\x05\x05\uffff\x06"+
                "\x05\x01\uffff\x01\x03\x02\uffff\x10\x03\x01\uffff\x04\x03"+
                "\x02\uffff\x04\x03\x04\x05\x01\uffff\x01\x03\x06\uffff\x02"+
                "\x03\x09\uffff\x01\x03\x02\x05\x01\x03",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA100_eot = DFA.UnpackEncodedString(DFA100_eotS);
        static readonly short[] DFA100_eof = DFA.UnpackEncodedString(DFA100_eofS);
        static readonly char[] DFA100_min = DFA.UnpackEncodedStringToUnsignedChars(DFA100_minS);
        static readonly char[] DFA100_max = DFA.UnpackEncodedStringToUnsignedChars(DFA100_maxS);
        static readonly short[] DFA100_accept = DFA.UnpackEncodedString(DFA100_acceptS);
        static readonly short[] DFA100_special = DFA.UnpackEncodedString(DFA100_specialS);
        static readonly short[][] DFA100_transition = DFA.UnpackEncodedStringArray(DFA100_transitionS);

        protected class DFA100 : DFA
        {
            public DFA100(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 100;
                this.eot = DFA100_eot;
                this.eof = DFA100_eof;
                this.min = DFA100_min;
                this.max = DFA100_max;
                this.accept = DFA100_accept;
                this.special = DFA100_special;
                this.transition = DFA100_transition;

            }

            override public string Description
            {
                get { return "2078:1: assignment : ( ( ( ^( '.' expression[ObjectType] identifier ( generic_argument_list )? ) | identifier ) assignment_operator )=> ( ^(d0= '.' se= expression[ObjectType] i= identifier ( generic_argument_list )? ) | i= identifier ) a= assignment_operator rhs= expression[lhsType] | ( ^( INDEX expression[ObjectType] ( expression_list )? ) assignment_operator )=> ^( INDEX ie= expression[ObjectType] ( expression_list )? ) ia= assignment_operator irhs= expression[lhsType] | unary_expression[ObjectType] assignment_operator expression[ObjectType] );"; }
            }

        }


        protected internal int DFA100_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA100_1 = input.LA(1);

                       	 
                       	int index100_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred9_NetMaker()) ) { s = 56; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index100_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA100_2 = input.LA(1);

                       	 
                       	int index100_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred9_NetMaker()) ) { s = 56; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index100_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA100_3 = input.LA(1);

                       	 
                       	int index100_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred9_NetMaker()) ) { s = 56; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index100_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA100_4 = input.LA(1);

                       	 
                       	int index100_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred10_NetMaker()) ) { s = 57; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index100_4);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae100 =
                new NoViableAltException(dfa.Description, 100, _s, input);
            dfa.Error(nvae100);
            throw nvae100;
        }
        const string DFA101_eotS =
            "\x0c\uffff";
        const string DFA101_eofS =
            "\x0c\uffff";
        const string DFA101_minS =
            "\x01\x22\x0b\uffff";
        const string DFA101_maxS =
            "\x01\u0115\x0b\uffff";
        const string DFA101_acceptS =
            "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
            "\x07\x01\x08\x01\x09\x01\x0a\x01\x0b";
        const string DFA101_specialS =
            "\x0c\uffff}>";
        static readonly string[] DFA101_transitionS = {
                "\x01\x03\x01\x04\x01\x05\x01\x06\x01\x09\x01\x0a\x01\x07"+
                "\x01\x08\x02\x02\x01\x0b\x02\x02\x01\uffff\x02\x02\x01\uffff"+
                "\x01\x02\x0d\uffff\x02\x02\x24\uffff\x02\x02\x0d\uffff\x01"+
                "\x01\x0b\uffff\x14\x02\x02\uffff\x04\x02\x27\uffff\x01\x02"+
                "\x0c\uffff\x01\x02\x05\uffff\x06\x02\x01\uffff\x01\x02\x02"+
                "\uffff\x10\x02\x01\uffff\x04\x02\x02\uffff\x08\x02\x01\uffff"+
                "\x01\x02\x06\uffff\x02\x02\x09\uffff\x04\x02",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
        static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
        static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
        static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
        static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
        static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
        static readonly short[][] DFA101_transition = DFA.UnpackEncodedStringArray(DFA101_transitionS);

        protected class DFA101 : DFA
        {
            public DFA101(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 101;
                this.eot = DFA101_eot;
                this.eof = DFA101_eof;
                this.min = DFA101_min;
                this.max = DFA101_max;
                this.accept = DFA101_accept;
                this.special = DFA101_special;
                this.transition = DFA101_transition;

            }

            override public string Description
            {
                get { return "2295:1: unary_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( cast_expression | primary_or_array_creation_expression[$typeCtxt] | ^( MONOPLUS u1= unary_expression[ObjectType] ) | ^( MONOMINUS u2= unary_expression[ObjectType] ) | ^( MONONOT u3= unary_expression[ObjectType] ) | ^( MONOTWIDDLE u4= unary_expression[ObjectType] ) | ^( PREINC u5= unary_expression[ObjectType] ) | ^( PREDEC u6= unary_expression[ObjectType] ) | ^( MONOSTAR unary_expression[ObjectType] ) | ^( ADDRESSOF unary_expression[ObjectType] ) | ^( PARENS expression[$typeCtxt] ) );"; }
            }

        }

        const string DFA103_eotS =
            "\x52\uffff";
        const string DFA103_eofS =
            "\x52\uffff";
        const string DFA103_minS =
            "\x01\x1a\x03\uffff\x01\x00\x4d\uffff";
        const string DFA103_maxS =
            "\x01\u0115\x03\uffff\x01\x00\x4d\uffff";
        const string DFA103_acceptS =
            "\x01\uffff\x03\x01\x01\uffff\x01\x03\x01\x04\x01\x05\x01\x06"+
            "\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01"+
            "\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15"+
            "\x01\x16\x01\x17\x01\x18\x36\uffff\x01\x02";
        const string DFA103_specialS =
            "\x01\x00\x03\uffff\x01\x01\x4d\uffff}>";
        static readonly string[] DFA103_transitionS = {
                "\x01\x01\x01\x02\x06\uffff\x0d\x1a\x01\uffff\x02\x1a\x01"+
                "\uffff\x01\x1a\x0d\uffff\x02\x1a\x07\uffff\x01\x06\x0d\uffff"+
                "\x01\x05\x01\x14\x01\x12\x01\x07\x01\x08\x01\x09\x01\x0a"+
                "\x01\x0b\x01\x0d\x01\x0c\x01\x0f\x01\x11\x01\x10\x01\x13"+
                "\x01\uffff\x02\x1a\x01\x15\x01\x16\x01\x18\x01\x19\x01\x17"+
                "\x01\x03\x07\uffff\x01\x1a\x0b\uffff\x14\x1a\x01\x0e\x01"+
                "\uffff\x04\x1a\x27\uffff\x01\x1a\x0c\uffff\x01\x1a\x05\uffff"+
                "\x06\x1a\x01\uffff\x01\x1a\x02\uffff\x01\x1a\x01\x04\x0e"+
                "\x1a\x01\uffff\x04\x1a\x02\uffff\x08\x1a\x01\uffff\x01\x1a"+
                "\x06\uffff\x02\x1a\x09\uffff\x04\x1a",
                "",
                "",
                "",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA103_eot = DFA.UnpackEncodedString(DFA103_eotS);
        static readonly short[] DFA103_eof = DFA.UnpackEncodedString(DFA103_eofS);
        static readonly char[] DFA103_min = DFA.UnpackEncodedStringToUnsignedChars(DFA103_minS);
        static readonly char[] DFA103_max = DFA.UnpackEncodedStringToUnsignedChars(DFA103_maxS);
        static readonly short[] DFA103_accept = DFA.UnpackEncodedString(DFA103_acceptS);
        static readonly short[] DFA103_special = DFA.UnpackEncodedString(DFA103_specialS);
        static readonly short[][] DFA103_transition = DFA.UnpackEncodedStringArray(DFA103_transitionS);

        protected class DFA103 : DFA
        {
            public DFA103(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 103;
                this.eot = DFA103_eot;
                this.eof = DFA103_eof;
                this.min = DFA103_min;
                this.max = DFA103_max;
                this.accept = DFA103_accept;
                this.special = DFA103_special;
                this.transition = DFA103_transition;

            }

            override public string Description
            {
                get { return "2358:1: non_assignment_expression[TypeRepTemplate typeCtxt] returns [TypeRepTemplate dotNetType, string rmId, TypeRepTemplate typeofType, string thedottedtext] : ( ( ( anonymous_function_signature[null] )? '=>' )=> lambda_expression[$typeCtxt] | ( query_expression )=> query_expression | ^( COND_EXPR non_assignment_expression[ObjectType] e1= expression[ObjectType] e2= expression[ObjectType] ) | ^( '??' n1= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '||' n2= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '&&' n3= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '|' n4= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '^' n5= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '&' n6= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^(eq= '==' ne1= non_assignment_expression[ObjectType] ne2= non_assignment_expression[ObjectType] opse= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] opde= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $ne1.tree, $ne2.tree, $eq.token] ) -> {stringArgs}? $opse -> {dateArgs}? $opde -> ^( $eq $ne1 $ne2) | ^(neq= '!=' neqo1= non_assignment_expression[ObjectType] neqo2= non_assignment_expression[ObjectType] opse1= magicSupportOp[stringArgs, \"StringSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opsne= magicNegate[stringArgs, $opse1.tree, $neq.token] opde1= magicSupportOp[dateArgs, \"DateTimeSupport\", \"equals\", $neqo1.tree, $neqo2.tree, $neq.token] opdne= magicNegate[dateArgs, $opde1.tree, $neq.token] ) -> {stringArgs}? $opsne -> {dateArgs}? $opdne -> ^( $neq $neqo1 $neqo2) | ^(gt= '>' gt1= non_assignment_expression[ObjectType] gt2= non_assignment_expression[ObjectType] opgt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $gt2.tree, $gt1.tree, $gt.token] ) -> {dateArgs}? $opgt -> ^( $gt $gt1 $gt2) | ^(lt= '<' lt1= non_assignment_expression[ObjectType] lt2= non_assignment_expression[ObjectType] oplt= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthan\", $lt1.tree, $lt2.tree, $lt.token] ) -> {dateArgs}? $oplt -> ^( $lt $lt1 $lt2) | ^(ge= '>=' ge1= non_assignment_expression[ObjectType] ge2= non_assignment_expression[ObjectType] opge= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $ge2.tree, $ge1.tree, $ge.token] ) -> {dateArgs}? $opge -> ^( $ge $ge1 $ge2) | ^(le= '<=' le1= non_assignment_expression[ObjectType] le2= non_assignment_expression[ObjectType] ople= magicSupportOp[dateArgs, \"DateTimeSupport\", \"lessthanorequal\", $le1.tree, $le2.tree, $le.token] ) -> {dateArgs}? $ople -> ^( $le $le1 $le2) | ^( INSTANCEOF non_assignment_expression[ObjectType] non_nullable_type ) | ^( '<<' n7= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( RIGHT_SHIFT n8= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^(pl= '+' n9= non_assignment_expression[ObjectType] n92= non_assignment_expression[ObjectType] ) | ^(ne= '-' n10= non_assignment_expression[ObjectType] n102= non_assignment_expression[ObjectType] ) | ^( '*' n11= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '/' n12= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | ^( '%' n13= non_assignment_expression[ObjectType] non_assignment_expression[ObjectType] ) | unary_expression[$typeCtxt] );"; }
            }

        }


        protected internal int DFA103_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA103_0 = input.LA(1);

                       	 
                       	int index103_0 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA103_0 == PARAMS) && (synpred11_NetMaker()) ) { s = 1; }

                       	else if ( (LA103_0 == PARAMS_TYPELESS) && (synpred11_NetMaker()) ) { s = 2; }

                       	else if ( (LA103_0 == LAMBDA) && (synpred11_NetMaker()) ) { s = 3; }

                       	else if ( (LA103_0 == 225) ) { s = 4; }

                       	else if ( (LA103_0 == COND_EXPR) ) { s = 5; }

                       	else if ( (LA103_0 == NULL_COALESCE) ) { s = 6; }

                       	else if ( (LA103_0 == LOG_OR) ) { s = 7; }

                       	else if ( (LA103_0 == LOG_AND) ) { s = 8; }

                       	else if ( (LA103_0 == BIT_OR) ) { s = 9; }

                       	else if ( (LA103_0 == BIT_XOR) ) { s = 10; }

                       	else if ( (LA103_0 == BIT_AND) ) { s = 11; }

                       	else if ( (LA103_0 == EQUAL) ) { s = 12; }

                       	else if ( (LA103_0 == NOT_EQUAL) ) { s = 13; }

                       	else if ( (LA103_0 == GT) ) { s = 14; }

                       	else if ( (LA103_0 == LTHAN) ) { s = 15; }

                       	else if ( (LA103_0 == GTE) ) { s = 16; }

                       	else if ( (LA103_0 == LTE) ) { s = 17; }

                       	else if ( (LA103_0 == INSTANCEOF) ) { s = 18; }

                       	else if ( (LA103_0 == LEFT_SHIFT) ) { s = 19; }

                       	else if ( (LA103_0 == RIGHT_SHIFT) ) { s = 20; }

                       	else if ( (LA103_0 == PLUS) ) { s = 21; }

                       	else if ( (LA103_0 == MINUS) ) { s = 22; }

                       	else if ( (LA103_0 == STAR) ) { s = 23; }

                       	else if ( (LA103_0 == DIV) ) { s = 24; }

                       	else if ( (LA103_0 == MOD) ) { s = 25; }

                       	else if ( ((LA103_0 >= MONOPLUS && LA103_0 <= APPLY) || (LA103_0 >= NEW && LA103_0 <= NEW_ARRAY) || LA103_0 == NEW_ANON_OBJECT || (LA103_0 >= OBJECT && LA103_0 <= THIS) || (LA103_0 >= SUPER && LA103_0 <= LONGNUMBER) || LA103_0 == CAST_EXPR || (LA103_0 >= BOOL && LA103_0 <= PTR) || (LA103_0 >= ELIF && LA103_0 <= UNDEF) || LA103_0 == 195 || LA103_0 == 208 || (LA103_0 >= 214 && LA103_0 <= 219) || LA103_0 == 221 || LA103_0 == 224 || (LA103_0 >= 226 && LA103_0 <= 239) || (LA103_0 >= 241 && LA103_0 <= 244) || (LA103_0 >= 247 && LA103_0 <= 254) || LA103_0 == 256 || (LA103_0 >= 263 && LA103_0 <= 264) || (LA103_0 >= 274 && LA103_0 <= 277)) ) { s = 26; }

                       	 
                       	input.Seek(index103_0);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA103_4 = input.LA(1);

                       	 
                       	int index103_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred12_NetMaker()) ) { s = 81; }

                       	else if ( (true) ) { s = 26; }

                       	 
                       	input.Seek(index103_4);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae103 =
                new NoViableAltException(dfa.Description, 103, _s, input);
            dfa.Error(nvae103);
            throw nvae103;
        }
        const string DFA195_eotS =
            "\x10\uffff";
        const string DFA195_eofS =
            "\x10\uffff";
        const string DFA195_minS =
            "\x01\x5d\x07\uffff\x01\x49\x07\uffff";
        const string DFA195_maxS =
            "\x01\u0096\x07\uffff\x01\u0096\x07\uffff";
        const string DFA195_acceptS =
            "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
            "\x07\x01\uffff\x01\x09\x01\x0a\x01\x0c\x01\x0d\x01\x0e\x01\x08"+
            "\x01\x0b";
        const string DFA195_specialS =
            "\x10\uffff}>";
        static readonly string[] DFA195_transitionS = {
                "\x01\x05\x01\x06\x01\x04\x01\x0a\x01\x09\x01\x0b\x01\x0d"+
                "\x01\x0c\x01\x07\x05\uffff\x01\x02\x01\x03\x01\x01\x28\uffff"+
                "\x01\x08",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\x0f\x4c\uffff\x01\x0e",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA195_eot = DFA.UnpackEncodedString(DFA195_eotS);
        static readonly short[] DFA195_eof = DFA.UnpackEncodedString(DFA195_eofS);
        static readonly char[] DFA195_min = DFA.UnpackEncodedStringToUnsignedChars(DFA195_minS);
        static readonly char[] DFA195_max = DFA.UnpackEncodedStringToUnsignedChars(DFA195_maxS);
        static readonly short[] DFA195_accept = DFA.UnpackEncodedString(DFA195_acceptS);
        static readonly short[] DFA195_special = DFA.UnpackEncodedString(DFA195_specialS);
        static readonly short[][] DFA195_transition = DFA.UnpackEncodedStringArray(DFA195_transitionS);

        protected class DFA195 : DFA
        {
            public DFA195(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 195;
                this.eot = DFA195_eot;
                this.eof = DFA195_eof;
                this.min = DFA195_min;
                this.max = DFA195_max;
                this.accept = DFA195_accept;
                this.special = DFA195_special;
                this.transition = DFA195_transition;

            }

            override public string Description
            {
                get { return "3069:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );"; }
            }

        }

        const string DFA209_eotS =
            "\x11\uffff";
        const string DFA209_eofS =
            "\x11\uffff";
        const string DFA209_minS =
            "\x01\x1a\x08\uffff\x01\x02\x07\uffff";
        const string DFA209_maxS =
            "\x01\u0115\x08\uffff\x01\u009c\x07\uffff";
        const string DFA209_acceptS =
            "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x02\x06\x01"+
            "\x07\x01\uffff\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e"+
            "\x01\x08";
        const string DFA209_specialS =
            "\x01\x00\x10\uffff}>";
        static readonly string[] DFA209_transitionS = {
                "\x02\x0f\x01\uffff\x02\x0c\x01\x0a\x02\uffff\x0d\x0f\x01"+
                "\uffff\x02\x0f\x01\uffff\x01\x0f\x06\uffff\x01\x06\x01\x08"+
                "\x02\uffff\x01\x07\x01\uffff\x01\x05\x02\x0f\x01\x04\x03"+
                "\uffff\x01\x01\x02\uffff\x01\x0f\x01\x02\x0c\uffff\x0e\x0f"+
                "\x01\uffff\x08\x0f\x07\uffff\x01\x0f\x01\uffff\x01\x0b\x09"+
                "\uffff\x15\x0f\x01\uffff\x04\x0f\x01\x01\x26\uffff\x01\x0f"+
                "\x02\uffff\x01\x0d\x09\uffff\x01\x0f\x05\uffff\x01\x0f\x01"+
                "\x09\x04\x0f\x01\uffff\x01\x0f\x02\uffff\x10\x0f\x01\uffff"+
                "\x04\x0f\x02\uffff\x08\x0f\x01\uffff\x01\x0f\x05\uffff\x01"+
                "\x0e\x02\x0f\x01\uffff\x01\x03\x01\uffff\x03\x04\x02\x05"+
                "\x01\uffff\x04\x0f",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\x0f\x44\uffff\x01\x10\x54\uffff\x01\x10",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA209_eot = DFA.UnpackEncodedString(DFA209_eotS);
        static readonly short[] DFA209_eof = DFA.UnpackEncodedString(DFA209_eofS);
        static readonly char[] DFA209_min = DFA.UnpackEncodedStringToUnsignedChars(DFA209_minS);
        static readonly char[] DFA209_max = DFA.UnpackEncodedStringToUnsignedChars(DFA209_maxS);
        static readonly short[] DFA209_accept = DFA.UnpackEncodedString(DFA209_acceptS);
        static readonly short[] DFA209_special = DFA.UnpackEncodedString(DFA209_specialS);
        static readonly short[][] DFA209_transition = DFA.UnpackEncodedStringArray(DFA209_transitionS);

        protected class DFA209 : DFA
        {
            public DFA209(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 209;
                this.eot = DFA209_eot;
                this.eof = DFA209_eof;
                this.min = DFA209_min;
                this.max = DFA209_max;
                this.accept = DFA209_accept;
                this.special = DFA209_special;
                this.transition = DFA209_transition;

            }

            override public string Description
            {
                get { return "3137:1: embedded_statement[bool isStatementListCtxt] : ( block | ^(ift= IF boolean_expression SEP embedded_statement[/* isStatementListCtxt */ false] ( else_statement )? ) magicType[emitPrePost, $ift.token, \"boolean\", null] magicAssignment[emitPrePost, $ift.token, $magicType.tree, idName, $boolean_expression.tree] -> {!emitPrePost }? ^( $ift boolean_expression SEP embedded_statement ( else_statement )? ) -> {isStatementListCtxt}? magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? ) -> OPEN_BRACE[$ift.token, \"{\"] magicAssignment ^( $ift IDENTIFIER[$ift.token, idName] SEP embedded_statement ( else_statement )? ) CLOSE_BRACE[$ift.token, \"}\"] | switch_statement[isStatementListCtxt] | iteration_statement | jump_statement | ( ^( ( 'return' | 'throw' ) ( expression[ObjectType] )? ) )=> ( ^(jt= 'return' (je= expression[ObjectType] )? ) | ^(jt= 'throw' (je= expression[ObjectType] )? ) ) magicAssignment[emitPrePost, $jt.token, jumpStatementHasExpression ? ($je.dotNetType != null ? (CommonTree)$je.dotNetType.Tree : null) : null, idName, $je.tree] -> {!emitPrePost }? ^( $jt ( $je)? ) -> {isStatementListCtxt}? magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] ) -> OPEN_BRACE[$jt.token, \"{\"] magicAssignment ^( $jt IDENTIFIER[$jt.token, idName] ) CLOSE_BRACE[$jt.token, \"}\"] | ^( 'try' block ( catch_clauses )? ( finally_clause )? ) | checked_statement | unchecked_statement | synchronized_statement | yield_statement | ^( 'unsafe' block ) | fixed_statement | expression_statement -> {!emitPrePost }? expression_statement -> {isStatementListCtxt}? expression_statement -> OPEN_BRACE[$expression_statement.tree.Token, \"{\"] expression_statement CLOSE_BRACE[$expression_statement.tree.Token, \"}\"] );"; }
            }

        }


        protected internal int DFA209_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA209_0 = input.LA(1);

                       	 
                       	int index209_0 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA209_0 == OPEN_BRACE || LA209_0 == SEMI) ) { s = 1; }

                       	else if ( (LA209_0 == IF) ) { s = 2; }

                       	else if ( (LA209_0 == 266) ) { s = 3; }

                       	else if ( (LA209_0 == FOREACH || (LA209_0 >= 268 && LA209_0 <= 270)) ) { s = 4; }

                       	else if ( (LA209_0 == BREAK || (LA209_0 >= 271 && LA209_0 <= 272)) ) { s = 5; }

                       	else if ( (LA209_0 == RETURN) && (synpred18_NetMaker()) ) { s = 6; }

                       	else if ( (LA209_0 == THROW) && (synpred18_NetMaker()) ) { s = 7; }

                       	else if ( (LA209_0 == TRY) ) { s = 8; }

                       	else if ( (LA209_0 == 215) ) { s = 9; }

                       	else if ( (LA209_0 == UNCHECKED) ) { s = 10; }

                       	else if ( (LA209_0 == SYNCHRONIZED) ) { s = 11; }

                       	else if ( ((LA209_0 >= YIELD_RETURN && LA209_0 <= YIELD_BREAK)) ) { s = 12; }

                       	else if ( (LA209_0 == 198) ) { s = 13; }

                       	else if ( (LA209_0 == 262) ) { s = 14; }

                       	else if ( ((LA209_0 >= PARAMS && LA209_0 <= PARAMS_TYPELESS) || (LA209_0 >= MONOPLUS && LA209_0 <= APPLY) || (LA209_0 >= NEW && LA209_0 <= NEW_ARRAY) || LA209_0 == NEW_ANON_OBJECT || (LA209_0 >= OBJECT && LA209_0 <= THIS) || LA209_0 == NULL_COALESCE || (LA209_0 >= COND_EXPR && LA209_0 <= LEFT_SHIFT) || (LA209_0 >= SUPER && LA209_0 <= LAMBDA) || LA209_0 == CAST_EXPR || (LA209_0 >= BOOL && LA209_0 <= GT) || (LA209_0 >= ELIF && LA209_0 <= UNDEF) || LA209_0 == 195 || LA209_0 == 208 || LA209_0 == 214 || (LA209_0 >= 216 && LA209_0 <= 219) || LA209_0 == 221 || (LA209_0 >= 224 && LA209_0 <= 239) || (LA209_0 >= 241 && LA209_0 <= 244) || (LA209_0 >= 247 && LA209_0 <= 254) || LA209_0 == 256 || (LA209_0 >= 263 && LA209_0 <= 264) || (LA209_0 >= 274 && LA209_0 <= 277)) ) { s = 15; }

                       	 
                       	input.Seek(index209_0);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae209 =
                new NoViableAltException(dfa.Description, 209, _s, input);
            dfa.Error(nvae209);
            throw nvae209;
        }
     

        public static readonly BitSet FOLLOW_PACKAGE_in_compilation_unit146 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_PAYLOAD_in_compilation_unit150 = new BitSet(new ulong[]{0x0000000000100220UL});
        public static readonly BitSet FOLLOW_type_declaration_in_compilation_unit156 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_class_declaration_in_type_declaration187 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_declaration_in_type_declaration192 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_enum_declaration_in_type_declaration197 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_qualified_identifier209 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_qualified_identifier212 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_qualified_identifier214 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_modifier_in_modifiers234 = new BitSet(new ulong[]{0x02E0000000000402UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_set_in_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_CONST_in_class_member_declaration321 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_class_member_declaration323 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration326 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_class_member_declaration329 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarators_in_class_member_declaration331 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_EVENT_in_class_member_declaration342 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_class_member_declaration344 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration347 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_event_declaration_in_class_member_declaration350 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_METHOD_in_class_member_declaration360 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_class_member_declaration362 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration365 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_class_member_declaration368 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_class_member_declaration370 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_class_member_declaration372 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_class_member_declaration375 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_class_member_declaration378 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_method_body_in_class_member_declaration382 = new BitSet(new ulong[]{0x0000000000000008UL,0x0080000000000000UL});
        public static readonly BitSet FOLLOW_exception_in_class_member_declaration384 = new BitSet(new ulong[]{0x0000000000000008UL,0x0080000000000000UL});
        public static readonly BitSet FOLLOW_interface_declaration_in_class_member_declaration490 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_class_declaration_in_class_member_declaration498 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_FIELD_in_class_member_declaration507 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_class_member_declaration509 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration512 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_class_member_declaration515 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_field_declaration_in_class_member_declaration517 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_OPERATOR_in_class_member_declaration528 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_class_member_declaration530 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration533 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_class_member_declaration536 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
        public static readonly BitSet FOLLOW_operator_declaration_in_class_member_declaration538 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_enum_declaration_in_class_member_declaration547 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_CONVERSION_OPERATOR_in_class_member_declaration556 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_class_member_declaration558 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL,0x0000000000000030UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration561 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL,0x0000000000000030UL});
        public static readonly BitSet FOLLOW_conversion_operator_declaration_in_class_member_declaration564 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_constructor_declaration_in_class_member_declaration578 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_EXCEPTION_in_exception594 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_CONSTRUCTOR_in_constructor_declaration613 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_constructor_declaration615 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_modifiers_in_constructor_declaration619 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_constructor_declaration625 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_constructor_declaration628 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_block_in_constructor_declaration632 = new BitSet(new ulong[]{0x0000000000000000UL,0x0080000000000000UL});
        public static readonly BitSet FOLLOW_exception_in_constructor_declaration634 = new BitSet(new ulong[]{0x0000000000000000UL,0x0080000000000000UL});
        public static readonly BitSet FOLLOW_magicSmotherExceptionsThrow_in_constructor_declaration639 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_INDEX_in_primary_expression741 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression745 = new BitSet(new ulong[]{0x000B7FFC0C000008UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_primary_expression748 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_APPLY_in_primary_expression813 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_DOT_in_primary_expression819 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression823 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression830 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression832 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression839 = new BitSet(new ulong[]{0x0000800000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression841 = new BitSet(new ulong[]{0x0000800000000008UL});
        public static readonly BitSet FOLLOW_argument_list_in_primary_expression846 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_APPLY_in_primary_expression867 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression871 = new BitSet(new ulong[]{0x0000800000000008UL});
        public static readonly BitSet FOLLOW_argument_list_in_primary_expression876 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_POSTINC_in_primary_expression921 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_DOT_in_primary_expression927 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression931 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression936 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression945 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_POSTDEC_in_primary_expression958 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_DOT_in_primary_expression964 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression968 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression973 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression982 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_POSTINC_in_primary_expression1002 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression1004 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_POSTDEC_in_primary_expression1020 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression1022 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_PTR_in_primary_expression1038 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression1040 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression1043 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression1045 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_predefined_type_in_primary_expression1052 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_primary_expression1115 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SUPER_in_primary_expression1187 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DOT_in_primary_expression1267 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_primary_expression1271 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression1278 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression1282 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression1298 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression1302 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicIdentifier_in_primary_expression1317 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicInputPeId_in_primary_expression1329 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMethodGroup_in_primary_expression1341 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_primary_expression_start_in_primary_expression1369 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_literal_in_primary_expression1404 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NEW_in_primary_expression1462 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_in_primary_expression1464 = new BitSet(new ulong[]{0x0000800000000008UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_argument_list_in_primary_expression1466 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_object_or_collection_initializer_in_primary_expression1469 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_NEW_ANON_OBJECT_in_primary_expression1490 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_anonymous_object_creation_expression_in_primary_expression1492 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_sizeof_expression_in_primary_expression1505 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_checked_expression_in_primary_expression1516 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unchecked_expression_in_primary_expression1535 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_default_value_expression_in_primary_expression1552 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_218_in_primary_expression1568 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_primary_expression1580 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_block_in_primary_expression1595 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_typeof_expression_in_primary_expression1618 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_208_in_primary_expression_start1648 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression_start1650 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression_start1652 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_access_operator_in_access_identifier1668 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_access_identifier1672 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_access_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_brackets_in_brackets_or_arguments1695 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_arguments_in_brackets_or_arguments1699 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_brackets1707 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000446UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_brackets1711 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_brackets1716 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_paren_expression1727 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_paren_expression1731 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_paren_expression1736 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_arguments1745 = new BitSet(new ulong[]{0x0000800000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_argument_list_in_arguments1749 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_arguments1754 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ARGS_in_argument_list1773 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_argument_in_argument_list1776 = new BitSet(new ulong[]{0x000B7FFC0C000008UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FF10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_name_in_argument1793 = new BitSet(new ulong[]{0x000B7FFC0C000008UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FF10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_value_in_argument1797 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_argument_value_in_argument1804 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_argument_name1818 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_argument_name1822 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_argument_value1838 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ref_variable_reference_in_argument_value1847 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_212_in_argument_value1857 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_reference_in_argument_value1861 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicCreateOutVar_in_argument_value1872 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicUpdateFromRefVar_in_argument_value1882 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_213_in_ref_variable_reference1927 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000606UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_LPAREN_in_ref_variable_reference1949 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_ref_variable_reference1953 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_ref_variable_reference1957 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FE10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_ref_variable_reference_in_ref_variable_reference1962 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_reference_in_ref_variable_reference1966 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_reference_in_ref_variable_reference2006 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicCreateRefVar_in_ref_variable_reference2037 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicUpdateFromRefVar_in_ref_variable_reference2053 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_variable_reference2100 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_rank_specifier_in_rank_specifiers2129 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_rank_specifier2157 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_rank_specifier2165 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_name_in_delegate_creation_expression2182 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_delegate_creation_expression2186 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F100400UL,0x079EFFFF20010008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_name_in_delegate_creation_expression2190 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_delegate_creation_expression2194 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2205 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2214 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000102UL,0x000000000F3FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer2219 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_anonymous_object_initializer2223 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2230 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list2238 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_member_declarator_list2242 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000002UL,0x000000000F3FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list2244 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_qid_in_member_declarator2256 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_member_declarator2261 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_member_declarator2265 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2287 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_primary_expression_in_primary_or_array_creation_expression2294 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NEW_ARRAY_in_array_creation_expression2312 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_in_array_creation_expression2320 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A0UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_array_creation_expression2325 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_array_creation_expression2329 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_array_creation_expression2333 = new BitSet(new ulong[]{0x0000000000000008UL,0x00000000000000A0UL});
        public static readonly BitSet FOLLOW_rank_specifiers_in_array_creation_expression2335 = new BitSet(new ulong[]{0x0000000000000008UL,0x00000000000000A0UL});
        public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression2341 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression2351 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_rank_specifier_in_array_creation_expression2367 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A0UL});
        public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression2370 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_array_initializer2390 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x0040FFBFFF0005A6UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_initializer_list_in_array_initializer2394 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_array_initializer2399 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_array_initializer2404 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list2412 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_variable_initializer_list2416 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF0004A6UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list2418 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_expression_in_variable_initializer2430 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_initializer_in_variable_initializer2435 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_214_in_sizeof_expression2444 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unmanaged_type_in_sizeof_expression2447 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_215_in_checked_expression2458 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_checked_expression2460 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_216_in_unchecked_expression2473 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_unchecked_expression2475 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_217_in_default_value_expression2488 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_in_default_value_expression2490 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_type_in_object_creation_expression2507 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL});
        public static readonly BitSet FOLLOW_LPAREN_in_object_creation_expression2516 = new BitSet(new ulong[]{0x0000800000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_argument_list_in_object_creation_expression2520 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_object_creation_expression2525 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2529 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2540 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_object_or_collection_initializer2552 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x0040FFBFFF000586UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_object_initializer_in_object_or_collection_initializer2556 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer2563 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_element_initializer_list_in_collection_initializer2573 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_collection_initializer2577 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_collection_initializer2582 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list2591 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_element_initializer_list2595 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x0040FFBFFF000586UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list2597 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_element_initializer2608 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_element_initializer2615 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_element_initializer2619 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_element_initializer2623 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_initializer_list_in_object_initializer2638 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_object_initializer2643 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_object_initializer2648 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list2657 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_member_initializer_list2661 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list2663 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_member_initializer2674 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_member_initializer2678 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000486UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_initializer_value_in_member_initializer2682 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_initializer_value2691 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_object_or_collection_initializer_in_initializer_value2698 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_219_in_typeof_expression2715 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unbound_type_name_in_typeof_expression2719 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_type_in_typeof_expression2723 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_206_in_typeof_expression2729 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_unbound_type_name_start_in_unbound_type_name2750 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2769 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name2773 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name2780 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2790 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start2800 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
        public static readonly BitSet FOLLOW_208_in_unbound_type_name_start2803 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start2805 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DOT_in_unbound_type_name_part2814 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_part2818 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTHAN_in_generic_dimension_specifier2826 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_commas_in_generic_dimension_specifier2830 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_generic_dimension_specifier2835 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COMMA_in_commas2844 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_type_name2878 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_208_in_type_name2890 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_name_in_type_name2894 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_type_name2898 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_DOT_in_type_name2921 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_name_in_type_name2927 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_type_name2931 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_type_or_generic3008 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_type_or_generic3014 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_access_operator_in_qid3092 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_qid_in_qid3094 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_qid3096 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_qid_start_in_qid3104 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_predefined_type_in_qid_start3115 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_qid_start3130 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_qid_start3134 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_qid_start3141 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
        public static readonly BitSet FOLLOW_208_in_qid_start3146 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_qid_start3150 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_literal_in_qid_start3157 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_access_identifier_in_qid_part3171 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTHAN_in_generic_argument_list3184 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000010001FA4UL});
        public static readonly BitSet FOLLOW_type_arguments_in_generic_argument_list3188 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_generic_argument_list3192 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_argument_in_type_arguments3219 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_type_arguments3225 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000010001FA4UL});
        public static readonly BitSet FOLLOW_type_argument_in_type_arguments3229 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_javaish_type_argument_in_type_argument3255 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_type_argument3264 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_220_in_javaish_type_argument3292 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_221_in_javaish_type_argument3294 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_javaish_type_argument3296 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_220_in_javaish_type_argument3306 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_javaish_type_argument3316 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_TYPE_in_type3351 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_predefined_type_in_type3356 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000200000000020UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_type_name_in_type3374 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000200000000020UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_206_in_type3392 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000200000000020UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_rank_specifiers_in_type3409 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_STAR_in_type3416 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_220_in_type3420 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicBoxedType_in_type3436 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_non_nullable_type3510 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_non_array_type3524 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_array_type3538 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_unmanaged_type3552 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_class_type3566 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_pointer_type3580 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_block3605 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_block3610 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000D8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_statement_list_in_block3614 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_block3619 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_in_statement_list3626 = new BitSet(new ulong[]{0x4EEB7FFEEC000402UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_assignment_in_expression3659 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_expression3670 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_expression_list3725 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_expression_list3737 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_expression_list3743 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_DOT_in_assignment3808 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_assignment3812 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_assignment3817 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_assignment3819 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_assignment3840 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000007FF000UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_assignment3872 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_assignment3876 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_INDEX_in_assignment3923 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_assignment3927 = new BitSet(new ulong[]{0x000B7FFC0C000008UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_assignment3930 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_assignment3959 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_assignment3963 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unary_expression_in_assignment3983 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000007FF000UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_assignment3988 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_assignment3990 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_cast_expression_in_unary_expression4018 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_primary_or_array_creation_expression_in_unary_expression4053 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MONOPLUS_in_unary_expression4067 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4071 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_MONOMINUS_in_unary_expression4091 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4095 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_MONONOT_in_unary_expression4114 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4118 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_MONOTWIDDLE_in_unary_expression4139 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4143 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_PREINC_in_unary_expression4160 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4164 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_PREDEC_in_unary_expression4186 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4190 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_MONOSTAR_in_unary_expression4212 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4214 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_ADDRESSOF_in_unary_expression4237 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4239 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_PARENS_in_unary_expression4261 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_unary_expression4263 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_CAST_EXPR_in_cast_expression4319 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_in_cast_expression4321 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_cast_expression4323 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_assignment_operator4385 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_shortcut_assignment_operator_in_assignment_operator4389 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_shortcut_assignment_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_lambda_expression_in_non_assignment_expression4485 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_expression_in_non_assignment_expression4500 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COND_EXPR_in_non_assignment_expression4511 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4513 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_non_assignment_expression4518 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_non_assignment_expression4523 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_NULL_COALESCE_in_non_assignment_expression4541 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4545 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4548 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_LOG_OR_in_non_assignment_expression4570 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4574 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4577 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_LOG_AND_in_non_assignment_expression4599 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4603 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4606 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_BIT_OR_in_non_assignment_expression4628 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4632 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4635 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_BIT_XOR_in_non_assignment_expression4658 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4662 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4665 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_BIT_AND_in_non_assignment_expression4688 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4692 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4695 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_EQUAL_in_non_assignment_expression4720 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4724 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4729 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression4761 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression4778 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_NOT_EQUAL_in_non_assignment_expression4880 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4884 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression4889 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression4924 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicNegate_in_non_assignment_expression4941 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression4958 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicNegate_in_non_assignment_expression4975 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_GT_in_non_assignment_expression5077 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5081 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5086 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression5117 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_LTHAN_in_non_assignment_expression5186 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5190 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5195 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression5226 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_GTE_in_non_assignment_expression5295 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5299 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5304 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression5335 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_LTE_in_non_assignment_expression5404 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5408 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5413 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicSupportOp_in_non_assignment_expression5444 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_INSTANCEOF_in_non_assignment_expression5511 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5513 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_non_nullable_type_in_non_assignment_expression5518 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_LEFT_SHIFT_in_non_assignment_expression5544 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5548 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5551 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_RIGHT_SHIFT_in_non_assignment_expression5573 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5577 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5580 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_PLUS_in_non_assignment_expression5605 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5609 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5614 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_MINUS_in_non_assignment_expression5648 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5652 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5657 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_STAR_in_non_assignment_expression5689 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5693 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5696 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_DIV_in_non_assignment_expression5718 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5722 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5725 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_MOD_in_non_assignment_expression5747 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5751 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression5754 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_unary_expression_in_non_assignment_expression5777 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_function_signature_in_lambda_expression5822 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
        public static readonly BitSet FOLLOW_LAMBDA_in_lambda_expression5830 = new BitSet(new ulong[]{0x000B7FFE0C000000UL,0x00507FBFFF000486UL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_anonymous_function_body_in_lambda_expression5834 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PARAMS_in_anonymous_function_signature5869 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_fixed_parameter_in_anonymous_function_signature5871 = new BitSet(new ulong[]{0x02E0000000000408UL,0x0001000000000004UL,0x0000000000000000UL,0x0000000000301FA4UL});
        public static readonly BitSet FOLLOW_PARAMS_TYPELESS_in_anonymous_function_signature5882 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_identifier_in_anonymous_function_signature5885 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_expression_in_anonymous_function_body5907 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_anonymous_function_body5956 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_from_clause_in_query_expression5968 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
        public static readonly BitSet FOLLOW_query_body_in_query_expression5972 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_body_clauses_in_query_body5982 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
        public static readonly BitSet FOLLOW_select_or_group_clause_in_query_body5987 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000100000000UL});
        public static readonly BitSet FOLLOW_query_continuation_in_query_body5998 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_224_in_query_continuation6008 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_query_continuation6012 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
        public static readonly BitSet FOLLOW_query_body_in_query_continuation6016 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_body_clause_in_query_body_clauses6023 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000106600000000UL});
        public static readonly BitSet FOLLOW_from_clause_in_query_body_clause6032 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_let_clause_in_query_body_clause6037 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_where_clause_in_query_body_clause6042 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_join_clause_in_query_body_clause6047 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_orderby_clause_in_query_body_clause6052 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_225_in_from_clause6059 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_in_from_clause6063 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_from_clause6068 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
        public static readonly BitSet FOLLOW_IN_in_from_clause6072 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_from_clause6076 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_226_in_join_clause6085 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_in_join_clause6089 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_join_clause6094 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
        public static readonly BitSet FOLLOW_IN_in_join_clause6098 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_join_clause6102 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000800000000UL});
        public static readonly BitSet FOLLOW_227_in_join_clause6107 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_join_clause6111 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000001000000000UL});
        public static readonly BitSet FOLLOW_228_in_join_clause6116 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_join_clause6120 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000100000000UL});
        public static readonly BitSet FOLLOW_224_in_join_clause6124 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_join_clause6126 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_229_in_let_clause6136 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_let_clause6140 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_let_clause6144 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_let_clause6148 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_230_in_orderby_clause6156 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_ordering_list_in_orderby_clause6160 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ordering_in_ordering_list6168 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_ordering_list6173 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_ordering_in_ordering_list6177 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_expression_in_ordering6187 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000018000000000UL});
        public static readonly BitSet FOLLOW_ordering_direction_in_ordering6193 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_ordering_direction0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_select_clause_in_select_or_group_clause6216 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_group_clause_in_select_or_group_clause6221 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_233_in_select_clause6229 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_select_clause6233 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_234_in_group_clause6242 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_group_clause6246 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000080000000000UL});
        public static readonly BitSet FOLLOW_235_in_group_clause6251 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_group_clause6255 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_236_in_where_clause6264 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_where_clause6268 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_boolean_expression6276 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_global_attribute_in_global_attributes6289 = new BitSet(new ulong[]{0x0000000100000002UL});
        public static readonly BitSet FOLLOW_GLOBAL_ATTRIBUTE_in_global_attribute6300 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute6302 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F100400UL,0x079EFFFF20010008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attribute_list_in_global_attribute6306 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier6315 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_global_attribute_target_specifier6319 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_global_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attribute_sections_in_attributes6341 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attribute_section_in_attribute_sections6350 = new BitSet(new ulong[]{0x0000000200000002UL});
        public static readonly BitSet FOLLOW_ATTRIBUTE_in_attribute_section6361 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attribute_target_specifier_in_attribute_section6363 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F100400UL,0x079EFFFF20010008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attribute_list_in_attribute_section6368 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_attribute_target_in_attribute_target_specifier6378 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_attribute_target_specifier6382 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attribute_in_attribute_list6424 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_attribute_list6427 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F100400UL,0x079EFFFF20010008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attribute_in_attribute_list6429 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_type_name_in_attribute6441 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_attribute_arguments_in_attribute6445 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_attribute_arguments6456 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000002F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments6461 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_positional_argument_in_attribute_arguments6481 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_named_argument_in_attribute_arguments6500 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_COMMA_in_attribute_arguments6516 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000002F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_positional_argument_in_attribute_arguments6518 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments6529 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ARGS_in_positional_argument_list6544 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_positional_argument_in_positional_argument_list6546 = new BitSet(new ulong[]{0x000B7FFC0C000008UL,0x00407FBFFF000406UL,0x000000002F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attribute_argument_expression_in_positional_argument6557 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ARGS_in_named_argument_list6567 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_named_argument_in_named_argument_list6569 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_named_argument6580 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_named_argument6584 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000002F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attribute_argument_expression_in_named_argument6588 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_attribute_argument_expression6597 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_CLASS_in_class_declaration6630 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_196_in_class_declaration6633 = new BitSet(new ulong[]{0x02E0000200000400UL,0x0200000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_PAYLOAD_in_class_declaration6636 = new BitSet(new ulong[]{0x02E0000200000400UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attributes_in_class_declaration6639 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_declaration6642 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_class_declaration6645 = new BitSet(new ulong[]{0x0000000200000080UL,0x0010000000000080UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration6647 = new BitSet(new ulong[]{0x0000000200000080UL,0x0010000000000080UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_class_declaration6659 = new BitSet(new ulong[]{0x0000000200000080UL,0x0010000000000080UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_class_implements_in_class_declaration6687 = new BitSet(new ulong[]{0x0000000200000080UL,0x0010000000000080UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_class_body_in_class_declaration6711 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicAnnotation_in_class_declaration6713 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_attributes_in_type_parameter_list6782 = new BitSet(new ulong[]{0x0000000200000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_in_type_parameter_list6785 = new BitSet(new ulong[]{0x0000000200000002UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_type_parameter6805 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_class_extend_in_class_extends6815 = new BitSet(new ulong[]{0x0000000000000042UL});
        public static readonly BitSet FOLLOW_EXTENDS_in_class_extend6825 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_in_class_extend6827 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_class_implement_or_extend_in_class_implements6847 = new BitSet(new ulong[]{0x0000000000000082UL});
        public static readonly BitSet FOLLOW_IMPLEMENTS_in_class_implement_or_extend6895 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_in_class_implement_or_extend6899 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicExtends_in_class_implement_or_extend6902 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_class_body6977 = new BitSet(new ulong[]{0x0000000000DCE220UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_class_member_declarations_in_class_body6979 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_class_body6982 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_class_member_declaration_in_class_member_declarations7001 = new BitSet(new ulong[]{0x0000000000DCE222UL});
        public static readonly BitSet FOLLOW_205_in_constant_declaration7012 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_constant_declaration7016 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarators_in_constant_declaration7020 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_constant_declaration7025 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators7034 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_constant_declarators7038 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators7040 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_constant_declarator7052 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_constant_declarator7058 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_constant_expression_in_constant_declarator7062 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_constant_expression7078 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_declarators_in_field_declaration7091 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7101 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_variable_declarators7105 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7109 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_variable_declarator7126 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_variable_declarator7139 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF0004A6UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_initializer_in_variable_declarator7143 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicConstructStruct_in_variable_declarator7159 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicConstructDefaultEnum_in_variable_declarator7170 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_method_header_in_method_declaration7258 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_method_body_in_method_declaration7262 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_METHOD_HEADER_in_method_header7274 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_method_header7276 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_method_header7279 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_method_header7282 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_member_name_in_method_header7284 = new BitSet(new ulong[]{0x0000000204000008UL,0x0010000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header7286 = new BitSet(new ulong[]{0x0000000204000008UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_method_header7289 = new BitSet(new ulong[]{0x0000000004000008UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_method_header7292 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_block_in_method_body7302 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_member_name7328 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_member_name7333 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_member_name7337 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_type_in_event_declaration7374 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_member_name_in_event_declaration7376 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_event_declaration7380 = new BitSet(new ulong[]{0x0000000200000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_event_accessor_declarations_in_event_declaration7384 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_event_declaration7388 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_modifier_in_event_modifiers7398 = new BitSet(new ulong[]{0x02E0000000000402UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations7407 = new BitSet(new ulong[]{0x0000000200000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations7414 = new BitSet(new ulong[]{0x0000000200000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations7418 = new BitSet(new ulong[]{0x0000000200000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7423 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7444 = new BitSet(new ulong[]{0x0000000200000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations7448 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
        public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations7453 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_249_in_add_accessor_declaration7463 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_block_in_add_accessor_declaration7467 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_250_in_remove_accessor_declaration7475 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_block_in_remove_accessor_declaration7479 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ENUM_in_enum_declaration7492 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_enum_declaration7494 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_modifiers_in_enum_declaration7497 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_enum_declaration7502 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0009000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_enum_base_in_enum_declaration7506 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0009000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_enum_body_in_enum_declaration7511 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_type_in_enum_base7520 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ENUM_BODY_in_enum_body7529 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_enum_member_declarations_in_enum_body7531 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations7541 = new BitSet(new ulong[]{0x0000000200000002UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attributes_in_enum_member_declaration7550 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_enum_member_declaration7555 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_integral_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variant_type_variable_name_in_variant_generic_parameter_list7625 = new BitSet(new ulong[]{0x0000000200001002UL,0x0000000000000010UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attributes_in_variant_type_variable_name7641 = new BitSet(new ulong[]{0x0000000200001000UL,0x0000000000000010UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_variance_annotation_in_variant_type_variable_name7646 = new BitSet(new ulong[]{0x0000000200001000UL,0x0000000000000010UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_variable_name_in_variant_type_variable_name7651 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_variance_annotation0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses7673 = new BitSet(new ulong[]{0x0000000000000002UL,0x0010000000000000UL});
        public static readonly BitSet FOLLOW_TYPE_PARAM_CONSTRAINT_in_type_parameter_constraints_clause7692 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause7694 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_TYPE_PARAM_CONSTRAINT_in_type_parameter_constraints_clause7707 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause7709 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F100400UL,0x079EFFFF20010008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_name_in_type_parameter_constraints_clause7711 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000000000000UL,0x000000000F100400UL,0x079EFFFF20010008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_type_variable_name7726 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_197_in_constructor_constraint7735 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_constructor_constraint7739 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_constructor_constraint7743 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_return_type7751 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PARAMS_in_formal_parameter_list7773 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_formal_parameter_in_formal_parameter_list7776 = new BitSet(new ulong[]{0x02E0000200000408UL,0x0001000000000004UL,0x0000000000000000UL,0x0000000000301FA4UL,0x0000000000000003UL});
        public static readonly BitSet FOLLOW_attributes_in_formal_parameter7842 = new BitSet(new ulong[]{0x02E0000200000408UL,0x0001000000000004UL,0x0000000000000000UL,0x0000000000301FA4UL,0x0000000000000002UL});
        public static readonly BitSet FOLLOW_fixed_parameter_in_formal_parameter7848 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_parameter_array_in_formal_parameter7874 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_256_in_formal_parameter7885 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_parameter_modifier_in_fixed_parameter7924 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_fixed_parameter7964 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_fixed_parameter7983 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_default_argument_in_fixed_parameter7996 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicRef_in_fixed_parameter8006 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_default_argument8059 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_default_argument8061 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_213_in_parameter_modifier8078 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_212_in_parameter_modifier8084 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_parameter_modifier8090 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_257_in_parameter_array8118 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_in_parameter_array8122 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_parameter_array8127 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_INTERFACE_in_interface_declaration8144 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_196_in_interface_declaration8146 = new BitSet(new ulong[]{0x02E0000200000400UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attributes_in_interface_declaration8149 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20001FACUL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_modifiers_in_interface_declaration8152 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_interface_declaration8155 = new BitSet(new ulong[]{0x0000000200001040UL,0x0010000000000090UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration8157 = new BitSet(new ulong[]{0x0000000200001040UL,0x0010000000000090UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_variant_generic_parameter_list_in_interface_declaration8162 = new BitSet(new ulong[]{0x0000000200001040UL,0x0010000000000090UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_class_extends_in_interface_declaration8171 = new BitSet(new ulong[]{0x0000000200001040UL,0x0010000000000090UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_interface_body_in_interface_declaration8177 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_modifier_in_interface_modifiers8188 = new BitSet(new ulong[]{0x02E0000000000402UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_interface_body8197 = new BitSet(new ulong[]{0x000000000000C000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_interface_member_declarations_in_interface_body8201 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_interface_body8206 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations8214 = new BitSet(new ulong[]{0x000000000000C002UL});
        public static readonly BitSet FOLLOW_EVENT_in_interface_member_declaration8239 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_interface_member_declaration8241 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_interface_member_declaration8244 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_interface_member_declaration8249 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_interface_member_declaration8253 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicEventCollectionType_in_interface_member_declaration8255 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_METHOD_in_interface_member_declaration8303 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_attributes_in_interface_member_declaration8305 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_modifiers_in_interface_member_declaration8308 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_interface_member_declaration8311 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_interface_member_declaration8313 = new BitSet(new ulong[]{0x0000000204000008UL,0x0090000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration8315 = new BitSet(new ulong[]{0x0000000204000008UL,0x0080000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_interface_member_declaration8318 = new BitSet(new ulong[]{0x0000000004000008UL,0x0080000000000000UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_interface_member_declaration8321 = new BitSet(new ulong[]{0x0000000000000008UL,0x0080000000000000UL});
        public static readonly BitSet FOLLOW_exception_in_interface_member_declaration8325 = new BitSet(new ulong[]{0x0000000000000008UL,0x0080000000000000UL});
        public static readonly BitSet FOLLOW_operator_declarator_in_operator_declaration8347 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_operator_body_in_operator_declaration8351 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_259_in_operator_declarator8359 = new BitSet(new ulong[]{0x0000003000000000UL,0x00003E3FE0000000UL,0x0000000000460000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_set_in_operator_declarator8364 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator8374 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_operator_declarator8378 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_operator_declarator8382 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_binary_operator_declarator_in_operator_declarator8387 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unary_operator_declarator_in_operator_declarator8391 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_overloadable_unary_operator_in_operator_declarator8398 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator8402 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_operator_declarator8406 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_operator_declarator8408 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_unary_operator_declarator_in_operator_declarator8412 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_overloadable_binary_operator_in_operator_declarator8418 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator8422 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_operator_declarator8426 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_operator_declarator8428 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_binary_operator_declarator_in_operator_declarator8432 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_RPAREN_in_unary_operator_declarator8444 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_overloadable_unary_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COMMA_in_binary_operator_declarator8487 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_binary_operator_declarator8491 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_binary_operator_declarator8495 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_binary_operator_declarator8499 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_STAR_in_overloadable_binary_operator8510 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DIV_in_overloadable_binary_operator8514 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MOD_in_overloadable_binary_operator8518 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_AND_in_overloadable_binary_operator8522 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_OR_in_overloadable_binary_operator8526 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_XOR_in_overloadable_binary_operator8530 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LEFT_SHIFT_in_overloadable_binary_operator8534 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator8538 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator8540 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_EQUAL_in_overloadable_binary_operator8544 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NOT_EQUAL_in_overloadable_binary_operator8548 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator8552 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTHAN_in_overloadable_binary_operator8556 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_GTE_in_overloadable_binary_operator8560 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTE_in_overloadable_binary_operator8564 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration8588 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_operator_body_in_conversion_operator_declaration8609 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicCastOperator_in_conversion_operator_declaration8613 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_260_in_conversion_operator_declarator8632 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
        public static readonly BitSet FOLLOW_261_in_conversion_operator_declarator8636 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
        public static readonly BitSet FOLLOW_259_in_conversion_operator_declarator8642 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator8648 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_conversion_operator_declarator8652 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator8658 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_conversion_operator_declarator8664 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_conversion_operator_declarator8668 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_operator_body8709 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_invocation_start_in_invocation_expression8719 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_arguments_in_invocation_expression8741 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_invocation_part_in_invocation_expression8745 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_invocation_part_in_invocation_expression8756 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_arguments_in_invocation_expression8762 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_predefined_type_in_invocation_start8774 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_invocation_start8792 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_invocation_start8796 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_invocation_start8801 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SUPER_in_invocation_start8807 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_invocation_start8812 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
        public static readonly BitSet FOLLOW_208_in_invocation_start8817 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_invocation_start8821 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_typeof_expression_in_invocation_start8828 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_access_identifier_in_invocation_part8851 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_brackets_in_invocation_part8856 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_declaration_statement_in_statement8891 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_plus_in_statement8905 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_labeled_statement_in_statement_plus8987 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_statement_plus8997 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_embedded_statement9022 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_IF_in_embedded_statement9030 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_embedded_statement9032 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
        public static readonly BitSet FOLLOW_SEP_in_embedded_statement9068 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_embedded_statement9070 = new BitSet(new ulong[]{0x8000000000000008UL});
        public static readonly BitSet FOLLOW_else_statement_in_embedded_statement9073 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicType_in_embedded_statement9089 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicAssignment_in_embedded_statement9104 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_switch_statement_in_embedded_statement9235 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_iteration_statement_in_embedded_statement9241 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_jump_statement_in_embedded_statement9247 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_RETURN_in_embedded_statement9278 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_embedded_statement9283 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_THROW_in_embedded_statement9296 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_embedded_statement9301 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicAssignment_in_embedded_statement9327 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_TRY_in_embedded_statement9444 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_block_in_embedded_statement9446 = new BitSet(new ulong[]{0x3000000000000008UL});
        public static readonly BitSet FOLLOW_catch_clauses_in_embedded_statement9448 = new BitSet(new ulong[]{0x2000000000000008UL});
        public static readonly BitSet FOLLOW_finally_clause_in_embedded_statement9451 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_checked_statement_in_embedded_statement9458 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unchecked_statement_in_embedded_statement9463 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_synchronized_statement_in_embedded_statement9468 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_yield_statement_in_embedded_statement9492 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_198_in_embedded_statement9501 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_block_in_embedded_statement9505 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_fixed_statement_in_embedded_statement9511 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_statement_in_embedded_statement9516 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_266_in_switch_statement9611 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_switch_statement9615 = new BitSet(new ulong[]{0x0000000010000008UL});
        public static readonly BitSet FOLLOW_magicScrutineeVar_in_switch_statement9620 = new BitSet(new ulong[]{0x0000000010000008UL});
        public static readonly BitSet FOLLOW_switch_section_in_switch_statement9656 = new BitSet(new ulong[]{0x0000000010000008UL});
        public static readonly BitSet FOLLOW_262_in_fixed_statement9897 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_fixed_statement9901 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_pointer_type_in_fixed_statement9905 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement9907 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_fixed_statement9911 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_fixed_statement9915 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9924 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_fixed_pointer_declarators9929 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9933 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_fixed_pointer_declarator9943 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_fixed_pointer_declarator9947 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator9951 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_fixed_pointer_initializer9961 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_labeled_statement9970 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_labeled_statement9972 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_statement_in_labeled_statement9974 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_declaration_statement9984 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_local_constant_declaration_in_declaration_statement9990 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_declaration_statement9993 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_type_in_local_variable_declaration10001 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration10005 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_TYPE_VAR_in_local_variable_type10073 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_TYPE_DYNAMIC_in_local_variable_type10100 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_local_variable_type10121 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators10164 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_local_variable_declarators10179 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators10183 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_local_variable_declarator10227 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_local_variable_declarator10242 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF0004A6UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0381UL});
        public static readonly BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator10246 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicConstructStruct_in_local_variable_declarator10262 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicConstructDefaultEnum_in_local_variable_declarator10273 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_local_variable_initializer10364 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_initializer_in_local_variable_initializer10372 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer10378 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_265_in_stackalloc_initializer10385 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer10389 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_stackalloc_initializer10393 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_stackalloc_initializer10397 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer10402 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_205_in_local_constant_declaration10410 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_local_constant_declaration10414 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarators_in_local_constant_declaration10418 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_expression_statement10427 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_expression_statement10432 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_statement_expression10442 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ELSE_in_else_statement10452 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_else_statement10456 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SWITCH_SECTION_in_switch_section10474 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_ite_switch_labels_in_switch_section10479 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_switch_labels_in_switch_section10483 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_statement_list_in_switch_section10488 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_switch_label_in_ite_switch_labels10621 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
        public static readonly BitSet FOLLOW_switch_label_in_ite_switch_labels10642 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
        public static readonly BitSet FOLLOW_switch_label_in_switch_labels10687 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
        public static readonly BitSet FOLLOW_267_in_switch_label10716 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_constant_expression_in_switch_label10721 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_217_in_switch_label10836 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_268_in_iteration_statement10861 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_iteration_statement10863 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
        public static readonly BitSet FOLLOW_SEP_in_iteration_statement10865 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_iteration_statement10867 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_do_statement_in_iteration_statement10874 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_270_in_iteration_statement10880 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_for_initializer_in_iteration_statement10882 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
        public static readonly BitSet FOLLOW_SEP_in_iteration_statement10885 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFDUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_for_condition_in_iteration_statement10887 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
        public static readonly BitSet FOLLOW_SEP_in_iteration_statement10890 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFDUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_for_iterator_in_iteration_statement10892 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
        public static readonly BitSet FOLLOW_SEP_in_iteration_statement10895 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_iteration_statement10897 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_FOREACH_in_iteration_statement10907 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_local_variable_type_in_iteration_statement10909 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_iteration_statement10913 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_iteration_statement10915 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
        public static readonly BitSet FOLLOW_SEP_in_iteration_statement10920 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_iteration_statement10946 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_magicTypeFromTemplate_in_iteration_statement10961 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicObjectType_in_iteration_statement10964 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicForeachVar_in_iteration_statement10967 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_269_in_do_statement11017 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_do_statement11021 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_268_in_do_statement11026 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_do_statement11030 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_do_statement11034 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_do_statement11038 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_do_statement11042 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_for_initializer11056 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_expression_list_in_for_initializer11061 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_for_condition11071 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_expression_list_in_for_iterator11079 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list11087 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_statement_expression_list11090 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list11092 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_break_statement_in_jump_statement11102 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_continue_statement_in_jump_statement11107 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_goto_statement_in_jump_statement11112 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BREAK_in_break_statement11120 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_break_statement11124 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_271_in_continue_statement11132 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_continue_statement11136 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_272_in_goto_statement11144 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF22000008UL,0x0000000000240981UL});
        public static readonly BitSet FOLLOW_identifier_in_goto_statement11150 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_267_in_goto_statement11158 = new BitSet(new ulong[]{0x000B7FFC0C000000UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_constant_expression_in_goto_statement11162 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_217_in_goto_statement11171 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_goto_statement11176 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_catch_clause_in_catch_clauses11187 = new BitSet(new ulong[]{0x1000000000000002UL});
        public static readonly BitSet FOLLOW_CATCH_in_catch_clause11207 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_class_type_in_catch_clause11209 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_catch_clause11213 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_block_in_catch_clause11217 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_FINALLY_in_finally_clause11227 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_block_in_finally_clause11231 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_215_in_checked_statement11240 = new BitSet(new ulong[]{0x0000000204000000UL,0x0010000000000080UL,0x000000001F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_block_in_checked_statement11244 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_UNCHECKED_in_unchecked_statement11253 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_block_in_unchecked_statement11255 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_SYNCHRONIZED_in_synchronized_statement11267 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_synchronized_statement11269 = new BitSet(new ulong[]{0x4EEB7FFEEC000400UL,0x01577FBFFF000C8FUL,0x000000001F7FFFFCUL,0x7F9EFFFF2FC13FECUL,0x00000000003DF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_synchronized_statement11272 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_YIELD_RETURN_in_yield_statement11287 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_yield_statement11289 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_YIELD_BREAK_in_yield_statement11299 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BOOL_in_predefined_type11328 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BYTE_in_predefined_type11340 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_CHAR_in_predefined_type11352 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_275_in_predefined_type11364 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DOUBLE_in_predefined_type11373 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_FLOAT_in_predefined_type11383 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_INT_in_predefined_type11394 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LONG_in_predefined_type11407 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OBJECT_in_predefined_type11419 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_251_in_predefined_type11429 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SHORT_in_predefined_type11437 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_276_in_predefined_type11448 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_253_in_predefined_type11459 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_254_in_predefined_type11471 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_252_in_predefined_type11482 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_IDENTIFIER_in_identifier11504 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_also_keyword_in_identifier11510 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_also_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Real_literal_in_literal11997 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NUMBER_in_literal12019 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LONGNUMBER_in_literal12045 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Hex_number_in_literal12067 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Character_literal_in_literal12089 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_STRINGLITERAL_in_literal12104 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Verbatim_string_literal_in_literal12123 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_TRUE_in_literal12132 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_FALSE_in_literal12160 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NULL_in_literal12187 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicCatchVar_in_magicSmotherExceptionsThrow12527 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowableType_in_magicSmotherExceptionsThrow12529 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicType_in_magicGenericIterator13320 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicToken_in_magicGenericIterator13328 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicAssignment_in_magicGenericIterator13334 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicToken_in_magicGenericIterator13343 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicDot_in_magicGenericIterator13351 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicDot_in_magicGenericIterator13359 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicApply_in_magicGenericIterator13367 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicTryCatch_in_magicGenericIterator13374 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMethod_in_magicGenericIterator13381 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicType_in_magicIterator13413 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicToken_in_magicIterator13421 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicAssignment_in_magicIterator13427 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMethod_in_magicIterator13434 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_APPLY_in_synpred1_NetMaker770 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_DOT_in_synpred1_NetMaker774 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_synpred1_NetMaker776 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred1_NetMaker779 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred1_NetMaker781 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred1_NetMaker786 = new BitSet(new ulong[]{0x0000800000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred1_NetMaker788 = new BitSet(new ulong[]{0x0000800000000008UL});
        public static readonly BitSet FOLLOW_argument_list_in_synpred1_NetMaker793 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_set_in_synpred2_NetMaker888 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_DOT_in_synpred2_NetMaker896 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_synpred2_NetMaker898 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred2_NetMaker901 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred2_NetMaker906 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_LPAREN_in_synpred3_NetMaker1934 = new BitSet(new ulong[]{0x02E0000000000400UL,0x0001000000000000UL,0x0000000000000000UL,0x0000000000001FA4UL});
        public static readonly BitSet FOLLOW_type_in_synpred3_NetMaker1938 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_synpred3_NetMaker1942 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_creation_expression_in_synpred4_NetMaker2282 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_generic_dimension_specifier_in_synpred5_NetMaker2760 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_synpred5_NetMaker2764 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred6_NetMaker3121 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred6_NetMaker3125 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_220_in_synpred7_NetMaker3286 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_221_in_synpred7_NetMaker3288 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unary_expression_in_synpred8_NetMaker3649 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000007FF000UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_synpred8_NetMaker3654 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DOT_in_synpred9_NetMaker3773 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_synpred9_NetMaker3775 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred9_NetMaker3778 = new BitSet(new ulong[]{0x0000000000000008UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred9_NetMaker3780 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred9_NetMaker3786 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000007FF000UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_synpred9_NetMaker3789 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_INDEX_in_synpred10_NetMaker3898 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_synpred10_NetMaker3900 = new BitSet(new ulong[]{0x000B7FFC0C000008UL,0x00407FBFFF000406UL,0x000000000F7FFFFCUL,0x7F9EFFFF2FC10008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_synpred10_NetMaker3903 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_synpred10_NetMaker3907 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_function_signature_in_synpred11_NetMaker4474 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
        public static readonly BitSet FOLLOW_LAMBDA_in_synpred11_NetMaker4480 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_expression_in_synpred12_NetMaker4495 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_224_in_synpred13_NetMaker5993 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COMMA_in_synpred14_NetMaker6487 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred14_NetMaker6491 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_synpred14_NetMaker6495 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_arguments_in_synpred15_NetMaker8726 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_set_in_synpred15_NetMaker8730 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred16_NetMaker8782 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred16_NetMaker8787 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_declaration_statement_in_synpred17_NetMaker8886 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_synpred18_NetMaker9258 = new BitSet(new ulong[]{0x0000000000000004UL});
        public static readonly BitSet FOLLOW_expression_in_synpred18_NetMaker9266 = new BitSet(new ulong[]{0x0000000000000008UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_synpred19_NetMaker11051 = new BitSet(new ulong[]{0x0000000000000002UL});

    }
}