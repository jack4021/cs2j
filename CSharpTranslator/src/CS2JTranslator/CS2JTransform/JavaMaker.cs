// $ANTLR 3.2 Sep 23, 2009 12:02:23 /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g 2021-03-09 19:06:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162


    using System;
    using System.Text;
    using System.Xml;
    using System.Globalization;
    using System.Text.RegularExpressions;


using System;
using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;using Stack = System.Collections.Generic.Stack<object>;
using List = System.Collections.IList;
using ArrayList = System.Collections.Generic.List<object>;
using Map = System.Collections.IDictionary;
using HashMap = System.Collections.Generic.Dictionary<object, object>;

namespace  Twiglet.CS2J.Translator.Transform 
{
    public partial class JavaMaker : Twiglet.CS2J.Translator.Transform.SyntaxFragments
    {
        public static readonly string[] tokenNames = new string[] 
    	{
            "<invalid>", 
    		"<EOR>", 
    		"<DOWN>", 
    		"<UP>", 
    		"PACKAGE", 
    		"CLASS", 
    		"EXTENDS", 
    		"IMPLEMENTS", 
    		"IMPORT", 
    		"INTERFACE", 
    		"FINAL", 
    		"ANNOTATION", 
    		"OUT", 
    		"CONST", 
    		"EVENT", 
    		"METHOD", 
    		"PROPERTY", 
    		"INDEXER", 
    		"FIELD", 
    		"OPERATOR", 
    		"ENUM", 
    		"DELEGATE", 
    		"CONVERSION_OPERATOR", 
    		"CONSTRUCTOR", 
    		"DESTRUCTOR", 
    		"METHOD_HEADER", 
    		"PARAMS", 
    		"PARAMS_TYPELESS", 
    		"SWITCH_SECTION", 
    		"YIELD_RETURN", 
    		"YIELD_BREAK", 
    		"UNCHECKED", 
    		"GLOBAL_ATTRIBUTE", 
    		"ATTRIBUTE", 
    		"MONOPLUS", 
    		"MONOMINUS", 
    		"MONONOT", 
    		"MONOTWIDDLE", 
    		"MONOSTAR", 
    		"ADDRESSOF", 
    		"PREINC", 
    		"PREDEC", 
    		"POSTINC", 
    		"POSTDEC", 
    		"PARENS", 
    		"INDEX", 
    		"APPLY", 
    		"ARGS", 
    		"NEW", 
    		"NEW_ARRAY", 
    		"NEW_DELEGATE", 
    		"NEW_ANON_OBJECT", 
    		"STATIC_CONSTRUCTOR", 
    		"PUBLIC", 
    		"PROTECTED", 
    		"PRIVATE", 
    		"INTERNAL", 
    		"STATIC", 
    		"RETURN", 
    		"TRY", 
    		"CATCH", 
    		"FINALLY", 
    		"THROW", 
    		"ELSE", 
    		"BREAK", 
    		"OBJECT", 
    		"THIS", 
    		"FOREACH", 
    		"IN", 
    		"OPEN_BRACKET", 
    		"CLOSE_BRACKET", 
    		"OPEN_BRACE", 
    		"CLOSE_BRACE", 
    		"LPAREN", 
    		"NULL_COALESCE", 
    		"IF", 
    		"ASSIGN", 
    		"PLUS_ASSIGN", 
    		"MINUS_ASSIGN", 
    		"STAR_ASSIGN", 
    		"DIV_ASSIGN", 
    		"MOD_ASSIGN", 
    		"BIT_AND_ASSIGN", 
    		"BIT_OR_ASSIGN", 
    		"BIT_XOR_ASSIGN", 
    		"LEFT_SHIFT_ASSIGN", 
    		"RIGHT_SHIFT_ASSIGN", 
    		"UNSIGNED_RIGHT_SHIFT_ASSIGN", 
    		"COND_EXPR", 
    		"RIGHT_SHIFT", 
    		"INSTANCEOF", 
    		"LOG_OR", 
    		"LOG_AND", 
    		"BIT_OR", 
    		"BIT_XOR", 
    		"BIT_AND", 
    		"NOT_EQUAL", 
    		"EQUAL", 
    		"LTHAN", 
    		"LTE", 
    		"GTE", 
    		"LEFT_SHIFT", 
    		"UNSIGNED_RIGHT_SHIFT", 
    		"SUPER", 
    		"LONGNUMBER", 
    		"PLUS", 
    		"MINUS", 
    		"DIV", 
    		"MOD", 
    		"STAR", 
    		"LAMBDA", 
    		"COMMA", 
    		"TYPE", 
    		"TYPE_VAR", 
    		"TYPE_DYNAMIC", 
    		"ENUM_BODY", 
    		"TYPE_PARAM_CONSTRAINT", 
    		"UNARY_EXPR", 
    		"CAST_EXPR", 
    		"EXCEPTION", 
    		"SYNCHRONIZED", 
    		"PAYLOAD", 
    		"PAYLOAD_LIST", 
    		"JAVAWRAPPER", 
    		"JAVAWRAPPEREXPRESSION", 
    		"JAVAWRAPPERARGUMENT", 
    		"JAVAWRAPPERARGUMENTLIST", 
    		"JAVAWRAPPERTYPE", 
    		"SEP", 
    		"KGHOLE", 
    		"BOOL", 
    		"BYTE", 
    		"CHAR", 
    		"SHORT", 
    		"INT", 
    		"LONG", 
    		"FLOAT", 
    		"DOUBLE", 
    		"IDENTIFIER", 
    		"Real_literal", 
    		"NUMBER", 
    		"Hex_number", 
    		"Character_literal", 
    		"STRINGLITERAL", 
    		"Verbatim_string_literal", 
    		"TRUE", 
    		"FALSE", 
    		"NULL", 
    		"DOT", 
    		"PTR", 
    		"GT", 
    		"USING", 
    		"ELIF", 
    		"ENDIF", 
    		"DEFINE", 
    		"UNDEF", 
    		"SEMI", 
    		"RPAREN", 
    		"WS", 
    		"TS", 
    		"DOC_LINE_COMMENT", 
    		"LINE_COMMENT", 
    		"COMMENT", 
    		"EscapeSequence", 
    		"Verbatim_string_literal_character", 
    		"Decimal_digits", 
    		"INTEGER_TYPE_SUFFIX", 
    		"Decimal_integer_literal", 
    		"GooBallIdentifier", 
    		"GooBall", 
    		"IdentifierStart", 
    		"IdentifierPart", 
    		"Exponent_part", 
    		"Real_type_suffix", 
    		"Pragma", 
    		"PP_CONDITIONAL", 
    		"PREPROCESSOR_DIRECTIVE", 
    		"IF_TOKEN", 
    		"DEFINE_TOKEN", 
    		"ELSE_TOKEN", 
    		"ENDIF_TOKEN", 
    		"UNDEF_TOKEN", 
    		"PP_EXPRESSION", 
    		"PP_OR_EXPRESSION", 
    		"PP_AND_EXPRESSION", 
    		"PP_EQUALITY_EXPRESSION", 
    		"PP_UNARY_EXPRESSION", 
    		"PP_PRIMARY_EXPRESSION", 
    		"UNICODE_LETTER", 
    		"HEX_DIGIT", 
    		"HEX_DIGITS", 
    		"DECIMAL_DIGIT", 
    		"Sign", 
    		"'namespace'", 
    		"'extern'", 
    		"'alias'", 
    		"'partial'", 
    		"'new'", 
    		"'unsafe'", 
    		"'abstract'", 
    		"'sealed'", 
    		"'readonly'", 
    		"'volatile'", 
    		"'virtual'", 
    		"'override'", 
    		"'const'", 
    		"'void'", 
    		"'base'", 
    		"'::'", 
    		"'++'", 
    		"'--'", 
    		"':'", 
    		"'out'", 
    		"'ref'", 
    		"'sizeof'", 
    		"'checked'", 
    		"'unchecked'", 
    		"'default'", 
    		"'delegate'", 
    		"'typeof'", 
    		"'?'", 
    		"'extends'", 
    		"'is'", 
    		"'as'", 
    		"'into'", 
    		"'from'", 
    		"'join'", 
    		"'on'", 
    		"'equals'", 
    		"'let'", 
    		"'orderby'", 
    		"'ascending'", 
    		"'descending'", 
    		"'select'", 
    		"'group'", 
    		"'by'", 
    		"'where'", 
    		"'assembly'", 
    		"'module'", 
    		"'field'", 
    		"'event'", 
    		"'method'", 
    		"'param'", 
    		"'property'", 
    		"'type'", 
    		"'class'", 
    		"'throws'", 
    		"'get'", 
    		"'set'", 
    		"'add'", 
    		"'remove'", 
    		"'sbyte'", 
    		"'ushort'", 
    		"'uint'", 
    		"'ulong'", 
    		"'struct'", 
    		"'__arglist'", 
    		"'params'", 
    		"'interface'", 
    		"'operator'", 
    		"'implicit'", 
    		"'explicit'", 
    		"'fixed'", 
    		"'var'", 
    		"'dynamic'", 
    		"'stackalloc'", 
    		"'switch'", 
    		"'case'", 
    		"'while'", 
    		"'do'", 
    		"'for'", 
    		"'continue'", 
    		"'goto'", 
    		"'lock'", 
    		"'yield'", 
    		"'decimal'", 
    		"'string'", 
    		"'pragma'"
        };

        public const int DECIMAL_DIGIT = 191;
        public const int MONOMINUS = 35;
        public const int PACKAGE = 4;
        public const int GLOBAL_ATTRIBUTE = 32;
        public const int STAR = 109;
        public const int JAVAWRAPPERTYPE = 127;
        public const int T__259 = 259;
        public const int T__258 = 258;
        public const int MOD = 108;
        public const int T__257 = 257;
        public const int CONST = 13;
        public const int PREDEC = 41;
        public const int T__262 = 262;
        public const int Character_literal = 142;
        public const int SWITCH_SECTION = 28;
        public const int T__263 = 263;
        public const int T__260 = 260;
        public const int T__261 = 261;
        public const int T__266 = 266;
        public const int LEFT_SHIFT_ASSIGN = 85;
        public const int T__267 = 267;
        public const int T__264 = 264;
        public const int T__265 = 265;
        public const int EOF = -1;
        public const int TYPE = 112;
        public const int ELSE_TOKEN = 179;
        public const int RPAREN = 157;
        public const int FINAL = 10;
        public const int IMPORT = 8;
        public const int UNCHECKED = 31;
        public const int CAST_EXPR = 118;
        public const int USING = 151;
        public const int T__247 = 247;
        public const int NOT_EQUAL = 96;
        public const int T__246 = 246;
        public const int T__249 = 249;
        public const int T__248 = 248;
        public const int PP_AND_EXPRESSION = 184;
        public const int THIS = 66;
        public const int RETURN = 58;
        public const int T__250 = 250;
        public const int ARGS = 47;
        public const int T__251 = 251;
        public const int T__252 = 252;
        public const int T__253 = 253;
        public const int T__254 = 254;
        public const int T__255 = 255;
        public const int Sign = 192;
        public const int UNICODE_LETTER = 188;
        public const int T__256 = 256;
        public const int TYPE_VAR = 113;
        public const int TYPE_PARAM_CONSTRAINT = 116;
        public const int YIELD_BREAK = 30;
        public const int PARAMS_TYPELESS = 27;
        public const int STATIC = 57;
        public const int DELEGATE = 21;
        public const int ELSE = 63;
        public const int MINUS_ASSIGN = 78;
        public const int NUMBER = 140;
        public const int BOOL = 130;
        public const int Decimal_integer_literal = 167;
        public const int DEFINE_TOKEN = 178;
        public const int INT = 134;
        public const int UNDEF_TOKEN = 181;
        public const int ENDIF_TOKEN = 180;
        public const int UNSIGNED_RIGHT_SHIFT_ASSIGN = 87;
        public const int WS = 158;
        public const int PP_PRIMARY_EXPRESSION = 187;
        public const int OUT = 12;
        public const int T__269 = 269;
        public const int T__268 = 268;
        public const int COND_EXPR = 88;
        public const int YIELD_RETURN = 29;
        public const int T__275 = 275;
        public const int T__276 = 276;
        public const int T__277 = 277;
        public const int MONOSTAR = 38;
        public const int GT = 150;
        public const int T__271 = 271;
        public const int LEFT_SHIFT = 101;
        public const int T__272 = 272;
        public const int T__273 = 273;
        public const int POSTINC = 42;
        public const int T__274 = 274;
        public const int PP_EQUALITY_EXPRESSION = 185;
        public const int CONSTRUCTOR = 23;
        public const int T__270 = 270;
        public const int T__215 = 215;
        public const int T__216 = 216;
        public const int PROTECTED = 54;
        public const int T__213 = 213;
        public const int APPLY = 46;
        public const int T__214 = 214;
        public const int T__219 = 219;
        public const int T__217 = 217;
        public const int T__218 = 218;
        public const int ANNOTATION = 11;
        public const int UNARY_EXPR = 117;
        public const int FLOAT = 136;
        public const int T__223 = 223;
        public const int T__222 = 222;
        public const int LPAREN = 73;
        public const int T__221 = 221;
        public const int T__220 = 220;
        public const int T__202 = 202;
        public const int PARENS = 44;
        public const int T__203 = 203;
        public const int T__204 = 204;
        public const int LONGNUMBER = 104;
        public const int T__205 = 205;
        public const int T__206 = 206;
        public const int T__207 = 207;
        public const int IMPLEMENTS = 7;
        public const int T__208 = 208;
        public const int T__209 = 209;
        public const int JAVAWRAPPEREXPRESSION = 124;
        public const int SEP = 128;
        public const int PREPROCESSOR_DIRECTIVE = 176;
        public const int PREINC = 40;
        public const int RIGHT_SHIFT_ASSIGN = 86;
        public const int PLUS = 105;
        public const int LOG_OR = 91;
        public const int LAMBDA = 110;
        public const int LOG_AND = 92;
        public const int T__210 = 210;
        public const int T__212 = 212;
        public const int PARAMS = 26;
        public const int T__211 = 211;
        public const int T__239 = 239;
        public const int T__237 = 237;
        public const int T__238 = 238;
        public const int T__235 = 235;
        public const int T__236 = 236;
        public const int TS = 159;
        public const int HEX_DIGIT = 189;
        public const int SHORT = 133;
        public const int INSTANCEOF = 90;
        public const int PAYLOAD = 121;
        public const int CLOSE_BRACE = 72;
        public const int METHOD_HEADER = 25;
        public const int MINUS = 106;
        public const int T__245 = 245;
        public const int T__244 = 244;
        public const int SEMI = 156;
        public const int T__243 = 243;
        public const int STAR_ASSIGN = 79;
        public const int T__242 = 242;
        public const int Hex_number = 141;
        public const int T__241 = 241;
        public const int T__240 = 240;
        public const int STATIC_CONSTRUCTOR = 52;
        public const int T__228 = 228;
        public const int T__229 = 229;
        public const int T__224 = 224;
        public const int ENUM = 20;
        public const int T__225 = 225;
        public const int T__226 = 226;
        public const int T__227 = 227;
        public const int UNSIGNED_RIGHT_SHIFT = 102;
        public const int STRINGLITERAL = 143;
        public const int BIT_XOR = 94;
        public const int ADDRESSOF = 39;
        public const int PLUS_ASSIGN = 77;
        public const int INTERFACE = 9;
        public const int DIV = 107;
        public const int PP_UNARY_EXPRESSION = 186;
        public const int T__232 = 232;
        public const int LONG = 135;
        public const int T__231 = 231;
        public const int PUBLIC = 53;
        public const int T__234 = 234;
        public const int T__233 = 233;
        public const int JAVAWRAPPERARGUMENTLIST = 126;
        public const int T__230 = 230;
        public const int INTERNAL = 56;
        public const int PP_OR_EXPRESSION = 183;
        public const int MOD_ASSIGN = 81;
        public const int JAVAWRAPPERARGUMENT = 125;
        public const int NEW = 48;
        public const int CHAR = 132;
        public const int DIV_ASSIGN = 80;
        public const int BREAK = 64;
        public const int OPEN_BRACKET = 69;
        public const int PAYLOAD_LIST = 122;
        public const int BIT_OR = 93;
        public const int NEW_ARRAY = 49;
        public const int TYPE_DYNAMIC = 114;
        public const int ENDIF = 153;
        public const int DOUBLE = 137;
        public const int ENUM_BODY = 115;
        public const int SUPER = 103;
        public const int COMMENT = 162;
        public const int EXCEPTION = 119;
        public const int KGHOLE = 129;
        public const int LINE_COMMENT = 161;
        public const int PRIVATE = 55;
        public const int BIT_XOR_ASSIGN = 84;
        public const int NULL = 147;
        public const int IdentifierStart = 170;
        public const int MONOTWIDDLE = 37;
        public const int TRY = 59;
        public const int Verbatim_string_literal = 144;
        public const int IF_TOKEN = 177;
        public const int ELIF = 152;
        public const int T__200 = 200;
        public const int T__201 = 201;
        public const int PROPERTY = 16;
        public const int MONOPLUS = 34;
        public const int FIELD = 18;
        public const int PP_CONDITIONAL = 175;
        public const int FOREACH = 67;
        public const int CATCH = 60;
        public const int FALSE = 146;
        public const int INTEGER_TYPE_SUFFIX = 166;
        public const int EscapeSequence = 163;
        public const int THROW = 62;
        public const int CLOSE_BRACKET = 70;
        public const int POSTDEC = 43;
        public const int DESTRUCTOR = 24;
        public const int CLASS = 5;
        public const int Real_literal = 139;
        public const int BIT_AND = 95;
        public const int PP_EXPRESSION = 182;
        public const int CONVERSION_OPERATOR = 22;
        public const int GTE = 100;
        public const int ATTRIBUTE = 33;
        public const int LTHAN = 98;
        public const int GooBall = 169;
        public const int DEFINE = 154;
        public const int LTE = 99;
        public const int IF = 75;
        public const int Exponent_part = 172;
        public const int INDEX = 45;
        public const int T__199 = 199;
        public const int T__198 = 198;
        public const int T__197 = 197;
        public const int SYNCHRONIZED = 120;
        public const int T__196 = 196;
        public const int IN = 68;
        public const int T__195 = 195;
        public const int T__194 = 194;
        public const int T__193 = 193;
        public const int OBJECT = 65;
        public const int COMMA = 111;
        public const int IDENTIFIER = 138;
        public const int EQUAL = 97;
        public const int RIGHT_SHIFT = 89;
        public const int UNDEF = 155;
        public const int DOT = 148;
        public const int IdentifierPart = 171;
        public const int JAVAWRAPPER = 123;
        public const int BYTE = 131;
        public const int MONONOT = 36;
        public const int BIT_OR_ASSIGN = 83;
        public const int DOC_LINE_COMMENT = 160;
        public const int OPERATOR = 19;
        public const int GooBallIdentifier = 168;
        public const int Pragma = 174;
        public const int Verbatim_string_literal_character = 164;
        public const int NEW_ANON_OBJECT = 51;
        public const int EVENT = 14;
        public const int TRUE = 145;
        public const int NULL_COALESCE = 74;
        public const int PTR = 149;
        public const int Decimal_digits = 165;
        public const int FINALLY = 61;
        public const int INDEXER = 17;
        public const int NEW_DELEGATE = 50;
        public const int Real_type_suffix = 173;
        public const int ASSIGN = 76;
        public const int HEX_DIGITS = 190;
        public const int EXTENDS = 6;
        public const int OPEN_BRACE = 71;
        public const int METHOD = 15;
        public const int BIT_AND_ASSIGN = 82;

        // delegates
        // delegators

        protected class NSContext_scope 
        {
            protected internal int filler;
            protected internal string currentNS;
            protected internal List<string> namespaces;
            protected internal List<string> aliasKeys;
            protected internal List<string> aliasNamespaces;
        }
        protected Stack NSContext_stack = new Stack();
        protected class TypeContext_scope 
        {
            protected internal string typeName;
        }
        protected Stack TypeContext_stack = new Stack();



            public JavaMaker(ITreeNodeStream input)
        		: this(input, new RecognizerSharedState()) {
            }

            public JavaMaker(ITreeNodeStream input, RecognizerSharedState state)
        		: base(input, state) {
                InitializeCyclicDFAs();

                 
            }
            
        protected ITreeAdaptor adaptor = new CommonTreeAdaptor();

        public ITreeAdaptor TreeAdaptor
        {
            get { return this.adaptor; }
            set {
        	this.adaptor = value;
        	}
        }

        override public string[] TokenNames {
    		get { return JavaMaker.tokenNames; }
        }

        override public string GrammarFileName {
    		get { return "/project/src/CS2JTranslator/CS2JTransform/JavaMaker.g"; }
        }




            private XmlTextWriter enumXmlWriter = null;			
            public XmlTextWriter EnumXmlWriter {
                get { return enumXmlWriter; }
                set { enumXmlWriter = value; }
            }

            private void WriteStartEnum(String name)
            {
        		if (enumXmlWriter != null)
        		{
        			enumXmlWriter.WriteStartElement("enum");
        			enumXmlWriter.WriteAttributeString("id", name);
        		}
            }
            
            private void WriteEndEnum()
            {
        		if (enumXmlWriter != null)
        		{
        			enumXmlWriter.WriteEndElement();
        		}
            }
            
            private void WriteEnumMember(String name, int value)
            {
        		if (enumXmlWriter != null)
        		{
        			enumXmlWriter.WriteStartElement("member");
        			enumXmlWriter.WriteAttributeString("id", name);
        			enumXmlWriter.WriteAttributeString("value", value.ToString());
        			enumXmlWriter.WriteEndElement();
        		}
            }

            // Since a CS file may comtain multiple top level types (and so generate multiple Java
            // files) we build a map from type name to AST for each top level type
            // We also build a list of type names so that we can maintain the order (so comments
            // at the end of the file will get included when we emit the java for the last type)
            public IDictionary<string, CUnit> CUMap { get; set; }
            public IList<string> CUKeys { get; set; }

            protected string snaffleComments(int startIndex, int endIndex) {
               StringBuilder ret = new StringBuilder();
               List<IToken> toks = ((CommonTokenStream)this.GetTreeNodeStream().TokenStream).GetTokens(startIndex,endIndex);
               if (toks != null) {
                  foreach (IToken tok in toks) {
                     if (tok.Channel == TokenChannels.Hidden) {
                        ret.Append(new Regex("(\\n|\\r)+").Replace(tok.Text, Environment.NewLine).Trim());
                        // Hide from Pretty Printer
                        tok.Channel = TokenChannels.Hidden - 1;
                     }
                  }
               }
               return ret.ToString();
            }
            protected string ParentNameSpace {
                get {
                    return ((NSContext_scope)NSContext_stack.ToArray()[1]).currentNS;
                }
            }

            protected List<string> CollectSearchPath {
                get {
                    List<string> ret = new List<string>();
                    Object[] nsCtxtArr = NSContext_stack.ToArray();
                    for (int i = nsCtxtArr.Length - 1; i >= 0; i--) {
                        foreach (string v in ((NSContext_scope)nsCtxtArr[i]).namespaces) {
                            ret.Add(v);
                        }
                    }
                    return ret;
                }
            }

            protected List<string> CollectAliasKeys {
                get {
                    List<string> ret = new List<string>();
                    Object[] nsCtxtArr = NSContext_stack.ToArray();
                    for (int i = nsCtxtArr.Length - 1; i >= 0; i--) {
                        foreach (string v in ((NSContext_scope)nsCtxtArr[i]).aliasKeys) {
                            ret.Add(v);
                        }
                    }
                    return ret;
                }
            }

            protected List<string> CollectAliasNamespaces {
                get {
                    List<string> ret = new List<string>();
                    Object[] nsCtxtArr = NSContext_stack.ToArray();
                    for (int i = nsCtxtArr.Length - 1; i >= 0; i--) {
                        foreach (string v in ((NSContext_scope)nsCtxtArr[i]).aliasNamespaces) {
                            ret.Add(v);
                        }
                    }
                    return ret;
                }
            }

            // TREE CONSTRUCTION
            protected CommonTree mkPayloadList(List<string> payloads) {
                CommonTree root = (CommonTree)adaptor.Nil;

                foreach (string p in payloads) {
                    adaptor.AddChild(root, (CommonTree)adaptor.Create(PAYLOAD, p));
                }
                return root;
            }

            protected CommonTree mangleModifiersForType(CommonTree modifiers) {
                if (modifiers == null || modifiers.Children == null)
                    return modifiers;
                CommonTree stripped = (CommonTree)modifiers.DupNode();
                for (int i = 0; i < modifiers.Children.Count; i++) {
                    if (((CommonTree)modifiers.Children[i]).Token.Text != "static") {
                        adaptor.AddChild(stripped, modifiers.Children[i]);
                    }
                }
                return stripped;
            }

            protected CommonTree addConstModifiers(IToken tok, List<string> filter) {
                CommonTree root = (CommonTree)adaptor.Nil;

                if (filter == null || !filter.Contains("static") )
                {
                    adaptor.AddChild(root, (CommonTree)adaptor.Create(STATIC, tok, "static"));
                }
                if (filter == null || !filter.Contains("final")) 
                {
                    adaptor.AddChild(root, (CommonTree)adaptor.Create(FINAL, tok, "final"));
                }
                root = (CommonTree)adaptor.RulePostProcessing(root);
                return root;
            }

            // We expect mods to be 
            // null, or
            // a single token, or
            // a list of tokens (^(NIL ......))
            protected CommonTree addModifier(CommonTree mods, CommonTree modToAdd) {
               
                CommonTree root = (CommonTree)adaptor.Nil;
                
                bool modSeen = false;

                if (mods != null) {
                   // Is root node the one we are looking for?
                   if (!mods.IsNil) {
                      if (adaptor.GetType(mods) == adaptor.GetType(modToAdd) && adaptor.GetText(mods) == adaptor.GetText(modToAdd)) {
                         modSeen = true;
                      }
                      adaptor.AddChild(root, (CommonTree)adaptor.DupTree(mods));
                   }
                   else {
                      for (int i = 0; i < adaptor.GetChildCount(mods); i++) {
                         CommonTree child = (CommonTree)adaptor.GetChild(mods,i);
                         if (adaptor.GetType(child) == adaptor.GetType(modToAdd) && adaptor.GetText(child) == adaptor.GetText(modToAdd)) {
                            modSeen = true;
                         }
                         adaptor.AddChild(root, (CommonTree)adaptor.DupTree(child));
                      } 
                   }
                }
                if (!modSeen) {
                   adaptor.AddChild(root, modToAdd);
                }           

                root = (CommonTree)adaptor.RulePostProcessing(root);
                return root;
            }

            // add all modifiers in modToAdd tree
            protected CommonTree mergeModifiers(CommonTree mods, CommonTree modToAdd) {
               
               if (modToAdd == null)
                  return mods;
               
               if (!modToAdd.IsNil) {
                  return addModifier(mods, modToAdd);
               }

               CommonTree ret = mods; 
               for (int i = 0; i < adaptor.GetChildCount(modToAdd); i++) {
                  ret = addModifier(mods, (CommonTree)adaptor.GetChild(modToAdd, i));
               }
               
               return ret;
            }

            // mods is a list of modifiers.  removes is a list of token types, we remove all modifiers appearing in removes
            protected CommonTree mkRemoveMods(CommonTree mods, int[] removes) {
               
                CommonTree root = (CommonTree)adaptor.Nil;
                
                if (mods != null) {
                   // Is root node the one we are looking for?
                   if (!mods.IsNil) {
                      
                      if (Array.IndexOf(removes,adaptor.GetType(mods)) < 0) {
                         adaptor.AddChild(root, (CommonTree)adaptor.DupTree(mods));
                      }
                   }
                   else {
                      for (int i = 0; i < adaptor.GetChildCount(mods); i++) {
                         CommonTree child = (CommonTree)adaptor.GetChild(mods,i);
                         if (Array.IndexOf(removes,adaptor.GetType(child)) < 0) {
                            adaptor.AddChild(root, (CommonTree)adaptor.DupTree(child));
                         }
                      } 
                   }
                }

                root = (CommonTree)adaptor.RulePostProcessing(root);
                return root;
            }

            // mods is a list of modifiers.  contains is a list of token types, return true if mods has a member of contains
            protected bool containsMods(CommonTree mods, int[] contains) {
               
               bool ret = false;

                if (mods != null) {
                   // Is root node the one we are looking for?
                   if (!mods.IsNil) {
                      
                      if (Array.IndexOf(contains,adaptor.GetType(mods)) >= 0) {
                         ret = true;
                      }
                   }
                   else {
                      for (int i = 0; i < adaptor.GetChildCount(mods); i++) {
                         CommonTree child = (CommonTree)adaptor.GetChild(mods,i);
                         if (Array.IndexOf(contains,adaptor.GetType(child)) >= 0) {
                            ret = true;
                            break;
                         }
                      } 
                   }
                }
                return ret;
            }

            // Add modToAdd to mods.
            protected CommonTree mkAddMod(CommonTree mods, CommonTree modToAdd) {
               
                CommonTree root = (CommonTree)adaptor.Nil;
                
                if (mods == null) {
                   root = modToAdd;
                }
                else {
                   adaptor.AddChild(root, (CommonTree)adaptor.DupTree(modToAdd));
                   adaptor.AddChild(root, (CommonTree)adaptor.DupTree(mods));
                }
                root = (CommonTree)adaptor.RulePostProcessing(root);
                return root;
            }

            protected CommonTree mkPrivateMod(CommonTree mods, IToken tok) {
               return mkAddMod(mkRemoveMods(mods, new int[] {PUBLIC, PROTECTED, INTERNAL, PRIVATE}), (CommonTree)adaptor.Create(PRIVATE, tok, "private"));
            }

            // embedded statement is ";", or, "{" ... "}", or a single statement. In the latter case we wrap with braces
            protected CommonTree embeddedStatementToBlock(IToken tok, CommonTree embedStat) {

                if ((!embedStat.IsNil && adaptor.GetType(embedStat) == SEMI) ||
                    (embedStat.IsNil && adaptor.GetChildCount(embedStat) >= 1 && adaptor.GetType(embedStat) == SEMI)) {
                   // Do Nothing, already a block
                   return embedStat;
                }
                CommonTree root = (CommonTree)adaptor.Nil;
                
                adaptor.AddChild(root, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                adaptor.AddChild(root, dupTree(embedStat));
                adaptor.AddChild(root, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                root = (CommonTree)adaptor.RulePostProcessing(root);
                return root;
            }

            protected CommonTree mkGenericArgs(IToken tok, List<string> tyVars) {
               if (tyVars == null || tyVars.Count == 0) {
                  return null;
               }

               CommonTree root = (CommonTree)adaptor.Nil;
               adaptor.AddChild(root, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
               bool isFirst = true;
               foreach (string v in tyVars) {
                  if (!isFirst) {
                     adaptor.AddChild(root, (CommonTree)adaptor.Create(COMMA, tok, ","));
                  }
                  isFirst = false;
                  CommonTree ty = (CommonTree)adaptor.Nil;
                  ty = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), ty);
                  adaptor.AddChild(ty, (CommonTree)adaptor.Create(IDENTIFIER, tok, v));
                  adaptor.AddChild(root, ty);
               }
               adaptor.AddChild(root, (CommonTree)adaptor.Create(GT, tok, ">"));
               return root;

            }

            protected CommonTree mkPackage(IToken tok, CommonTree tree, String nameSpace) {

               CommonTree root = (CommonTree)adaptor.Nil;
               root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PACKAGE, tok, "package"), root);
               adaptor.AddChild(root, (CommonTree)adaptor.Create(PAYLOAD, tok, nameSpace));
               adaptor.AddChild(root, dupTree(tree));
               return root;
            }

            protected CommonTree mkFlattenDictionary(IToken tok, Dictionary<string,CommonTree> treeDict) {

               CommonTree root = (CommonTree)adaptor.Nil;
               foreach (CommonTree tree in treeDict.Values) {
                  if (tree != null) {
                     adaptor.AddChild(root, dupTree(tree));
                  }
               }
               root = (CommonTree)adaptor.RulePostProcessing(root);
               return root;
            }

            protected CommonTree mkArgsFromParams(IToken tok, CommonTree pars) {
               CommonTree root = (CommonTree)adaptor.Nil;
               if (adaptor.GetChildCount(pars) > 0) {
                  root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root);

                  // strip all TYPES and Attributes (there may be parameter modifiers like ref, out ...
                  for (int i = 0; i < adaptor.GetChildCount(pars); i++) {
                     if (((CommonTree)adaptor.GetChild(pars, i)).Token.Type != TYPE && ((CommonTree)adaptor.GetChild(pars, i)).Token.Type != ATTRIBUTE) {
                        adaptor.AddChild(root, dupTree((CommonTree)adaptor.GetChild(pars, i)));
                     }
                  }
               }
               root = (CommonTree)adaptor.RulePostProcessing(root);
               return root;
            }

            protected CommonTree mkType(IToken tok, CommonTree id, List<String> tyVars) {

               CommonTree root = (CommonTree)adaptor.Nil;
               root = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root);
               adaptor.AddChild(root, dupTree(id));

               if (tyVars != null && tyVars.Count > 0) {
                  adaptor.AddChild(root, mkGenericArgs(tok, tyVars));
               }

               return root;
            }
            
            protected string mkTypeString(string tyName, List<String> tyargs) {
               StringBuilder ty = new StringBuilder();
               ty.Append(tyName);
               ty.Append(mkTypeArgString(tyargs));
               return ty.ToString();
            }

            protected string mkTypeArgString(List<String> tyargs) {
               StringBuilder ty = new StringBuilder();
               if (tyargs != null && tyargs.Count > 0) {
                  ty.Append("<");
                  bool isFirst = true;
                  foreach (String v in tyargs) {
                     if (!isFirst) {
                        ty.Append(",");
                     }
                     isFirst = false;
                     ty.Append(v);
                  }
                  ty.Append(">");
               }
               return ty.ToString();
            }

        // for ["conn", "conn1", "conn2"] generate:
        //
        //                   if (conn != null)
        //                      Disposable.mkDisposable(conn).Dispose();
        // 
        //                   
        //                  if (conn2 != null)
        //                      Disposable.mkDisposable(conn2).Dispose();
        // 
        //                   
        //                  if (conn3 != null)
        //                      Disposable.mkDisposable(conn3).Dispose();
        // used in the finally block of the using translation
            protected CommonTree addDisposeVars(IToken tok, List<string> vars, string disposeMethod) {
                        	
                CommonTree root = (CommonTree)adaptor.Nil;

                foreach (string var in vars) {
                
                    CommonTree root_1 = (CommonTree)adaptor.Nil;
                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF, tok, "if"), root_1);

                    CommonTree root_2 = (CommonTree)adaptor.Nil;
                    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_EQUAL, tok, "!="), root_2);

                    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, var));
                    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(NULL, tok, "null"));

                    adaptor.AddChild(root_1, root_2);

                    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));

                    // Disposable.mkDisposable(var).Dispose()
                    root_2 = (CommonTree)adaptor.Nil;
                    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_2);

                    // Disposable.mkDisposable(var).Dispose
                    CommonTree root_3 = (CommonTree)adaptor.Nil;
                    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_3);

                    // Disposable.mkDisposable(var)
                    CommonTree root_4 = (CommonTree)adaptor.Nil;
                    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_4);

                    // Disposable.mkDisposable
                    CommonTree root_5 = (CommonTree)adaptor.Nil;
                    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_5);

                    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Disposable"));
                    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "mkDisposable"));

                    CommonTree root_6 = (CommonTree)adaptor.Nil;
                    root_6 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_6);

                    adaptor.AddChild(root_6, (CommonTree)adaptor.Create(IDENTIFIER, tok, var));

                    adaptor.AddChild(root_4, root_5);
                    adaptor.AddChild(root_4, root_6);


                    adaptor.AddChild(root_3, root_4);
                    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, disposeMethod));

                    adaptor.AddChild(root_2, root_3);

                    adaptor.AddChild(root_1, root_2);

                    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                    adaptor.AddChild(root, root_1);
                }

                return (CommonTree)adaptor.RulePostProcessing(root);
            }

            // TODO:  Read reserved words from a file so that they can be extended by customer
            private readonly static string[] javaReserved = new string[] { "int", "protected", "package" };
            
            protected string fixBrokenId(string id)
            {
                // Console.WriteLine(id);
                foreach (string k in javaReserved)
                {
                    if (k == id) 
                    {
                        return "__" + id;
                    }
                }
                return id;
            }

            // Map of C# built in types to Java equivalents
            Dictionary<string, string> predefined_type_map = new Dictionary<string, string>()
            {
                {"bool", "boolean"},
                {"decimal", "double"},
                {"object", "Object"},
                {"string", "String"}
            };

            Dictionary<string, string> predefined_unsigned_type_map = new Dictionary<string, string>()
            {
                {"uint", "int"},
                {"ulong", "long"},
                {"ushort", "short"}
            };

            Dictionary<string, string> predefined_embiggen_unsigned_type_map = new Dictionary<string, string>()
            {
                {"byte", "short"},
                {"ushort", "int"},
                {"uint", "long"},
                {"ulong", "long"}
            };

            protected CommonTree mkHole() {
                return mkHole(null);
            }

            protected CommonTree mkHole(IToken tok) {
                return (CommonTree)adaptor.Create(KGHOLE, tok, "KGHOLE");
            }

            // counter to ensure that the catch vars we introduce are unique 
            protected int dummyCatchVarCtr = 0;

            protected int newVarCtr = 0;

            protected CommonTree dupTree(CommonTree t) {
                return (CommonTree)adaptor.DupTree(t);
            }

            protected string mkTypeOrGenericString(string type, List<string> generic_arguments) {
               StringBuilder ret = new StringBuilder();
               ret.Append(type);
               if (generic_arguments != null && generic_arguments.Count > 0) {
                  bool first = true;
                  ret.Append("<");
                  foreach (string a in generic_arguments) {
                     if (!first)
                        ret.Append(",");
                     ret.Append(a);
                     first = false;
                  }
                  ret.Append(">");
               }
               return ret.ToString();
            }

            // Merges part into combined
        //     protected void mergePartialTypes(ClassDescriptor combined, ClassDescriptor part) {
        // 
        //        // append comments
        //        combined.Comments += part.Comments;
        //        
        //        // union all attributes
        //        CommonTree attRoot = (CommonTree)adaptor.Nil;
        //        adaptor.AddChild(attRoot, combined.Atts); 
        //        adaptor.AddChild(attRoot, part.Atts); 
        //        combined.Atts = (CommonTree)adaptor.RulePostProcessing(attRoot);
        // 
        //        // merge all modifiers
        //        combined.Mods = mergeModifiers(combined.Mods, part.Mods);
        // 
        //        // type parameter list must be the same on all parts
        //           
        //        // all parts that have a TypeParameterConstraintsClauses must agree 
        //        if (combined.TypeParameterConstraintsClauses == null)
        //           combined.TypeParameterConstraintsClauses = part.TypeParameterConstraintsClauses;
        // 
        //        // merge all base classes, interfaces
        //        combined.ClassBase = mergeModifiers(combined.ClassBase, part.ClassBase);
        // 
        //        // union all class_body
        //        CommonTree bodyRoot = (CommonTree)adaptor.Nil;
        //        adaptor.AddChild(bodyRoot, combined.ClassBody); 
        //        adaptor.AddChild(bodyRoot, part.ClassBody); 
        //        combined.ClassBody = (CommonTree)adaptor.RulePostProcessing(bodyRoot);
        // 
        //        // merge partial sub-types
        //        foreach (string key in combined.PartialTypes.Keys) {
        //           if (part.PartialTypes.ContainsKey(key)) {
        //                 mergePartialTypes(combined.PartialTypes[key], part.PartialTypes[key]);  
        //           }
        //        }
        //        // Add types in part but not combined
        //        foreach (string key in part.PartialTypes.Keys) {
        //           if (!combined.PartialTypes.ContainsKey(key)) {
        //              combined.PartialTypes[key] = part.PartialTypes[key];  
        //           }
        //        }
        //     }
         
        //    protected CommonTree emitPartialTypes(Dictionary<string,ClassDescriptor> partialTypes) {
        //        CommonTree root = (CommonTree)adaptor.Nil;
        //        foreach (ClassDescriptor part in partialTypes.Values) {
        //           root.AddChild((CommonTree)magicClassFromDescriptor(part.Token, part).Tree);
        //        }
        //        return (CommonTree)adaptor.RulePostProcessing(root);
        //    }

        //     protected void mergeCompUnits(CUnit cu, List<string> searchPath, List<string> aliasKeys, List<string> aliasNamespaces) {
        //        foreach (string s in searchPath) {
        //           if (!cu.SearchPath.Contains(s)) {
        //              cu.SearchPath.Add(s);
        //           }
        //           for (int i = 0; i < aliasKeys.Count; i++) {
        //              // TODO: ?? Assume alias -> namespace mapping is the same in all files ....
        //              if (!cu.NameSpaceAliasKeys.Contains(aliasKeys[i])) {
        //                 cu.NameSpaceAliasKeys.Add(aliasKeys[i]);
        //                 cu.NameSpaceAliasValues.Add(aliasNamespaces[i]);
        //              }
        //           }
        //        }
        //     }
        // 


        public class compilation_unit_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "compilation_unit"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:663:8: public compilation_unit : namespace_body ;
        public JavaMaker.compilation_unit_return compilation_unit() // throws RecognitionException [1]
        {   
            NSContext_stack.Push(new NSContext_scope());
            TypeContext_stack.Push(new TypeContext_scope());

            JavaMaker.compilation_unit_return retval = new JavaMaker.compilation_unit_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.namespace_body_return namespace_body1 = default(JavaMaker.namespace_body_return);




                ((NSContext_scope)NSContext_stack.Peek()).currentNS =  "";
                ((NSContext_scope)NSContext_stack.Peek()).namespaces =  new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).aliasKeys =  new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).aliasNamespaces =  new List<string>();

                ((TypeContext_scope)TypeContext_stack.Peek()).typeName =  null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:679:1: ( namespace_body )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:680:2: namespace_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_namespace_body_in_compilation_unit124);
                	namespace_body1 = namespace_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, namespace_body1.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                NSContext_stack.Pop();
                TypeContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "compilation_unit"

        public class namespace_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "namespace_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:682:1: namespace_declaration : 'namespace' qi= qualified_identifier namespace_block ( ';' )? ;
        public JavaMaker.namespace_declaration_return namespace_declaration() // throws RecognitionException [1]
        {   
            NSContext_stack.Push(new NSContext_scope());

            JavaMaker.namespace_declaration_return retval = new JavaMaker.namespace_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal2 = null;
            CommonTree char_literal4 = null;
            JavaMaker.qualified_identifier_return qi = default(JavaMaker.qualified_identifier_return);

            JavaMaker.namespace_block_return namespace_block3 = default(JavaMaker.namespace_block_return);


            CommonTree string_literal2_tree=null;
            CommonTree char_literal4_tree=null;


                ((NSContext_scope)NSContext_stack.Peek()).currentNS =  "";
                ((NSContext_scope)NSContext_stack.Peek()).namespaces =  new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).aliasKeys =  new List<string>();
                ((NSContext_scope)NSContext_stack.Peek()).aliasNamespaces =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:689:2: ( 'namespace' qi= qualified_identifier namespace_block ( ';' )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:690:2: 'namespace' qi= qualified_identifier namespace_block ( ';' )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal2=(CommonTree)Match(input,193,FOLLOW_193_in_namespace_declaration142); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal2_tree = (CommonTree)adaptor.DupNode(string_literal2);

                		adaptor.AddChild(root_0, string_literal2_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_qualified_identifier_in_namespace_declaration148);
                	qi = qualified_identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, qi.Tree);
                	if ( (state.backtracking==0) )
                	{
                	       
                	          // extend parent namespace
                	          ((NSContext_scope)NSContext_stack.Peek()).currentNS =  this.ParentNameSpace + ((qi != null) ? qi.thetext : default(string));
                	          ((NSContext_scope)NSContext_stack.Peek()).namespaces.Add(((NSContext_scope)NSContext_stack.Peek()).currentNS);
                	      
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_namespace_block_in_namespace_declaration160);
                	namespace_block3 = namespace_block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, namespace_block3.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:696:23: ( ';' )?
                	int alt1 = 2;
                	int LA1_0 = input.LA(1);

                	if ( (LA1_0 == SEMI) )
                	{
                	    alt1 = 1;
                	}
                	switch (alt1) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:696:23: ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal4=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_namespace_declaration164); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal4_tree = (CommonTree)adaptor.DupNode(char_literal4);

                	        		adaptor.AddChild(root_0, char_literal4_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                NSContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "namespace_declaration"

        public class namespace_block_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "namespace_block"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:697:1: namespace_block : '{' namespace_body '}' ;
        public JavaMaker.namespace_block_return namespace_block() // throws RecognitionException [1]
        {   
            JavaMaker.namespace_block_return retval = new JavaMaker.namespace_block_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal5 = null;
            CommonTree char_literal7 = null;
            JavaMaker.namespace_body_return namespace_body6 = default(JavaMaker.namespace_body_return);


            CommonTree char_literal5_tree=null;
            CommonTree char_literal7_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:697:16: ( '{' namespace_body '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:698:2: '{' namespace_body '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal5=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_namespace_block173); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal5_tree = (CommonTree)adaptor.DupNode(char_literal5);

                		adaptor.AddChild(root_0, char_literal5_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_namespace_body_in_namespace_block177);
                	namespace_body6 = namespace_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, namespace_body6.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal7=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_namespace_block181); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal7_tree = (CommonTree)adaptor.DupNode(char_literal7);

                		adaptor.AddChild(root_0, char_literal7_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "namespace_block"

        public class namespace_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "namespace_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:699:1: namespace_body : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
        public JavaMaker.namespace_body_return namespace_body() // throws RecognitionException [1]
        {   
            JavaMaker.namespace_body_return retval = new JavaMaker.namespace_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.extern_alias_directives_return extern_alias_directives8 = default(JavaMaker.extern_alias_directives_return);

            JavaMaker.using_directives_return using_directives9 = default(JavaMaker.using_directives_return);

            JavaMaker.global_attributes_return global_attributes10 = default(JavaMaker.global_attributes_return);

            JavaMaker.namespace_member_declarations_return namespace_member_declarations11 = default(JavaMaker.namespace_member_declarations_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:699:15: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:2: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:2: ( extern_alias_directives )?
                	int alt2 = 2;
                	int LA2_0 = input.LA(1);

                	if ( (LA2_0 == 194) )
                	{
                	    int LA2_1 = input.LA(2);

                	    if ( (LA2_1 == 195) )
                	    {
                	        alt2 = 1;
                	    }
                	}
                	switch (alt2) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:2: extern_alias_directives
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_extern_alias_directives_in_namespace_body189);
                	        	extern_alias_directives8 = extern_alias_directives();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, extern_alias_directives8.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:29: ( using_directives )?
                	int alt3 = 2;
                	int LA3_0 = input.LA(1);

                	if ( (LA3_0 == USING) )
                	{
                	    alt3 = 1;
                	}
                	switch (alt3) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:29: using_directives
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_using_directives_in_namespace_body194);
                	        	using_directives9 = using_directives();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, using_directives9.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:49: ( global_attributes )?
                	int alt4 = 2;
                	int LA4_0 = input.LA(1);

                	if ( (LA4_0 == OPEN_BRACKET) )
                	{
                	    int LA4_1 = input.LA(2);

                	    if ( ((LA4_1 >= 237 && LA4_1 <= 238)) )
                	    {
                	        int LA4_3 = input.LA(3);

                	        if ( (LA4_3 == 211) )
                	        {
                	            alt4 = 1;
                	        }
                	    }
                	}
                	switch (alt4) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:49: global_attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_global_attributes_in_namespace_body199);
                	        	global_attributes10 = global_attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, global_attributes10.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:70: ( namespace_member_declarations )?
                	int alt5 = 2;
                	int LA5_0 = input.LA(1);

                	if ( (LA5_0 == ENUM || (LA5_0 >= PUBLIC && LA5_0 <= STATIC) || LA5_0 == OPEN_BRACKET || (LA5_0 >= 193 && LA5_0 <= 194) || (LA5_0 >= 196 && LA5_0 <= 204) || LA5_0 == 218 || LA5_0 == 245 || LA5_0 == 255 || LA5_0 == 258) )
                	{
                	    alt5 = 1;
                	}
                	switch (alt5) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:700:70: namespace_member_declarations
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_namespace_member_declarations_in_namespace_body204);
                	        	namespace_member_declarations11 = namespace_member_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, namespace_member_declarations11.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "namespace_body"

        public class extern_alias_directives_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "extern_alias_directives"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:701:1: extern_alias_directives : ( extern_alias_directive )+ ;
        public JavaMaker.extern_alias_directives_return extern_alias_directives() // throws RecognitionException [1]
        {   
            JavaMaker.extern_alias_directives_return retval = new JavaMaker.extern_alias_directives_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.extern_alias_directive_return extern_alias_directive12 = default(JavaMaker.extern_alias_directive_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:701:24: ( ( extern_alias_directive )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:702:2: ( extern_alias_directive )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:702:2: ( extern_alias_directive )+
                	int cnt6 = 0;
                	do 
                	{
                	    int alt6 = 2;
                	    int LA6_0 = input.LA(1);

                	    if ( (LA6_0 == 194) )
                	    {
                	        int LA6_2 = input.LA(2);

                	        if ( (LA6_2 == 195) )
                	        {
                	            alt6 = 1;
                	        }


                	    }


                	    switch (alt6) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:702:2: extern_alias_directive
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives213);
                			    	extern_alias_directive12 = extern_alias_directive();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, extern_alias_directive12.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt6 >= 1 ) goto loop6;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee6 =
                		                new EarlyExitException(6, input);
                		            throw eee6;
                	    }
                	    cnt6++;
                	} while (true);

                	loop6:
                		;	// Stops C# compiler whining that label 'loop6' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "extern_alias_directives"

        public class extern_alias_directive_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "extern_alias_directive"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:703:1: extern_alias_directive : e= 'extern' 'alias' i= identifier ';' ;
        public JavaMaker.extern_alias_directive_return extern_alias_directive() // throws RecognitionException [1]
        {   
            JavaMaker.extern_alias_directive_return retval = new JavaMaker.extern_alias_directive_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree e = null;
            CommonTree string_literal13 = null;
            CommonTree char_literal14 = null;
            JavaMaker.identifier_return i = default(JavaMaker.identifier_return);


            CommonTree e_tree=null;
            CommonTree string_literal13_tree=null;
            CommonTree char_literal14_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:703:23: (e= 'extern' 'alias' i= identifier ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:704:2: e= 'extern' 'alias' i= identifier ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	e=(CommonTree)Match(input,194,FOLLOW_194_in_extern_alias_directive224); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{e_tree = (CommonTree)adaptor.DupNode(e);

                		adaptor.AddChild(root_0, e_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	string_literal13=(CommonTree)Match(input,195,FOLLOW_195_in_extern_alias_directive228); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal13_tree = (CommonTree)adaptor.DupNode(string_literal13);

                		adaptor.AddChild(root_0, string_literal13_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_extern_alias_directive234);
                	i = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, i.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal14=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_extern_alias_directive237); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal14_tree = (CommonTree)adaptor.DupNode(char_literal14);

                		adaptor.AddChild(root_0, char_literal14_tree);
                	}
                	if ( (state.backtracking==0) )
                	{
                	   Warning(((e != null) ? e.Line : 0), "[UNSUPPORTED] External Alias " + ((i != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(i.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(i.Start)) : null)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "extern_alias_directive"

        public class using_directives_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "using_directives"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:705:1: using_directives : ( using_directive )+ ;
        public JavaMaker.using_directives_return using_directives() // throws RecognitionException [1]
        {   
            JavaMaker.using_directives_return retval = new JavaMaker.using_directives_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.using_directive_return using_directive15 = default(JavaMaker.using_directive_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:705:17: ( ( using_directive )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:706:2: ( using_directive )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:706:2: ( using_directive )+
                	int cnt7 = 0;
                	do 
                	{
                	    int alt7 = 2;
                	    int LA7_0 = input.LA(1);

                	    if ( (LA7_0 == USING) )
                	    {
                	        alt7 = 1;
                	    }


                	    switch (alt7) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:706:2: using_directive
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_using_directive_in_using_directives247);
                			    	using_directive15 = using_directive();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, using_directive15.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt7 >= 1 ) goto loop7;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee7 =
                		                new EarlyExitException(7, input);
                		            throw eee7;
                	    }
                	    cnt7++;
                	} while (true);

                	loop7:
                		;	// Stops C# compiler whining that label 'loop7' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "using_directives"

        public class using_directive_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "using_directive"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:707:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
        public JavaMaker.using_directive_return using_directive() // throws RecognitionException [1]
        {   
            JavaMaker.using_directive_return retval = new JavaMaker.using_directive_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.using_alias_directive_return using_alias_directive16 = default(JavaMaker.using_alias_directive_return);

            JavaMaker.using_namespace_directive_return using_namespace_directive17 = default(JavaMaker.using_namespace_directive_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:707:16: ( ( using_alias_directive | using_namespace_directive ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:708:2: ( using_alias_directive | using_namespace_directive )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:708:2: ( using_alias_directive | using_namespace_directive )
                	int alt8 = 2;
                	int LA8_0 = input.LA(1);

                	if ( (LA8_0 == USING) )
                	{
                	    int LA8_1 = input.LA(2);

                	    if ( (LA8_1 == IDENTIFIER) )
                	    {
                	        int LA8_2 = input.LA(3);

                	        if ( (LA8_2 == LTHAN || LA8_2 == DOT || LA8_2 == SEMI || LA8_2 == 208) )
                	        {
                	            alt8 = 2;
                	        }
                	        else if ( (LA8_2 == ASSIGN) )
                	        {
                	            alt8 = 1;
                	        }
                	        else 
                	        {
                	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	            NoViableAltException nvae_d8s2 =
                	                new NoViableAltException("", 8, 2, input);

                	            throw nvae_d8s2;
                	        }
                	    }
                	    else if ( ((LA8_1 >= ELIF && LA8_1 <= UNDEF) || LA8_1 == 195 || LA8_1 == 221 || (LA8_1 >= 224 && LA8_1 <= 239) || (LA8_1 >= 241 && LA8_1 <= 244) || (LA8_1 >= 247 && LA8_1 <= 250) || LA8_1 == 256 || (LA8_1 >= 263 && LA8_1 <= 264) || LA8_1 == 274 || LA8_1 == 277) )
                	    {
                	        int LA8_3 = input.LA(3);

                	        if ( (LA8_3 == LTHAN || LA8_3 == DOT || LA8_3 == SEMI || LA8_3 == 208) )
                	        {
                	            alt8 = 2;
                	        }
                	        else if ( (LA8_3 == ASSIGN) )
                	        {
                	            alt8 = 1;
                	        }
                	        else 
                	        {
                	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	            NoViableAltException nvae_d8s3 =
                	                new NoViableAltException("", 8, 3, input);

                	            throw nvae_d8s3;
                	        }
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d8s1 =
                	            new NoViableAltException("", 8, 1, input);

                	        throw nvae_d8s1;
                	    }
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d8s0 =
                	        new NoViableAltException("", 8, 0, input);

                	    throw nvae_d8s0;
                	}
                	switch (alt8) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:708:3: using_alias_directive
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_using_alias_directive_in_using_directive257);
                	        	using_alias_directive16 = using_alias_directive();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, using_alias_directive16.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:709:4: using_namespace_directive
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_using_namespace_directive_in_using_directive262);
                	        	using_namespace_directive17 = using_namespace_directive();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, using_namespace_directive17.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "using_directive"

        public class using_alias_directive_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "using_alias_directive"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:710:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
        public JavaMaker.using_alias_directive_return using_alias_directive() // throws RecognitionException [1]
        {   
            JavaMaker.using_alias_directive_return retval = new JavaMaker.using_alias_directive_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal18 = null;
            CommonTree char_literal20 = null;
            CommonTree char_literal22 = null;
            JavaMaker.identifier_return identifier19 = default(JavaMaker.identifier_return);

            JavaMaker.namespace_or_type_name_return namespace_or_type_name21 = default(JavaMaker.namespace_or_type_name_return);


            CommonTree string_literal18_tree=null;
            CommonTree char_literal20_tree=null;
            CommonTree char_literal22_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:710:22: ( 'using' identifier '=' namespace_or_type_name ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:711:2: 'using' identifier '=' namespace_or_type_name ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal18=(CommonTree)Match(input,USING,FOLLOW_USING_in_using_alias_directive271); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal18_tree = (CommonTree)adaptor.DupNode(string_literal18);

                		adaptor.AddChild(root_0, string_literal18_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_using_alias_directive275);
                	identifier19 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier19.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal20=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_using_alias_directive279); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal20_tree = (CommonTree)adaptor.DupNode(char_literal20);

                		adaptor.AddChild(root_0, char_literal20_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive283);
                	namespace_or_type_name21 = namespace_or_type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, namespace_or_type_name21.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal22=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_using_alias_directive287); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal22_tree = (CommonTree)adaptor.DupNode(char_literal22);

                		adaptor.AddChild(root_0, char_literal22_tree);
                	}
                	if ( (state.backtracking==0) )
                	{
                	  ((NSContext_scope)NSContext_stack.Peek()).aliasKeys.Add(((identifier19 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(identifier19.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(identifier19.Start)) : null));((NSContext_scope)NSContext_stack.Peek()).aliasNamespaces.Add(((namespace_or_type_name21 != null) ? namespace_or_type_name21.thetext : default(string))); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "using_alias_directive"

        public class using_namespace_directive_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "using_namespace_directive"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:713:1: using_namespace_directive : 'using' namespace_name ';' ;
        public JavaMaker.using_namespace_directive_return using_namespace_directive() // throws RecognitionException [1]
        {   
            JavaMaker.using_namespace_directive_return retval = new JavaMaker.using_namespace_directive_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal23 = null;
            CommonTree char_literal25 = null;
            JavaMaker.namespace_name_return namespace_name24 = default(JavaMaker.namespace_name_return);


            CommonTree string_literal23_tree=null;
            CommonTree char_literal25_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:713:26: ( 'using' namespace_name ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:714:2: 'using' namespace_name ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal23=(CommonTree)Match(input,USING,FOLLOW_USING_in_using_namespace_directive306); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal23_tree = (CommonTree)adaptor.DupNode(string_literal23);

                		adaptor.AddChild(root_0, string_literal23_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_namespace_name_in_using_namespace_directive310);
                	namespace_name24 = namespace_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, namespace_name24.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal25=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_using_namespace_directive314); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal25_tree = (CommonTree)adaptor.DupNode(char_literal25);

                		adaptor.AddChild(root_0, char_literal25_tree);
                	}
                	if ( (state.backtracking==0) )
                	{
                	  ((NSContext_scope)NSContext_stack.Peek()).namespaces.Add(((namespace_name24 != null) ? namespace_name24.thetext : default(string))); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "using_namespace_directive"

        public class namespace_member_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "namespace_member_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:715:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
        public JavaMaker.namespace_member_declarations_return namespace_member_declarations() // throws RecognitionException [1]
        {   
            JavaMaker.namespace_member_declarations_return retval = new JavaMaker.namespace_member_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.namespace_member_declaration_return namespace_member_declaration26 = default(JavaMaker.namespace_member_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:715:30: ( ( namespace_member_declaration )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:716:2: ( namespace_member_declaration )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:716:2: ( namespace_member_declaration )+
                	int cnt9 = 0;
                	do 
                	{
                	    int alt9 = 2;
                	    int LA9_0 = input.LA(1);

                	    if ( (LA9_0 == ENUM || (LA9_0 >= PUBLIC && LA9_0 <= STATIC) || LA9_0 == OPEN_BRACKET || (LA9_0 >= 193 && LA9_0 <= 194) || (LA9_0 >= 196 && LA9_0 <= 204) || LA9_0 == 218 || LA9_0 == 245 || LA9_0 == 255 || LA9_0 == 258) )
                	    {
                	        alt9 = 1;
                	    }


                	    switch (alt9) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:716:2: namespace_member_declaration
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations323);
                			    	namespace_member_declaration26 = namespace_member_declaration();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, namespace_member_declaration26.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt9 >= 1 ) goto loop9;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee9 =
                		                new EarlyExitException(9, input);
                		            throw eee9;
                	    }
                	    cnt9++;
                	} while (true);

                	loop9:
                		;	// Stops C# compiler whining that label 'loop9' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "namespace_member_declarations"

        public class namespace_member_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "namespace_member_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:717:1: namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? ty= type_declaration[atts, mangleModifiersForType(mods)] );
        public JavaMaker.namespace_member_declaration_return namespace_member_declaration() // throws RecognitionException [1]
        {   
            TypeContext_stack.Push(new TypeContext_scope());

            JavaMaker.namespace_member_declaration_return retval = new JavaMaker.namespace_member_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_declaration_return ty = default(JavaMaker.type_declaration_return);

            JavaMaker.namespace_declaration_return namespace_declaration27 = default(JavaMaker.namespace_declaration_return);

            JavaMaker.attributes_return attributes28 = default(JavaMaker.attributes_return);

            JavaMaker.modifiers_return modifiers29 = default(JavaMaker.modifiers_return);



             string ns = ((NSContext_scope)NSContext_stack.Peek()).currentNS; 
                    bool isCompUnit = false;
                    CommonTree atts = null;
                    CommonTree mods = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:739:2: ( namespace_declaration | ( attributes )? ( modifiers )? ty= type_declaration[atts, mangleModifiersForType(mods)] )
                int alt12 = 2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0 == 193) )
                {
                    alt12 = 1;
                }
                else if ( (LA12_0 == ENUM || (LA12_0 >= PUBLIC && LA12_0 <= STATIC) || LA12_0 == OPEN_BRACKET || LA12_0 == 194 || (LA12_0 >= 196 && LA12_0 <= 204) || LA12_0 == 218 || LA12_0 == 245 || LA12_0 == 255 || LA12_0 == 258) )
                {
                    alt12 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d12s0 =
                        new NoViableAltException("", 12, 0, input);

                    throw nvae_d12s0;
                }
                switch (alt12) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:740:2: namespace_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration347);
                        	namespace_declaration27 = namespace_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, namespace_declaration27.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:741:4: ( attributes )? ( modifiers )? ty= type_declaration[atts, mangleModifiersForType(mods)]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:741:4: ( attributes )?
                        	int alt10 = 2;
                        	int LA10_0 = input.LA(1);

                        	if ( (LA10_0 == OPEN_BRACKET) )
                        	{
                        	    alt10 = 1;
                        	}
                        	switch (alt10) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:741:4: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_namespace_member_declaration352);
                        	        	attributes28 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, attributes28.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   atts = dupTree(((attributes28 != null) ? ((CommonTree)attributes28.Tree) : null)); 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:741:55: ( modifiers )?
                        	int alt11 = 2;
                        	int LA11_0 = input.LA(1);

                        	if ( ((LA11_0 >= PUBLIC && LA11_0 <= STATIC) || LA11_0 == 194 || (LA11_0 >= 197 && LA11_0 <= 204)) )
                        	{
                        	    alt11 = 1;
                        	}
                        	switch (alt11) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:741:55: modifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_modifiers_in_namespace_member_declaration358);
                        	        	modifiers29 = modifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, modifiers29.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   mods = dupTree(((modifiers29 != null) ? ((CommonTree)modifiers29.Tree) : null)); 
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_declaration_in_namespace_member_declaration366);
                        	ty = type_declaration(atts, mangleModifiersForType(mods));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, ty.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   isCompUnit = true; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (isCompUnit) {
                         foreach (KeyValuePair<String, CommonTree> treeEntry in ((ty != null) ? ty.compUnits : default(Dictionary<String,CommonTree>))) {
                            if (treeEntry.Value != null) {
                               string fqn = ns+(String.IsNullOrEmpty(ns) ? "" : ".")+treeEntry.Key;
                               if (CUKeys.Contains(fqn)) {
                                  Warning(treeEntry.Value.Token.Line, "[UNSUPPORTED] Cannot have a class with multiple generic type overloadings: " + fqn);
                               }
                               else {
                                  CUMap.Add(fqn, new CUnit(mkPackage(treeEntry.Value.Token, treeEntry.Value, ns),CollectSearchPath,CollectAliasKeys,CollectAliasNamespaces, ((ty != null) ? ty.isPartial : default(bool)))); 
                                  CUKeys.Add(fqn);
                               }
                            }
                         } 
                      }

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                TypeContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "namespace_member_declaration"

        public class type_declaration_return : TreeRuleReturnScope
        {
            public Dictionary<String,CommonTree> compUnits;
            public bool isPartial;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:745:1: type_declaration[CommonTree atts, CommonTree mods] returns [Dictionary<String,CommonTree> compUnits, bool isPartial] : ( ( 'partial' )=>p= 'partial' (pc= class_declaration[$atts, $mods, $p, true /* toplevel */] | ps= struct_declaration[$atts, $mods, $p, true /* toplevel */] | pi= interface_declaration[$atts, $mods, $p] ) | c= class_declaration[$atts, $mods, null, true /* toplevel */] | s= struct_declaration[$atts, $mods, null, true /* toplevel */] | i= interface_declaration[$atts, $mods, null] | e= enum_declaration[$atts, $mods] | d= delegate_declaration[$atts, $mods, true /* toplevel */] );
        public JavaMaker.type_declaration_return type_declaration(CommonTree atts, CommonTree mods) // throws RecognitionException [1]
        {   
            JavaMaker.type_declaration_return retval = new JavaMaker.type_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree p = null;
            JavaMaker.class_declaration_return pc = default(JavaMaker.class_declaration_return);

            JavaMaker.struct_declaration_return ps = default(JavaMaker.struct_declaration_return);

            JavaMaker.interface_declaration_return pi = default(JavaMaker.interface_declaration_return);

            JavaMaker.class_declaration_return c = default(JavaMaker.class_declaration_return);

            JavaMaker.struct_declaration_return s = default(JavaMaker.struct_declaration_return);

            JavaMaker.interface_declaration_return i = default(JavaMaker.interface_declaration_return);

            JavaMaker.enum_declaration_return e = default(JavaMaker.enum_declaration_return);

            JavaMaker.delegate_declaration_return d = default(JavaMaker.delegate_declaration_return);


            CommonTree p_tree=null;


               retval.compUnits =  new Dictionary<String,CommonTree>();
               retval.isPartial =  false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:750:1: ( ( 'partial' )=>p= 'partial' (pc= class_declaration[$atts, $mods, $p, true /* toplevel */] | ps= struct_declaration[$atts, $mods, $p, true /* toplevel */] | pi= interface_declaration[$atts, $mods, $p] ) | c= class_declaration[$atts, $mods, null, true /* toplevel */] | s= struct_declaration[$atts, $mods, null, true /* toplevel */] | i= interface_declaration[$atts, $mods, null] | e= enum_declaration[$atts, $mods] | d= delegate_declaration[$atts, $mods, true /* toplevel */] )
                int alt14 = 6;
                int LA14_0 = input.LA(1);

                if ( (LA14_0 == 196) && (synpred1_JavaMaker()) )
                {
                    alt14 = 1;
                }
                else if ( (LA14_0 == 245) )
                {
                    alt14 = 2;
                }
                else if ( (LA14_0 == 255) )
                {
                    alt14 = 3;
                }
                else if ( (LA14_0 == 258) )
                {
                    alt14 = 4;
                }
                else if ( (LA14_0 == ENUM) )
                {
                    alt14 = 5;
                }
                else if ( (LA14_0 == 218) )
                {
                    alt14 = 6;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d14s0 =
                        new NoViableAltException("", 14, 0, input);

                    throw nvae_d14s0;
                }
                switch (alt14) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:751:5: ( 'partial' )=>p= 'partial' (pc= class_declaration[$atts, $mods, $p, true /* toplevel */] | ps= struct_declaration[$atts, $mods, $p, true /* toplevel */] | pi= interface_declaration[$atts, $mods, $p] )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	p=(CommonTree)Match(input,196,FOLLOW_196_in_type_declaration407); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{p_tree = (CommonTree)adaptor.DupNode(p);

                        		adaptor.AddChild(root_0, p_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.isPartial =  true; 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:752:33: (pc= class_declaration[$atts, $mods, $p, true /* toplevel */] | ps= struct_declaration[$atts, $mods, $p, true /* toplevel */] | pi= interface_declaration[$atts, $mods, $p] )
                        	int alt13 = 3;
                        	switch ( input.LA(1) ) 
                        	{
                        	case 245:
                        		{
                        	    alt13 = 1;
                        	    }
                        	    break;
                        	case 255:
                        		{
                        	    alt13 = 2;
                        	    }
                        	    break;
                        	case 258:
                        		{
                        	    alt13 = 3;
                        	    }
                        	    break;
                        		default:
                        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        		    NoViableAltException nvae_d13s0 =
                        		        new NoViableAltException("", 13, 0, input);

                        		    throw nvae_d13s0;
                        	}

                        	switch (alt13) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:752:34: pc= class_declaration[$atts, $mods, $p, true /* toplevel */]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_class_declaration_in_type_declaration447);
                        	        	pc = class_declaration(atts, mods, p, true /* toplevel */);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, pc.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.compUnits.Add(((pc != null) ? pc.name : default(string)), ((pc != null) ? ((CommonTree)pc.Tree) : null)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:753:11: ps= struct_declaration[$atts, $mods, $p, true /* toplevel */]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_struct_declaration_in_type_declaration474);
                        	        	ps = struct_declaration(atts, mods, p, true /* toplevel */);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, ps.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.compUnits.Add(((ps != null) ? ps.name : default(string)), ((ps != null) ? ((CommonTree)ps.Tree) : null)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 3 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:754:11: pi= interface_declaration[$atts, $mods, $p]
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_interface_declaration_in_type_declaration499);
                        	        	pi = interface_declaration(atts, mods, p);
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, pi.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.compUnits.Add(((pi != null) ? pi.name : default(string)), ((pi != null) ? ((CommonTree)pi.Tree) : null)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:755:4: c= class_declaration[$atts, $mods, null, true /* toplevel */]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_class_declaration_in_type_declaration537);
                        	c = class_declaration(atts, mods, null, true /* toplevel */);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, c.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.compUnits.Add(((c != null) ? c.name : default(string)), ((c != null) ? ((CommonTree)c.Tree) : null)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:756:4: s= struct_declaration[$atts, $mods, null, true /* toplevel */]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_struct_declaration_in_type_declaration554);
                        	s = struct_declaration(atts, mods, null, true /* toplevel */);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, s.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.compUnits.Add(((s != null) ? s.name : default(string)), ((s != null) ? ((CommonTree)s.Tree) : null)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:757:4: i= interface_declaration[$atts, $mods, null]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_interface_declaration_in_type_declaration570);
                        	i = interface_declaration(atts, mods, null);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, i.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.compUnits.Add(((i != null) ? i.name : default(string)), ((i != null) ? ((CommonTree)i.Tree) : null)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:758:4: e= enum_declaration[$atts, $mods]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_enum_declaration_in_type_declaration604);
                        	e = enum_declaration(atts, mods);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, e.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.compUnits.Add(((e != null) ? e.name : default(string)), ((e != null) ? ((CommonTree)e.Tree) : null)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:759:4: d= delegate_declaration[$atts, $mods, true /* toplevel */]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_delegate_declaration_in_type_declaration643);
                        	d = delegate_declaration(atts, mods, true /* toplevel */);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, d.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.compUnits =  ((d != null) ? d.compUnits : default(Dictionary<String, CommonTree>)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_declaration"

        public class qualified_identifier_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qualified_identifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:762:1: qualified_identifier returns [string thetext] : i1= identifier ( '.' ip= identifier )* ;
        public JavaMaker.qualified_identifier_return qualified_identifier() // throws RecognitionException [1]
        {   
            JavaMaker.qualified_identifier_return retval = new JavaMaker.qualified_identifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal30 = null;
            JavaMaker.identifier_return i1 = default(JavaMaker.identifier_return);

            JavaMaker.identifier_return ip = default(JavaMaker.identifier_return);


            CommonTree char_literal30_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:762:46: (i1= identifier ( '.' ip= identifier )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:763:2: i1= identifier ( '.' ip= identifier )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_qualified_identifier669);
                	i1 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, i1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext =  ((i1 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(i1.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(i1.Start)) : null); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:763:41: ( '.' ip= identifier )*
                	do 
                	{
                	    int alt15 = 2;
                	    int LA15_0 = input.LA(1);

                	    if ( (LA15_0 == DOT) )
                	    {
                	        alt15 = 1;
                	    }


                	    switch (alt15) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:763:42: '.' ip= identifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal30=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_qualified_identifier674); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal30_tree = (CommonTree)adaptor.DupNode(char_literal30);

                			    		adaptor.AddChild(root_0, char_literal30_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_identifier_in_qualified_identifier678);
                			    	ip = identifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, ip.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.thetext += "." + ((ip != null) ? input.TokenStream.ToString(
                			    	    input.TreeAdaptor.GetTokenStartIndex(ip.Start),
                			    	    input.TreeAdaptor.GetTokenStopIndex(ip.Start)) : null); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop15;
                	    }
                	} while (true);

                	loop15:
                		;	// Stops C# compiler whining that label 'loop15' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qualified_identifier"

        public class namespace_name_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "namespace_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:764:1: namespace_name returns [string thetext] : namespace_or_type_name ;
        public JavaMaker.namespace_name_return namespace_name() // throws RecognitionException [1]
        {   
            JavaMaker.namespace_name_return retval = new JavaMaker.namespace_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.namespace_or_type_name_return namespace_or_type_name31 = default(JavaMaker.namespace_or_type_name_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:765:2: ( namespace_or_type_name )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:765:4: namespace_or_type_name
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_namespace_or_type_name_in_namespace_name695);
                	namespace_or_type_name31 = namespace_or_type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, namespace_or_type_name31.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext =  ((namespace_or_type_name31 != null) ? namespace_or_type_name31.thetext : default(string)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "namespace_name"

        public class modifiers_return : TreeRuleReturnScope
        {
            public List<string> modList;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "modifiers"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:767:1: modifiers returns [List<string> modList] : ( modifier )+ ;
        public JavaMaker.modifiers_return modifiers() // throws RecognitionException [1]
        {   
            JavaMaker.modifiers_return retval = new JavaMaker.modifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.modifier_return modifier32 = default(JavaMaker.modifier_return);




                retval.modList =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:770:2: ( ( modifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:771:3: ( modifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:771:3: ( modifier )+
                	int cnt16 = 0;
                	do 
                	{
                	    int alt16 = 2;
                	    int LA16_0 = input.LA(1);

                	    if ( ((LA16_0 >= PUBLIC && LA16_0 <= STATIC) || LA16_0 == 194 || (LA16_0 >= 197 && LA16_0 <= 204)) )
                	    {
                	        alt16 = 1;
                	    }


                	    switch (alt16) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:771:4: modifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_modifier_in_modifiers716);
                			    	modifier32 = modifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, modifier32.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   if (((modifier32 != null) ? ((CommonTree)modifier32.Tree) : null) != null) retval.modList.Add( ((modifier32 != null) ? ((CommonTree)modifier32.Tree) : null).Text); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt16 >= 1 ) goto loop16;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee16 =
                		                new EarlyExitException(16, input);
                		            throw eee16;
                	    }
                	    cnt16++;
                	} while (true);

                	loop16:
                		;	// Stops C# compiler whining that label 'loop16' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "modifiers"

        public class modifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "modifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:772:1: modifier : ( 'new' -> | 'public' | 'protected' | 'private' | i= 'internal' -> PUBLIC[$i.token, \"public\"] | 'unsafe' -> | 'abstract' | s= 'sealed' -> FINAL[$s.token, \"final\"] | 'static' | r= 'readonly' -> FINAL[$r.token, \"final\"] | 'volatile' | e= 'extern' | 'virtual' -> | 'override' ->);
        public JavaMaker.modifier_return modifier() // throws RecognitionException [1]
        {   
            JavaMaker.modifier_return retval = new JavaMaker.modifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree i = null;
            CommonTree s = null;
            CommonTree r = null;
            CommonTree e = null;
            CommonTree string_literal33 = null;
            CommonTree string_literal34 = null;
            CommonTree string_literal35 = null;
            CommonTree string_literal36 = null;
            CommonTree string_literal37 = null;
            CommonTree string_literal38 = null;
            CommonTree string_literal39 = null;
            CommonTree string_literal40 = null;
            CommonTree string_literal41 = null;
            CommonTree string_literal42 = null;

            CommonTree i_tree=null;
            CommonTree s_tree=null;
            CommonTree r_tree=null;
            CommonTree e_tree=null;
            CommonTree string_literal33_tree=null;
            CommonTree string_literal34_tree=null;
            CommonTree string_literal35_tree=null;
            CommonTree string_literal36_tree=null;
            CommonTree string_literal37_tree=null;
            CommonTree string_literal38_tree=null;
            CommonTree string_literal39_tree=null;
            CommonTree string_literal40_tree=null;
            CommonTree string_literal41_tree=null;
            CommonTree string_literal42_tree=null;
            RewriteRuleNodeStream stream_203 = new RewriteRuleNodeStream(adaptor,"token 203");
            RewriteRuleNodeStream stream_INTERNAL = new RewriteRuleNodeStream(adaptor,"token INTERNAL");
            RewriteRuleNodeStream stream_204 = new RewriteRuleNodeStream(adaptor,"token 204");
            RewriteRuleNodeStream stream_198 = new RewriteRuleNodeStream(adaptor,"token 198");
            RewriteRuleNodeStream stream_200 = new RewriteRuleNodeStream(adaptor,"token 200");
            RewriteRuleNodeStream stream_201 = new RewriteRuleNodeStream(adaptor,"token 201");
            RewriteRuleNodeStream stream_197 = new RewriteRuleNodeStream(adaptor,"token 197");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:772:9: ( 'new' -> | 'public' | 'protected' | 'private' | i= 'internal' -> PUBLIC[$i.token, \"public\"] | 'unsafe' -> | 'abstract' | s= 'sealed' -> FINAL[$s.token, \"final\"] | 'static' | r= 'readonly' -> FINAL[$r.token, \"final\"] | 'volatile' | e= 'extern' | 'virtual' -> | 'override' ->)
                int alt17 = 14;
                switch ( input.LA(1) ) 
                {
                case 197:
                	{
                    alt17 = 1;
                    }
                    break;
                case PUBLIC:
                	{
                    alt17 = 2;
                    }
                    break;
                case PROTECTED:
                	{
                    alt17 = 3;
                    }
                    break;
                case PRIVATE:
                	{
                    alt17 = 4;
                    }
                    break;
                case INTERNAL:
                	{
                    alt17 = 5;
                    }
                    break;
                case 198:
                	{
                    alt17 = 6;
                    }
                    break;
                case 199:
                	{
                    alt17 = 7;
                    }
                    break;
                case 200:
                	{
                    alt17 = 8;
                    }
                    break;
                case STATIC:
                	{
                    alt17 = 9;
                    }
                    break;
                case 201:
                	{
                    alt17 = 10;
                    }
                    break;
                case 202:
                	{
                    alt17 = 11;
                    }
                    break;
                case 194:
                	{
                    alt17 = 12;
                    }
                    break;
                case 203:
                	{
                    alt17 = 13;
                    }
                    break;
                case 204:
                	{
                    alt17 = 14;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d17s0 =
                	        new NoViableAltException("", 17, 0, input);

                	    throw nvae_d17s0;
                }

                switch (alt17) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:2: 'new'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal33=(CommonTree)Match(input,197,FOLLOW_197_in_modifier729); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_197.Add(string_literal33);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 773:8: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:33: 'public'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal34=(CommonTree)Match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier737); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal34_tree = (CommonTree)adaptor.DupNode(string_literal34);

                        		adaptor.AddChild(root_0, string_literal34_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:44: 'protected'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal35=(CommonTree)Match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier741); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal35_tree = (CommonTree)adaptor.DupNode(string_literal35);

                        		adaptor.AddChild(root_0, string_literal35_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:58: 'private'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal36=(CommonTree)Match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier745); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal36_tree = (CommonTree)adaptor.DupNode(string_literal36);

                        		adaptor.AddChild(root_0, string_literal36_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:70: i= 'internal'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	i=(CommonTree)Match(input,INTERNAL,FOLLOW_INTERNAL_in_modifier751); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_INTERNAL.Add(i);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 773:83: -> PUBLIC[$i.token, \"public\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(PUBLIC, i.token, "public"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:146: 'unsafe'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal37=(CommonTree)Match(input,198,FOLLOW_198_in_modifier762); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_198.Add(string_literal37);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 773:155: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:161: 'abstract'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal38=(CommonTree)Match(input,199,FOLLOW_199_in_modifier769); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal38_tree = (CommonTree)adaptor.DupNode(string_literal38);

                        		adaptor.AddChild(root_0, string_literal38_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:174: s= 'sealed'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	s=(CommonTree)Match(input,200,FOLLOW_200_in_modifier775); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_200.Add(s);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 773:185: -> FINAL[$s.token, \"final\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(FINAL, s.token, "final"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:773:215: 'static'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal39=(CommonTree)Match(input,STATIC,FOLLOW_STATIC_in_modifier784); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal39_tree = (CommonTree)adaptor.DupNode(string_literal39);

                        		adaptor.AddChild(root_0, string_literal39_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:774:4: r= 'readonly'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	r=(CommonTree)Match(input,201,FOLLOW_201_in_modifier791); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_201.Add(r);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 774:17: -> FINAL[$r.token, \"final\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(FINAL, r.token, "final"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:774:47: 'volatile'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal40=(CommonTree)Match(input,202,FOLLOW_202_in_modifier800); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal40_tree = (CommonTree)adaptor.DupNode(string_literal40);

                        		adaptor.AddChild(root_0, string_literal40_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:774:60: e= 'extern'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	e=(CommonTree)Match(input,194,FOLLOW_194_in_modifier806); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{e_tree = (CommonTree)adaptor.DupNode(e);

                        		adaptor.AddChild(root_0, e_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   Warning(((e != null) ? e.Line : 0), "[UNSUPPORTED] 'extern' modifier"); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:774:132: 'virtual'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal41=(CommonTree)Match(input,203,FOLLOW_203_in_modifier814); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_203.Add(string_literal41);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 774:142: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:774:147: 'override'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal42=(CommonTree)Match(input,204,FOLLOW_204_in_modifier820); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_204.Add(string_literal42);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 774:158: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "modifier"

        public class class_member_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_member_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:776:1: class_member_declaration : (a= attributes )? (m= modifiers )? (c= 'const' ct= type constant_declarators ';' -> ^( FIELD[$c.token, \"FIELD\"] ( $a)? ( $m)? $ct constant_declarators ) | ev= event_declaration[$a.tree, $m.tree] -> $ev | p= 'partial' (v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */] -> { $m3.tree != null}? $m3 -> | pi= interface_declaration[$a.tree, $m.tree, $p] -> $pi | pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $pc | ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $ps) | i= interface_declaration[$a.tree, $m.tree, null] -> $i | v2= void_type m1= method_declaration[$a.tree, $m.tree, modifierList, $v2.tree, $v2.text, false /* isPartial */] -> $m1 | t= type ( ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */] -> $m2 | ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree] -> $pd | ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree] -> $ix1 | ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null] -> $ix2 | field_declaration -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration ) | operator_declaration -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration ) ) | cd= class_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $cd | sd= struct_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $sd | ed= enum_declaration[$a.tree, $m.tree] -> $ed | dd= delegate_declaration[$a.tree, $m.tree, false /* toplevel */] -> | co3= conversion_operator_declaration -> ^( CONVERSION_OPERATOR[$co3.start.Token, \"CONVERSION\"] ( $a)? ( $m)? $co3) | con3= constructor_declaration[$a.tree, $m.tree, modifierList] -> $con3 | de3= destructor_declaration -> $de3) ;
        public JavaMaker.class_member_declaration_return class_member_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.class_member_declaration_return retval = new JavaMaker.class_member_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree p = null;
            CommonTree char_literal44 = null;
            CommonTree char_literal45 = null;
            JavaMaker.attributes_return a = default(JavaMaker.attributes_return);

            JavaMaker.modifiers_return m = default(JavaMaker.modifiers_return);

            JavaMaker.type_return ct = default(JavaMaker.type_return);

            JavaMaker.event_declaration_return ev = default(JavaMaker.event_declaration_return);

            JavaMaker.void_type_return v1 = default(JavaMaker.void_type_return);

            JavaMaker.method_declaration_return m3 = default(JavaMaker.method_declaration_return);

            JavaMaker.interface_declaration_return pi = default(JavaMaker.interface_declaration_return);

            JavaMaker.class_declaration_return pc = default(JavaMaker.class_declaration_return);

            JavaMaker.struct_declaration_return ps = default(JavaMaker.struct_declaration_return);

            JavaMaker.interface_declaration_return i = default(JavaMaker.interface_declaration_return);

            JavaMaker.void_type_return v2 = default(JavaMaker.void_type_return);

            JavaMaker.method_declaration_return m1 = default(JavaMaker.method_declaration_return);

            JavaMaker.type_return t = default(JavaMaker.type_return);

            JavaMaker.method_declaration_return m2 = default(JavaMaker.method_declaration_return);

            JavaMaker.property_declaration_return pd = default(JavaMaker.property_declaration_return);

            JavaMaker.type_name_return tn = default(JavaMaker.type_name_return);

            JavaMaker.indexer_declaration_return ix1 = default(JavaMaker.indexer_declaration_return);

            JavaMaker.indexer_declaration_return ix2 = default(JavaMaker.indexer_declaration_return);

            JavaMaker.class_declaration_return cd = default(JavaMaker.class_declaration_return);

            JavaMaker.struct_declaration_return sd = default(JavaMaker.struct_declaration_return);

            JavaMaker.enum_declaration_return ed = default(JavaMaker.enum_declaration_return);

            JavaMaker.delegate_declaration_return dd = default(JavaMaker.delegate_declaration_return);

            JavaMaker.conversion_operator_declaration_return co3 = default(JavaMaker.conversion_operator_declaration_return);

            JavaMaker.constructor_declaration_return con3 = default(JavaMaker.constructor_declaration_return);

            JavaMaker.destructor_declaration_return de3 = default(JavaMaker.destructor_declaration_return);

            JavaMaker.constant_declarators_return constant_declarators43 = default(JavaMaker.constant_declarators_return);

            JavaMaker.field_declaration_return field_declaration46 = default(JavaMaker.field_declaration_return);

            JavaMaker.operator_declaration_return operator_declaration47 = default(JavaMaker.operator_declaration_return);


            CommonTree c_tree=null;
            CommonTree p_tree=null;
            CommonTree char_literal44_tree=null;
            CommonTree char_literal45_tree=null;
            RewriteRuleNodeStream stream_205 = new RewriteRuleNodeStream(adaptor,"token 205");
            RewriteRuleNodeStream stream_DOT = new RewriteRuleNodeStream(adaptor,"token DOT");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_196 = new RewriteRuleNodeStream(adaptor,"token 196");
            RewriteRuleSubtreeStream stream_destructor_declaration = new RewriteRuleSubtreeStream(adaptor,"rule destructor_declaration");
            RewriteRuleSubtreeStream stream_class_declaration = new RewriteRuleSubtreeStream(adaptor,"rule class_declaration");
            RewriteRuleSubtreeStream stream_indexer_declaration = new RewriteRuleSubtreeStream(adaptor,"rule indexer_declaration");
            RewriteRuleSubtreeStream stream_interface_declaration = new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
            RewriteRuleSubtreeStream stream_constant_declarators = new RewriteRuleSubtreeStream(adaptor,"rule constant_declarators");
            RewriteRuleSubtreeStream stream_struct_declaration = new RewriteRuleSubtreeStream(adaptor,"rule struct_declaration");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_enum_declaration = new RewriteRuleSubtreeStream(adaptor,"rule enum_declaration");
            RewriteRuleSubtreeStream stream_event_declaration = new RewriteRuleSubtreeStream(adaptor,"rule event_declaration");
            RewriteRuleSubtreeStream stream_constructor_declaration = new RewriteRuleSubtreeStream(adaptor,"rule constructor_declaration");
            RewriteRuleSubtreeStream stream_field_declaration = new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
            RewriteRuleSubtreeStream stream_method_declaration = new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
            RewriteRuleSubtreeStream stream_type_name = new RewriteRuleSubtreeStream(adaptor,"rule type_name");
            RewriteRuleSubtreeStream stream_property_declaration = new RewriteRuleSubtreeStream(adaptor,"rule property_declaration");
            RewriteRuleSubtreeStream stream_operator_declaration = new RewriteRuleSubtreeStream(adaptor,"rule operator_declaration");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            RewriteRuleSubtreeStream stream_modifiers = new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
            RewriteRuleSubtreeStream stream_delegate_declaration = new RewriteRuleSubtreeStream(adaptor,"rule delegate_declaration");
            RewriteRuleSubtreeStream stream_void_type = new RewriteRuleSubtreeStream(adaptor,"rule void_type");
            RewriteRuleSubtreeStream stream_conversion_operator_declaration = new RewriteRuleSubtreeStream(adaptor,"rule conversion_operator_declaration");

               List<string> modifierList = new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:779:2: ( (a= attributes )? (m= modifiers )? (c= 'const' ct= type constant_declarators ';' -> ^( FIELD[$c.token, \"FIELD\"] ( $a)? ( $m)? $ct constant_declarators ) | ev= event_declaration[$a.tree, $m.tree] -> $ev | p= 'partial' (v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */] -> { $m3.tree != null}? $m3 -> | pi= interface_declaration[$a.tree, $m.tree, $p] -> $pi | pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $pc | ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $ps) | i= interface_declaration[$a.tree, $m.tree, null] -> $i | v2= void_type m1= method_declaration[$a.tree, $m.tree, modifierList, $v2.tree, $v2.text, false /* isPartial */] -> $m1 | t= type ( ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */] -> $m2 | ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree] -> $pd | ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree] -> $ix1 | ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null] -> $ix2 | field_declaration -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration ) | operator_declaration -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration ) ) | cd= class_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $cd | sd= struct_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $sd | ed= enum_declaration[$a.tree, $m.tree] -> $ed | dd= delegate_declaration[$a.tree, $m.tree, false /* toplevel */] -> | co3= conversion_operator_declaration -> ^( CONVERSION_OPERATOR[$co3.start.Token, \"CONVERSION\"] ( $a)? ( $m)? $co3) | con3= constructor_declaration[$a.tree, $m.tree, modifierList] -> $con3 | de3= destructor_declaration -> $de3) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:780:2: (a= attributes )? (m= modifiers )? (c= 'const' ct= type constant_declarators ';' -> ^( FIELD[$c.token, \"FIELD\"] ( $a)? ( $m)? $ct constant_declarators ) | ev= event_declaration[$a.tree, $m.tree] -> $ev | p= 'partial' (v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */] -> { $m3.tree != null}? $m3 -> | pi= interface_declaration[$a.tree, $m.tree, $p] -> $pi | pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $pc | ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $ps) | i= interface_declaration[$a.tree, $m.tree, null] -> $i | v2= void_type m1= method_declaration[$a.tree, $m.tree, modifierList, $v2.tree, $v2.text, false /* isPartial */] -> $m1 | t= type ( ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */] -> $m2 | ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree] -> $pd | ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree] -> $ix1 | ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null] -> $ix2 | field_declaration -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration ) | operator_declaration -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration ) ) | cd= class_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $cd | sd= struct_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $sd | ed= enum_declaration[$a.tree, $m.tree] -> $ed | dd= delegate_declaration[$a.tree, $m.tree, false /* toplevel */] -> | co3= conversion_operator_declaration -> ^( CONVERSION_OPERATOR[$co3.start.Token, \"CONVERSION\"] ( $a)? ( $m)? $co3) | con3= constructor_declaration[$a.tree, $m.tree, modifierList] -> $con3 | de3= destructor_declaration -> $de3)
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:780:3: (a= attributes )?
                	int alt18 = 2;
                	int LA18_0 = input.LA(1);

                	if ( (LA18_0 == OPEN_BRACKET) )
                	{
                	    alt18 = 1;
                	}
                	switch (alt18) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:780:3: a= attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_class_member_declaration842);
                	        	a = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(a.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:781:5: (m= modifiers )?
                	int alt19 = 2;
                	int LA19_0 = input.LA(1);

                	if ( ((LA19_0 >= PUBLIC && LA19_0 <= STATIC) || LA19_0 == 194 || (LA19_0 >= 197 && LA19_0 <= 204)) )
                	{
                	    alt19 = 1;
                	}
                	switch (alt19) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:781:6: m= modifiers
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration852);
                	        	m = modifiers();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_modifiers.Add(m.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   modifierList = ((m != null) ? m.modList : default(List<string>)); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:782:2: (c= 'const' ct= type constant_declarators ';' -> ^( FIELD[$c.token, \"FIELD\"] ( $a)? ( $m)? $ct constant_declarators ) | ev= event_declaration[$a.tree, $m.tree] -> $ev | p= 'partial' (v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */] -> { $m3.tree != null}? $m3 -> | pi= interface_declaration[$a.tree, $m.tree, $p] -> $pi | pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $pc | ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $ps) | i= interface_declaration[$a.tree, $m.tree, null] -> $i | v2= void_type m1= method_declaration[$a.tree, $m.tree, modifierList, $v2.tree, $v2.text, false /* isPartial */] -> $m1 | t= type ( ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */] -> $m2 | ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree] -> $pd | ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree] -> $ix1 | ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null] -> $ix2 | field_declaration -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration ) | operator_declaration -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration ) ) | cd= class_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $cd | sd= struct_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $sd | ed= enum_declaration[$a.tree, $m.tree] -> $ed | dd= delegate_declaration[$a.tree, $m.tree, false /* toplevel */] -> | co3= conversion_operator_declaration -> ^( CONVERSION_OPERATOR[$co3.start.Token, \"CONVERSION\"] ( $a)? ( $m)? $co3) | con3= constructor_declaration[$a.tree, $m.tree, modifierList] -> $con3 | de3= destructor_declaration -> $de3)
                	int alt22 = 13;
                	alt22 = dfa22.Predict(input);
                	switch (alt22) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:782:4: c= 'const' ct= type constant_declarators ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	c=(CommonTree)Match(input,205,FOLLOW_205_in_class_member_declaration863); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_205.Add(c);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_class_member_declaration869);
                	        	ct = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type.Add(ct.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_constant_declarators_in_class_member_declaration873);
                	        	constant_declarators43 = constant_declarators();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_constant_declarators.Add(constant_declarators43.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal44=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_class_member_declaration877); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal44);



                	        	// AST REWRITE
                	        	// elements:          m, ct, a, constant_declarators
                	        	// token labels:      
                	        	// rule labels:       retval, a, m, ct
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_a = new RewriteRuleSubtreeStream(adaptor, "rule a", a!=null ? a.Tree : null);
                	        	RewriteRuleSubtreeStream stream_m = new RewriteRuleSubtreeStream(adaptor, "rule m", m!=null ? m.Tree : null);
                	        	RewriteRuleSubtreeStream stream_ct = new RewriteRuleSubtreeStream(adaptor, "rule ct", ct!=null ? ct.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 782:53: -> ^( FIELD[$c.token, \"FIELD\"] ( $a)? ( $m)? $ct constant_declarators )
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:782:56: ^( FIELD[$c.token, \"FIELD\"] ( $a)? ( $m)? $ct constant_declarators )
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FIELD, c.token, "FIELD"), root_1);

                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:782:83: ( $a)?
                	        	    if ( stream_a.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_a.NextTree());

                	        	    }
                	        	    stream_a.Reset();
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:782:87: ( $m)?
                	        	    if ( stream_m.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_m.NextTree());

                	        	    }
                	        	    stream_m.Reset();
                	        	    adaptor.AddChild(root_1,  addConstModifiers(c.token, modifierList) );
                	        	    adaptor.AddChild(root_1, stream_ct.NextTree());
                	        	    adaptor.AddChild(root_1, stream_constant_declarators.NextTree());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:783:4: ev= event_declaration[$a.tree, $m.tree]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_event_declaration_in_class_member_declaration906);
                	        	ev = event_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null));
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_event_declaration.Add(ev.Tree);


                	        	// AST REWRITE
                	        	// elements:          ev
                	        	// token labels:      
                	        	// rule labels:       retval, ev
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_ev = new RewriteRuleSubtreeStream(adaptor, "rule ev", ev!=null ? ev.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 783:43: -> $ev
                	        	{
                	        	    adaptor.AddChild(root_0, stream_ev.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:784:4: p= 'partial' (v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */] -> { $m3.tree != null}? $m3 -> | pi= interface_declaration[$a.tree, $m.tree, $p] -> $pi | pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $pc | ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $ps)
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	p=(CommonTree)Match(input,196,FOLLOW_196_in_class_member_declaration920); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_196.Add(p);

                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:784:16: (v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */] -> { $m3.tree != null}? $m3 -> | pi= interface_declaration[$a.tree, $m.tree, $p] -> $pi | pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $pc | ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $ps)
                	        	int alt20 = 4;
                	        	switch ( input.LA(1) ) 
                	        	{
                	        	case 206:
                	        		{
                	        	    alt20 = 1;
                	        	    }
                	        	    break;
                	        	case 258:
                	        		{
                	        	    alt20 = 2;
                	        	    }
                	        	    break;
                	        	case 245:
                	        		{
                	        	    alt20 = 3;
                	        	    }
                	        	    break;
                	        	case 255:
                	        		{
                	        	    alt20 = 4;
                	        	    }
                	        	    break;
                	        		default:
                	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        		    NoViableAltException nvae_d20s0 =
                	        		        new NoViableAltException("", 20, 0, input);

                	        		    throw nvae_d20s0;
                	        	}

                	        	switch (alt20) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:784:17: v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_void_type_in_class_member_declaration925);
                	        	        	v1 = void_type();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_void_type.Add(v1.Tree);
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_method_declaration_in_class_member_declaration929);
                	        	        	m3 = method_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), modifierList, ((v1 != null) ? ((CommonTree)v1.Tree) : null), ((v1 != null) ? input.TokenStream.ToString(
                	        	        	  input.TreeAdaptor.GetTokenStartIndex(v1.Start),
                	        	        	  input.TreeAdaptor.GetTokenStopIndex(v1.Start)) : null), true /* isPartial */);
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_method_declaration.Add(m3.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          m3
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, m3
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_m3 = new RewriteRuleSubtreeStream(adaptor, "rule m3", m3!=null ? m3.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 784:126: -> { $m3.tree != null}? $m3
                	        	        	if ( ((m3 != null) ? ((CommonTree)m3.Tree) : null) != null)
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_m3.NextTree());

                	        	        	}
                	        	        	else // 785:127: ->
                	        	        	{
                	        	        	    root_0 = null;
                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:786:9: pi= interface_declaration[$a.tree, $m.tree, $p]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_interface_declaration_in_class_member_declaration1078);
                	        	        	pi = interface_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), p);
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_interface_declaration.Add(pi.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          pi
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, pi
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_pi = new RewriteRuleSubtreeStream(adaptor, "rule pi", pi!=null ? pi.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 786:56: -> $pi
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_pi.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 3 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:787:9: pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_class_declaration_in_class_member_declaration1096);
                	        	        	pc = class_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), p, false /* toplevel */);
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_class_declaration.Add(pc.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          pc
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, pc
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_pc = new RewriteRuleSubtreeStream(adaptor, "rule pc", pc!=null ? pc.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 787:74: -> $pc
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_pc.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 4 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:788:9: ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_struct_declaration_in_class_member_declaration1114);
                	        	        	ps = struct_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), p, false /* toplevel */);
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_struct_declaration.Add(ps.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          ps
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, ps
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_ps = new RewriteRuleSubtreeStream(adaptor, "rule ps", ps!=null ? ps.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 788:75: -> $ps
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_ps.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 4 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:789:4: i= interface_declaration[$a.tree, $m.tree, null]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_interface_declaration_in_class_member_declaration1128);
                	        	i = interface_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), null);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_interface_declaration.Add(i.Tree);


                	        	// AST REWRITE
                	        	// elements:          i
                	        	// token labels:      
                	        	// rule labels:       retval, i
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_i = new RewriteRuleSubtreeStream(adaptor, "rule i", i!=null ? i.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 789:52: -> $i
                	        	{
                	        	    adaptor.AddChild(root_0, stream_i.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 5 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:790:4: v2= void_type m1= method_declaration[$a.tree, $m.tree, modifierList, $v2.tree, $v2.text, false /* isPartial */]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_void_type_in_class_member_declaration1141);
                	        	v2 = void_type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_void_type.Add(v2.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_method_declaration_in_class_member_declaration1147);
                	        	m1 = method_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), modifierList, ((v2 != null) ? ((CommonTree)v2.Tree) : null), ((v2 != null) ? input.TokenStream.ToString(
                	        	  input.TreeAdaptor.GetTokenStartIndex(v2.Start),
                	        	  input.TreeAdaptor.GetTokenStopIndex(v2.Start)) : null), false /* isPartial */);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_method_declaration.Add(m1.Tree);


                	        	// AST REWRITE
                	        	// elements:          m1
                	        	// token labels:      
                	        	// rule labels:       retval, m1
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_m1 = new RewriteRuleSubtreeStream(adaptor, "rule m1", m1!=null ? m1.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 790:116: -> $m1
                	        	{
                	        	    adaptor.AddChild(root_0, stream_m1.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 6 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:791:4: t= type ( ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */] -> $m2 | ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree] -> $pd | ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree] -> $ix1 | ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null] -> $ix2 | field_declaration -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration ) | operator_declaration -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration ) )
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_class_member_declaration1161);
                	        	t = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type.Add(t.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:791:11: ( ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */] -> $m2 | ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree] -> $pd | ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree] -> $ix1 | ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null] -> $ix2 | field_declaration -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration ) | operator_declaration -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration ) )
                	        	int alt21 = 6;
                	        	switch ( input.LA(1) ) 
                	        	{
                	        	case IDENTIFIER:
                	        		{
                	        	    int LA21_1 = input.LA(2);

                	        	    if ( (synpred2_JavaMaker()) )
                	        	    {
                	        	        alt21 = 1;
                	        	    }
                	        	    else if ( (synpred3_JavaMaker()) )
                	        	    {
                	        	        alt21 = 2;
                	        	    }
                	        	    else if ( (synpred4_JavaMaker()) )
                	        	    {
                	        	        alt21 = 3;
                	        	    }
                	        	    else if ( (true) )
                	        	    {
                	        	        alt21 = 5;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d21s1 =
                	        	            new NoViableAltException("", 21, 1, input);

                	        	        throw nvae_d21s1;
                	        	    }
                	        	    }
                	        	    break;
                	        	case ELIF:
                	        	case ENDIF:
                	        	case DEFINE:
                	        	case UNDEF:
                	        	case 195:
                	        	case 221:
                	        	case 224:
                	        	case 225:
                	        	case 226:
                	        	case 227:
                	        	case 228:
                	        	case 229:
                	        	case 230:
                	        	case 231:
                	        	case 232:
                	        	case 233:
                	        	case 234:
                	        	case 235:
                	        	case 236:
                	        	case 237:
                	        	case 238:
                	        	case 239:
                	        	case 241:
                	        	case 242:
                	        	case 243:
                	        	case 244:
                	        	case 247:
                	        	case 248:
                	        	case 249:
                	        	case 250:
                	        	case 256:
                	        	case 263:
                	        	case 264:
                	        	case 274:
                	        	case 277:
                	        		{
                	        	    int LA21_2 = input.LA(2);

                	        	    if ( (synpred2_JavaMaker()) )
                	        	    {
                	        	        alt21 = 1;
                	        	    }
                	        	    else if ( (synpred3_JavaMaker()) )
                	        	    {
                	        	        alt21 = 2;
                	        	    }
                	        	    else if ( (synpred4_JavaMaker()) )
                	        	    {
                	        	        alt21 = 3;
                	        	    }
                	        	    else if ( (true) )
                	        	    {
                	        	        alt21 = 5;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d21s2 =
                	        	            new NoViableAltException("", 21, 2, input);

                	        	        throw nvae_d21s2;
                	        	    }
                	        	    }
                	        	    break;
                	        	case THIS:
                	        		{
                	        	    alt21 = 4;
                	        	    }
                	        	    break;
                	        	case 259:
                	        		{
                	        	    alt21 = 6;
                	        	    }
                	        	    break;
                	        		default:
                	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        		    NoViableAltException nvae_d21s0 =
                	        		        new NoViableAltException("", 21, 0, input);

                	        		    throw nvae_d21s0;
                	        	}

                	        	switch (alt21) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:791:13: ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_method_declaration_in_class_member_declaration1179);
                	        	        	m2 = method_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), modifierList, ((t != null) ? ((CommonTree)t.Tree) : null), ((t != null) ? input.TokenStream.ToString(
                	        	        	  input.TreeAdaptor.GetTokenStartIndex(t.Start),
                	        	        	  input.TreeAdaptor.GetTokenStopIndex(t.Start)) : null), false /* isPartial */);
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_method_declaration.Add(m2.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          m2
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, m2
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_m2 = new RewriteRuleSubtreeStream(adaptor, "rule m2", m2!=null ? m2.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 791:151: -> $m2
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_m2.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:792:8: ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_property_declaration_in_class_member_declaration1206);
                	        	        	pd = property_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), modifierList.Contains("abstract"), ((t != null) ? ((CommonTree)t.Tree) : null));
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_property_declaration.Add(pd.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          pd
                	        	        	// token labels:      
                	        	        	// rule labels:       pd, retval
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_pd = new RewriteRuleSubtreeStream(adaptor, "rule pd", pd!=null ? pd.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 792:117: -> $pd
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_pd.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 3 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:793:8: ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_type_name_in_class_member_declaration1237);
                	        	        	tn = type_name();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_type_name.Add(tn.Tree);
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	char_literal45=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_class_member_declaration1239); if (state.failed) return retval; 
                	        	        	if ( (state.backtracking==0) ) stream_DOT.Add(char_literal45);

                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_indexer_declaration_in_class_member_declaration1243);
                	        	        	ix1 = indexer_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), ((t != null) ? ((CommonTree)t.Tree) : null), ((tn != null) ? ((CommonTree)tn.Tree) : null));
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_indexer_declaration.Add(ix1.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          ix1
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, ix1
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_ix1 = new RewriteRuleSubtreeStream(adaptor, "rule ix1", ix1!=null ? ix1.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 793:116: -> $ix1
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_ix1.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 4 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:794:8: ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_indexer_declaration_in_class_member_declaration1260);
                	        	        	ix2 = indexer_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), ((t != null) ? ((CommonTree)t.Tree) : null), null);
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_indexer_declaration.Add(ix2.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          ix2
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, ix2
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_ix2 = new RewriteRuleSubtreeStream(adaptor, "rule ix2", ix2!=null ? ix2.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 794:65: -> $ix2
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_ix2.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 5 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:795:11: field_declaration
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_field_declaration_in_class_member_declaration1279);
                	        	        	field_declaration46 = field_declaration();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_field_declaration.Add(field_declaration46.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          field_declaration, a, m, t
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, t, a, m
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_t = new RewriteRuleSubtreeStream(adaptor, "rule t", t!=null ? t.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_a = new RewriteRuleSubtreeStream(adaptor, "rule a", a!=null ? a.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_m = new RewriteRuleSubtreeStream(adaptor, "rule m", m!=null ? m.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 795:33: -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration )
                	        	        	{
                	        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:795:36: ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration )
                	        	        	    {
                	        	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FIELD, ((t != null) ? ((CommonTree)t.Start) : null).Token, "FIELD"), root_1);

                	        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:795:69: ( $a)?
                	        	        	    if ( stream_a.HasNext )
                	        	        	    {
                	        	        	        adaptor.AddChild(root_1, stream_a.NextTree());

                	        	        	    }
                	        	        	    stream_a.Reset();
                	        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:795:73: ( $m)?
                	        	        	    if ( stream_m.HasNext )
                	        	        	    {
                	        	        	        adaptor.AddChild(root_1, stream_m.NextTree());

                	        	        	    }
                	        	        	    stream_m.Reset();
                	        	        	    adaptor.AddChild(root_1, stream_t.NextTree());
                	        	        	    adaptor.AddChild(root_1, stream_field_declaration.NextTree());

                	        	        	    adaptor.AddChild(root_0, root_1);
                	        	        	    }

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 6 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:796:11: operator_declaration
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_operator_declaration_in_class_member_declaration1316);
                	        	        	operator_declaration47 = operator_declaration();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_operator_declaration.Add(operator_declaration47.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          m, a, t, operator_declaration
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, t, a, m
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_t = new RewriteRuleSubtreeStream(adaptor, "rule t", t!=null ? t.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_a = new RewriteRuleSubtreeStream(adaptor, "rule a", a!=null ? a.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_m = new RewriteRuleSubtreeStream(adaptor, "rule m", m!=null ? m.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 796:32: -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration )
                	        	        	{
                	        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:796:35: ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration )
                	        	        	    {
                	        	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OPERATOR, ((t != null) ? ((CommonTree)t.Start) : null).Token, "OPERATOR"), root_1);

                	        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:796:74: ( $a)?
                	        	        	    if ( stream_a.HasNext )
                	        	        	    {
                	        	        	        adaptor.AddChild(root_1, stream_a.NextTree());

                	        	        	    }
                	        	        	    stream_a.Reset();
                	        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:796:78: ( $m)?
                	        	        	    if ( stream_m.HasNext )
                	        	        	    {
                	        	        	        adaptor.AddChild(root_1, stream_m.NextTree());

                	        	        	    }
                	        	        	    stream_m.Reset();
                	        	        	    adaptor.AddChild(root_1, stream_t.NextTree());
                	        	        	    adaptor.AddChild(root_1, stream_operator_declaration.NextTree());

                	        	        	    adaptor.AddChild(root_0, root_1);
                	        	        	    }

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 7 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:800:4: cd= class_declaration[$a.tree, $m.tree, null, false /* toplevel */]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_declaration_in_class_member_declaration1356);
                	        	cd = class_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), null, false /* toplevel */);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_class_declaration.Add(cd.Tree);


                	        	// AST REWRITE
                	        	// elements:          cd
                	        	// token labels:      
                	        	// rule labels:       retval, cd
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_cd = new RewriteRuleSubtreeStream(adaptor, "rule cd", cd!=null ? cd.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 800:71: -> $cd
                	        	{
                	        	    adaptor.AddChild(root_0, stream_cd.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 8 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:801:4: sd= struct_declaration[$a.tree, $m.tree, null, false /* toplevel */]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_struct_declaration_in_class_member_declaration1369);
                	        	sd = struct_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), null, false /* toplevel */);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_struct_declaration.Add(sd.Tree);


                	        	// AST REWRITE
                	        	// elements:          sd
                	        	// token labels:      
                	        	// rule labels:       retval, sd
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_sd = new RewriteRuleSubtreeStream(adaptor, "rule sd", sd!=null ? sd.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 801:72: -> $sd
                	        	{
                	        	    adaptor.AddChild(root_0, stream_sd.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 9 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:802:4: ed= enum_declaration[$a.tree, $m.tree]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_enum_declaration_in_class_member_declaration1382);
                	        	ed = enum_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null));
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_enum_declaration.Add(ed.Tree);


                	        	// AST REWRITE
                	        	// elements:          ed
                	        	// token labels:      
                	        	// rule labels:       retval, ed
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_ed = new RewriteRuleSubtreeStream(adaptor, "rule ed", ed!=null ? ed.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 802:42: -> $ed
                	        	{
                	        	    adaptor.AddChild(root_0, stream_ed.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 10 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:803:4: dd= delegate_declaration[$a.tree, $m.tree, false /* toplevel */]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_delegate_declaration_in_class_member_declaration1395);
                	        	dd = delegate_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), false /* toplevel */);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_delegate_declaration.Add(dd.Tree);


                	        	// AST REWRITE
                	        	// elements:          
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 803:68: ->
                	        	{
                	        	    adaptor.AddChild(root_0,  mkFlattenDictionary(((dd != null) ? ((CommonTree)dd.Tree) : null).Token,((dd != null) ? dd.compUnits : default(Dictionary<String, CommonTree>))) );

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 11 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:804:4: co3= conversion_operator_declaration
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_conversion_operator_declaration_in_class_member_declaration1407);
                	        	co3 = conversion_operator_declaration();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_conversion_operator_declaration.Add(co3.Tree);


                	        	// AST REWRITE
                	        	// elements:          a, co3, m
                	        	// token labels:      
                	        	// rule labels:       retval, a, co3, m
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_a = new RewriteRuleSubtreeStream(adaptor, "rule a", a!=null ? a.Tree : null);
                	        	RewriteRuleSubtreeStream stream_co3 = new RewriteRuleSubtreeStream(adaptor, "rule co3", co3!=null ? co3.Tree : null);
                	        	RewriteRuleSubtreeStream stream_m = new RewriteRuleSubtreeStream(adaptor, "rule m", m!=null ? m.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 804:40: -> ^( CONVERSION_OPERATOR[$co3.start.Token, \"CONVERSION\"] ( $a)? ( $m)? $co3)
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:804:43: ^( CONVERSION_OPERATOR[$co3.start.Token, \"CONVERSION\"] ( $a)? ( $m)? $co3)
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONVERSION_OPERATOR, ((co3 != null) ? ((CommonTree)co3.Start) : null).Token, "CONVERSION"), root_1);

                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:804:97: ( $a)?
                	        	    if ( stream_a.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_a.NextTree());

                	        	    }
                	        	    stream_a.Reset();
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:804:101: ( $m)?
                	        	    if ( stream_m.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_m.NextTree());

                	        	    }
                	        	    stream_m.Reset();
                	        	    adaptor.AddChild(root_1, stream_co3.NextTree());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 12 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:805:4: con3= constructor_declaration[$a.tree, $m.tree, modifierList]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_constructor_declaration_in_class_member_declaration1432);
                	        	con3 = constructor_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), modifierList);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_constructor_declaration.Add(con3.Tree);


                	        	// AST REWRITE
                	        	// elements:          con3
                	        	// token labels:      
                	        	// rule labels:       con3, retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_con3 = new RewriteRuleSubtreeStream(adaptor, "rule con3", con3!=null ? con3.Tree : null);
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 805:65: -> $con3
                	        	{
                	        	    adaptor.AddChild(root_0, stream_con3.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 13 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:806:4: de3= destructor_declaration
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_destructor_declaration_in_class_member_declaration1445);
                	        	de3 = destructor_declaration();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_destructor_declaration.Add(de3.Tree);


                	        	// AST REWRITE
                	        	// elements:          de3
                	        	// token labels:      
                	        	// rule labels:       de3, retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_de3 = new RewriteRuleSubtreeStream(adaptor, "rule de3", de3!=null ? de3.Tree : null);
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 806:31: -> $de3
                	        	{
                	        	    adaptor.AddChild(root_0, stream_de3.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_member_declaration"

        public class primary_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "primary_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:810:1: primary_expression : ( ( 'this' brackets[null] )=> (t= 'this' -> $t) (b1= brackets[$primary_expression.tree] -> $b1) (pp1= primary_expression_part[$primary_expression.tree] -> $pp1)* | ( 'base' brackets[null] )=> (b= 'base' -> SUPER[$b.token, \"super\"] ) (b2= brackets[$primary_expression.tree] -> $b2) (pp2= primary_expression_part[$primary_expression.tree] -> $pp2)* | ( primary_expression_start -> primary_expression_start ) (pp3= primary_expression_part[$primary_expression.tree] -> $pp3)* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> (oc1= object_creation_expression -> $oc1) (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+ | ( object_creation_expression )=>oc2= object_creation_expression -> $oc2 | anonymous_object_creation_expression -> anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
        public JavaMaker.primary_expression_return primary_expression() // throws RecognitionException [1]
        {   
            JavaMaker.primary_expression_return retval = new JavaMaker.primary_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree t = null;
            CommonTree b = null;
            CommonTree string_literal49 = null;
            JavaMaker.brackets_return b1 = default(JavaMaker.brackets_return);

            JavaMaker.primary_expression_part_return pp1 = default(JavaMaker.primary_expression_part_return);

            JavaMaker.brackets_return b2 = default(JavaMaker.brackets_return);

            JavaMaker.primary_expression_part_return pp2 = default(JavaMaker.primary_expression_part_return);

            JavaMaker.primary_expression_part_return pp3 = default(JavaMaker.primary_expression_part_return);

            JavaMaker.object_creation_expression_return oc1 = default(JavaMaker.object_creation_expression_return);

            JavaMaker.primary_expression_part_return pp4 = default(JavaMaker.primary_expression_part_return);

            JavaMaker.object_creation_expression_return oc2 = default(JavaMaker.object_creation_expression_return);

            JavaMaker.primary_expression_start_return primary_expression_start48 = default(JavaMaker.primary_expression_start_return);

            JavaMaker.anonymous_object_creation_expression_return anonymous_object_creation_expression50 = default(JavaMaker.anonymous_object_creation_expression_return);

            JavaMaker.sizeof_expression_return sizeof_expression51 = default(JavaMaker.sizeof_expression_return);

            JavaMaker.checked_expression_return checked_expression52 = default(JavaMaker.checked_expression_return);

            JavaMaker.unchecked_expression_return unchecked_expression53 = default(JavaMaker.unchecked_expression_return);

            JavaMaker.default_value_expression_return default_value_expression54 = default(JavaMaker.default_value_expression_return);

            JavaMaker.anonymous_method_expression_return anonymous_method_expression55 = default(JavaMaker.anonymous_method_expression_return);


            CommonTree t_tree=null;
            CommonTree b_tree=null;
            CommonTree string_literal49_tree=null;
            RewriteRuleNodeStream stream_197 = new RewriteRuleNodeStream(adaptor,"token 197");
            RewriteRuleNodeStream stream_207 = new RewriteRuleNodeStream(adaptor,"token 207");
            RewriteRuleNodeStream stream_THIS = new RewriteRuleNodeStream(adaptor,"token THIS");
            RewriteRuleSubtreeStream stream_primary_expression_part = new RewriteRuleSubtreeStream(adaptor,"rule primary_expression_part");
            RewriteRuleSubtreeStream stream_anonymous_object_creation_expression = new RewriteRuleSubtreeStream(adaptor,"rule anonymous_object_creation_expression");
            RewriteRuleSubtreeStream stream_brackets = new RewriteRuleSubtreeStream(adaptor,"rule brackets");
            RewriteRuleSubtreeStream stream_object_creation_expression = new RewriteRuleSubtreeStream(adaptor,"rule object_creation_expression");
            RewriteRuleSubtreeStream stream_primary_expression_start = new RewriteRuleSubtreeStream(adaptor,"rule primary_expression_start");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:810:19: ( ( 'this' brackets[null] )=> (t= 'this' -> $t) (b1= brackets[$primary_expression.tree] -> $b1) (pp1= primary_expression_part[$primary_expression.tree] -> $pp1)* | ( 'base' brackets[null] )=> (b= 'base' -> SUPER[$b.token, \"super\"] ) (b2= brackets[$primary_expression.tree] -> $b2) (pp2= primary_expression_part[$primary_expression.tree] -> $pp2)* | ( primary_expression_start -> primary_expression_start ) (pp3= primary_expression_part[$primary_expression.tree] -> $pp3)* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> (oc1= object_creation_expression -> $oc1) (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+ | ( object_creation_expression )=>oc2= object_creation_expression -> $oc2 | anonymous_object_creation_expression -> anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
                int alt28 = 9;
                alt28 = dfa28.Predict(input);
                switch (alt28) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:2: ( 'this' brackets[null] )=> (t= 'this' -> $t) (b1= brackets[$primary_expression.tree] -> $b1) (pp1= primary_expression_part[$primary_expression.tree] -> $pp1)*
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:32: (t= 'this' -> $t)
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:33: t= 'this'
                        	{
                        		_last = (CommonTree)input.LT(1);
                        		t=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_primary_expression1480); if (state.failed) return retval; 
                        		if ( (state.backtracking==0) ) stream_THIS.Add(t);



                        		// AST REWRITE
                        		// elements:          t
                        		// token labels:      t
                        		// rule labels:       retval
                        		// token list labels: 
                        		// rule list labels:  
                        		// wildcard labels: 
                        		if ( (state.backtracking==0) ) {
                        		retval.tree = root_0;
                        		RewriteRuleNodeStream stream_t = new RewriteRuleNodeStream(adaptor, "token t", t);
                        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        		root_0 = (CommonTree)adaptor.Nil;
                        		// 811:42: -> $t
                        		{
                        		    adaptor.AddChild(root_0, stream_t.NextNode());

                        		}

                        		retval.tree = root_0;}
                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:50: (b1= brackets[$primary_expression.tree] -> $b1)
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:51: b1= brackets[$primary_expression.tree]
                        	{
                        		_last = (CommonTree)input.LT(1);
                        		PushFollow(FOLLOW_brackets_in_primary_expression1492);
                        		b1 = brackets(((CommonTree)retval.Tree));
                        		state._fsp--;
                        		if (state.failed) return retval;
                        		if ( (state.backtracking==0) ) stream_brackets.Add(b1.Tree);


                        		// AST REWRITE
                        		// elements:          b1
                        		// token labels:      
                        		// rule labels:       retval, b1
                        		// token list labels: 
                        		// rule list labels:  
                        		// wildcard labels: 
                        		if ( (state.backtracking==0) ) {
                        		retval.tree = root_0;
                        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        		RewriteRuleSubtreeStream stream_b1 = new RewriteRuleSubtreeStream(adaptor, "rule b1", b1!=null ? b1.Tree : null);

                        		root_0 = (CommonTree)adaptor.Nil;
                        		// 811:89: -> $b1
                        		{
                        		    adaptor.AddChild(root_0, stream_b1.NextTree());

                        		}

                        		retval.tree = root_0;}
                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:97: (pp1= primary_expression_part[$primary_expression.tree] -> $pp1)*
                        	do 
                        	{
                        	    int alt23 = 2;
                        	    int LA23_0 = input.LA(1);

                        	    if ( (LA23_0 == OPEN_BRACKET || LA23_0 == LPAREN || (LA23_0 >= DOT && LA23_0 <= PTR) || (LA23_0 >= 209 && LA23_0 <= 210)) )
                        	    {
                        	        alt23 = 1;
                        	    }


                        	    switch (alt23) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:98: pp1= primary_expression_part[$primary_expression.tree]
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression1504);
                        			    	pp1 = primary_expression_part(((CommonTree)retval.Tree));
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) stream_primary_expression_part.Add(pp1.Tree);


                        			    	// AST REWRITE
                        			    	// elements:          pp1
                        			    	// token labels:      
                        			    	// rule labels:       retval, pp1
                        			    	// token list labels: 
                        			    	// rule list labels:  
                        			    	// wildcard labels: 
                        			    	if ( (state.backtracking==0) ) {
                        			    	retval.tree = root_0;
                        			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        			    	RewriteRuleSubtreeStream stream_pp1 = new RewriteRuleSubtreeStream(adaptor, "rule pp1", pp1!=null ? pp1.Tree : null);

                        			    	root_0 = (CommonTree)adaptor.Nil;
                        			    	// 811:152: -> $pp1
                        			    	{
                        			    	    adaptor.AddChild(root_0, stream_pp1.NextTree());

                        			    	}

                        			    	retval.tree = root_0;}
                        			    }
                        			    break;

                        			default:
                        			    goto loop23;
                        	    }
                        	} while (true);

                        	loop23:
                        		;	// Stops C# compiler whining that label 'loop23' has no statements


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:4: ( 'base' brackets[null] )=> (b= 'base' -> SUPER[$b.token, \"super\"] ) (b2= brackets[$primary_expression.tree] -> $b2) (pp2= primary_expression_part[$primary_expression.tree] -> $pp2)*
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:33: (b= 'base' -> SUPER[$b.token, \"super\"] )
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:34: b= 'base'
                        	{
                        		_last = (CommonTree)input.LT(1);
                        		b=(CommonTree)Match(input,207,FOLLOW_207_in_primary_expression1532); if (state.failed) return retval; 
                        		if ( (state.backtracking==0) ) stream_207.Add(b);



                        		// AST REWRITE
                        		// elements:          
                        		// token labels:      
                        		// rule labels:       retval
                        		// token list labels: 
                        		// rule list labels:  
                        		// wildcard labels: 
                        		if ( (state.backtracking==0) ) {
                        		retval.tree = root_0;
                        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        		root_0 = (CommonTree)adaptor.Nil;
                        		// 812:43: -> SUPER[$b.token, \"super\"]
                        		{
                        		    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SUPER, b.token, "super"));

                        		}

                        		retval.tree = root_0;}
                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:73: (b2= brackets[$primary_expression.tree] -> $b2)
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:74: b2= brackets[$primary_expression.tree]
                        	{
                        		_last = (CommonTree)input.LT(1);
                        		PushFollow(FOLLOW_brackets_in_primary_expression1544);
                        		b2 = brackets(((CommonTree)retval.Tree));
                        		state._fsp--;
                        		if (state.failed) return retval;
                        		if ( (state.backtracking==0) ) stream_brackets.Add(b2.Tree);


                        		// AST REWRITE
                        		// elements:          b2
                        		// token labels:      
                        		// rule labels:       retval, b2
                        		// token list labels: 
                        		// rule list labels:  
                        		// wildcard labels: 
                        		if ( (state.backtracking==0) ) {
                        		retval.tree = root_0;
                        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        		RewriteRuleSubtreeStream stream_b2 = new RewriteRuleSubtreeStream(adaptor, "rule b2", b2!=null ? b2.Tree : null);

                        		root_0 = (CommonTree)adaptor.Nil;
                        		// 812:112: -> $b2
                        		{
                        		    adaptor.AddChild(root_0, stream_b2.NextTree());

                        		}

                        		retval.tree = root_0;}
                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:120: (pp2= primary_expression_part[$primary_expression.tree] -> $pp2)*
                        	do 
                        	{
                        	    int alt24 = 2;
                        	    int LA24_0 = input.LA(1);

                        	    if ( (LA24_0 == OPEN_BRACKET || LA24_0 == LPAREN || (LA24_0 >= DOT && LA24_0 <= PTR) || (LA24_0 >= 209 && LA24_0 <= 210)) )
                        	    {
                        	        alt24 = 1;
                        	    }


                        	    switch (alt24) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:121: pp2= primary_expression_part[$primary_expression.tree]
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression1556);
                        			    	pp2 = primary_expression_part(((CommonTree)retval.Tree));
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) stream_primary_expression_part.Add(pp2.Tree);


                        			    	// AST REWRITE
                        			    	// elements:          pp2
                        			    	// token labels:      
                        			    	// rule labels:       retval, pp2
                        			    	// token list labels: 
                        			    	// rule list labels:  
                        			    	// wildcard labels: 
                        			    	if ( (state.backtracking==0) ) {
                        			    	retval.tree = root_0;
                        			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        			    	RewriteRuleSubtreeStream stream_pp2 = new RewriteRuleSubtreeStream(adaptor, "rule pp2", pp2!=null ? pp2.Tree : null);

                        			    	root_0 = (CommonTree)adaptor.Nil;
                        			    	// 812:175: -> $pp2
                        			    	{
                        			    	    adaptor.AddChild(root_0, stream_pp2.NextTree());

                        			    	}

                        			    	retval.tree = root_0;}
                        			    }
                        			    break;

                        			default:
                        			    goto loop24;
                        	    }
                        	} while (true);

                        	loop24:
                        		;	// Stops C# compiler whining that label 'loop24' has no statements


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:813:4: ( primary_expression_start -> primary_expression_start ) (pp3= primary_expression_part[$primary_expression.tree] -> $pp3)*
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:813:4: ( primary_expression_start -> primary_expression_start )
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:813:5: primary_expression_start
                        	{
                        		_last = (CommonTree)input.LT(1);
                        		PushFollow(FOLLOW_primary_expression_start_in_primary_expression1571);
                        		primary_expression_start48 = primary_expression_start();
                        		state._fsp--;
                        		if (state.failed) return retval;
                        		if ( (state.backtracking==0) ) stream_primary_expression_start.Add(primary_expression_start48.Tree);


                        		// AST REWRITE
                        		// elements:          primary_expression_start
                        		// token labels:      
                        		// rule labels:       retval
                        		// token list labels: 
                        		// rule list labels:  
                        		// wildcard labels: 
                        		if ( (state.backtracking==0) ) {
                        		retval.tree = root_0;
                        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        		root_0 = (CommonTree)adaptor.Nil;
                        		// 813:30: -> primary_expression_start
                        		{
                        		    adaptor.AddChild(root_0, stream_primary_expression_start.NextTree());

                        		}

                        		retval.tree = root_0;}
                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:813:61: (pp3= primary_expression_part[$primary_expression.tree] -> $pp3)*
                        	do 
                        	{
                        	    int alt25 = 2;
                        	    int LA25_0 = input.LA(1);

                        	    if ( (LA25_0 == OPEN_BRACKET || LA25_0 == LPAREN || (LA25_0 >= DOT && LA25_0 <= PTR) || (LA25_0 >= 209 && LA25_0 <= 210)) )
                        	    {
                        	        alt25 = 1;
                        	    }


                        	    switch (alt25) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:813:62: pp3= primary_expression_part[$primary_expression.tree]
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression1583);
                        			    	pp3 = primary_expression_part(((CommonTree)retval.Tree));
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) stream_primary_expression_part.Add(pp3.Tree);


                        			    	// AST REWRITE
                        			    	// elements:          pp3
                        			    	// token labels:      
                        			    	// rule labels:       retval, pp3
                        			    	// token list labels: 
                        			    	// rule list labels:  
                        			    	// wildcard labels: 
                        			    	if ( (state.backtracking==0) ) {
                        			    	retval.tree = root_0;
                        			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        			    	RewriteRuleSubtreeStream stream_pp3 = new RewriteRuleSubtreeStream(adaptor, "rule pp3", pp3!=null ? pp3.Tree : null);

                        			    	root_0 = (CommonTree)adaptor.Nil;
                        			    	// 813:116: -> $pp3
                        			    	{
                        			    	    adaptor.AddChild(root_0, stream_pp3.NextTree());

                        			    	}

                        			    	retval.tree = root_0;}
                        			    }
                        			    break;

                        			default:
                        			    goto loop25;
                        	    }
                        	} while (true);

                        	loop25:
                        		;	// Stops C# compiler whining that label 'loop25' has no statements


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:815:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> (oc1= object_creation_expression -> $oc1) (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+ | ( object_creation_expression )=>oc2= object_creation_expression -> $oc2 | anonymous_object_creation_expression -> anonymous_object_creation_expression )
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal49=(CommonTree)Match(input,197,FOLLOW_197_in_primary_expression1598); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_197.Add(string_literal49);

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:815:10: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> (oc1= object_creation_expression -> $oc1) (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+ | ( object_creation_expression )=>oc2= object_creation_expression -> $oc2 | anonymous_object_creation_expression -> anonymous_object_creation_expression )
                        	int alt27 = 3;
                        	alt27 = dfa27.Predict(input);
                        	switch (alt27) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:815:14: ( object_creation_expression ( '.' | '->' | '[' ) )=> (oc1= object_creation_expression -> $oc1) (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+
                        	        {
                        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:816:6: (oc1= object_creation_expression -> $oc1)
                        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:816:7: oc1= object_creation_expression
                        	        	{
                        	        		_last = (CommonTree)input.LT(1);
                        	        		PushFollow(FOLLOW_object_creation_expression_in_primary_expression1629);
                        	        		oc1 = object_creation_expression();
                        	        		state._fsp--;
                        	        		if (state.failed) return retval;
                        	        		if ( (state.backtracking==0) ) stream_object_creation_expression.Add(oc1.Tree);


                        	        		// AST REWRITE
                        	        		// elements:          oc1
                        	        		// token labels:      
                        	        		// rule labels:       retval, oc1
                        	        		// token list labels: 
                        	        		// rule list labels:  
                        	        		// wildcard labels: 
                        	        		if ( (state.backtracking==0) ) {
                        	        		retval.tree = root_0;
                        	        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	        		RewriteRuleSubtreeStream stream_oc1 = new RewriteRuleSubtreeStream(adaptor, "rule oc1", oc1!=null ? oc1.Tree : null);

                        	        		root_0 = (CommonTree)adaptor.Nil;
                        	        		// 816:38: -> $oc1
                        	        		{
                        	        		    adaptor.AddChild(root_0, stream_oc1.NextTree());

                        	        		}

                        	        		retval.tree = root_0;}
                        	        	}

                        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:816:49: (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+
                        	        	int cnt26 = 0;
                        	        	do 
                        	        	{
                        	        	    int alt26 = 2;
                        	        	    int LA26_0 = input.LA(1);

                        	        	    if ( (LA26_0 == OPEN_BRACKET || LA26_0 == LPAREN || (LA26_0 >= DOT && LA26_0 <= PTR) || (LA26_0 >= 209 && LA26_0 <= 210)) )
                        	        	    {
                        	        	        alt26 = 1;
                        	        	    }


                        	        	    switch (alt26) 
                        	        		{
                        	        			case 1 :
                        	        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:816:50: pp4= primary_expression_part[ $primary_expression.tree ]
                        	        			    {
                        	        			    	_last = (CommonTree)input.LT(1);
                        	        			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression1642);
                        	        			    	pp4 = primary_expression_part(((CommonTree)retval.Tree));
                        	        			    	state._fsp--;
                        	        			    	if (state.failed) return retval;
                        	        			    	if ( (state.backtracking==0) ) stream_primary_expression_part.Add(pp4.Tree);


                        	        			    	// AST REWRITE
                        	        			    	// elements:          pp4
                        	        			    	// token labels:      
                        	        			    	// rule labels:       retval, pp4
                        	        			    	// token list labels: 
                        	        			    	// rule list labels:  
                        	        			    	// wildcard labels: 
                        	        			    	if ( (state.backtracking==0) ) {
                        	        			    	retval.tree = root_0;
                        	        			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	        			    	RewriteRuleSubtreeStream stream_pp4 = new RewriteRuleSubtreeStream(adaptor, "rule pp4", pp4!=null ? pp4.Tree : null);

                        	        			    	root_0 = (CommonTree)adaptor.Nil;
                        	        			    	// 816:106: -> $pp4
                        	        			    	{
                        	        			    	    adaptor.AddChild(root_0, stream_pp4.NextTree());

                        	        			    	}

                        	        			    	retval.tree = root_0;}
                        	        			    }
                        	        			    break;

                        	        			default:
                        	        			    if ( cnt26 >= 1 ) goto loop26;
                        	        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	        		            EarlyExitException eee26 =
                        	        		                new EarlyExitException(26, input);
                        	        		            throw eee26;
                        	        	    }
                        	        	    cnt26++;
                        	        	} while (true);

                        	        	loop26:
                        	        		;	// Stops C# compiler whining that label 'loop26' has no statements


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:817:7: ( object_creation_expression )=>oc2= object_creation_expression
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_object_creation_expression_in_primary_expression1670);
                        	        	oc2 = object_creation_expression();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_object_creation_expression.Add(oc2.Tree);


                        	        	// AST REWRITE
                        	        	// elements:          oc2
                        	        	// token labels:      
                        	        	// rule labels:       oc2, retval
                        	        	// token list labels: 
                        	        	// rule list labels:  
                        	        	// wildcard labels: 
                        	        	if ( (state.backtracking==0) ) {
                        	        	retval.tree = root_0;
                        	        	RewriteRuleSubtreeStream stream_oc2 = new RewriteRuleSubtreeStream(adaptor, "rule oc2", oc2!=null ? oc2.Tree : null);
                        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	        	root_0 = (CommonTree)adaptor.Nil;
                        	        	// 817:70: -> $oc2
                        	        	{
                        	        	    adaptor.AddChild(root_0, stream_oc2.NextTree());

                        	        	}

                        	        	retval.tree = root_0;}
                        	        }
                        	        break;
                        	    case 3 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:819:7: anonymous_object_creation_expression
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_anonymous_object_creation_expression_in_primary_expression1685);
                        	        	anonymous_object_creation_expression50 = anonymous_object_creation_expression();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_anonymous_object_creation_expression.Add(anonymous_object_creation_expression50.Tree);


                        	        	// AST REWRITE
                        	        	// elements:          anonymous_object_creation_expression
                        	        	// token labels:      
                        	        	// rule labels:       retval
                        	        	// token list labels: 
                        	        	// rule list labels:  
                        	        	// wildcard labels: 
                        	        	if ( (state.backtracking==0) ) {
                        	        	retval.tree = root_0;
                        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	        	root_0 = (CommonTree)adaptor.Nil;
                        	        	// 819:44: -> anonymous_object_creation_expression
                        	        	{
                        	        	    adaptor.AddChild(root_0, stream_anonymous_object_creation_expression.NextTree());

                        	        	}

                        	        	retval.tree = root_0;}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:820:4: sizeof_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_sizeof_expression_in_primary_expression1702);
                        	sizeof_expression51 = sizeof_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, sizeof_expression51.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:821:4: checked_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_checked_expression_in_primary_expression1713);
                        	checked_expression52 = checked_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, checked_expression52.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:822:4: unchecked_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unchecked_expression_in_primary_expression1732);
                        	unchecked_expression53 = unchecked_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, unchecked_expression53.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:823:4: default_value_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_default_value_expression_in_primary_expression1749);
                        	default_value_expression54 = default_value_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, default_value_expression54.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:824:4: anonymous_method_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_anonymous_method_expression_in_primary_expression1762);
                        	anonymous_method_expression55 = anonymous_method_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, anonymous_method_expression55.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "primary_expression"

        public class primary_expression_start_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "primary_expression_start"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:827:1: primary_expression_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( (c= '::' identifier )? ) | 'this' | b= 'base' -> SUPER[$b.token, \"super\"] | paren_expression | typeof_expression | literal );
        public JavaMaker.primary_expression_start_return primary_expression_start() // throws RecognitionException [1]
        {   
            JavaMaker.primary_expression_start_return retval = new JavaMaker.primary_expression_start_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree b = null;
            CommonTree string_literal61 = null;
            JavaMaker.predefined_type_return predefined_type56 = default(JavaMaker.predefined_type_return);

            JavaMaker.identifier_return identifier57 = default(JavaMaker.identifier_return);

            JavaMaker.generic_argument_list_return generic_argument_list58 = default(JavaMaker.generic_argument_list_return);

            JavaMaker.identifier_return identifier59 = default(JavaMaker.identifier_return);

            JavaMaker.identifier_return identifier60 = default(JavaMaker.identifier_return);

            JavaMaker.paren_expression_return paren_expression62 = default(JavaMaker.paren_expression_return);

            JavaMaker.typeof_expression_return typeof_expression63 = default(JavaMaker.typeof_expression_return);

            JavaMaker.literal_return literal64 = default(JavaMaker.literal_return);


            CommonTree c_tree=null;
            CommonTree b_tree=null;
            CommonTree string_literal61_tree=null;
            RewriteRuleNodeStream stream_207 = new RewriteRuleNodeStream(adaptor,"token 207");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:827:25: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( (c= '::' identifier )? ) | 'this' | b= 'base' -> SUPER[$b.token, \"super\"] | paren_expression | typeof_expression | literal )
                int alt30 = 8;
                alt30 = dfa30.Predict(input);
                switch (alt30) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:828:2: predefined_type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_predefined_type_in_primary_expression_start1775);
                        	predefined_type56 = predefined_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, predefined_type56.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:829:4: ( identifier generic_argument_list )=> identifier generic_argument_list
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_primary_expression_start1803);
                        	identifier57 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, identifier57.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_generic_argument_list_in_primary_expression_start1807);
                        	generic_argument_list58 = generic_argument_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, generic_argument_list58.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:830:4: identifier ( (c= '::' identifier )? )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_primary_expression_start1812);
                        	identifier59 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, identifier59.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:830:15: ( (c= '::' identifier )? )
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:830:16: (c= '::' identifier )?
                        	{
                        		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:830:16: (c= '::' identifier )?
                        		int alt29 = 2;
                        		int LA29_0 = input.LA(1);

                        		if ( (LA29_0 == 208) )
                        		{
                        		    alt29 = 1;
                        		}
                        		switch (alt29) 
                        		{
                        		    case 1 :
                        		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:830:17: c= '::' identifier
                        		        {
                        		        	_last = (CommonTree)input.LT(1);
                        		        	c=(CommonTree)Match(input,208,FOLLOW_208_in_primary_expression_start1818); if (state.failed) return retval;
                        		        	if ( state.backtracking == 0 )
                        		        	{c_tree = (CommonTree)adaptor.DupNode(c);

                        		        		root_0 = (CommonTree)adaptor.BecomeRoot(c_tree, root_0);
                        		        	}
                        		        	_last = (CommonTree)input.LT(1);
                        		        	PushFollow(FOLLOW_identifier_in_primary_expression_start1823);
                        		        	identifier60 = identifier();
                        		        	state._fsp--;
                        		        	if (state.failed) return retval;
                        		        	if ( (state.backtracking==0) ) 
                        		        	adaptor.AddChild(root_0, identifier60.Tree);
                        		        	if ( (state.backtracking==0) )
                        		        	{
                        		        	   Warning(((c != null) ? c.Line : 0), "[UNSUPPORTED] external aliases are not yet supported"); 
                        		        	}

                        		        	if ( (state.backtracking==0) ) {
                        		        	}
                        		        }
                        		        break;

                        		}


                        		if ( (state.backtracking==0) ) {
                        		}
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:831:4: 'this'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal61=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_primary_expression_start1834); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal61_tree = (CommonTree)adaptor.DupNode(string_literal61);

                        		adaptor.AddChild(root_0, string_literal61_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:832:4: b= 'base'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	b=(CommonTree)Match(input,207,FOLLOW_207_in_primary_expression_start1842); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_207.Add(b);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 832:13: -> SUPER[$b.token, \"super\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SUPER, b.token, "super"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:833:4: paren_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_paren_expression_in_primary_expression_start1852);
                        	paren_expression62 = paren_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, paren_expression62.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:834:4: typeof_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_typeof_expression_in_primary_expression_start1857);
                        	typeof_expression63 = typeof_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, typeof_expression63.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:835:4: literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_literal_in_primary_expression_start1875);
                        	literal64 = literal();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, literal64.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "primary_expression_start"

        public class primary_expression_part_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "primary_expression_part"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:838:1: primary_expression_part[CommonTree lhs] : ( access_identifier[$lhs] | brackets_or_arguments[$lhs] | p= '++' -> ^( POSTINC[$p.token, \"++\"] ) | m= '--' -> ^( POSTDEC[$m.token, \"--\"] ) );
        public JavaMaker.primary_expression_part_return primary_expression_part(CommonTree lhs) // throws RecognitionException [1]
        {   
            JavaMaker.primary_expression_part_return retval = new JavaMaker.primary_expression_part_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree p = null;
            CommonTree m = null;
            JavaMaker.access_identifier_return access_identifier65 = default(JavaMaker.access_identifier_return);

            JavaMaker.brackets_or_arguments_return brackets_or_arguments66 = default(JavaMaker.brackets_or_arguments_return);


            CommonTree p_tree=null;
            CommonTree m_tree=null;
            RewriteRuleNodeStream stream_210 = new RewriteRuleNodeStream(adaptor,"token 210");
            RewriteRuleNodeStream stream_209 = new RewriteRuleNodeStream(adaptor,"token 209");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:838:41: ( access_identifier[$lhs] | brackets_or_arguments[$lhs] | p= '++' -> ^( POSTINC[$p.token, \"++\"] ) | m= '--' -> ^( POSTDEC[$m.token, \"--\"] ) )
                int alt31 = 4;
                switch ( input.LA(1) ) 
                {
                case DOT:
                case PTR:
                	{
                    alt31 = 1;
                    }
                    break;
                case OPEN_BRACKET:
                case LPAREN:
                	{
                    alt31 = 2;
                    }
                    break;
                case 209:
                	{
                    alt31 = 3;
                    }
                    break;
                case 210:
                	{
                    alt31 = 4;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d31s0 =
                	        new NoViableAltException("", 31, 0, input);

                	    throw nvae_d31s0;
                }

                switch (alt31) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:839:3: access_identifier[$lhs]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_access_identifier_in_primary_expression_part1888);
                        	access_identifier65 = access_identifier(lhs);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, access_identifier65.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:840:4: brackets_or_arguments[$lhs]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_part1894);
                        	brackets_or_arguments66 = brackets_or_arguments(lhs);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, brackets_or_arguments66.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:841:4: p= '++'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	p=(CommonTree)Match(input,209,FOLLOW_209_in_primary_expression_part1903); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_209.Add(p);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 841:11: -> ^( POSTINC[$p.token, \"++\"] )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:841:14: ^( POSTINC[$p.token, \"++\"] )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POSTINC, p.token, "++"), root_1);

                        	    adaptor.AddChild(root_1,  dupTree(lhs) );

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:842:4: m= '--'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	m=(CommonTree)Match(input,210,FOLLOW_210_in_primary_expression_part1920); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_210.Add(m);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 842:11: -> ^( POSTDEC[$m.token, \"--\"] )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:842:14: ^( POSTDEC[$m.token, \"--\"] )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POSTDEC, m.token, "--"), root_1);

                        	    adaptor.AddChild(root_1,  dupTree(lhs) );

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "primary_expression_part"

        public class access_identifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "access_identifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:844:1: access_identifier[CommonTree lhs] : access_operator type_or_generic -> ^( access_operator type_or_generic ) ;
        public JavaMaker.access_identifier_return access_identifier(CommonTree lhs) // throws RecognitionException [1]
        {   
            JavaMaker.access_identifier_return retval = new JavaMaker.access_identifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.access_operator_return access_operator67 = default(JavaMaker.access_operator_return);

            JavaMaker.type_or_generic_return type_or_generic68 = default(JavaMaker.type_or_generic_return);


            RewriteRuleSubtreeStream stream_type_or_generic = new RewriteRuleSubtreeStream(adaptor,"rule type_or_generic");
            RewriteRuleSubtreeStream stream_access_operator = new RewriteRuleSubtreeStream(adaptor,"rule access_operator");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:844:35: ( access_operator type_or_generic -> ^( access_operator type_or_generic ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:845:2: access_operator type_or_generic
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_access_operator_in_access_identifier1944);
                	access_operator67 = access_operator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_access_operator.Add(access_operator67.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_or_generic_in_access_identifier1948);
                	type_or_generic68 = type_or_generic();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type_or_generic.Add(type_or_generic68.Tree);


                	// AST REWRITE
                	// elements:          type_or_generic, access_operator
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 845:36: -> ^( access_operator type_or_generic )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:845:39: ^( access_operator type_or_generic )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_access_operator.NextNode(), root_1);

                	    adaptor.AddChild(root_1,  dupTree(lhs) );
                	    adaptor.AddChild(root_1, stream_type_or_generic.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "access_identifier"

        public class access_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "access_operator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:846:1: access_operator : ( '.' | '->' );
        public JavaMaker.access_operator_return access_operator() // throws RecognitionException [1]
        {   
            JavaMaker.access_operator_return retval = new JavaMaker.access_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set69 = null;

            CommonTree set69_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:846:16: ( '.' | '->' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set69 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set69_tree = (CommonTree)adaptor.DupNode(set69);

                	    adaptor.AddChild(root_0, set69_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "access_operator"

        public class brackets_or_arguments_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "brackets_or_arguments"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:848:1: brackets_or_arguments[CommonTree lhs] : ( brackets[$lhs] | arguments[$lhs] );
        public JavaMaker.brackets_or_arguments_return brackets_or_arguments(CommonTree lhs) // throws RecognitionException [1]
        {   
            JavaMaker.brackets_or_arguments_return retval = new JavaMaker.brackets_or_arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.brackets_return brackets70 = default(JavaMaker.brackets_return);

            JavaMaker.arguments_return arguments71 = default(JavaMaker.arguments_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:848:39: ( brackets[$lhs] | arguments[$lhs] )
                int alt32 = 2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0 == OPEN_BRACKET) )
                {
                    alt32 = 1;
                }
                else if ( (LA32_0 == LPAREN) )
                {
                    alt32 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d32s0 =
                        new NoViableAltException("", 32, 0, input);

                    throw nvae_d32s0;
                }
                switch (alt32) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:849:2: brackets[$lhs]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_brackets_in_brackets_or_arguments1981);
                        	brackets70 = brackets(lhs);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, brackets70.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:849:19: arguments[$lhs]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_arguments_in_brackets_or_arguments1986);
                        	arguments71 = arguments(lhs);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, arguments71.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "brackets_or_arguments"

        public class brackets_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "brackets"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:850:1: brackets[CommonTree lhs] : '[' ( expression_list )? ']' -> ^( INDEX ( expression_list )? ) ;
        public JavaMaker.brackets_return brackets(CommonTree lhs) // throws RecognitionException [1]
        {   
            JavaMaker.brackets_return retval = new JavaMaker.brackets_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal72 = null;
            CommonTree char_literal74 = null;
            JavaMaker.expression_list_return expression_list73 = default(JavaMaker.expression_list_return);


            CommonTree char_literal72_tree=null;
            CommonTree char_literal74_tree=null;
            RewriteRuleNodeStream stream_OPEN_BRACKET = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACKET");
            RewriteRuleNodeStream stream_CLOSE_BRACKET = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACKET");
            RewriteRuleSubtreeStream stream_expression_list = new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:850:26: ( '[' ( expression_list )? ']' -> ^( INDEX ( expression_list )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:851:2: '[' ( expression_list )? ']'
                {
                	_last = (CommonTree)input.LT(1);
                	char_literal72=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_brackets1997); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACKET.Add(char_literal72);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:851:8: ( expression_list )?
                	int alt33 = 2;
                	int LA33_0 = input.LA(1);

                	if ( ((LA33_0 >= MONONOT && LA33_0 <= MONOTWIDDLE) || LA33_0 == NEW_ARRAY || (LA33_0 >= OBJECT && LA33_0 <= THIS) || LA33_0 == LPAREN || LA33_0 == BIT_AND || (LA33_0 >= PLUS && LA33_0 <= MINUS) || LA33_0 == STAR || (LA33_0 >= BOOL && LA33_0 <= NULL) || (LA33_0 >= ELIF && LA33_0 <= UNDEF) || LA33_0 == 195 || LA33_0 == 197 || LA33_0 == 207 || (LA33_0 >= 209 && LA33_0 <= 210) || (LA33_0 >= 214 && LA33_0 <= 219) || LA33_0 == 221 || (LA33_0 >= 224 && LA33_0 <= 239) || (LA33_0 >= 241 && LA33_0 <= 244) || (LA33_0 >= 247 && LA33_0 <= 254) || LA33_0 == 256 || (LA33_0 >= 263 && LA33_0 <= 264) || (LA33_0 >= 274 && LA33_0 <= 277)) )
                	{
                	    alt33 = 1;
                	}
                	switch (alt33) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:851:8: expression_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_list_in_brackets2001);
                	        	expression_list73 = expression_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_expression_list.Add(expression_list73.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal74=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_brackets2006); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACKET.Add(char_literal74);



                	// AST REWRITE
                	// elements:          expression_list
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 851:31: -> ^( INDEX ( expression_list )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:851:34: ^( INDEX ( expression_list )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INDEX, "INDEX"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(lhs) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:851:60: ( expression_list )?
                	    if ( stream_expression_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_expression_list.NextTree());

                	    }
                	    stream_expression_list.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "brackets"

        public class paren_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "paren_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:852:1: paren_expression : '(' expression ')' -> ^( PARENS expression ) ;
        public JavaMaker.paren_expression_return paren_expression() // throws RecognitionException [1]
        {   
            JavaMaker.paren_expression_return retval = new JavaMaker.paren_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal75 = null;
            CommonTree char_literal77 = null;
            JavaMaker.expression_return expression76 = default(JavaMaker.expression_return);


            CommonTree char_literal75_tree=null;
            CommonTree char_literal77_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:852:17: ( '(' expression ')' -> ^( PARENS expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:853:2: '(' expression ')'
                {
                	_last = (CommonTree)input.LT(1);
                	char_literal75=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_paren_expression2026); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal75);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_paren_expression2030);
                	expression76 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_expression.Add(expression76.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal77=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_paren_expression2034); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal77);



                	// AST REWRITE
                	// elements:          expression
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 853:25: -> ^( PARENS expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:853:28: ^( PARENS expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARENS, "PARENS"), root_1);

                	    adaptor.AddChild(root_1, stream_expression.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "paren_expression"

        public class arguments_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "arguments"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:854:1: arguments[CommonTree lhs] : '(' ( argument_list )? ')' -> ^( APPLY ( argument_list )? ) ;
        public JavaMaker.arguments_return arguments(CommonTree lhs) // throws RecognitionException [1]
        {   
            JavaMaker.arguments_return retval = new JavaMaker.arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal78 = null;
            CommonTree char_literal80 = null;
            JavaMaker.argument_list_return argument_list79 = default(JavaMaker.argument_list_return);


            CommonTree char_literal78_tree=null;
            CommonTree char_literal80_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_argument_list = new RewriteRuleSubtreeStream(adaptor,"rule argument_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:854:27: ( '(' ( argument_list )? ')' -> ^( APPLY ( argument_list )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:855:2: '(' ( argument_list )? ')'
                {
                	_last = (CommonTree)input.LT(1);
                	char_literal78=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_arguments2052); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal78);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:855:8: ( argument_list )?
                	int alt34 = 2;
                	int LA34_0 = input.LA(1);

                	if ( ((LA34_0 >= MONONOT && LA34_0 <= MONOTWIDDLE) || LA34_0 == NEW_ARRAY || (LA34_0 >= OBJECT && LA34_0 <= THIS) || LA34_0 == LPAREN || LA34_0 == BIT_AND || (LA34_0 >= PLUS && LA34_0 <= MINUS) || LA34_0 == STAR || (LA34_0 >= BOOL && LA34_0 <= NULL) || (LA34_0 >= ELIF && LA34_0 <= UNDEF) || LA34_0 == 195 || LA34_0 == 197 || LA34_0 == 207 || (LA34_0 >= 209 && LA34_0 <= 210) || (LA34_0 >= 212 && LA34_0 <= 219) || LA34_0 == 221 || (LA34_0 >= 224 && LA34_0 <= 239) || (LA34_0 >= 241 && LA34_0 <= 244) || (LA34_0 >= 247 && LA34_0 <= 254) || LA34_0 == 256 || (LA34_0 >= 263 && LA34_0 <= 264) || (LA34_0 >= 274 && LA34_0 <= 277)) )
                	{
                	    alt34 = 1;
                	}
                	switch (alt34) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:855:8: argument_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_argument_list_in_arguments2056);
                	        	argument_list79 = argument_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_argument_list.Add(argument_list79.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal80=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_arguments2061); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal80);



                	// AST REWRITE
                	// elements:          argument_list
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 855:29: -> ^( APPLY ( argument_list )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:855:32: ^( APPLY ( argument_list )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, "APPLY"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(lhs) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:855:58: ( argument_list )?
                	    if ( stream_argument_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_argument_list.NextTree());

                	    }
                	    stream_argument_list.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "arguments"

        public class argument_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:856:1: argument_list : a1= argument ( ',' an+= argument )* -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* ) ;
        public JavaMaker.argument_list_return argument_list() // throws RecognitionException [1]
        {   
            JavaMaker.argument_list_return retval = new JavaMaker.argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal81 = null;
            List list_an = null;
            JavaMaker.argument_return a1 = default(JavaMaker.argument_return);

            RuleReturnScope an = null;
            CommonTree char_literal81_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_argument = new RewriteRuleSubtreeStream(adaptor,"rule argument");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:856:14: (a1= argument ( ',' an+= argument )* -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:857:2: a1= argument ( ',' an+= argument )*
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_argument_in_argument_list2082);
                	a1 = argument();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_argument.Add(a1.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:857:14: ( ',' an+= argument )*
                	do 
                	{
                	    int alt35 = 2;
                	    int LA35_0 = input.LA(1);

                	    if ( (LA35_0 == COMMA) )
                	    {
                	        alt35 = 1;
                	    }


                	    switch (alt35) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:857:15: ',' an+= argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal81=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_argument_list2085); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal81);

                			    	_last = (CommonTree)input.LT(1);
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_argument_in_argument_list2089);
                			    	an = argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_argument.Add(an.Tree);
                			    	if (list_an == null) list_an = new ArrayList();
                			    	list_an.Add(an.Tree);


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop35;
                	    }
                	} while (true);

                	loop35:
                		;	// Stops C# compiler whining that label 'loop35' has no statements



                	// AST REWRITE
                	// elements:          a1, an
                	// token labels:      
                	// rule labels:       retval, a1
                	// token list labels: 
                	// rule list labels:  an
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(adaptor, "rule a1", a1!=null ? a1.Tree : null);
                	RewriteRuleSubtreeStream stream_an = new RewriteRuleSubtreeStream(adaptor, "token an", list_an);
                	root_0 = (CommonTree)adaptor.Nil;
                	// 857:34: -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:857:37: ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, ((a1 != null) ? ((CommonTree)a1.Start) : null).Token, "ARGS"), root_1);

                	    adaptor.AddChild(root_1, stream_a1.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:857:72: ( $an)*
                	    while ( stream_an.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_an.NextTree());

                	    }
                	    stream_an.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument_list"

        public class argument_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:859:1: argument : ( argument_name argument_value | argument_value );
        public JavaMaker.argument_return argument() // throws RecognitionException [1]
        {   
            JavaMaker.argument_return retval = new JavaMaker.argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.argument_name_return argument_name82 = default(JavaMaker.argument_name_return);

            JavaMaker.argument_value_return argument_value83 = default(JavaMaker.argument_value_return);

            JavaMaker.argument_value_return argument_value84 = default(JavaMaker.argument_value_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:859:9: ( argument_name argument_value | argument_value )
                int alt36 = 2;
                switch ( input.LA(1) ) 
                {
                case IDENTIFIER:
                	{
                    int LA36_1 = input.LA(2);

                    if ( (LA36_1 == OPEN_BRACKET || (LA36_1 >= LPAREN && LA36_1 <= NULL_COALESCE) || (LA36_1 >= ASSIGN && LA36_1 <= LEFT_SHIFT_ASSIGN) || (LA36_1 >= LOG_OR && LA36_1 <= LEFT_SHIFT) || (LA36_1 >= PLUS && LA36_1 <= COMMA) || (LA36_1 >= DOT && LA36_1 <= GT) || LA36_1 == RPAREN || (LA36_1 >= 208 && LA36_1 <= 210) || LA36_1 == 220 || (LA36_1 >= 222 && LA36_1 <= 223)) )
                    {
                        alt36 = 2;
                    }
                    else if ( (LA36_1 == 211) )
                    {
                        alt36 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d36s1 =
                            new NoViableAltException("", 36, 1, input);

                        throw nvae_d36s1;
                    }
                    }
                    break;
                case 225:
                	{
                    int LA36_2 = input.LA(2);

                    if ( (LA36_2 == 211) )
                    {
                        alt36 = 1;
                    }
                    else if ( (LA36_2 == OBJECT || LA36_2 == OPEN_BRACKET || (LA36_2 >= LPAREN && LA36_2 <= NULL_COALESCE) || (LA36_2 >= ASSIGN && LA36_2 <= LEFT_SHIFT_ASSIGN) || (LA36_2 >= LOG_OR && LA36_2 <= LEFT_SHIFT) || (LA36_2 >= PLUS && LA36_2 <= COMMA) || (LA36_2 >= BOOL && LA36_2 <= IDENTIFIER) || (LA36_2 >= DOT && LA36_2 <= GT) || (LA36_2 >= ELIF && LA36_2 <= UNDEF) || LA36_2 == RPAREN || LA36_2 == 195 || LA36_2 == 206 || (LA36_2 >= 208 && LA36_2 <= 210) || (LA36_2 >= 220 && LA36_2 <= 239) || (LA36_2 >= 241 && LA36_2 <= 244) || (LA36_2 >= 247 && LA36_2 <= 254) || LA36_2 == 256 || (LA36_2 >= 263 && LA36_2 <= 264) || (LA36_2 >= 274 && LA36_2 <= 277)) )
                    {
                        alt36 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d36s2 =
                            new NoViableAltException("", 36, 2, input);

                        throw nvae_d36s2;
                    }
                    }
                    break;
                case MONONOT:
                case MONOTWIDDLE:
                case NEW_ARRAY:
                case OBJECT:
                case THIS:
                case LPAREN:
                case BIT_AND:
                case PLUS:
                case MINUS:
                case STAR:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case 197:
                case 207:
                case 209:
                case 210:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 251:
                case 252:
                case 253:
                case 254:
                case 275:
                case 276:
                	{
                    alt36 = 2;
                    }
                    break;
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    int LA36_4 = input.LA(2);

                    if ( (LA36_4 == 211) )
                    {
                        alt36 = 1;
                    }
                    else if ( (LA36_4 == OPEN_BRACKET || (LA36_4 >= LPAREN && LA36_4 <= NULL_COALESCE) || (LA36_4 >= ASSIGN && LA36_4 <= LEFT_SHIFT_ASSIGN) || (LA36_4 >= LOG_OR && LA36_4 <= LEFT_SHIFT) || (LA36_4 >= PLUS && LA36_4 <= COMMA) || (LA36_4 >= DOT && LA36_4 <= GT) || LA36_4 == RPAREN || (LA36_4 >= 208 && LA36_4 <= 210) || LA36_4 == 220 || (LA36_4 >= 222 && LA36_4 <= 223)) )
                    {
                        alt36 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d36s4 =
                            new NoViableAltException("", 36, 4, input);

                        throw nvae_d36s4;
                    }
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d36s0 =
                	        new NoViableAltException("", 36, 0, input);

                	    throw nvae_d36s0;
                }

                switch (alt36) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:860:2: argument_name argument_value
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_argument_name_in_argument2113);
                        	argument_name82 = argument_name();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, argument_name82.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_argument_value_in_argument2117);
                        	argument_value83 = argument_value();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, argument_value83.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:861:4: argument_value
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_argument_value_in_argument2122);
                        	argument_value84 = argument_value();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, argument_value84.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument"

        public class argument_name_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:862:1: argument_name : identifier ':' ;
        public JavaMaker.argument_name_return argument_name() // throws RecognitionException [1]
        {   
            JavaMaker.argument_name_return retval = new JavaMaker.argument_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal86 = null;
            JavaMaker.identifier_return identifier85 = default(JavaMaker.identifier_return);


            CommonTree char_literal86_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:862:14: ( identifier ':' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:863:2: identifier ':'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_argument_name2129);
                	identifier85 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier85.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal86=(CommonTree)Match(input,211,FOLLOW_211_in_argument_name2133); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal86_tree = (CommonTree)adaptor.DupNode(char_literal86);

                		adaptor.AddChild(root_0, char_literal86_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument_name"

        public class argument_value_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "argument_value"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:864:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
        public JavaMaker.argument_value_return argument_value() // throws RecognitionException [1]
        {   
            JavaMaker.argument_value_return retval = new JavaMaker.argument_value_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal89 = null;
            JavaMaker.expression_return expression87 = default(JavaMaker.expression_return);

            JavaMaker.ref_variable_reference_return ref_variable_reference88 = default(JavaMaker.ref_variable_reference_return);

            JavaMaker.variable_reference_return variable_reference90 = default(JavaMaker.variable_reference_return);


            CommonTree string_literal89_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:864:15: ( expression | ref_variable_reference | 'out' variable_reference )
                int alt37 = 3;
                switch ( input.LA(1) ) 
                {
                case MONONOT:
                case MONOTWIDDLE:
                case NEW_ARRAY:
                case OBJECT:
                case THIS:
                case LPAREN:
                case BIT_AND:
                case PLUS:
                case MINUS:
                case STAR:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 197:
                case 207:
                case 209:
                case 210:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 251:
                case 252:
                case 253:
                case 254:
                case 256:
                case 263:
                case 264:
                case 274:
                case 275:
                case 276:
                case 277:
                	{
                    alt37 = 1;
                    }
                    break;
                case 213:
                	{
                    alt37 = 2;
                    }
                    break;
                case 212:
                	{
                    alt37 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d37s0 =
                	        new NoViableAltException("", 37, 0, input);

                	    throw nvae_d37s0;
                }

                switch (alt37) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:865:2: expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_argument_value2141);
                        	expression87 = expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression87.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:866:4: ref_variable_reference
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_ref_variable_reference_in_argument_value2147);
                        	ref_variable_reference88 = ref_variable_reference();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, ref_variable_reference88.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:867:4: 'out' variable_reference
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal89=(CommonTree)Match(input,212,FOLLOW_212_in_argument_value2153); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal89_tree = (CommonTree)adaptor.DupNode(string_literal89);

                        		adaptor.AddChild(root_0, string_literal89_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_variable_reference_in_argument_value2157);
                        	variable_reference90 = variable_reference();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, variable_reference90.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "argument_value"

        public class ref_variable_reference_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ref_variable_reference"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:868:1: ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
        public JavaMaker.ref_variable_reference_return ref_variable_reference() // throws RecognitionException [1]
        {   
            JavaMaker.ref_variable_reference_return retval = new JavaMaker.ref_variable_reference_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal91 = null;
            CommonTree char_literal92 = null;
            CommonTree char_literal94 = null;
            JavaMaker.type_return type93 = default(JavaMaker.type_return);

            JavaMaker.ref_variable_reference_return ref_variable_reference95 = default(JavaMaker.ref_variable_reference_return);

            JavaMaker.variable_reference_return variable_reference96 = default(JavaMaker.variable_reference_return);

            JavaMaker.variable_reference_return variable_reference97 = default(JavaMaker.variable_reference_return);


            CommonTree string_literal91_tree=null;
            CommonTree char_literal92_tree=null;
            CommonTree char_literal94_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:868:23: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:869:2: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal91=(CommonTree)Match(input,213,FOLLOW_213_in_ref_variable_reference2165); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal91_tree = (CommonTree)adaptor.DupNode(string_literal91);

                		adaptor.AddChild(root_0, string_literal91_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:870:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
                	int alt39 = 2;
                	alt39 = dfa39.Predict(input);
                	switch (alt39) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:870:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal92=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_ref_variable_reference2187); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal92_tree = (CommonTree)adaptor.DupNode(char_literal92);

                	        		adaptor.AddChild(root_0, char_literal92_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_ref_variable_reference2191);
                	        	type93 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type93.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal94=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_ref_variable_reference2195); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal94_tree = (CommonTree)adaptor.DupNode(char_literal94);

                	        		adaptor.AddChild(root_0, char_literal94_tree);
                	        	}
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:870:47: ( ref_variable_reference | variable_reference )
                	        	int alt38 = 2;
                	        	int LA38_0 = input.LA(1);

                	        	if ( (LA38_0 == 213) )
                	        	{
                	        	    alt38 = 1;
                	        	}
                	        	else if ( ((LA38_0 >= MONONOT && LA38_0 <= MONOTWIDDLE) || LA38_0 == NEW_ARRAY || (LA38_0 >= OBJECT && LA38_0 <= THIS) || LA38_0 == LPAREN || LA38_0 == BIT_AND || (LA38_0 >= PLUS && LA38_0 <= MINUS) || LA38_0 == STAR || (LA38_0 >= BOOL && LA38_0 <= NULL) || (LA38_0 >= ELIF && LA38_0 <= UNDEF) || LA38_0 == 195 || LA38_0 == 197 || LA38_0 == 207 || (LA38_0 >= 209 && LA38_0 <= 210) || (LA38_0 >= 214 && LA38_0 <= 219) || LA38_0 == 221 || (LA38_0 >= 224 && LA38_0 <= 239) || (LA38_0 >= 241 && LA38_0 <= 244) || (LA38_0 >= 247 && LA38_0 <= 254) || LA38_0 == 256 || (LA38_0 >= 263 && LA38_0 <= 264) || (LA38_0 >= 274 && LA38_0 <= 277)) )
                	        	{
                	        	    alt38 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d38s0 =
                	        	        new NoViableAltException("", 38, 0, input);

                	        	    throw nvae_d38s0;
                	        	}
                	        	switch (alt38) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:870:48: ref_variable_reference
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_ref_variable_reference_in_ref_variable_reference2200);
                	        	        	ref_variable_reference95 = ref_variable_reference();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, ref_variable_reference95.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:870:73: variable_reference
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_variable_reference_in_ref_variable_reference2204);
                	        	        	variable_reference96 = variable_reference();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, variable_reference96.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:872:5: variable_reference
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variable_reference_in_ref_variable_reference2240);
                	        	variable_reference97 = variable_reference();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, variable_reference97.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ref_variable_reference"

        public class variable_reference_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_reference"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:874:1: variable_reference : expression ;
        public JavaMaker.variable_reference_return variable_reference() // throws RecognitionException [1]
        {   
            JavaMaker.variable_reference_return retval = new JavaMaker.variable_reference_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression98 = default(JavaMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:874:19: ( expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:875:2: expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_variable_reference2250);
                	expression98 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression98.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_reference"

        public class rank_specifiers_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "rank_specifiers"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:876:1: rank_specifiers : ( rank_specifier )+ ;
        public JavaMaker.rank_specifiers_return rank_specifiers() // throws RecognitionException [1]
        {   
            JavaMaker.rank_specifiers_return retval = new JavaMaker.rank_specifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.rank_specifier_return rank_specifier99 = default(JavaMaker.rank_specifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:876:16: ( ( rank_specifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:877:2: ( rank_specifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:877:2: ( rank_specifier )+
                	int cnt40 = 0;
                	do 
                	{
                	    int alt40 = 2;
                	    int LA40_0 = input.LA(1);

                	    if ( (LA40_0 == OPEN_BRACKET) )
                	    {
                	        int LA40_2 = input.LA(2);

                	        if ( (LA40_2 == CLOSE_BRACKET || LA40_2 == COMMA) )
                	        {
                	            alt40 = 1;
                	        }


                	    }


                	    switch (alt40) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:877:2: rank_specifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_rank_specifier_in_rank_specifiers2258);
                			    	rank_specifier99 = rank_specifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, rank_specifier99.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt40 >= 1 ) goto loop40;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee40 =
                		                new EarlyExitException(40, input);
                		            throw eee40;
                	    }
                	    cnt40++;
                	} while (true);

                	loop40:
                		;	// Stops C# compiler whining that label 'loop40' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "rank_specifiers"

        public class rank_specifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "rank_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:879:1: rank_specifier : o= '[' ( dim_separators )? c= ']' -> $o $c ( dim_separators )? ;
        public JavaMaker.rank_specifier_return rank_specifier() // throws RecognitionException [1]
        {   
            JavaMaker.rank_specifier_return retval = new JavaMaker.rank_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o = null;
            CommonTree c = null;
            JavaMaker.dim_separators_return dim_separators100 = default(JavaMaker.dim_separators_return);


            CommonTree o_tree=null;
            CommonTree c_tree=null;
            RewriteRuleNodeStream stream_OPEN_BRACKET = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACKET");
            RewriteRuleNodeStream stream_CLOSE_BRACKET = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACKET");
            RewriteRuleSubtreeStream stream_dim_separators = new RewriteRuleSubtreeStream(adaptor,"rule dim_separators");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:879:15: (o= '[' ( dim_separators )? c= ']' -> $o $c ( dim_separators )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:880:2: o= '[' ( dim_separators )? c= ']'
                {
                	_last = (CommonTree)input.LT(1);
                	o=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_rank_specifier2279); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACKET.Add(o);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:880:10: ( dim_separators )?
                	int alt41 = 2;
                	int LA41_0 = input.LA(1);

                	if ( (LA41_0 == COMMA) )
                	{
                	    alt41 = 1;
                	}
                	switch (alt41) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:880:10: dim_separators
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_dim_separators_in_rank_specifier2283);
                	        	dim_separators100 = dim_separators();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_dim_separators.Add(dim_separators100.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_rank_specifier2290); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACKET.Add(c);



                	// AST REWRITE
                	// elements:          o, dim_separators, c
                	// token labels:      c, o
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_c = new RewriteRuleNodeStream(adaptor, "token c", c);
                	RewriteRuleNodeStream stream_o = new RewriteRuleNodeStream(adaptor, "token o", o);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 880:34: -> $o $c ( dim_separators )?
                	{
                	    adaptor.AddChild(root_0, stream_o.NextNode());
                	    adaptor.AddChild(root_0, stream_c.NextNode());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:880:43: ( dim_separators )?
                	    if ( stream_dim_separators.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_dim_separators.NextTree());

                	    }
                	    stream_dim_separators.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "rank_specifier"

        public class dim_separators_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "dim_separators"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:881:1: dim_separators : (c= ',' )+ ->;
        public JavaMaker.dim_separators_return dim_separators() // throws RecognitionException [1]
        {   
            JavaMaker.dim_separators_return retval = new JavaMaker.dim_separators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;

            CommonTree c_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");


                CommonTree ret = (CommonTree)adaptor.Nil;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:887:2: ( (c= ',' )+ ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:888:9: (c= ',' )+
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:888:9: (c= ',' )+
                	int cnt42 = 0;
                	do 
                	{
                	    int alt42 = 2;
                	    int LA42_0 = input.LA(1);

                	    if ( (LA42_0 == COMMA) )
                	    {
                	        alt42 = 1;
                	    }


                	    switch (alt42) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:888:10: c= ','
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	c=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_dim_separators2329); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(c);

                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   adaptor.AddChild(ret, adaptor.Create(OPEN_BRACKET, c.token, "["));adaptor.AddChild(ret, adaptor.Create(CLOSE_BRACKET, c.token, "]")); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt42 >= 1 ) goto loop42;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee42 =
                		                new EarlyExitException(42, input);
                		            throw eee42;
                	    }
                	    cnt42++;
                	} while (true);

                	loop42:
                		;	// Stops C# compiler whining that label 'loop42' has no statements



                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 888:158: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      retval.tree =  ret;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "dim_separators"

        public class delegate_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "delegate_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:890:1: delegate_creation_expression : t1= type_name '(' t2= type_name ')' -> ^( NEW_DELEGATE[$t1.start.Token, \"new(delegate)\"] ^( TYPE[$t1.start.Token, \"TYPE\"] $t1) ^( ARGS[$t2.start.Token, \"ARGS\"] $t2) ) ;
        public JavaMaker.delegate_creation_expression_return delegate_creation_expression() // throws RecognitionException [1]
        {   
            JavaMaker.delegate_creation_expression_return retval = new JavaMaker.delegate_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal101 = null;
            CommonTree char_literal102 = null;
            JavaMaker.type_name_return t1 = default(JavaMaker.type_name_return);

            JavaMaker.type_name_return t2 = default(JavaMaker.type_name_return);


            CommonTree char_literal101_tree=null;
            CommonTree char_literal102_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_type_name = new RewriteRuleSubtreeStream(adaptor,"rule type_name");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:890:29: (t1= type_name '(' t2= type_name ')' -> ^( NEW_DELEGATE[$t1.start.Token, \"new(delegate)\"] ^( TYPE[$t1.start.Token, \"TYPE\"] $t1) ^( ARGS[$t2.start.Token, \"ARGS\"] $t2) ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:892:2: t1= type_name '(' t2= type_name ')'
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_delegate_creation_expression2349);
                	t1 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type_name.Add(t1.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal101=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_delegate_creation_expression2353); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal101);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_delegate_creation_expression2359);
                	t2 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type_name.Add(t2.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal102=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_delegate_creation_expression2363); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal102);



                	// AST REWRITE
                	// elements:          t2, t1
                	// token labels:      
                	// rule labels:       t2, retval, t1
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_t2 = new RewriteRuleSubtreeStream(adaptor, "rule t2", t2!=null ? t2.Tree : null);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_t1 = new RewriteRuleSubtreeStream(adaptor, "rule t1", t1!=null ? t1.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 892:42: -> ^( NEW_DELEGATE[$t1.start.Token, \"new(delegate)\"] ^( TYPE[$t1.start.Token, \"TYPE\"] $t1) ^( ARGS[$t2.start.Token, \"ARGS\"] $t2) )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:892:45: ^( NEW_DELEGATE[$t1.start.Token, \"new(delegate)\"] ^( TYPE[$t1.start.Token, \"TYPE\"] $t1) ^( ARGS[$t2.start.Token, \"ARGS\"] $t2) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW_DELEGATE, ((t1 != null) ? ((CommonTree)t1.Start) : null).Token, "new(delegate)"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:892:94: ^( TYPE[$t1.start.Token, \"TYPE\"] $t1)
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, ((t1 != null) ? ((CommonTree)t1.Start) : null).Token, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, stream_t1.NextTree());

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:892:131: ^( ARGS[$t2.start.Token, \"ARGS\"] $t2)
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, ((t2 != null) ? ((CommonTree)t2.Start) : null).Token, "ARGS"), root_2);

                	    adaptor.AddChild(root_2, stream_t2.NextTree());

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "delegate_creation_expression"

        public class anonymous_object_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_object_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:893:1: anonymous_object_creation_expression : i= anonymous_object_initializer -> ^( NEW_ANON_OBJECT[$i.tree.Token, \"new(anonobj)\"] anonymous_object_initializer ) ;
        public JavaMaker.anonymous_object_creation_expression_return anonymous_object_creation_expression() // throws RecognitionException [1]
        {   
            JavaMaker.anonymous_object_creation_expression_return retval = new JavaMaker.anonymous_object_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.anonymous_object_initializer_return i = default(JavaMaker.anonymous_object_initializer_return);


            RewriteRuleSubtreeStream stream_anonymous_object_initializer = new RewriteRuleSubtreeStream(adaptor,"rule anonymous_object_initializer");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:893:37: (i= anonymous_object_initializer -> ^( NEW_ANON_OBJECT[$i.tree.Token, \"new(anonobj)\"] anonymous_object_initializer ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:895:2: i= anonymous_object_initializer
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2398);
                	i = anonymous_object_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_anonymous_object_initializer.Add(i.Tree);


                	// AST REWRITE
                	// elements:          anonymous_object_initializer
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 895:33: -> ^( NEW_ANON_OBJECT[$i.tree.Token, \"new(anonobj)\"] anonymous_object_initializer )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:895:36: ^( NEW_ANON_OBJECT[$i.tree.Token, \"new(anonobj)\"] anonymous_object_initializer )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW_ANON_OBJECT, ((i != null) ? ((CommonTree)i.Tree) : null).Token, "new(anonobj)"), root_1);

                	    adaptor.AddChild(root_1, stream_anonymous_object_initializer.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_object_creation_expression"

        public class anonymous_object_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_object_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:896:1: anonymous_object_initializer : '{' ( member_declarator_list ( ',' )? )? '}' ;
        public JavaMaker.anonymous_object_initializer_return anonymous_object_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.anonymous_object_initializer_return retval = new JavaMaker.anonymous_object_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal103 = null;
            CommonTree char_literal105 = null;
            CommonTree char_literal106 = null;
            JavaMaker.member_declarator_list_return member_declarator_list104 = default(JavaMaker.member_declarator_list_return);


            CommonTree char_literal103_tree=null;
            CommonTree char_literal105_tree=null;
            CommonTree char_literal106_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:896:29: ( '{' ( member_declarator_list ( ',' )? )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:897:2: '{' ( member_declarator_list ( ',' )? )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal103=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2415); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal103_tree = (CommonTree)adaptor.DupNode(char_literal103);

                		adaptor.AddChild(root_0, char_literal103_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:897:8: ( member_declarator_list ( ',' )? )?
                	int alt44 = 2;
                	int LA44_0 = input.LA(1);

                	if ( (LA44_0 == OBJECT || (LA44_0 >= BOOL && LA44_0 <= NULL) || (LA44_0 >= ELIF && LA44_0 <= UNDEF) || LA44_0 == 195 || LA44_0 == 221 || (LA44_0 >= 224 && LA44_0 <= 239) || (LA44_0 >= 241 && LA44_0 <= 244) || (LA44_0 >= 247 && LA44_0 <= 254) || LA44_0 == 256 || (LA44_0 >= 263 && LA44_0 <= 264) || (LA44_0 >= 274 && LA44_0 <= 277)) )
                	{
                	    alt44 = 1;
                	}
                	switch (alt44) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:897:9: member_declarator_list ( ',' )?
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer2420);
                	        	member_declarator_list104 = member_declarator_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, member_declarator_list104.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:897:34: ( ',' )?
                	        	int alt43 = 2;
                	        	int LA43_0 = input.LA(1);

                	        	if ( (LA43_0 == COMMA) )
                	        	{
                	        	    alt43 = 1;
                	        	}
                	        	switch (alt43) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:897:34: ','
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	char_literal105=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_anonymous_object_initializer2424); if (state.failed) return retval;
                	        	        	if ( state.backtracking == 0 )
                	        	        	{char_literal105_tree = (CommonTree)adaptor.DupNode(char_literal105);

                	        	        		adaptor.AddChild(root_0, char_literal105_tree);
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal106=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2431); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal106_tree = (CommonTree)adaptor.DupNode(char_literal106);

                		adaptor.AddChild(root_0, char_literal106_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_object_initializer"

        public class member_declarator_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_declarator_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:898:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
        public JavaMaker.member_declarator_list_return member_declarator_list() // throws RecognitionException [1]
        {   
            JavaMaker.member_declarator_list_return retval = new JavaMaker.member_declarator_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal108 = null;
            JavaMaker.member_declarator_return member_declarator107 = default(JavaMaker.member_declarator_return);

            JavaMaker.member_declarator_return member_declarator109 = default(JavaMaker.member_declarator_return);


            CommonTree char_literal108_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:898:23: ( member_declarator ( ',' member_declarator )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:899:2: member_declarator ( ',' member_declarator )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_declarator_in_member_declarator_list2439);
                	member_declarator107 = member_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, member_declarator107.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:899:21: ( ',' member_declarator )*
                	do 
                	{
                	    int alt45 = 2;
                	    int LA45_0 = input.LA(1);

                	    if ( (LA45_0 == COMMA) )
                	    {
                	        int LA45_1 = input.LA(2);

                	        if ( (LA45_1 == OBJECT || (LA45_1 >= BOOL && LA45_1 <= NULL) || (LA45_1 >= ELIF && LA45_1 <= UNDEF) || LA45_1 == 195 || LA45_1 == 221 || (LA45_1 >= 224 && LA45_1 <= 239) || (LA45_1 >= 241 && LA45_1 <= 244) || (LA45_1 >= 247 && LA45_1 <= 254) || LA45_1 == 256 || (LA45_1 >= 263 && LA45_1 <= 264) || (LA45_1 >= 274 && LA45_1 <= 277)) )
                	        {
                	            alt45 = 1;
                	        }


                	    }


                	    switch (alt45) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:899:22: ',' member_declarator
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal108=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_member_declarator_list2443); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal108_tree = (CommonTree)adaptor.DupNode(char_literal108);

                			    		adaptor.AddChild(root_0, char_literal108_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_member_declarator_in_member_declarator_list2445);
                			    	member_declarator109 = member_declarator();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, member_declarator109.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop45;
                	    }
                	} while (true);

                	loop45:
                		;	// Stops C# compiler whining that label 'loop45' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_declarator_list"

        public class member_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:900:1: member_declarator : qid ( '=' expression )? ;
        public JavaMaker.member_declarator_return member_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.member_declarator_return retval = new JavaMaker.member_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal111 = null;
            JavaMaker.qid_return qid110 = default(JavaMaker.qid_return);

            JavaMaker.expression_return expression112 = default(JavaMaker.expression_return);


            CommonTree char_literal111_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:900:18: ( qid ( '=' expression )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:901:2: qid ( '=' expression )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_qid_in_member_declarator2457);
                	qid110 = qid();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, qid110.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:901:8: ( '=' expression )?
                	int alt46 = 2;
                	int LA46_0 = input.LA(1);

                	if ( (LA46_0 == ASSIGN) )
                	{
                	    alt46 = 1;
                	}
                	switch (alt46) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:901:9: '=' expression
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal111=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_member_declarator2462); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal111_tree = (CommonTree)adaptor.DupNode(char_literal111);

                	        		adaptor.AddChild(root_0, char_literal111_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_member_declarator2466);
                	        	expression112 = expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, expression112.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_declarator"

        public class primary_or_array_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "primary_or_array_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:902:1: primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
        public JavaMaker.primary_or_array_creation_expression_return primary_or_array_creation_expression() // throws RecognitionException [1]
        {   
            JavaMaker.primary_or_array_creation_expression_return retval = new JavaMaker.primary_or_array_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.array_creation_expression_return array_creation_expression113 = default(JavaMaker.array_creation_expression_return);

            JavaMaker.primary_expression_return primary_expression114 = default(JavaMaker.primary_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:902:37: ( ( array_creation_expression )=> array_creation_expression | primary_expression )
                int alt47 = 2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0 == NEW_ARRAY) && (synpred11_JavaMaker()) )
                {
                    alt47 = 1;
                }
                else if ( ((LA47_0 >= OBJECT && LA47_0 <= THIS) || LA47_0 == LPAREN || (LA47_0 >= BOOL && LA47_0 <= NULL) || (LA47_0 >= ELIF && LA47_0 <= UNDEF) || LA47_0 == 195 || LA47_0 == 197 || LA47_0 == 207 || (LA47_0 >= 214 && LA47_0 <= 219) || LA47_0 == 221 || (LA47_0 >= 224 && LA47_0 <= 239) || (LA47_0 >= 241 && LA47_0 <= 244) || (LA47_0 >= 247 && LA47_0 <= 254) || LA47_0 == 256 || (LA47_0 >= 263 && LA47_0 <= 264) || (LA47_0 >= 274 && LA47_0 <= 277)) )
                {
                    alt47 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d47s0 =
                        new NoViableAltException("", 47, 0, input);

                    throw nvae_d47s0;
                }
                switch (alt47) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:903:2: ( array_creation_expression )=> array_creation_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2482);
                        	array_creation_expression113 = array_creation_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, array_creation_expression113.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:904:4: primary_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_primary_expression_in_primary_or_array_creation_expression2487);
                        	primary_expression114 = primary_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, primary_expression114.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "primary_or_array_creation_expression"

        public class array_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "array_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:907:1: array_creation_expression : n= NEW_ARRAY ( type ( (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) ) ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] ) | array_initializer -> ^( $n type array_initializer ) ) | ( rank_specifier ( array_initializer ) -> ^( $n rank_specifier array_initializer ) ) ( ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )* as4= arguments[ret] )? ) ;
        public JavaMaker.array_creation_expression_return array_creation_expression() // throws RecognitionException [1]
        {   
            JavaMaker.array_creation_expression_return retval = new JavaMaker.array_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree n = null;
            CommonTree o = null;
            CommonTree c = null;
            JavaMaker.array_initializer_return ai1 = default(JavaMaker.array_initializer_return);

            JavaMaker.arguments_return as1 = default(JavaMaker.arguments_return);

            JavaMaker.invocation_part_return ip = default(JavaMaker.invocation_part_return);

            JavaMaker.invocation_part_return ip2 = default(JavaMaker.invocation_part_return);

            JavaMaker.arguments_return as2 = default(JavaMaker.arguments_return);

            JavaMaker.arguments_return as3 = default(JavaMaker.arguments_return);

            JavaMaker.invocation_part_return ip3 = default(JavaMaker.invocation_part_return);

            JavaMaker.invocation_part_return ip4 = default(JavaMaker.invocation_part_return);

            JavaMaker.arguments_return as4 = default(JavaMaker.arguments_return);

            JavaMaker.type_return type115 = default(JavaMaker.type_return);

            JavaMaker.expression_list_return expression_list116 = default(JavaMaker.expression_list_return);

            JavaMaker.rank_specifiers_return rank_specifiers117 = default(JavaMaker.rank_specifiers_return);

            JavaMaker.array_initializer_return array_initializer118 = default(JavaMaker.array_initializer_return);

            JavaMaker.rank_specifier_return rank_specifier119 = default(JavaMaker.rank_specifier_return);

            JavaMaker.array_initializer_return array_initializer120 = default(JavaMaker.array_initializer_return);


            CommonTree n_tree=null;
            CommonTree o_tree=null;
            CommonTree c_tree=null;
            RewriteRuleNodeStream stream_OPEN_BRACKET = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACKET");
            RewriteRuleNodeStream stream_NEW_ARRAY = new RewriteRuleNodeStream(adaptor,"token NEW_ARRAY");
            RewriteRuleNodeStream stream_CLOSE_BRACKET = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACKET");
            RewriteRuleSubtreeStream stream_rank_specifiers = new RewriteRuleSubtreeStream(adaptor,"rule rank_specifiers");
            RewriteRuleSubtreeStream stream_expression_list = new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
            RewriteRuleSubtreeStream stream_arguments = new RewriteRuleSubtreeStream(adaptor,"rule arguments");
            RewriteRuleSubtreeStream stream_rank_specifier = new RewriteRuleSubtreeStream(adaptor,"rule rank_specifier");
            RewriteRuleSubtreeStream stream_invocation_part = new RewriteRuleSubtreeStream(adaptor,"rule invocation_part");
            RewriteRuleSubtreeStream stream_array_initializer = new RewriteRuleSubtreeStream(adaptor,"rule array_initializer");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");

                bool removeDimensions = false;
                CommonTree ret = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:932:2: (n= NEW_ARRAY ( type ( (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) ) ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] ) | array_initializer -> ^( $n type array_initializer ) ) | ( rank_specifier ( array_initializer ) -> ^( $n rank_specifier array_initializer ) ) ( ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )* as4= arguments[ret] )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:933:2: n= NEW_ARRAY ( type ( (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) ) ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] ) | array_initializer -> ^( $n type array_initializer ) ) | ( rank_specifier ( array_initializer ) -> ^( $n rank_specifier array_initializer ) ) ( ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )* as4= arguments[ret] )? )
                {
                	_last = (CommonTree)input.LT(1);
                	n=(CommonTree)Match(input,NEW_ARRAY,FOLLOW_NEW_ARRAY_in_array_creation_expression2510); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_NEW_ARRAY.Add(n);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:934:3: ( type ( (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) ) ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] ) | array_initializer -> ^( $n type array_initializer ) ) | ( rank_specifier ( array_initializer ) -> ^( $n rank_specifier array_initializer ) ) ( ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )* as4= arguments[ret] )? )
                	int alt55 = 2;
                	int LA55_0 = input.LA(1);

                	if ( (LA55_0 == OBJECT || (LA55_0 >= BOOL && LA55_0 <= IDENTIFIER) || (LA55_0 >= ELIF && LA55_0 <= UNDEF) || LA55_0 == 195 || LA55_0 == 206 || LA55_0 == 221 || (LA55_0 >= 224 && LA55_0 <= 239) || (LA55_0 >= 241 && LA55_0 <= 244) || (LA55_0 >= 247 && LA55_0 <= 254) || LA55_0 == 256 || (LA55_0 >= 263 && LA55_0 <= 264) || (LA55_0 >= 274 && LA55_0 <= 277)) )
                	{
                	    alt55 = 1;
                	}
                	else if ( (LA55_0 == OPEN_BRACKET) )
                	{
                	    alt55 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d55s0 =
                	        new NoViableAltException("", 55, 0, input);

                	    throw nvae_d55s0;
                	}
                	switch (alt55) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:934:4: type ( (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) ) ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] ) | array_initializer -> ^( $n type array_initializer ) )
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_array_creation_expression2518);
                	        	type115 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type.Add(type115.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:934:11: ( (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) ) ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] ) | array_initializer -> ^( $n type array_initializer ) )
                	        	int alt52 = 2;
                	        	int LA52_0 = input.LA(1);

                	        	if ( (LA52_0 == OPEN_BRACKET) )
                	        	{
                	        	    alt52 = 1;
                	        	}
                	        	else if ( (LA52_0 == OPEN_BRACE) )
                	        	{
                	        	    alt52 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d52s0 =
                	        	        new NoViableAltException("", 52, 0, input);

                	        	    throw nvae_d52s0;
                	        	}
                	        	switch (alt52) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:934:12: (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) ) ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] )
                	        	        {
                	        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:934:12: (o= '[' expression_list c= ']' -> ^( $n type $o expression_list $c) )
                	        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:934:13: o= '[' expression_list c= ']'
                	        	        	{
                	        	        		_last = (CommonTree)input.LT(1);
                	        	        		o=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_array_creation_expression2526); if (state.failed) return retval; 
                	        	        		if ( (state.backtracking==0) ) stream_OPEN_BRACKET.Add(o);

                	        	        		_last = (CommonTree)input.LT(1);
                	        	        		PushFollow(FOLLOW_expression_list_in_array_creation_expression2530);
                	        	        		expression_list116 = expression_list();
                	        	        		state._fsp--;
                	        	        		if (state.failed) return retval;
                	        	        		if ( (state.backtracking==0) ) stream_expression_list.Add(expression_list116.Tree);
                	        	        		_last = (CommonTree)input.LT(1);
                	        	        		c=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_array_creation_expression2536); if (state.failed) return retval; 
                	        	        		if ( (state.backtracking==0) ) stream_CLOSE_BRACKET.Add(c);



                	        	        		// AST REWRITE
                	        	        		// elements:          o, n, c, type, expression_list
                	        	        		// token labels:      c, n, o
                	        	        		// rule labels:       retval
                	        	        		// token list labels: 
                	        	        		// rule list labels:  
                	        	        		// wildcard labels: 
                	        	        		if ( (state.backtracking==0) ) {
                	        	        		retval.tree = root_0;
                	        	        		RewriteRuleNodeStream stream_c = new RewriteRuleNodeStream(adaptor, "token c", c);
                	        	        		RewriteRuleNodeStream stream_n = new RewriteRuleNodeStream(adaptor, "token n", n);
                	        	        		RewriteRuleNodeStream stream_o = new RewriteRuleNodeStream(adaptor, "token o", o);
                	        	        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	        		root_0 = (CommonTree)adaptor.Nil;
                	        	        		// 934:45: -> ^( $n type $o expression_list $c)
                	        	        		{
                	        	        		    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:934:48: ^( $n type $o expression_list $c)
                	        	        		    {
                	        	        		    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	        		    root_1 = (CommonTree)adaptor.BecomeRoot(stream_n.NextNode(), root_1);

                	        	        		    adaptor.AddChild(root_1, stream_type.NextTree());
                	        	        		    adaptor.AddChild(root_1, stream_o.NextNode());
                	        	        		    adaptor.AddChild(root_1, stream_expression_list.NextTree());
                	        	        		    adaptor.AddChild(root_1, stream_c.NextNode());

                	        	        		    adaptor.AddChild(root_0, root_1);
                	        	        		    }

                	        	        		}

                	        	        		retval.tree = root_0;}
                	        	        	}

                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   ret = (CommonTree)adaptor.RulePostProcessing(((CommonTree)retval.Tree)); 
                	        	        	}
                	        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:935:6: ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] )
                	        	        	int alt51 = 2;
                	        	        	alt51 = dfa51.Predict(input);
                	        	        	switch (alt51) 
                	        	        	{
                	        	        	    case 1 :
                	        	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:935:10: ( rank_specifiers )? (ai1= array_initializer )?
                	        	        	        {
                	        	        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:935:10: ( rank_specifiers )?
                	        	        	        	int alt48 = 2;
                	        	        	        	int LA48_0 = input.LA(1);

                	        	        	        	if ( (LA48_0 == OPEN_BRACKET) )
                	        	        	        	{
                	        	        	        	    alt48 = 1;
                	        	        	        	}
                	        	        	        	switch (alt48) 
                	        	        	        	{
                	        	        	        	    case 1 :
                	        	        	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:935:11: rank_specifiers
                	        	        	        	        {
                	        	        	        	        	_last = (CommonTree)input.LT(1);
                	        	        	        	        	PushFollow(FOLLOW_rank_specifiers_in_array_creation_expression2569);
                	        	        	        	        	rank_specifiers117 = rank_specifiers();
                	        	        	        	        	state._fsp--;
                	        	        	        	        	if (state.failed) return retval;
                	        	        	        	        	if ( (state.backtracking==0) ) stream_rank_specifiers.Add(rank_specifiers117.Tree);
                	        	        	        	        	if ( (state.backtracking==0) )
                	        	        	        	        	{
                	        	        	        	        	   adaptor.AddChild(ret, ((rank_specifiers117 != null) ? ((CommonTree)rank_specifiers117.Tree) : null)); 
                	        	        	        	        	}

                	        	        	        	        	if ( (state.backtracking==0) ) {
                	        	        	        	        	}
                	        	        	        	        }
                	        	        	        	        break;

                	        	        	        	}

                	        	        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:936:25: (ai1= array_initializer )?
                	        	        	        	int alt49 = 2;
                	        	        	        	int LA49_0 = input.LA(1);

                	        	        	        	if ( (LA49_0 == OPEN_BRACE) )
                	        	        	        	{
                	        	        	        	    alt49 = 1;
                	        	        	        	}
                	        	        	        	switch (alt49) 
                	        	        	        	{
                	        	        	        	    case 1 :
                	        	        	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:936:26: ai1= array_initializer
                	        	        	        	        {
                	        	        	        	        	_last = (CommonTree)input.LT(1);
                	        	        	        	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression2605);
                	        	        	        	        	ai1 = array_initializer();
                	        	        	        	        	state._fsp--;
                	        	        	        	        	if (state.failed) return retval;
                	        	        	        	        	if ( (state.backtracking==0) ) stream_array_initializer.Add(ai1.Tree);
                	        	        	        	        	if ( (state.backtracking==0) )
                	        	        	        	        	{
                	        	        	        	        	   adaptor.AddChild(ret, ((ai1 != null) ? ((CommonTree)ai1.Tree) : null)); 
                	        	        	        	        	                                               removeDimensions = true; /* If an initializer is provided then drop the dimensions */
                	        	        	        	        	}

                	        	        	        	        	if ( (state.backtracking==0) ) {
                	        	        	        	        	}
                	        	        	        	        }
                	        	        	        	        break;

                	        	        	        	}


                	        	        	        	if ( (state.backtracking==0) ) {
                	        	        	        	}
                	        	        	        }
                	        	        	        break;
                	        	        	    case 2 :
                	        	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:939:8: ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ]
                	        	        	        {
                	        	        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:939:8: ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )*
                	        	        	        	do 
                	        	        	        	{
                	        	        	        	    int alt50 = 3;
                	        	        	        	    int LA50_0 = input.LA(1);

                	        	        	        	    if ( (LA50_0 == LPAREN) )
                	        	        	        	    {
                	        	        	        	        int LA50_1 = input.LA(2);

                	        	        	        	        if ( (synpred12_JavaMaker()) )
                	        	        	        	        {
                	        	        	        	            alt50 = 1;
                	        	        	        	        }


                	        	        	        	    }
                	        	        	        	    else if ( (LA50_0 == OPEN_BRACKET || (LA50_0 >= DOT && LA50_0 <= PTR)) )
                	        	        	        	    {
                	        	        	        	        alt50 = 2;
                	        	        	        	    }


                	        	        	        	    switch (alt50) 
                	        	        	        		{
                	        	        	        			case 1 :
                	        	        	        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:939:10: ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] )
                	        	        	        			    {
                	        	        	        			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:939:10: ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] )
                	        	        	        			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:939:11: ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ]
                	        	        	        			    	{
                	        	        	        			    		_last = (CommonTree)input.LT(1);
                	        	        	        			    		PushFollow(FOLLOW_arguments_in_array_creation_expression2648);
                	        	        	        			    		as1 = arguments(ret);
                	        	        	        			    		state._fsp--;
                	        	        	        			    		if (state.failed) return retval;
                	        	        	        			    		if ( (state.backtracking==0) ) stream_arguments.Add(as1.Tree);
                	        	        	        			    		_last = (CommonTree)input.LT(1);
                	        	        	        			    		PushFollow(FOLLOW_invocation_part_in_array_creation_expression2655);
                	        	        	        			    		ip = invocation_part(((as1 != null) ? ((CommonTree)as1.Tree) : null));
                	        	        	        			    		state._fsp--;
                	        	        	        			    		if (state.failed) return retval;
                	        	        	        			    		if ( (state.backtracking==0) ) stream_invocation_part.Add(ip.Tree);
                	        	        	        			    		if ( (state.backtracking==0) )
                	        	        	        			    		{
                	        	        	        			    		   ret = ((ip != null) ? ((CommonTree)ip.Tree) : null); 
                	        	        	        			    		}

                	        	        	        			    		if ( (state.backtracking==0) ) {
                	        	        	        			    		}
                	        	        	        			    	}


                	        	        	        			    	if ( (state.backtracking==0) ) {
                	        	        	        			    	}
                	        	        	        			    }
                	        	        	        			    break;
                	        	        	        			case 2 :
                	        	        	        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:940:10: ip2= invocation_part[ret]
                	        	        	        			    {
                	        	        	        			    	_last = (CommonTree)input.LT(1);
                	        	        	        			    	PushFollow(FOLLOW_invocation_part_in_array_creation_expression2672);
                	        	        	        			    	ip2 = invocation_part(ret);
                	        	        	        			    	state._fsp--;
                	        	        	        			    	if (state.failed) return retval;
                	        	        	        			    	if ( (state.backtracking==0) ) stream_invocation_part.Add(ip2.Tree);
                	        	        	        			    	if ( (state.backtracking==0) )
                	        	        	        			    	{
                	        	        	        			    	   ret = ((ip2 != null) ? ((CommonTree)ip2.Tree) : null); 
                	        	        	        			    	}

                	        	        	        			    	if ( (state.backtracking==0) ) {
                	        	        	        			    	}
                	        	        	        			    }
                	        	        	        			    break;

                	        	        	        			default:
                	        	        	        			    goto loop50;
                	        	        	        	    }
                	        	        	        	} while (true);

                	        	        	        	loop50:
                	        	        	        		;	// Stops C# compiler whining that label 'loop50' has no statements

                	        	        	        	_last = (CommonTree)input.LT(1);
                	        	        	        	PushFollow(FOLLOW_arguments_in_array_creation_expression2683);
                	        	        	        	as2 = arguments(ret);
                	        	        	        	state._fsp--;
                	        	        	        	if (state.failed) return retval;
                	        	        	        	if ( (state.backtracking==0) ) stream_arguments.Add(as2.Tree);
                	        	        	        	if ( (state.backtracking==0) )
                	        	        	        	{
                	        	        	        	   ret = ((as2 != null) ? ((CommonTree)as2.Tree) : null); 
                	        	        	        	}

                	        	        	        	if ( (state.backtracking==0) ) {
                	        	        	        	}
                	        	        	        }
                	        	        	        break;

                	        	        	}


                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:942:7: array_initializer
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression2708);
                	        	        	array_initializer118 = array_initializer();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_array_initializer.Add(array_initializer118.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          array_initializer, type, n
                	        	        	// token labels:      n
                	        	        	// rule labels:       retval
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleNodeStream stream_n = new RewriteRuleNodeStream(adaptor, "token n", n);
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 942:26: -> ^( $n type array_initializer )
                	        	        	{
                	        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:942:29: ^( $n type array_initializer )
                	        	        	    {
                	        	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_n.NextNode(), root_1);

                	        	        	    adaptor.AddChild(root_1, stream_type.NextTree());
                	        	        	    adaptor.AddChild(root_1, stream_array_initializer.NextTree());

                	        	        	    adaptor.AddChild(root_0, root_1);
                	        	        	    }

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:944:5: ( rank_specifier ( array_initializer ) -> ^( $n rank_specifier array_initializer ) ) ( ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )* as4= arguments[ret] )?
                	        {
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:944:5: ( rank_specifier ( array_initializer ) -> ^( $n rank_specifier array_initializer ) )
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:944:6: rank_specifier ( array_initializer )
                	        	{
                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_rank_specifier_in_array_creation_expression2733);
                	        		rank_specifier119 = rank_specifier();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) stream_rank_specifier.Add(rank_specifier119.Tree);
                	        		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:945:4: ( array_initializer )
                	        		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:945:5: array_initializer
                	        		{
                	        			_last = (CommonTree)input.LT(1);
                	        			PushFollow(FOLLOW_array_initializer_in_array_creation_expression2742);
                	        			array_initializer120 = array_initializer();
                	        			state._fsp--;
                	        			if (state.failed) return retval;
                	        			if ( (state.backtracking==0) ) stream_array_initializer.Add(array_initializer120.Tree);

                	        			if ( (state.backtracking==0) ) {
                	        			}
                	        		}



                	        		// AST REWRITE
                	        		// elements:          rank_specifier, n, array_initializer
                	        		// token labels:      n
                	        		// rule labels:       retval
                	        		// token list labels: 
                	        		// rule list labels:  
                	        		// wildcard labels: 
                	        		if ( (state.backtracking==0) ) {
                	        		retval.tree = root_0;
                	        		RewriteRuleNodeStream stream_n = new RewriteRuleNodeStream(adaptor, "token n", n);
                	        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        		root_0 = (CommonTree)adaptor.Nil;
                	        		// 946:9: -> ^( $n rank_specifier array_initializer )
                	        		{
                	        		    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:946:12: ^( $n rank_specifier array_initializer )
                	        		    {
                	        		    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        		    root_1 = (CommonTree)adaptor.BecomeRoot(stream_n.NextNode(), root_1);

                	        		    adaptor.AddChild(root_1, stream_rank_specifier.NextTree());
                	        		    adaptor.AddChild(root_1, stream_array_initializer.NextTree());

                	        		    adaptor.AddChild(root_0, root_1);
                	        		    }

                	        		}

                	        		retval.tree = root_0;}
                	        	}

                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   ret = (CommonTree)adaptor.RulePostProcessing(((CommonTree)retval.Tree)); 
                	        	}
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:947:13: ( ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )* as4= arguments[ret] )?
                	        	int alt54 = 2;
                	        	int LA54_0 = input.LA(1);

                	        	if ( (LA54_0 == OPEN_BRACKET || LA54_0 == LPAREN || (LA54_0 >= DOT && LA54_0 <= PTR)) )
                	        	{
                	        	    alt54 = 1;
                	        	}
                	        	switch (alt54) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:948:15: ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )* as4= arguments[ret]
                	        	        {
                	        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:948:15: ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] ) | ip4= invocation_part[ret] )*
                	        	        	do 
                	        	        	{
                	        	        	    int alt53 = 3;
                	        	        	    int LA53_0 = input.LA(1);

                	        	        	    if ( (LA53_0 == LPAREN) )
                	        	        	    {
                	        	        	        int LA53_1 = input.LA(2);

                	        	        	        if ( (synpred13_JavaMaker()) )
                	        	        	        {
                	        	        	            alt53 = 1;
                	        	        	        }


                	        	        	    }
                	        	        	    else if ( (LA53_0 == OPEN_BRACKET || (LA53_0 >= DOT && LA53_0 <= PTR)) )
                	        	        	    {
                	        	        	        alt53 = 2;
                	        	        	    }


                	        	        	    switch (alt53) 
                	        	        		{
                	        	        			case 1 :
                	        	        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:948:17: ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] )
                	        	        			    {
                	        	        			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:948:17: ( ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree] )
                	        	        			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:948:18: ( arguments[null] ( '[' | '.' | '->' ) )=>as3= arguments[ret] ip3= invocation_part[$as3.tree]
                	        	        			    	{
                	        	        			    		_last = (CommonTree)input.LT(1);
                	        	        			    		PushFollow(FOLLOW_arguments_in_array_creation_expression2818);
                	        	        			    		as3 = arguments(ret);
                	        	        			    		state._fsp--;
                	        	        			    		if (state.failed) return retval;
                	        	        			    		if ( (state.backtracking==0) ) stream_arguments.Add(as3.Tree);
                	        	        			    		_last = (CommonTree)input.LT(1);
                	        	        			    		PushFollow(FOLLOW_invocation_part_in_array_creation_expression2825);
                	        	        			    		ip3 = invocation_part(((as3 != null) ? ((CommonTree)as3.Tree) : null));
                	        	        			    		state._fsp--;
                	        	        			    		if (state.failed) return retval;
                	        	        			    		if ( (state.backtracking==0) ) stream_invocation_part.Add(ip3.Tree);
                	        	        			    		if ( (state.backtracking==0) )
                	        	        			    		{
                	        	        			    		   ret = ((ip3 != null) ? ((CommonTree)ip3.Tree) : null); 
                	        	        			    		}

                	        	        			    		if ( (state.backtracking==0) ) {
                	        	        			    		}
                	        	        			    	}


                	        	        			    	if ( (state.backtracking==0) ) {
                	        	        			    	}
                	        	        			    }
                	        	        			    break;
                	        	        			case 2 :
                	        	        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:949:10: ip4= invocation_part[ret]
                	        	        			    {
                	        	        			    	_last = (CommonTree)input.LT(1);
                	        	        			    	PushFollow(FOLLOW_invocation_part_in_array_creation_expression2842);
                	        	        			    	ip4 = invocation_part(ret);
                	        	        			    	state._fsp--;
                	        	        			    	if (state.failed) return retval;
                	        	        			    	if ( (state.backtracking==0) ) stream_invocation_part.Add(ip4.Tree);
                	        	        			    	if ( (state.backtracking==0) )
                	        	        			    	{
                	        	        			    	   ret = ((ip4 != null) ? ((CommonTree)ip4.Tree) : null); 
                	        	        			    	}

                	        	        			    	if ( (state.backtracking==0) ) {
                	        	        			    	}
                	        	        			    }
                	        	        			    break;

                	        	        			default:
                	        	        			    goto loop53;
                	        	        	    }
                	        	        	} while (true);

                	        	        	loop53:
                	        	        		;	// Stops C# compiler whining that label 'loop53' has no statements

                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_arguments_in_array_creation_expression2853);
                	        	        	as4 = arguments(ret);
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_arguments.Add(as4.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	  ret = ((as4 != null) ? ((CommonTree)as4.Tree) : null); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      if (ret != null)
                         retval.tree =  (CommonTree)adaptor.RulePostProcessing(ret);
                      if (removeDimensions) {
                          if (((CommonTree)retval.Tree) != null && 
                              adaptor.GetChildCount(((CommonTree)retval.Tree)) > 3 &&
                              adaptor.GetType(adaptor.GetChild(((CommonTree)retval.Tree), 1)) == OPEN_BRACKET) {
                              // Delete until CLOSE_BRACKET
                              while (adaptor.GetType(adaptor.GetChild(((CommonTree)retval.Tree), 2)) != CLOSE_BRACKET) {
                                  adaptor.DeleteChild(((CommonTree)retval.Tree), 2);
                              }
                              // push open / close bracket into type.
                              CommonTree type = (CommonTree)adaptor.GetChild(((CommonTree)retval.Tree), 0);
                              adaptor.AddChild(type, adaptor.DupTree(adaptor.GetChild(((CommonTree)retval.Tree), 1)));
                              adaptor.AddChild(type, adaptor.DupTree(adaptor.GetChild(((CommonTree)retval.Tree), 2)));
                              adaptor.DeleteChild(((CommonTree)retval.Tree), 2);
                              adaptor.DeleteChild(((CommonTree)retval.Tree), 1);

                          }
                      }

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "array_creation_expression"

        public class array_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "array_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:952:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
        public JavaMaker.array_initializer_return array_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.array_initializer_return retval = new JavaMaker.array_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal121 = null;
            CommonTree char_literal123 = null;
            CommonTree char_literal124 = null;
            JavaMaker.variable_initializer_list_return variable_initializer_list122 = default(JavaMaker.variable_initializer_list_return);


            CommonTree char_literal121_tree=null;
            CommonTree char_literal123_tree=null;
            CommonTree char_literal124_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:952:18: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:953:2: '{' ( variable_initializer_list )? ( ',' )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal121=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer2883); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal121_tree = (CommonTree)adaptor.DupNode(char_literal121);

                		adaptor.AddChild(root_0, char_literal121_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:953:8: ( variable_initializer_list )?
                	int alt56 = 2;
                	int LA56_0 = input.LA(1);

                	if ( ((LA56_0 >= MONONOT && LA56_0 <= MONOTWIDDLE) || LA56_0 == NEW_ARRAY || (LA56_0 >= OBJECT && LA56_0 <= THIS) || LA56_0 == OPEN_BRACE || LA56_0 == LPAREN || LA56_0 == BIT_AND || (LA56_0 >= PLUS && LA56_0 <= MINUS) || LA56_0 == STAR || (LA56_0 >= BOOL && LA56_0 <= NULL) || (LA56_0 >= ELIF && LA56_0 <= UNDEF) || LA56_0 == 195 || LA56_0 == 197 || LA56_0 == 207 || (LA56_0 >= 209 && LA56_0 <= 210) || (LA56_0 >= 214 && LA56_0 <= 219) || LA56_0 == 221 || (LA56_0 >= 224 && LA56_0 <= 239) || (LA56_0 >= 241 && LA56_0 <= 244) || (LA56_0 >= 247 && LA56_0 <= 254) || LA56_0 == 256 || (LA56_0 >= 263 && LA56_0 <= 264) || (LA56_0 >= 274 && LA56_0 <= 277)) )
                	{
                	    alt56 = 1;
                	}
                	switch (alt56) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:953:8: variable_initializer_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variable_initializer_list_in_array_initializer2887);
                	        	variable_initializer_list122 = variable_initializer_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, variable_initializer_list122.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:953:37: ( ',' )?
                	int alt57 = 2;
                	int LA57_0 = input.LA(1);

                	if ( (LA57_0 == COMMA) )
                	{
                	    alt57 = 1;
                	}
                	switch (alt57) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:953:37: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal123=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_array_initializer2892); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal123_tree = (CommonTree)adaptor.DupNode(char_literal123);

                	        		adaptor.AddChild(root_0, char_literal123_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal124=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer2897); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal124_tree = (CommonTree)adaptor.DupNode(char_literal124);

                		adaptor.AddChild(root_0, char_literal124_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "array_initializer"

        public class variable_initializer_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_initializer_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:954:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
        public JavaMaker.variable_initializer_list_return variable_initializer_list() // throws RecognitionException [1]
        {   
            JavaMaker.variable_initializer_list_return retval = new JavaMaker.variable_initializer_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal126 = null;
            JavaMaker.variable_initializer_return variable_initializer125 = default(JavaMaker.variable_initializer_return);

            JavaMaker.variable_initializer_return variable_initializer127 = default(JavaMaker.variable_initializer_return);


            CommonTree char_literal126_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:954:26: ( variable_initializer ( ',' variable_initializer )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:955:2: variable_initializer ( ',' variable_initializer )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list2905);
                	variable_initializer125 = variable_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, variable_initializer125.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:955:23: ( ',' variable_initializer )*
                	do 
                	{
                	    int alt58 = 2;
                	    int LA58_0 = input.LA(1);

                	    if ( (LA58_0 == COMMA) )
                	    {
                	        int LA58_1 = input.LA(2);

                	        if ( ((LA58_1 >= MONONOT && LA58_1 <= MONOTWIDDLE) || LA58_1 == NEW_ARRAY || (LA58_1 >= OBJECT && LA58_1 <= THIS) || LA58_1 == OPEN_BRACE || LA58_1 == LPAREN || LA58_1 == BIT_AND || (LA58_1 >= PLUS && LA58_1 <= MINUS) || LA58_1 == STAR || (LA58_1 >= BOOL && LA58_1 <= NULL) || (LA58_1 >= ELIF && LA58_1 <= UNDEF) || LA58_1 == 195 || LA58_1 == 197 || LA58_1 == 207 || (LA58_1 >= 209 && LA58_1 <= 210) || (LA58_1 >= 214 && LA58_1 <= 219) || LA58_1 == 221 || (LA58_1 >= 224 && LA58_1 <= 239) || (LA58_1 >= 241 && LA58_1 <= 244) || (LA58_1 >= 247 && LA58_1 <= 254) || LA58_1 == 256 || (LA58_1 >= 263 && LA58_1 <= 264) || (LA58_1 >= 274 && LA58_1 <= 277)) )
                	        {
                	            alt58 = 1;
                	        }


                	    }


                	    switch (alt58) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:955:24: ',' variable_initializer
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal126=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_variable_initializer_list2908); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal126_tree = (CommonTree)adaptor.DupNode(char_literal126);

                			    		adaptor.AddChild(root_0, char_literal126_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list2910);
                			    	variable_initializer127 = variable_initializer();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, variable_initializer127.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop58;
                	    }
                	} while (true);

                	loop58:
                		;	// Stops C# compiler whining that label 'loop58' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_initializer_list"

        public class variable_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:956:1: variable_initializer : ( expression | array_initializer );
        public JavaMaker.variable_initializer_return variable_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.variable_initializer_return retval = new JavaMaker.variable_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression128 = default(JavaMaker.expression_return);

            JavaMaker.array_initializer_return array_initializer129 = default(JavaMaker.array_initializer_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:956:21: ( expression | array_initializer )
                int alt59 = 2;
                int LA59_0 = input.LA(1);

                if ( ((LA59_0 >= MONONOT && LA59_0 <= MONOTWIDDLE) || LA59_0 == NEW_ARRAY || (LA59_0 >= OBJECT && LA59_0 <= THIS) || LA59_0 == LPAREN || LA59_0 == BIT_AND || (LA59_0 >= PLUS && LA59_0 <= MINUS) || LA59_0 == STAR || (LA59_0 >= BOOL && LA59_0 <= NULL) || (LA59_0 >= ELIF && LA59_0 <= UNDEF) || LA59_0 == 195 || LA59_0 == 197 || LA59_0 == 207 || (LA59_0 >= 209 && LA59_0 <= 210) || (LA59_0 >= 214 && LA59_0 <= 219) || LA59_0 == 221 || (LA59_0 >= 224 && LA59_0 <= 239) || (LA59_0 >= 241 && LA59_0 <= 244) || (LA59_0 >= 247 && LA59_0 <= 254) || LA59_0 == 256 || (LA59_0 >= 263 && LA59_0 <= 264) || (LA59_0 >= 274 && LA59_0 <= 277)) )
                {
                    alt59 = 1;
                }
                else if ( (LA59_0 == OPEN_BRACE) )
                {
                    alt59 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d59s0 =
                        new NoViableAltException("", 59, 0, input);

                    throw nvae_d59s0;
                }
                switch (alt59) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:957:2: expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_variable_initializer2920);
                        	expression128 = expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression128.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:957:15: array_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_array_initializer_in_variable_initializer2924);
                        	array_initializer129 = array_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, array_initializer129.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_initializer"

        public class sizeof_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "sizeof_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:958:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
        public JavaMaker.sizeof_expression_return sizeof_expression() // throws RecognitionException [1]
        {   
            JavaMaker.sizeof_expression_return retval = new JavaMaker.sizeof_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal130 = null;
            CommonTree char_literal131 = null;
            CommonTree char_literal133 = null;
            JavaMaker.unmanaged_type_return unmanaged_type132 = default(JavaMaker.unmanaged_type_return);


            CommonTree string_literal130_tree=null;
            CommonTree char_literal131_tree=null;
            CommonTree char_literal133_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:958:18: ( 'sizeof' '(' unmanaged_type ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:959:2: 'sizeof' '(' unmanaged_type ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal130=(CommonTree)Match(input,214,FOLLOW_214_in_sizeof_expression2932); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal130_tree = (CommonTree)adaptor.DupNode(string_literal130);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal130_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal131=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_sizeof_expression2937); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unmanaged_type_in_sizeof_expression2942);
                	unmanaged_type132 = unmanaged_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, unmanaged_type132.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal133=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_sizeof_expression2946); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "sizeof_expression"

        public class checked_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "checked_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:960:1: checked_expression : 'checked' '(' expression ')' ;
        public JavaMaker.checked_expression_return checked_expression() // throws RecognitionException [1]
        {   
            JavaMaker.checked_expression_return retval = new JavaMaker.checked_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal134 = null;
            CommonTree char_literal135 = null;
            CommonTree char_literal137 = null;
            JavaMaker.expression_return expression136 = default(JavaMaker.expression_return);


            CommonTree string_literal134_tree=null;
            CommonTree char_literal135_tree=null;
            CommonTree char_literal137_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:960:19: ( 'checked' '(' expression ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:961:2: 'checked' '(' expression ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal134=(CommonTree)Match(input,215,FOLLOW_215_in_checked_expression2955); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal134_tree = (CommonTree)adaptor.DupNode(string_literal134);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal134_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal135=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_checked_expression2960); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_checked_expression2965);
                	expression136 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression136.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal137=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_checked_expression2969); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "checked_expression"

        public class unchecked_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unchecked_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:962:1: unchecked_expression : 'unchecked' '(' expression ')' ;
        public JavaMaker.unchecked_expression_return unchecked_expression() // throws RecognitionException [1]
        {   
            JavaMaker.unchecked_expression_return retval = new JavaMaker.unchecked_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal138 = null;
            CommonTree char_literal139 = null;
            CommonTree char_literal141 = null;
            JavaMaker.expression_return expression140 = default(JavaMaker.expression_return);


            CommonTree string_literal138_tree=null;
            CommonTree char_literal139_tree=null;
            CommonTree char_literal141_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:962:21: ( 'unchecked' '(' expression ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:963:2: 'unchecked' '(' expression ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal138=(CommonTree)Match(input,216,FOLLOW_216_in_unchecked_expression2979); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal138_tree = (CommonTree)adaptor.DupNode(string_literal138);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal138_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal139=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_unchecked_expression2984); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_unchecked_expression2989);
                	expression140 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression140.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal141=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_unchecked_expression2993); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unchecked_expression"

        public class default_value_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "default_value_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:964:1: default_value_expression : 'default' '(' type ')' ;
        public JavaMaker.default_value_expression_return default_value_expression() // throws RecognitionException [1]
        {   
            JavaMaker.default_value_expression_return retval = new JavaMaker.default_value_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal142 = null;
            CommonTree char_literal143 = null;
            CommonTree char_literal145 = null;
            JavaMaker.type_return type144 = default(JavaMaker.type_return);


            CommonTree string_literal142_tree=null;
            CommonTree char_literal143_tree=null;
            CommonTree char_literal145_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:964:25: ( 'default' '(' type ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:965:2: 'default' '(' type ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal142=(CommonTree)Match(input,217,FOLLOW_217_in_default_value_expression3003); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal142_tree = (CommonTree)adaptor.DupNode(string_literal142);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal142_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal143=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_default_value_expression3008); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_default_value_expression3013);
                	type144 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type144.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal145=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_default_value_expression3017); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "default_value_expression"

        public class anonymous_method_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_method_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:966:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
        public JavaMaker.anonymous_method_expression_return anonymous_method_expression() // throws RecognitionException [1]
        {   
            JavaMaker.anonymous_method_expression_return retval = new JavaMaker.anonymous_method_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal146 = null;
            JavaMaker.explicit_anonymous_function_signature_return explicit_anonymous_function_signature147 = default(JavaMaker.explicit_anonymous_function_signature_return);

            JavaMaker.block_return block148 = default(JavaMaker.block_return);


            CommonTree string_literal146_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:966:28: ( 'delegate' ( explicit_anonymous_function_signature )? block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:967:2: 'delegate' ( explicit_anonymous_function_signature )? block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal146=(CommonTree)Match(input,218,FOLLOW_218_in_anonymous_method_expression3026); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal146_tree = (CommonTree)adaptor.DupNode(string_literal146);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal146_tree, root_0);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:967:15: ( explicit_anonymous_function_signature )?
                	int alt60 = 2;
                	int LA60_0 = input.LA(1);

                	if ( (LA60_0 == LPAREN) )
                	{
                	    alt60 = 1;
                	}
                	switch (alt60) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:967:15: explicit_anonymous_function_signature
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression3030);
                	        	explicit_anonymous_function_signature147 = explicit_anonymous_function_signature();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, explicit_anonymous_function_signature147.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_anonymous_method_expression3034);
                	block148 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block148.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_method_expression"

        public class explicit_anonymous_function_signature_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "explicit_anonymous_function_signature"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:968:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' -> {$explicit_anonymous_function_parameter_list.tree != null}? ^( PARAMS ( explicit_anonymous_function_parameter_list )? ) ->;
        public JavaMaker.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() // throws RecognitionException [1]
        {   
            JavaMaker.explicit_anonymous_function_signature_return retval = new JavaMaker.explicit_anonymous_function_signature_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal149 = null;
            CommonTree char_literal151 = null;
            JavaMaker.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list150 = default(JavaMaker.explicit_anonymous_function_parameter_list_return);


            CommonTree char_literal149_tree=null;
            CommonTree char_literal151_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_explicit_anonymous_function_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule explicit_anonymous_function_parameter_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:968:38: ( '(' ( explicit_anonymous_function_parameter_list )? ')' -> {$explicit_anonymous_function_parameter_list.tree != null}? ^( PARAMS ( explicit_anonymous_function_parameter_list )? ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:969:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
                {
                	_last = (CommonTree)input.LT(1);
                	char_literal149=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_explicit_anonymous_function_signature3041); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal149);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:969:8: ( explicit_anonymous_function_parameter_list )?
                	int alt61 = 2;
                	int LA61_0 = input.LA(1);

                	if ( (LA61_0 == OBJECT || (LA61_0 >= BOOL && LA61_0 <= IDENTIFIER) || (LA61_0 >= ELIF && LA61_0 <= UNDEF) || LA61_0 == 195 || LA61_0 == 206 || (LA61_0 >= 212 && LA61_0 <= 213) || LA61_0 == 221 || (LA61_0 >= 224 && LA61_0 <= 239) || (LA61_0 >= 241 && LA61_0 <= 244) || (LA61_0 >= 247 && LA61_0 <= 254) || LA61_0 == 256 || (LA61_0 >= 263 && LA61_0 <= 264) || (LA61_0 >= 274 && LA61_0 <= 277)) )
                	{
                	    alt61 = 1;
                	}
                	switch (alt61) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:969:8: explicit_anonymous_function_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature3045);
                	        	explicit_anonymous_function_parameter_list150 = explicit_anonymous_function_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_explicit_anonymous_function_parameter_list.Add(explicit_anonymous_function_parameter_list150.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal151=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_explicit_anonymous_function_signature3050); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal151);



                	// AST REWRITE
                	// elements:          explicit_anonymous_function_parameter_list
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 970:1: -> {$explicit_anonymous_function_parameter_list.tree != null}? ^( PARAMS ( explicit_anonymous_function_parameter_list )? )
                	if (((explicit_anonymous_function_parameter_list150 != null) ? ((CommonTree)explicit_anonymous_function_parameter_list150.Tree) : null) != null)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:970:64: ^( PARAMS ( explicit_anonymous_function_parameter_list )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, "PARAMS"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:970:73: ( explicit_anonymous_function_parameter_list )?
                	    if ( stream_explicit_anonymous_function_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_explicit_anonymous_function_parameter_list.NextTree());

                	    }
                	    stream_explicit_anonymous_function_parameter_list.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 971:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "explicit_anonymous_function_signature"

        public class explicit_anonymous_function_parameter_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "explicit_anonymous_function_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:973:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
        public JavaMaker.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() // throws RecognitionException [1]
        {   
            JavaMaker.explicit_anonymous_function_parameter_list_return retval = new JavaMaker.explicit_anonymous_function_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal153 = null;
            JavaMaker.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter152 = default(JavaMaker.explicit_anonymous_function_parameter_return);

            JavaMaker.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter154 = default(JavaMaker.explicit_anonymous_function_parameter_return);


            CommonTree char_literal153_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:973:43: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:974:2: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3072);
                	explicit_anonymous_function_parameter152 = explicit_anonymous_function_parameter();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, explicit_anonymous_function_parameter152.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:974:42: ( ',' explicit_anonymous_function_parameter )*
                	do 
                	{
                	    int alt62 = 2;
                	    int LA62_0 = input.LA(1);

                	    if ( (LA62_0 == COMMA) )
                	    {
                	        alt62 = 1;
                	    }


                	    switch (alt62) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:974:43: ',' explicit_anonymous_function_parameter
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal153=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list3077); if (state.failed) return retval;
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3082);
                			    	explicit_anonymous_function_parameter154 = explicit_anonymous_function_parameter();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, explicit_anonymous_function_parameter154.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop62;
                	    }
                	} while (true);

                	loop62:
                		;	// Stops C# compiler whining that label 'loop62' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "explicit_anonymous_function_parameter_list"

        public class explicit_anonymous_function_parameter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "explicit_anonymous_function_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:975:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
        public JavaMaker.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() // throws RecognitionException [1]
        {   
            JavaMaker.explicit_anonymous_function_parameter_return retval = new JavaMaker.explicit_anonymous_function_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier155 = default(JavaMaker.anonymous_function_parameter_modifier_return);

            JavaMaker.type_return type156 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier157 = default(JavaMaker.identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:975:38: ( ( anonymous_function_parameter_modifier )? type identifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:976:2: ( anonymous_function_parameter_modifier )? type identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:976:2: ( anonymous_function_parameter_modifier )?
                	int alt63 = 2;
                	int LA63_0 = input.LA(1);

                	if ( ((LA63_0 >= 212 && LA63_0 <= 213)) )
                	{
                	    alt63 = 1;
                	}
                	switch (alt63) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:976:2: anonymous_function_parameter_modifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter3093);
                	        	anonymous_function_parameter_modifier155 = anonymous_function_parameter_modifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, anonymous_function_parameter_modifier155.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter3098);
                	type156 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type156.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_explicit_anonymous_function_parameter3102);
                	identifier157 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier157.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "explicit_anonymous_function_parameter"

        public class anonymous_function_parameter_modifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_function_parameter_modifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:977:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
        public JavaMaker.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() // throws RecognitionException [1]
        {   
            JavaMaker.anonymous_function_parameter_modifier_return retval = new JavaMaker.anonymous_function_parameter_modifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set158 = null;

            CommonTree set158_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:977:38: ( 'ref' | 'out' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set158 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= 212 && input.LA(1) <= 213) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set158_tree = (CommonTree)adaptor.DupNode(set158);

                	    adaptor.AddChild(root_0, set158_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_function_parameter_modifier"

        public class object_creation_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "object_creation_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:982:1: object_creation_expression : type ( '(' ( argument_list )? ')' (o1= object_or_collection_initializer )? -> ^( NEW[$type.start.Token, \"new\"] type ( argument_list )? ( $o1)? ) | o2= object_or_collection_initializer -> ^( NEW[$type.start.Token, \"new\"] type $o2) ) ;
        public JavaMaker.object_creation_expression_return object_creation_expression() // throws RecognitionException [1]
        {   
            JavaMaker.object_creation_expression_return retval = new JavaMaker.object_creation_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal160 = null;
            CommonTree char_literal162 = null;
            JavaMaker.object_or_collection_initializer_return o1 = default(JavaMaker.object_or_collection_initializer_return);

            JavaMaker.object_or_collection_initializer_return o2 = default(JavaMaker.object_or_collection_initializer_return);

            JavaMaker.type_return type159 = default(JavaMaker.type_return);

            JavaMaker.argument_list_return argument_list161 = default(JavaMaker.argument_list_return);


            CommonTree char_literal160_tree=null;
            CommonTree char_literal162_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_argument_list = new RewriteRuleSubtreeStream(adaptor,"rule argument_list");
            RewriteRuleSubtreeStream stream_object_or_collection_initializer = new RewriteRuleSubtreeStream(adaptor,"rule object_or_collection_initializer");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:982:27: ( type ( '(' ( argument_list )? ')' (o1= object_or_collection_initializer )? -> ^( NEW[$type.start.Token, \"new\"] type ( argument_list )? ( $o1)? ) | o2= object_or_collection_initializer -> ^( NEW[$type.start.Token, \"new\"] type $o2) ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:984:2: type ( '(' ( argument_list )? ')' (o1= object_or_collection_initializer )? -> ^( NEW[$type.start.Token, \"new\"] type ( argument_list )? ( $o1)? ) | o2= object_or_collection_initializer -> ^( NEW[$type.start.Token, \"new\"] type $o2) )
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_object_creation_expression3126);
                	type159 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(type159.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:3: ( '(' ( argument_list )? ')' (o1= object_or_collection_initializer )? -> ^( NEW[$type.start.Token, \"new\"] type ( argument_list )? ( $o1)? ) | o2= object_or_collection_initializer -> ^( NEW[$type.start.Token, \"new\"] type $o2) )
                	int alt66 = 2;
                	int LA66_0 = input.LA(1);

                	if ( (LA66_0 == LPAREN) )
                	{
                	    alt66 = 1;
                	}
                	else if ( (LA66_0 == OPEN_BRACE) )
                	{
                	    alt66 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d66s0 =
                	        new NoViableAltException("", 66, 0, input);

                	    throw nvae_d66s0;
                	}
                	switch (alt66) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:5: '(' ( argument_list )? ')' (o1= object_or_collection_initializer )?
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal160=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_object_creation_expression3135); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal160);

                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:11: ( argument_list )?
                	        	int alt64 = 2;
                	        	int LA64_0 = input.LA(1);

                	        	if ( ((LA64_0 >= MONONOT && LA64_0 <= MONOTWIDDLE) || LA64_0 == NEW_ARRAY || (LA64_0 >= OBJECT && LA64_0 <= THIS) || LA64_0 == LPAREN || LA64_0 == BIT_AND || (LA64_0 >= PLUS && LA64_0 <= MINUS) || LA64_0 == STAR || (LA64_0 >= BOOL && LA64_0 <= NULL) || (LA64_0 >= ELIF && LA64_0 <= UNDEF) || LA64_0 == 195 || LA64_0 == 197 || LA64_0 == 207 || (LA64_0 >= 209 && LA64_0 <= 210) || (LA64_0 >= 212 && LA64_0 <= 219) || LA64_0 == 221 || (LA64_0 >= 224 && LA64_0 <= 239) || (LA64_0 >= 241 && LA64_0 <= 244) || (LA64_0 >= 247 && LA64_0 <= 254) || LA64_0 == 256 || (LA64_0 >= 263 && LA64_0 <= 264) || (LA64_0 >= 274 && LA64_0 <= 277)) )
                	        	{
                	        	    alt64 = 1;
                	        	}
                	        	switch (alt64) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:11: argument_list
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_argument_list_in_object_creation_expression3139);
                	        	        	argument_list161 = argument_list();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_argument_list.Add(argument_list161.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal162=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_object_creation_expression3144); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal162);

                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:36: (o1= object_or_collection_initializer )?
                	        	int alt65 = 2;
                	        	int LA65_0 = input.LA(1);

                	        	if ( (LA65_0 == OPEN_BRACE) )
                	        	{
                	        	    alt65 = 1;
                	        	}
                	        	switch (alt65) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:36: o1= object_or_collection_initializer
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression3150);
                	        	        	o1 = object_or_collection_initializer();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_object_or_collection_initializer.Add(o1.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}



                	        	// AST REWRITE
                	        	// elements:          type, o1, argument_list
                	        	// token labels:      
                	        	// rule labels:       retval, o1
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_o1 = new RewriteRuleSubtreeStream(adaptor, "rule o1", o1!=null ? o1.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 985:72: -> ^( NEW[$type.start.Token, \"new\"] type ( argument_list )? ( $o1)? )
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:75: ^( NEW[$type.start.Token, \"new\"] type ( argument_list )? ( $o1)? )
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, ((type159 != null) ? ((CommonTree)type159.Start) : null).Token, "new"), root_1);

                	        	    adaptor.AddChild(root_1, stream_type.NextTree());
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:112: ( argument_list )?
                	        	    if ( stream_argument_list.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_argument_list.NextTree());

                	        	    }
                	        	    stream_argument_list.Reset();
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:985:127: ( $o1)?
                	        	    if ( stream_o1.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_o1.NextTree());

                	        	    }
                	        	    stream_o1.Reset();

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:986:7: o2= object_or_collection_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression3178);
                	        	o2 = object_or_collection_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_object_or_collection_initializer.Add(o2.Tree);


                	        	// AST REWRITE
                	        	// elements:          type, o2
                	        	// token labels:      
                	        	// rule labels:       retval, o2
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_o2 = new RewriteRuleSubtreeStream(adaptor, "rule o2", o2!=null ? o2.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 986:43: -> ^( NEW[$type.start.Token, \"new\"] type $o2)
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:986:46: ^( NEW[$type.start.Token, \"new\"] type $o2)
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, ((type159 != null) ? ((CommonTree)type159.Start) : null).Token, "new"), root_1);

                	        	    adaptor.AddChild(root_1, stream_type.NextTree());
                	        	    adaptor.AddChild(root_1, stream_o2.NextTree());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "object_creation_expression"

        public class object_or_collection_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "object_or_collection_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:988:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
        public JavaMaker.object_or_collection_initializer_return object_or_collection_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.object_or_collection_initializer_return retval = new JavaMaker.object_or_collection_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal163 = null;
            JavaMaker.object_initializer_return object_initializer164 = default(JavaMaker.object_initializer_return);

            JavaMaker.collection_initializer_return collection_initializer165 = default(JavaMaker.collection_initializer_return);


            CommonTree char_literal163_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:988:33: ( '{' ( object_initializer | collection_initializer ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:989:2: '{' ( object_initializer | collection_initializer )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal163=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_or_collection_initializer3202); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal163_tree = (CommonTree)adaptor.DupNode(char_literal163);

                		adaptor.AddChild(root_0, char_literal163_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:989:7: ( object_initializer | collection_initializer )
                	int alt67 = 2;
                	switch ( input.LA(1) ) 
                	{
                	case IDENTIFIER:
                		{
                	    int LA67_1 = input.LA(2);

                	    if ( (LA67_1 == ASSIGN) )
                	    {
                	        alt67 = 1;
                	    }
                	    else if ( (LA67_1 == OPEN_BRACKET || (LA67_1 >= CLOSE_BRACE && LA67_1 <= NULL_COALESCE) || (LA67_1 >= LOG_OR && LA67_1 <= LEFT_SHIFT) || (LA67_1 >= PLUS && LA67_1 <= COMMA) || (LA67_1 >= DOT && LA67_1 <= GT) || (LA67_1 >= 208 && LA67_1 <= 210) || LA67_1 == 220 || (LA67_1 >= 222 && LA67_1 <= 223)) )
                	    {
                	        alt67 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d67s1 =
                	            new NoViableAltException("", 67, 1, input);

                	        throw nvae_d67s1;
                	    }
                	    }
                	    break;
                	case 225:
                		{
                	    int LA67_2 = input.LA(2);

                	    if ( (LA67_2 == ASSIGN) )
                	    {
                	        alt67 = 1;
                	    }
                	    else if ( (LA67_2 == OBJECT || LA67_2 == OPEN_BRACKET || (LA67_2 >= CLOSE_BRACE && LA67_2 <= NULL_COALESCE) || (LA67_2 >= LOG_OR && LA67_2 <= LEFT_SHIFT) || (LA67_2 >= PLUS && LA67_2 <= COMMA) || (LA67_2 >= BOOL && LA67_2 <= IDENTIFIER) || (LA67_2 >= DOT && LA67_2 <= GT) || (LA67_2 >= ELIF && LA67_2 <= UNDEF) || LA67_2 == 195 || LA67_2 == 206 || (LA67_2 >= 208 && LA67_2 <= 210) || (LA67_2 >= 220 && LA67_2 <= 239) || (LA67_2 >= 241 && LA67_2 <= 244) || (LA67_2 >= 247 && LA67_2 <= 254) || LA67_2 == 256 || (LA67_2 >= 263 && LA67_2 <= 264) || (LA67_2 >= 274 && LA67_2 <= 277)) )
                	    {
                	        alt67 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d67s2 =
                	            new NoViableAltException("", 67, 2, input);

                	        throw nvae_d67s2;
                	    }
                	    }
                	    break;
                	case CLOSE_BRACE:
                	case COMMA:
                		{
                	    alt67 = 1;
                	    }
                	    break;
                	case MONONOT:
                	case MONOTWIDDLE:
                	case NEW_ARRAY:
                	case OBJECT:
                	case THIS:
                	case OPEN_BRACE:
                	case LPAREN:
                	case BIT_AND:
                	case PLUS:
                	case MINUS:
                	case STAR:
                	case BOOL:
                	case BYTE:
                	case CHAR:
                	case SHORT:
                	case INT:
                	case LONG:
                	case FLOAT:
                	case DOUBLE:
                	case Real_literal:
                	case NUMBER:
                	case Hex_number:
                	case Character_literal:
                	case STRINGLITERAL:
                	case Verbatim_string_literal:
                	case TRUE:
                	case FALSE:
                	case NULL:
                	case 197:
                	case 207:
                	case 209:
                	case 210:
                	case 214:
                	case 215:
                	case 216:
                	case 217:
                	case 218:
                	case 219:
                	case 251:
                	case 252:
                	case 253:
                	case 254:
                	case 275:
                	case 276:
                		{
                	    alt67 = 2;
                	    }
                	    break;
                	case ELIF:
                	case ENDIF:
                	case DEFINE:
                	case UNDEF:
                	case 195:
                	case 221:
                	case 224:
                	case 226:
                	case 227:
                	case 228:
                	case 229:
                	case 230:
                	case 231:
                	case 232:
                	case 233:
                	case 234:
                	case 235:
                	case 236:
                	case 237:
                	case 238:
                	case 239:
                	case 241:
                	case 242:
                	case 243:
                	case 244:
                	case 247:
                	case 248:
                	case 249:
                	case 250:
                	case 256:
                	case 263:
                	case 264:
                	case 274:
                	case 277:
                		{
                	    int LA67_5 = input.LA(2);

                	    if ( (LA67_5 == ASSIGN) )
                	    {
                	        alt67 = 1;
                	    }
                	    else if ( (LA67_5 == OPEN_BRACKET || (LA67_5 >= CLOSE_BRACE && LA67_5 <= NULL_COALESCE) || (LA67_5 >= LOG_OR && LA67_5 <= LEFT_SHIFT) || (LA67_5 >= PLUS && LA67_5 <= COMMA) || (LA67_5 >= DOT && LA67_5 <= GT) || (LA67_5 >= 208 && LA67_5 <= 210) || LA67_5 == 220 || (LA67_5 >= 222 && LA67_5 <= 223)) )
                	    {
                	        alt67 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d67s5 =
                	            new NoViableAltException("", 67, 5, input);

                	        throw nvae_d67s5;
                	    }
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d67s0 =
                		        new NoViableAltException("", 67, 0, input);

                		    throw nvae_d67s0;
                	}

                	switch (alt67) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:989:8: object_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer3206);
                	        	object_initializer164 = object_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, object_initializer164.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:990:5: collection_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer3213);
                	        	collection_initializer165 = collection_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, collection_initializer165.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "object_or_collection_initializer"

        public class collection_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "collection_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:991:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
        public JavaMaker.collection_initializer_return collection_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.collection_initializer_return retval = new JavaMaker.collection_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal167 = null;
            CommonTree char_literal168 = null;
            JavaMaker.element_initializer_list_return element_initializer_list166 = default(JavaMaker.element_initializer_list_return);


            CommonTree char_literal167_tree=null;
            CommonTree char_literal168_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:991:23: ( element_initializer_list ( ',' )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:992:2: element_initializer_list ( ',' )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_element_initializer_list_in_collection_initializer3223);
                	element_initializer_list166 = element_initializer_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, element_initializer_list166.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:992:29: ( ',' )?
                	int alt68 = 2;
                	int LA68_0 = input.LA(1);

                	if ( (LA68_0 == COMMA) )
                	{
                	    alt68 = 1;
                	}
                	switch (alt68) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:992:29: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal167=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_collection_initializer3227); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal167_tree = (CommonTree)adaptor.DupNode(char_literal167);

                	        		adaptor.AddChild(root_0, char_literal167_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal168=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection_initializer3232); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal168_tree = (CommonTree)adaptor.DupNode(char_literal168);

                		adaptor.AddChild(root_0, char_literal168_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "collection_initializer"

        public class element_initializer_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "element_initializer_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:993:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
        public JavaMaker.element_initializer_list_return element_initializer_list() // throws RecognitionException [1]
        {   
            JavaMaker.element_initializer_list_return retval = new JavaMaker.element_initializer_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal170 = null;
            JavaMaker.element_initializer_return element_initializer169 = default(JavaMaker.element_initializer_return);

            JavaMaker.element_initializer_return element_initializer171 = default(JavaMaker.element_initializer_return);


            CommonTree char_literal170_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:993:25: ( element_initializer ( ',' element_initializer )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:994:2: element_initializer ( ',' element_initializer )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_element_initializer_in_element_initializer_list3241);
                	element_initializer169 = element_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, element_initializer169.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:994:23: ( ',' element_initializer )*
                	do 
                	{
                	    int alt69 = 2;
                	    int LA69_0 = input.LA(1);

                	    if ( (LA69_0 == COMMA) )
                	    {
                	        int LA69_1 = input.LA(2);

                	        if ( ((LA69_1 >= MONONOT && LA69_1 <= MONOTWIDDLE) || LA69_1 == NEW_ARRAY || (LA69_1 >= OBJECT && LA69_1 <= THIS) || LA69_1 == OPEN_BRACE || LA69_1 == LPAREN || LA69_1 == BIT_AND || (LA69_1 >= PLUS && LA69_1 <= MINUS) || LA69_1 == STAR || (LA69_1 >= BOOL && LA69_1 <= NULL) || (LA69_1 >= ELIF && LA69_1 <= UNDEF) || LA69_1 == 195 || LA69_1 == 197 || LA69_1 == 207 || (LA69_1 >= 209 && LA69_1 <= 210) || (LA69_1 >= 214 && LA69_1 <= 219) || LA69_1 == 221 || (LA69_1 >= 224 && LA69_1 <= 239) || (LA69_1 >= 241 && LA69_1 <= 244) || (LA69_1 >= 247 && LA69_1 <= 254) || LA69_1 == 256 || (LA69_1 >= 263 && LA69_1 <= 264) || (LA69_1 >= 274 && LA69_1 <= 277)) )
                	        {
                	            alt69 = 1;
                	        }


                	    }


                	    switch (alt69) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:994:24: ',' element_initializer
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal170=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_element_initializer_list3245); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal170_tree = (CommonTree)adaptor.DupNode(char_literal170);

                			    		adaptor.AddChild(root_0, char_literal170_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_element_initializer_in_element_initializer_list3247);
                			    	element_initializer171 = element_initializer();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, element_initializer171.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop69;
                	    }
                	} while (true);

                	loop69:
                		;	// Stops C# compiler whining that label 'loop69' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "element_initializer_list"

        public class element_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "element_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:995:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
        public JavaMaker.element_initializer_return element_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.element_initializer_return retval = new JavaMaker.element_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal173 = null;
            CommonTree char_literal175 = null;
            JavaMaker.non_assignment_expression_return non_assignment_expression172 = default(JavaMaker.non_assignment_expression_return);

            JavaMaker.expression_list_return expression_list174 = default(JavaMaker.expression_list_return);


            CommonTree char_literal173_tree=null;
            CommonTree char_literal175_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:995:20: ( non_assignment_expression | '{' expression_list '}' )
                int alt70 = 2;
                int LA70_0 = input.LA(1);

                if ( ((LA70_0 >= MONONOT && LA70_0 <= MONOTWIDDLE) || LA70_0 == NEW_ARRAY || (LA70_0 >= OBJECT && LA70_0 <= THIS) || LA70_0 == LPAREN || LA70_0 == BIT_AND || (LA70_0 >= PLUS && LA70_0 <= MINUS) || LA70_0 == STAR || (LA70_0 >= BOOL && LA70_0 <= NULL) || (LA70_0 >= ELIF && LA70_0 <= UNDEF) || LA70_0 == 195 || LA70_0 == 197 || LA70_0 == 207 || (LA70_0 >= 209 && LA70_0 <= 210) || (LA70_0 >= 214 && LA70_0 <= 219) || LA70_0 == 221 || (LA70_0 >= 224 && LA70_0 <= 239) || (LA70_0 >= 241 && LA70_0 <= 244) || (LA70_0 >= 247 && LA70_0 <= 254) || LA70_0 == 256 || (LA70_0 >= 263 && LA70_0 <= 264) || (LA70_0 >= 274 && LA70_0 <= 277)) )
                {
                    alt70 = 1;
                }
                else if ( (LA70_0 == OPEN_BRACE) )
                {
                    alt70 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d70s0 =
                        new NoViableAltException("", 70, 0, input);

                    throw nvae_d70s0;
                }
                switch (alt70) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:996:2: non_assignment_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_element_initializer3258);
                        	non_assignment_expression172 = non_assignment_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, non_assignment_expression172.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:997:4: '{' expression_list '}'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal173=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_element_initializer3264); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal173_tree = (CommonTree)adaptor.DupNode(char_literal173);

                        		adaptor.AddChild(root_0, char_literal173_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_list_in_element_initializer3268);
                        	expression_list174 = expression_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression_list174.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	char_literal175=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_element_initializer3272); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal175_tree = (CommonTree)adaptor.DupNode(char_literal175);

                        		adaptor.AddChild(root_0, char_literal175_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "element_initializer"

        public class object_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "object_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1004:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
        public JavaMaker.object_initializer_return object_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.object_initializer_return retval = new JavaMaker.object_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal177 = null;
            CommonTree char_literal178 = null;
            JavaMaker.member_initializer_list_return member_initializer_list176 = default(JavaMaker.member_initializer_list_return);


            CommonTree char_literal177_tree=null;
            CommonTree char_literal178_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1004:19: ( ( member_initializer_list )? ( ',' )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1005:2: ( member_initializer_list )? ( ',' )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1005:2: ( member_initializer_list )?
                	int alt71 = 2;
                	int LA71_0 = input.LA(1);

                	if ( (LA71_0 == IDENTIFIER || (LA71_0 >= ELIF && LA71_0 <= UNDEF) || LA71_0 == 195 || LA71_0 == 221 || (LA71_0 >= 224 && LA71_0 <= 239) || (LA71_0 >= 241 && LA71_0 <= 244) || (LA71_0 >= 247 && LA71_0 <= 250) || LA71_0 == 256 || (LA71_0 >= 263 && LA71_0 <= 264) || LA71_0 == 274 || LA71_0 == 277) )
                	{
                	    alt71 = 1;
                	}
                	switch (alt71) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1005:2: member_initializer_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_member_initializer_list_in_object_initializer3287);
                	        	member_initializer_list176 = member_initializer_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, member_initializer_list176.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1005:29: ( ',' )?
                	int alt72 = 2;
                	int LA72_0 = input.LA(1);

                	if ( (LA72_0 == COMMA) )
                	{
                	    alt72 = 1;
                	}
                	switch (alt72) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1005:29: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal177=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_object_initializer3292); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal177_tree = (CommonTree)adaptor.DupNode(char_literal177);

                	        		adaptor.AddChild(root_0, char_literal177_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal178=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer3297); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal178_tree = (CommonTree)adaptor.DupNode(char_literal178);

                		adaptor.AddChild(root_0, char_literal178_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "object_initializer"

        public class member_initializer_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_initializer_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1006:1: member_initializer_list : member_initializer ( ',' member_initializer )* ;
        public JavaMaker.member_initializer_list_return member_initializer_list() // throws RecognitionException [1]
        {   
            JavaMaker.member_initializer_list_return retval = new JavaMaker.member_initializer_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal180 = null;
            JavaMaker.member_initializer_return member_initializer179 = default(JavaMaker.member_initializer_return);

            JavaMaker.member_initializer_return member_initializer181 = default(JavaMaker.member_initializer_return);


            CommonTree char_literal180_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1006:24: ( member_initializer ( ',' member_initializer )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1007:2: member_initializer ( ',' member_initializer )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_initializer_in_member_initializer_list3306);
                	member_initializer179 = member_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, member_initializer179.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1007:22: ( ',' member_initializer )*
                	do 
                	{
                	    int alt73 = 2;
                	    int LA73_0 = input.LA(1);

                	    if ( (LA73_0 == COMMA) )
                	    {
                	        int LA73_1 = input.LA(2);

                	        if ( (LA73_1 == IDENTIFIER || (LA73_1 >= ELIF && LA73_1 <= UNDEF) || LA73_1 == 195 || LA73_1 == 221 || (LA73_1 >= 224 && LA73_1 <= 239) || (LA73_1 >= 241 && LA73_1 <= 244) || (LA73_1 >= 247 && LA73_1 <= 250) || LA73_1 == 256 || (LA73_1 >= 263 && LA73_1 <= 264) || LA73_1 == 274 || LA73_1 == 277) )
                	        {
                	            alt73 = 1;
                	        }


                	    }


                	    switch (alt73) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1007:23: ',' member_initializer
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal180=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_member_initializer_list3310); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal180_tree = (CommonTree)adaptor.DupNode(char_literal180);

                			    		adaptor.AddChild(root_0, char_literal180_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_member_initializer_in_member_initializer_list3312);
                			    	member_initializer181 = member_initializer();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, member_initializer181.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop73;
                	    }
                	} while (true);

                	loop73:
                		;	// Stops C# compiler whining that label 'loop73' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_initializer_list"

        public class member_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1008:1: member_initializer : identifier '=' initializer_value ;
        public JavaMaker.member_initializer_return member_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.member_initializer_return retval = new JavaMaker.member_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal183 = null;
            JavaMaker.identifier_return identifier182 = default(JavaMaker.identifier_return);

            JavaMaker.initializer_value_return initializer_value184 = default(JavaMaker.initializer_value_return);


            CommonTree char_literal183_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1008:19: ( identifier '=' initializer_value )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1009:2: identifier '=' initializer_value
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_member_initializer3323);
                	identifier182 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier182.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal183=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_member_initializer3327); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal183_tree = (CommonTree)adaptor.DupNode(char_literal183);

                		adaptor.AddChild(root_0, char_literal183_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_initializer_value_in_member_initializer3331);
                	initializer_value184 = initializer_value();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, initializer_value184.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_initializer"

        public class initializer_value_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "initializer_value"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1010:1: initializer_value : ( expression | object_or_collection_initializer );
        public JavaMaker.initializer_value_return initializer_value() // throws RecognitionException [1]
        {   
            JavaMaker.initializer_value_return retval = new JavaMaker.initializer_value_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression185 = default(JavaMaker.expression_return);

            JavaMaker.object_or_collection_initializer_return object_or_collection_initializer186 = default(JavaMaker.object_or_collection_initializer_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1010:18: ( expression | object_or_collection_initializer )
                int alt74 = 2;
                int LA74_0 = input.LA(1);

                if ( ((LA74_0 >= MONONOT && LA74_0 <= MONOTWIDDLE) || LA74_0 == NEW_ARRAY || (LA74_0 >= OBJECT && LA74_0 <= THIS) || LA74_0 == LPAREN || LA74_0 == BIT_AND || (LA74_0 >= PLUS && LA74_0 <= MINUS) || LA74_0 == STAR || (LA74_0 >= BOOL && LA74_0 <= NULL) || (LA74_0 >= ELIF && LA74_0 <= UNDEF) || LA74_0 == 195 || LA74_0 == 197 || LA74_0 == 207 || (LA74_0 >= 209 && LA74_0 <= 210) || (LA74_0 >= 214 && LA74_0 <= 219) || LA74_0 == 221 || (LA74_0 >= 224 && LA74_0 <= 239) || (LA74_0 >= 241 && LA74_0 <= 244) || (LA74_0 >= 247 && LA74_0 <= 254) || LA74_0 == 256 || (LA74_0 >= 263 && LA74_0 <= 264) || (LA74_0 >= 274 && LA74_0 <= 277)) )
                {
                    alt74 = 1;
                }
                else if ( (LA74_0 == OPEN_BRACE) )
                {
                    alt74 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d74s0 =
                        new NoViableAltException("", 74, 0, input);

                    throw nvae_d74s0;
                }
                switch (alt74) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1011:2: expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_initializer_value3340);
                        	expression185 = expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression185.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1012:4: object_or_collection_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value3346);
                        	object_or_collection_initializer186 = object_or_collection_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, object_or_collection_initializer186.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "initializer_value"

        public class typeof_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "typeof_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1016:1: typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | void_type ) ')' ;
        public JavaMaker.typeof_expression_return typeof_expression() // throws RecognitionException [1]
        {   
            JavaMaker.typeof_expression_return retval = new JavaMaker.typeof_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal187 = null;
            CommonTree char_literal188 = null;
            CommonTree char_literal192 = null;
            JavaMaker.unbound_type_name_return unbound_type_name189 = default(JavaMaker.unbound_type_name_return);

            JavaMaker.type_return type190 = default(JavaMaker.type_return);

            JavaMaker.void_type_return void_type191 = default(JavaMaker.void_type_return);


            CommonTree string_literal187_tree=null;
            CommonTree char_literal188_tree=null;
            CommonTree char_literal192_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1016:18: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | void_type ) ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1017:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | void_type ) ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal187=(CommonTree)Match(input,219,FOLLOW_219_in_typeof_expression3358); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal187_tree = (CommonTree)adaptor.DupNode(string_literal187);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal187_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal188=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_typeof_expression3363); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1017:21: ( ( unbound_type_name )=> unbound_type_name | type | void_type )
                	int alt75 = 3;
                	alt75 = dfa75.Predict(input);
                	switch (alt75) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1017:22: ( unbound_type_name )=> unbound_type_name
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_unbound_type_name_in_typeof_expression3375);
                	        	unbound_type_name189 = unbound_type_name();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, unbound_type_name189.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1018:10: type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_typeof_expression3386);
                	        	type190 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type190.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1019:10: void_type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_void_type_in_typeof_expression3398);
                	        	void_type191 = void_type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, void_type191.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal192=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression3403); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "typeof_expression"

        public class unbound_type_name_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unbound_type_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1024:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
        public JavaMaker.unbound_type_name_return unbound_type_name() // throws RecognitionException [1]
        {   
            JavaMaker.unbound_type_name_return retval = new JavaMaker.unbound_type_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.unbound_type_name_start_return unbound_type_name_start193 = default(JavaMaker.unbound_type_name_start_return);

            JavaMaker.generic_dimension_specifier_return generic_dimension_specifier194 = default(JavaMaker.generic_dimension_specifier_return);

            JavaMaker.unbound_type_name_part_return unbound_type_name_part195 = default(JavaMaker.unbound_type_name_part_return);

            JavaMaker.unbound_type_name_part_return unbound_type_name_part196 = default(JavaMaker.unbound_type_name_part_return);

            JavaMaker.generic_dimension_specifier_return generic_dimension_specifier197 = default(JavaMaker.generic_dimension_specifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1024:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1026:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unbound_type_name_start_in_unbound_type_name3419);
                	unbound_type_name_start193 = unbound_type_name_start();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, unbound_type_name_start193.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1027:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
                	do 
                	{
                	    int alt76 = 3;
                	    alt76 = dfa76.Predict(input);
                	    switch (alt76) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1027:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1027:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1027:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
                			    	{
                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3438);
                			    		generic_dimension_specifier194 = generic_dimension_specifier();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) 
                			    		adaptor.AddChild(root_0, generic_dimension_specifier194.Tree);
                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name3442);
                			    		unbound_type_name_part195 = unbound_type_name_part();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) 
                			    		adaptor.AddChild(root_0, unbound_type_name_part195.Tree);

                			    		if ( (state.backtracking==0) ) {
                			    		}
                			    	}


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;
                			case 2 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1028:5: unbound_type_name_part
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name3449);
                			    	unbound_type_name_part196 = unbound_type_name_part();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, unbound_type_name_part196.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop76;
                	    }
                	} while (true);

                	loop76:
                		;	// Stops C# compiler whining that label 'loop76' has no statements

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3459);
                	generic_dimension_specifier197 = generic_dimension_specifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, generic_dimension_specifier197.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unbound_type_name"

        public class unbound_type_name_start_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unbound_type_name_start"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1032:1: unbound_type_name_start : identifier ( '::' identifier )? ;
        public JavaMaker.unbound_type_name_start_return unbound_type_name_start() // throws RecognitionException [1]
        {   
            JavaMaker.unbound_type_name_start_return retval = new JavaMaker.unbound_type_name_start_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal199 = null;
            JavaMaker.identifier_return identifier198 = default(JavaMaker.identifier_return);

            JavaMaker.identifier_return identifier200 = default(JavaMaker.identifier_return);


            CommonTree string_literal199_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1032:24: ( identifier ( '::' identifier )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1033:2: identifier ( '::' identifier )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_unbound_type_name_start3469);
                	identifier198 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier198.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1033:13: ( '::' identifier )?
                	int alt77 = 2;
                	int LA77_0 = input.LA(1);

                	if ( (LA77_0 == 208) )
                	{
                	    alt77 = 1;
                	}
                	switch (alt77) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1033:14: '::' identifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal199=(CommonTree)Match(input,208,FOLLOW_208_in_unbound_type_name_start3472); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal199_tree = (CommonTree)adaptor.DupNode(string_literal199);

                	        		adaptor.AddChild(root_0, string_literal199_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_unbound_type_name_start3474);
                	        	identifier200 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier200.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unbound_type_name_start"

        public class unbound_type_name_part_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unbound_type_name_part"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1034:1: unbound_type_name_part : '.' identifier ;
        public JavaMaker.unbound_type_name_part_return unbound_type_name_part() // throws RecognitionException [1]
        {   
            JavaMaker.unbound_type_name_part_return retval = new JavaMaker.unbound_type_name_part_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal201 = null;
            JavaMaker.identifier_return identifier202 = default(JavaMaker.identifier_return);


            CommonTree char_literal201_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1034:23: ( '.' identifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1035:2: '.' identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal201=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_unbound_type_name_part3483); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal201_tree = (CommonTree)adaptor.DupNode(char_literal201);

                		adaptor.AddChild(root_0, char_literal201_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_unbound_type_name_part3487);
                	identifier202 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier202.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unbound_type_name_part"

        public class generic_dimension_specifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "generic_dimension_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1036:1: generic_dimension_specifier : '<' ( commas )? '>' ;
        public JavaMaker.generic_dimension_specifier_return generic_dimension_specifier() // throws RecognitionException [1]
        {   
            JavaMaker.generic_dimension_specifier_return retval = new JavaMaker.generic_dimension_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal203 = null;
            CommonTree char_literal205 = null;
            JavaMaker.commas_return commas204 = default(JavaMaker.commas_return);


            CommonTree char_literal203_tree=null;
            CommonTree char_literal205_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1036:28: ( '<' ( commas )? '>' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1037:2: '<' ( commas )? '>'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal203=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_generic_dimension_specifier3495); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal203_tree = (CommonTree)adaptor.DupNode(char_literal203);

                		adaptor.AddChild(root_0, char_literal203_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1037:8: ( commas )?
                	int alt78 = 2;
                	int LA78_0 = input.LA(1);

                	if ( (LA78_0 == COMMA) )
                	{
                	    alt78 = 1;
                	}
                	switch (alt78) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1037:8: commas
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_commas_in_generic_dimension_specifier3499);
                	        	commas204 = commas();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, commas204.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal205=(CommonTree)Match(input,GT,FOLLOW_GT_in_generic_dimension_specifier3504); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal205_tree = (CommonTree)adaptor.DupNode(char_literal205);

                		adaptor.AddChild(root_0, char_literal205_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "generic_dimension_specifier"

        public class commas_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "commas"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1038:1: commas : ( ',' )+ ;
        public JavaMaker.commas_return commas() // throws RecognitionException [1]
        {   
            JavaMaker.commas_return retval = new JavaMaker.commas_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal206 = null;

            CommonTree char_literal206_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1038:7: ( ( ',' )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1039:2: ( ',' )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1039:2: ( ',' )+
                	int cnt79 = 0;
                	do 
                	{
                	    int alt79 = 2;
                	    int LA79_0 = input.LA(1);

                	    if ( (LA79_0 == COMMA) )
                	    {
                	        alt79 = 1;
                	    }


                	    switch (alt79) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1039:2: ','
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal206=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_commas3513); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal206_tree = (CommonTree)adaptor.DupNode(char_literal206);

                			    		adaptor.AddChild(root_0, char_literal206_tree);
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt79 >= 1 ) goto loop79;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee79 =
                		                new EarlyExitException(79, input);
                		            throw eee79;
                	    }
                	    cnt79++;
                	} while (true);

                	loop79:
                		;	// Stops C# compiler whining that label 'loop79' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "commas"

        public class type_name_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1045:1: type_name returns [string thetext] : namespace_or_type_name ;
        public JavaMaker.type_name_return type_name() // throws RecognitionException [1]
        {   
            JavaMaker.type_name_return retval = new JavaMaker.type_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.namespace_or_type_name_return namespace_or_type_name207 = default(JavaMaker.namespace_or_type_name_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1045:35: ( namespace_or_type_name )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1046:2: namespace_or_type_name
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_namespace_or_type_name_in_type_name3533);
                	namespace_or_type_name207 = namespace_or_type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, namespace_or_type_name207.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext =  ((namespace_or_type_name207 != null) ? namespace_or_type_name207.thetext : default(string)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_name"

        public class namespace_or_type_name_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "namespace_or_type_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1047:1: namespace_or_type_name returns [string thetext] : t1= type_or_generic ( '::' tc= type_or_generic )? ( '.' tn= type_or_generic )* ;
        public JavaMaker.namespace_or_type_name_return namespace_or_type_name() // throws RecognitionException [1]
        {   
            JavaMaker.namespace_or_type_name_return retval = new JavaMaker.namespace_or_type_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal208 = null;
            CommonTree char_literal209 = null;
            JavaMaker.type_or_generic_return t1 = default(JavaMaker.type_or_generic_return);

            JavaMaker.type_or_generic_return tc = default(JavaMaker.type_or_generic_return);

            JavaMaker.type_or_generic_return tn = default(JavaMaker.type_or_generic_return);


            CommonTree string_literal208_tree=null;
            CommonTree char_literal209_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1047:48: (t1= type_or_generic ( '::' tc= type_or_generic )? ( '.' tn= type_or_generic )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1048:3: t1= type_or_generic ( '::' tc= type_or_generic )? ( '.' tn= type_or_generic )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name3550);
                	t1 = type_or_generic();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, t1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thetext = t1.type+formatTyargs(((t1 != null) ? t1.generic_arguments : default(List<string>))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1048:81: ( '::' tc= type_or_generic )?
                	int alt80 = 2;
                	int LA80_0 = input.LA(1);

                	if ( (LA80_0 == 208) )
                	{
                	    alt80 = 1;
                	}
                	switch (alt80) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1048:82: '::' tc= type_or_generic
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal208=(CommonTree)Match(input,208,FOLLOW_208_in_namespace_or_type_name3556); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal208_tree = (CommonTree)adaptor.DupNode(string_literal208);

                	        		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal208_tree, root_0);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name3561);
                	        	tc = type_or_generic();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, tc.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   retval.thetext+="::"+tc.type+formatTyargs(((tc != null) ? tc.generic_arguments : default(List<string>))); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1048:173: ( '.' tn= type_or_generic )*
                	do 
                	{
                	    int alt81 = 2;
                	    int LA81_0 = input.LA(1);

                	    if ( (LA81_0 == DOT) )
                	    {
                	        int LA81_2 = input.LA(2);

                	        if ( (LA81_2 == IDENTIFIER || (LA81_2 >= ELIF && LA81_2 <= UNDEF) || LA81_2 == 195 || LA81_2 == 221 || (LA81_2 >= 224 && LA81_2 <= 239) || (LA81_2 >= 241 && LA81_2 <= 244) || (LA81_2 >= 247 && LA81_2 <= 250) || LA81_2 == 256 || (LA81_2 >= 263 && LA81_2 <= 264) || LA81_2 == 274 || LA81_2 == 277) )
                	        {
                	            alt81 = 1;
                	        }


                	    }


                	    switch (alt81) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1048:174: '.' tn= type_or_generic
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal209=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name3568); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal209_tree = (CommonTree)adaptor.DupNode(char_literal209);

                			    		root_0 = (CommonTree)adaptor.BecomeRoot(char_literal209_tree, root_0);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name3575);
                			    	tn = type_or_generic();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, tn.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.thetext+="."+tn.type+formatTyargs(((tn != null) ? tn.generic_arguments : default(List<string>))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop81;
                	    }
                	} while (true);

                	loop81:
                		;	// Stops C# compiler whining that label 'loop81' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "namespace_or_type_name"

        public class type_or_generic_return : TreeRuleReturnScope
        {
            public string type;
            public List<string> generic_arguments;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_or_generic"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1049:1: type_or_generic returns [string type, List<string> generic_arguments] : ( ( identifier generic_argument_list )=>t= identifier ga= generic_argument_list | t= identifier );
        public JavaMaker.type_or_generic_return type_or_generic() // throws RecognitionException [1]
        {   
            JavaMaker.type_or_generic_return retval = new JavaMaker.type_or_generic_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.identifier_return t = default(JavaMaker.identifier_return);

            JavaMaker.generic_argument_list_return ga = default(JavaMaker.generic_argument_list_return);




                retval.generic_arguments =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1055:2: ( ( identifier generic_argument_list )=>t= identifier ga= generic_argument_list | t= identifier )
                int alt82 = 2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0 == IDENTIFIER) )
                {
                    int LA82_1 = input.LA(2);

                    if ( (synpred16_JavaMaker()) )
                    {
                        alt82 = 1;
                    }
                    else if ( (true) )
                    {
                        alt82 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d82s1 =
                            new NoViableAltException("", 82, 1, input);

                        throw nvae_d82s1;
                    }
                }
                else if ( ((LA82_0 >= ELIF && LA82_0 <= UNDEF) || LA82_0 == 195 || LA82_0 == 221 || (LA82_0 >= 224 && LA82_0 <= 239) || (LA82_0 >= 241 && LA82_0 <= 244) || (LA82_0 >= 247 && LA82_0 <= 250) || LA82_0 == 256 || (LA82_0 >= 263 && LA82_0 <= 264) || LA82_0 == 274 || LA82_0 == 277) )
                {
                    int LA82_2 = input.LA(2);

                    if ( (synpred16_JavaMaker()) )
                    {
                        alt82 = 1;
                    }
                    else if ( (true) )
                    {
                        alt82 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d82s2 =
                            new NoViableAltException("", 82, 2, input);

                        throw nvae_d82s2;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d82s0 =
                        new NoViableAltException("", 82, 0, input);

                    throw nvae_d82s0;
                }
                switch (alt82) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1056:2: ( identifier generic_argument_list )=>t= identifier ga= generic_argument_list
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_type_or_generic3613);
                        	t = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, t.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_generic_argument_list_in_type_or_generic3619);
                        	ga = generic_argument_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, ga.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.generic_arguments =  ((ga != null) ? ga.tyargs : default(List<string>)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1057:4: t= identifier
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_type_or_generic3628);
                        	t = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, t.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      retval.type =  ((t != null) ? input.TokenStream.ToString(
                    input.TreeAdaptor.GetTokenStartIndex(t.Start),
                    input.TreeAdaptor.GetTokenStopIndex(t.Start)) : null);

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_or_generic"

        public class qid_return : TreeRuleReturnScope
        {
            public string name;
            public List<string> tyargs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qid"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1060:1: qid returns [string name, List<string> tyargs] : (qs= qid_start -> $qs) (qp= qid_part[$qid.tree] -> $qp)* ;
        public JavaMaker.qid_return qid() // throws RecognitionException [1]
        {   
            JavaMaker.qid_return retval = new JavaMaker.qid_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.qid_start_return qs = default(JavaMaker.qid_start_return);

            JavaMaker.qid_part_return qp = default(JavaMaker.qid_part_return);


            RewriteRuleSubtreeStream stream_qid_start = new RewriteRuleSubtreeStream(adaptor,"rule qid_start");
            RewriteRuleSubtreeStream stream_qid_part = new RewriteRuleSubtreeStream(adaptor,"rule qid_part");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1060:47: ( (qs= qid_start -> $qs) (qp= qid_part[$qid.tree] -> $qp)* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1061:2: (qs= qid_start -> $qs) (qp= qid_part[$qid.tree] -> $qp)*
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1061:2: (qs= qid_start -> $qs)
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1061:3: qs= qid_start
                	{
                		_last = (CommonTree)input.LT(1);
                		PushFollow(FOLLOW_qid_start_in_qid3647);
                		qs = qid_start();
                		state._fsp--;
                		if (state.failed) return retval;
                		if ( (state.backtracking==0) ) stream_qid_start.Add(qs.Tree);


                		// AST REWRITE
                		// elements:          qs
                		// token labels:      
                		// rule labels:       retval, qs
                		// token list labels: 
                		// rule list labels:  
                		// wildcard labels: 
                		if ( (state.backtracking==0) ) {
                		retval.tree = root_0;
                		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                		RewriteRuleSubtreeStream stream_qs = new RewriteRuleSubtreeStream(adaptor, "rule qs", qs!=null ? qs.Tree : null);

                		root_0 = (CommonTree)adaptor.Nil;
                		// 1061:16: -> $qs
                		{
                		    adaptor.AddChild(root_0, stream_qs.NextTree());

                		}

                		retval.tree = root_0;}
                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1061:25: (qp= qid_part[$qid.tree] -> $qp)*
                	do 
                	{
                	    int alt83 = 2;
                	    int LA83_0 = input.LA(1);

                	    if ( ((LA83_0 >= DOT && LA83_0 <= PTR)) )
                	    {
                	        alt83 = 1;
                	    }


                	    switch (alt83) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1061:26: qp= qid_part[$qid.tree]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_qid_part_in_qid3659);
                			    	qp = qid_part(((CommonTree)retval.Tree));
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_qid_part.Add(qp.Tree);


                			    	// AST REWRITE
                			    	// elements:          qp
                			    	// token labels:      
                			    	// rule labels:       retval, qp
                			    	// token list labels: 
                			    	// rule list labels:  
                			    	// wildcard labels: 
                			    	if ( (state.backtracking==0) ) {
                			    	retval.tree = root_0;
                			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                			    	RewriteRuleSubtreeStream stream_qp = new RewriteRuleSubtreeStream(adaptor, "rule qp", qp!=null ? qp.Tree : null);

                			    	root_0 = (CommonTree)adaptor.Nil;
                			    	// 1061:49: -> $qp
                			    	{
                			    	    adaptor.AddChild(root_0, stream_qp.NextTree());

                			    	}

                			    	retval.tree = root_0;}
                			    }
                			    break;

                			default:
                			    goto loop83;
                	    }
                	} while (true);

                	loop83:
                		;	// Stops C# compiler whining that label 'loop83' has no statements

                	if ( (state.backtracking==0) )
                	{
                	   retval.name = ((qs != null) ? qs.name : default(string)); retval.tyargs =  ((qs != null) ? qs.tyargs : default(List<string>)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qid"

        public class qid_start_return : TreeRuleReturnScope
        {
            public string name;
            public List<string> tyargs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qid_start"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1063:1: qid_start returns [string name, List<string> tyargs] : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | i1= identifier ( '::' inext= identifier )? | literal );
        public JavaMaker.qid_start_return qid_start() // throws RecognitionException [1]
        {   
            JavaMaker.qid_start_return retval = new JavaMaker.qid_start_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal213 = null;
            JavaMaker.identifier_return i1 = default(JavaMaker.identifier_return);

            JavaMaker.identifier_return inext = default(JavaMaker.identifier_return);

            JavaMaker.predefined_type_return predefined_type210 = default(JavaMaker.predefined_type_return);

            JavaMaker.identifier_return identifier211 = default(JavaMaker.identifier_return);

            JavaMaker.generic_argument_list_return generic_argument_list212 = default(JavaMaker.generic_argument_list_return);

            JavaMaker.literal_return literal214 = default(JavaMaker.literal_return);


            CommonTree string_literal213_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1063:53: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | i1= identifier ( '::' inext= identifier )? | literal )
                int alt85 = 4;
                switch ( input.LA(1) ) 
                {
                case OBJECT:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case 251:
                case 252:
                case 253:
                case 254:
                case 275:
                case 276:
                	{
                    alt85 = 1;
                    }
                    break;
                case IDENTIFIER:
                	{
                    int LA85_2 = input.LA(2);

                    if ( (LA85_2 == LTHAN) && (synpred17_JavaMaker()) )
                    {
                        alt85 = 2;
                    }
                    else if ( (LA85_2 == EOF || LA85_2 == CLOSE_BRACE || LA85_2 == ASSIGN || LA85_2 == COMMA || (LA85_2 >= DOT && LA85_2 <= PTR) || LA85_2 == 208) )
                    {
                        alt85 = 3;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d85s2 =
                            new NoViableAltException("", 85, 2, input);

                        throw nvae_d85s2;
                    }
                    }
                    break;
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    int LA85_3 = input.LA(2);

                    if ( (LA85_3 == EOF || LA85_3 == CLOSE_BRACE || LA85_3 == ASSIGN || LA85_3 == COMMA || (LA85_3 >= DOT && LA85_3 <= PTR) || LA85_3 == 208) )
                    {
                        alt85 = 3;
                    }
                    else if ( (LA85_3 == LTHAN) && (synpred17_JavaMaker()) )
                    {
                        alt85 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d85s3 =
                            new NoViableAltException("", 85, 3, input);

                        throw nvae_d85s3;
                    }
                    }
                    break;
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                	{
                    alt85 = 4;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d85s0 =
                	        new NoViableAltException("", 85, 0, input);

                	    throw nvae_d85s0;
                }

                switch (alt85) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1064:2: predefined_type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_predefined_type_in_qid_start3682);
                        	predefined_type210 = predefined_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, predefined_type210.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.name =  ((predefined_type210 != null) ? predefined_type210.thetext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1065:4: ( identifier generic_argument_list )=> identifier generic_argument_list
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_qid_start3700);
                        	identifier211 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, identifier211.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_generic_argument_list_in_qid_start3704);
                        	generic_argument_list212 = generic_argument_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, generic_argument_list212.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.name =  ((identifier211 != null) ? input.TokenStream.ToString(
                        	    input.TreeAdaptor.GetTokenStartIndex(identifier211.Start),
                        	    input.TreeAdaptor.GetTokenStopIndex(identifier211.Start)) : null); retval.tyargs =  ((generic_argument_list212 != null) ? generic_argument_list212.tyargs : default(List<string>)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1068:4: i1= identifier ( '::' inext= identifier )?
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_qid_start3716);
                        	i1 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, i1.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.name =  ((i1 != null) ? input.TokenStream.ToString(
                        	    input.TreeAdaptor.GetTokenStartIndex(i1.Start),
                        	    input.TreeAdaptor.GetTokenStopIndex(i1.Start)) : null); 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1068:41: ( '::' inext= identifier )?
                        	int alt84 = 2;
                        	int LA84_0 = input.LA(1);

                        	if ( (LA84_0 == 208) )
                        	{
                        	    alt84 = 1;
                        	}
                        	switch (alt84) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1068:42: '::' inext= identifier
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	string_literal213=(CommonTree)Match(input,208,FOLLOW_208_in_qid_start3722); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{string_literal213_tree = (CommonTree)adaptor.DupNode(string_literal213);

                        	        		adaptor.AddChild(root_0, string_literal213_tree);
                        	        	}
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_identifier_in_qid_start3728);
                        	        	inext = identifier();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, inext.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.name+="::" + ((inext != null) ? input.TokenStream.ToString(
                        	        	    input.TreeAdaptor.GetTokenStartIndex(inext.Start),
                        	        	    input.TreeAdaptor.GetTokenStopIndex(inext.Start)) : null); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1069:4: literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_literal_in_qid_start3737);
                        	literal214 = literal();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, literal214.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.name =  ((literal214 != null) ? input.TokenStream.ToString(
                        	    input.TreeAdaptor.GetTokenStartIndex(literal214.Start),
                        	    input.TreeAdaptor.GetTokenStopIndex(literal214.Start)) : null); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qid_start"

        public class qid_part_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "qid_part"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1073:1: qid_part[CommonTree lhs] : access_identifier[ $lhs ] ;
        public JavaMaker.qid_part_return qid_part(CommonTree lhs) // throws RecognitionException [1]
        {   
            JavaMaker.qid_part_return retval = new JavaMaker.qid_part_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.access_identifier_return access_identifier215 = default(JavaMaker.access_identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1073:25: ( access_identifier[ $lhs ] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1074:2: access_identifier[ $lhs ]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_access_identifier_in_qid_part3753);
                	access_identifier215 = access_identifier(lhs);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, access_identifier215.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "qid_part"

        public class generic_argument_list_return : TreeRuleReturnScope
        {
            public List<string> tyargs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "generic_argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1076:1: generic_argument_list returns [List<string> tyargs] : '<' ta= type_arguments '>' ;
        public JavaMaker.generic_argument_list_return generic_argument_list() // throws RecognitionException [1]
        {   
            JavaMaker.generic_argument_list_return retval = new JavaMaker.generic_argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal216 = null;
            CommonTree char_literal217 = null;
            JavaMaker.type_arguments_return ta = default(JavaMaker.type_arguments_return);


            CommonTree char_literal216_tree=null;
            CommonTree char_literal217_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1080:1: ( '<' ta= type_arguments '>' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1081:2: '<' ta= type_arguments '>'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal216=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_generic_argument_list3774); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal216_tree = (CommonTree)adaptor.DupNode(char_literal216);

                		adaptor.AddChild(root_0, char_literal216_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_arguments_in_generic_argument_list3780);
                	ta = type_arguments();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, ta.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal217=(CommonTree)Match(input,GT,FOLLOW_GT_in_generic_argument_list3784); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal217_tree = (CommonTree)adaptor.DupNode(char_literal217);

                		adaptor.AddChild(root_0, char_literal217_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {
                   
                      retval.tyargs =  ((ta != null) ? ta.tyargs : default(List<string>));

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "generic_argument_list"

        public class type_arguments_return : TreeRuleReturnScope
        {
            public List<string> tyargs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_arguments"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1082:1: type_arguments returns [List<string> tyargs] : t1= type_argument ( ',' tn= type_argument )* ;
        public JavaMaker.type_arguments_return type_arguments() // throws RecognitionException [1]
        {   
            JavaMaker.type_arguments_return retval = new JavaMaker.type_arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal218 = null;
            JavaMaker.type_argument_return t1 = default(JavaMaker.type_argument_return);

            JavaMaker.type_argument_return tn = default(JavaMaker.type_argument_return);


            CommonTree char_literal218_tree=null;


                retval.tyargs =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1086:1: (t1= type_argument ( ',' tn= type_argument )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1087:2: t1= type_argument ( ',' tn= type_argument )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_argument_in_type_arguments3805);
                	t1 = type_argument();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, t1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.tyargs.Add(((t1 != null) ? t1.thetext : default(string))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1087:49: ( ',' tn= type_argument )*
                	do 
                	{
                	    int alt86 = 2;
                	    int LA86_0 = input.LA(1);

                	    if ( (LA86_0 == COMMA) )
                	    {
                	        alt86 = 1;
                	    }


                	    switch (alt86) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1087:50: ',' tn= type_argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal218=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_type_arguments3810); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal218_tree = (CommonTree)adaptor.DupNode(char_literal218);

                			    		adaptor.AddChild(root_0, char_literal218_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_argument_in_type_arguments3814);
                			    	tn = type_argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, tn.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.tyargs.Add(((tn != null) ? tn.thetext : default(string))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop86;
                	    }
                	} while (true);

                	loop86:
                		;	// Stops C# compiler whining that label 'loop86' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_arguments"

        public class type_argument_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_argument"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1089:8: public type_argument returns [string thetext] : ({...}? => javaish_type_argument | type );
        public JavaMaker.type_argument_return type_argument() // throws RecognitionException [1]
        {   
            JavaMaker.type_argument_return retval = new JavaMaker.type_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.javaish_type_argument_return javaish_type_argument219 = default(JavaMaker.javaish_type_argument_return);

            JavaMaker.type_return type220 = default(JavaMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1089:46: ({...}? => javaish_type_argument | type )
                int alt87 = 2;
                alt87 = dfa87.Predict(input);
                switch (alt87) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1090:5: {...}? => javaish_type_argument
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	if ( !((this.IsJavaish)) ) 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    throw new FailedPredicateException(input, "type_argument", "this.IsJavaish");
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_javaish_type_argument_in_type_argument3839);
                        	javaish_type_argument219 = javaish_type_argument();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, javaish_type_argument219.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.thetext =  ((javaish_type_argument219 != null) ? javaish_type_argument219.thetext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1091:6: type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_type_argument3848);
                        	type220 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type220.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.thetext =  ((type220 != null) ? type220.thetext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_argument"

        public class javaish_type_argument_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "javaish_type_argument"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1093:8: public javaish_type_argument returns [string thetext] : ( ( '?' 'extends' )=> '?' 'extends' type | '?' | type );
        public JavaMaker.javaish_type_argument_return javaish_type_argument() // throws RecognitionException [1]
        {   
            JavaMaker.javaish_type_argument_return retval = new JavaMaker.javaish_type_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal221 = null;
            CommonTree string_literal222 = null;
            CommonTree char_literal224 = null;
            JavaMaker.type_return type223 = default(JavaMaker.type_return);

            JavaMaker.type_return type225 = default(JavaMaker.type_return);


            CommonTree char_literal221_tree=null;
            CommonTree string_literal222_tree=null;
            CommonTree char_literal224_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1093:54: ( ( '?' 'extends' )=> '?' 'extends' type | '?' | type )
                int alt88 = 3;
                int LA88_0 = input.LA(1);

                if ( (LA88_0 == 220) )
                {
                    int LA88_1 = input.LA(2);

                    if ( (LA88_1 == 221) && (synpred18_JavaMaker()) )
                    {
                        alt88 = 1;
                    }
                    else if ( (LA88_1 == COMMA || LA88_1 == GT) )
                    {
                        alt88 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d88s1 =
                            new NoViableAltException("", 88, 1, input);

                        throw nvae_d88s1;
                    }
                }
                else if ( (LA88_0 == OBJECT || (LA88_0 >= BOOL && LA88_0 <= IDENTIFIER) || (LA88_0 >= ELIF && LA88_0 <= UNDEF) || LA88_0 == 195 || LA88_0 == 206 || LA88_0 == 221 || (LA88_0 >= 224 && LA88_0 <= 239) || (LA88_0 >= 241 && LA88_0 <= 244) || (LA88_0 >= 247 && LA88_0 <= 254) || LA88_0 == 256 || (LA88_0 >= 263 && LA88_0 <= 264) || (LA88_0 >= 274 && LA88_0 <= 277)) )
                {
                    alt88 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d88s0 =
                        new NoViableAltException("", 88, 0, input);

                    throw nvae_d88s0;
                }
                switch (alt88) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1094:7: ( '?' 'extends' )=> '?' 'extends' type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal221=(CommonTree)Match(input,220,FOLLOW_220_in_javaish_type_argument3876); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal221_tree = (CommonTree)adaptor.DupNode(char_literal221);

                        		adaptor.AddChild(root_0, char_literal221_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	string_literal222=(CommonTree)Match(input,221,FOLLOW_221_in_javaish_type_argument3878); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal222_tree = (CommonTree)adaptor.DupNode(string_literal222);

                        		adaptor.AddChild(root_0, string_literal222_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_javaish_type_argument3880);
                        	type223 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type223.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.thetext =  "? extends " + ((type223 != null) ? type223.thetext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1095:6: '?'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal224=(CommonTree)Match(input,220,FOLLOW_220_in_javaish_type_argument3890); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal224_tree = (CommonTree)adaptor.DupNode(char_literal224);

                        		adaptor.AddChild(root_0, char_literal224_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.thetext =  "?"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1096:6: type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_javaish_type_argument3900);
                        	type225 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type225.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.thetext =  ((type225 != null) ? type225.thetext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "javaish_type_argument"

        public class type_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1099:1: type returns [string thetext] : ( ( ( predefined_type | type_name ) rank_specifiers )=> (p1= predefined_type | tn1= type_name ) rs= rank_specifiers ( '*' )* -> ^( TYPE ( $p1)? ( $tn1)? $rs ( '*' )* ) | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> (p2= predefined_type | tn2= type_name ) ( ( '*' )+ | o2= '?' ) -> ^( TYPE ( $p2)? ( $tn2)? ( '*' )* ( $o2)? ) | (p3= predefined_type | tn3= type_name ) -> ^( TYPE ( $p3)? ( $tn3)? ) | v= 'void' ( '*' )+ -> ^( TYPE[$v.token, \"TYPE\"] $v ( '*' )+ ) );
        public JavaMaker.type_return type() // throws RecognitionException [1]
        {   
            JavaMaker.type_return retval = new JavaMaker.type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o2 = null;
            CommonTree v = null;
            CommonTree char_literal226 = null;
            CommonTree char_literal227 = null;
            CommonTree char_literal228 = null;
            JavaMaker.predefined_type_return p1 = default(JavaMaker.predefined_type_return);

            JavaMaker.type_name_return tn1 = default(JavaMaker.type_name_return);

            JavaMaker.rank_specifiers_return rs = default(JavaMaker.rank_specifiers_return);

            JavaMaker.predefined_type_return p2 = default(JavaMaker.predefined_type_return);

            JavaMaker.type_name_return tn2 = default(JavaMaker.type_name_return);

            JavaMaker.predefined_type_return p3 = default(JavaMaker.predefined_type_return);

            JavaMaker.type_name_return tn3 = default(JavaMaker.type_name_return);


            CommonTree o2_tree=null;
            CommonTree v_tree=null;
            CommonTree char_literal226_tree=null;
            CommonTree char_literal227_tree=null;
            CommonTree char_literal228_tree=null;
            RewriteRuleNodeStream stream_220 = new RewriteRuleNodeStream(adaptor,"token 220");
            RewriteRuleNodeStream stream_STAR = new RewriteRuleNodeStream(adaptor,"token STAR");
            RewriteRuleNodeStream stream_206 = new RewriteRuleNodeStream(adaptor,"token 206");
            RewriteRuleSubtreeStream stream_rank_specifiers = new RewriteRuleSubtreeStream(adaptor,"rule rank_specifiers");
            RewriteRuleSubtreeStream stream_predefined_type = new RewriteRuleSubtreeStream(adaptor,"rule predefined_type");
            RewriteRuleSubtreeStream stream_type_name = new RewriteRuleSubtreeStream(adaptor,"rule type_name");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1099:30: ( ( ( predefined_type | type_name ) rank_specifiers )=> (p1= predefined_type | tn1= type_name ) rs= rank_specifiers ( '*' )* -> ^( TYPE ( $p1)? ( $tn1)? $rs ( '*' )* ) | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> (p2= predefined_type | tn2= type_name ) ( ( '*' )+ | o2= '?' ) -> ^( TYPE ( $p2)? ( $tn2)? ( '*' )* ( $o2)? ) | (p3= predefined_type | tn3= type_name ) -> ^( TYPE ( $p3)? ( $tn3)? ) | v= 'void' ( '*' )+ -> ^( TYPE[$v.token, \"TYPE\"] $v ( '*' )+ ) )
                int alt96 = 4;
                alt96 = dfa96.Predict(input);
                switch (alt96) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:10: ( ( predefined_type | type_name ) rank_specifiers )=> (p1= predefined_type | tn1= type_name ) rs= rank_specifiers ( '*' )*
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:62: (p1= predefined_type | tn1= type_name )
                        	int alt89 = 2;
                        	int LA89_0 = input.LA(1);

                        	if ( (LA89_0 == OBJECT || (LA89_0 >= BOOL && LA89_0 <= DOUBLE) || (LA89_0 >= 251 && LA89_0 <= 254) || (LA89_0 >= 275 && LA89_0 <= 276)) )
                        	{
                        	    alt89 = 1;
                        	}
                        	else if ( (LA89_0 == IDENTIFIER || (LA89_0 >= ELIF && LA89_0 <= UNDEF) || LA89_0 == 195 || LA89_0 == 221 || (LA89_0 >= 224 && LA89_0 <= 239) || (LA89_0 >= 241 && LA89_0 <= 244) || (LA89_0 >= 247 && LA89_0 <= 250) || LA89_0 == 256 || (LA89_0 >= 263 && LA89_0 <= 264) || LA89_0 == 274 || LA89_0 == 277) )
                        	{
                        	    alt89 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d89s0 =
                        	        new NoViableAltException("", 89, 0, input);

                        	    throw nvae_d89s0;
                        	}
                        	switch (alt89) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:63: p1= predefined_type
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_predefined_type_in_type3941);
                        	        	p1 = predefined_type();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_predefined_type.Add(p1.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.thetext =  ((p1 != null) ? p1.thetext : default(string)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:112: tn1= type_name
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_name_in_type3949);
                        	        	tn1 = type_name();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_type_name.Add(tn1.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.thetext =  ((tn1 != null) ? tn1.thetext : default(string)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_rank_specifiers_in_type3958);
                        	rs = rank_specifiers();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_rank_specifiers.Add(rs.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext += ((rs != null) ? input.TokenStream.ToString(
                        	    input.TreeAdaptor.GetTokenStartIndex(rs.Start),
                        	    input.TreeAdaptor.GetTokenStopIndex(rs.Start)) : null); 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:204: ( '*' )*
                        	do 
                        	{
                        	    int alt90 = 2;
                        	    int LA90_0 = input.LA(1);

                        	    if ( (LA90_0 == STAR) )
                        	    {
                        	        alt90 = 1;
                        	    }


                        	    switch (alt90) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:205: '*'
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	char_literal226=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_type3964); if (state.failed) return retval; 
                        			    	if ( (state.backtracking==0) ) stream_STAR.Add(char_literal226);

                        			    	if ( (state.backtracking==0) )
                        			    	{
                        			    	   retval.thetext += "*"; 
                        			    	}

                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    goto loop90;
                        	    }
                        	} while (true);

                        	loop90:
                        		;	// Stops C# compiler whining that label 'loop90' has no statements



                        	// AST REWRITE
                        	// elements:          rs, p1, STAR, tn1
                        	// token labels:      
                        	// rule labels:       retval, tn1, p1, rs
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_tn1 = new RewriteRuleSubtreeStream(adaptor, "rule tn1", tn1!=null ? tn1.Tree : null);
                        	RewriteRuleSubtreeStream stream_p1 = new RewriteRuleSubtreeStream(adaptor, "rule p1", p1!=null ? p1.Tree : null);
                        	RewriteRuleSubtreeStream stream_rs = new RewriteRuleSubtreeStream(adaptor, "rule rs", rs!=null ? rs.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1100:232: -> ^( TYPE ( $p1)? ( $tn1)? $rs ( '*' )* )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:235: ^( TYPE ( $p1)? ( $tn1)? $rs ( '*' )* )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:242: ( $p1)?
                        	    if ( stream_p1.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_p1.NextTree());

                        	    }
                        	    stream_p1.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:247: ( $tn1)?
                        	    if ( stream_tn1.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_tn1.NextTree());

                        	    }
                        	    stream_tn1.Reset();
                        	    adaptor.AddChild(root_1, stream_rs.NextTree());
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:257: ( '*' )*
                        	    while ( stream_STAR.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_STAR.NextNode());

                        	    }
                        	    stream_STAR.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:10: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> (p2= predefined_type | tn2= type_name ) ( ( '*' )+ | o2= '?' )
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:59: (p2= predefined_type | tn2= type_name )
                        	int alt91 = 2;
                        	int LA91_0 = input.LA(1);

                        	if ( (LA91_0 == OBJECT || (LA91_0 >= BOOL && LA91_0 <= DOUBLE) || (LA91_0 >= 251 && LA91_0 <= 254) || (LA91_0 >= 275 && LA91_0 <= 276)) )
                        	{
                        	    alt91 = 1;
                        	}
                        	else if ( (LA91_0 == IDENTIFIER || (LA91_0 >= ELIF && LA91_0 <= UNDEF) || LA91_0 == 195 || LA91_0 == 221 || (LA91_0 >= 224 && LA91_0 <= 239) || (LA91_0 >= 241 && LA91_0 <= 244) || (LA91_0 >= 247 && LA91_0 <= 250) || LA91_0 == 256 || (LA91_0 >= 263 && LA91_0 <= 264) || LA91_0 == 274 || LA91_0 == 277) )
                        	{
                        	    alt91 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d91s0 =
                        	        new NoViableAltException("", 91, 0, input);

                        	    throw nvae_d91s0;
                        	}
                        	switch (alt91) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:60: p2= predefined_type
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_predefined_type_in_type4024);
                        	        	p2 = predefined_type();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_predefined_type.Add(p2.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.thetext =  ((p2 != null) ? p2.thetext : default(string)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:109: tn2= type_name
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_name_in_type4032);
                        	        	tn2 = type_name();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_type_name.Add(tn2.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.thetext =  ((tn2 != null) ? tn2.thetext : default(string)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:155: ( ( '*' )+ | o2= '?' )
                        	int alt93 = 2;
                        	int LA93_0 = input.LA(1);

                        	if ( (LA93_0 == STAR) )
                        	{
                        	    alt93 = 1;
                        	}
                        	else if ( (LA93_0 == 220) )
                        	{
                        	    alt93 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d93s0 =
                        	        new NoViableAltException("", 93, 0, input);

                        	    throw nvae_d93s0;
                        	}
                        	switch (alt93) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:156: ( '*' )+
                        	        {
                        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:156: ( '*' )+
                        	        	int cnt92 = 0;
                        	        	do 
                        	        	{
                        	        	    int alt92 = 2;
                        	        	    int LA92_0 = input.LA(1);

                        	        	    if ( (LA92_0 == STAR) )
                        	        	    {
                        	        	        alt92 = 1;
                        	        	    }


                        	        	    switch (alt92) 
                        	        		{
                        	        			case 1 :
                        	        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:157: '*'
                        	        			    {
                        	        			    	_last = (CommonTree)input.LT(1);
                        	        			    	char_literal227=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_type4041); if (state.failed) return retval; 
                        	        			    	if ( (state.backtracking==0) ) stream_STAR.Add(char_literal227);

                        	        			    	if ( (state.backtracking==0) )
                        	        			    	{
                        	        			    	   retval.thetext += "*"; 
                        	        			    	}

                        	        			    	if ( (state.backtracking==0) ) {
                        	        			    	}
                        	        			    }
                        	        			    break;

                        	        			default:
                        	        			    if ( cnt92 >= 1 ) goto loop92;
                        	        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	        		            EarlyExitException eee92 =
                        	        		                new EarlyExitException(92, input);
                        	        		            throw eee92;
                        	        	    }
                        	        	    cnt92++;
                        	        	} while (true);

                        	        	loop92:
                        	        		;	// Stops C# compiler whining that label 'loop92' has no statements


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:186: o2= '?'
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	o2=(CommonTree)Match(input,220,FOLLOW_220_in_type4051); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_220.Add(o2);

                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.thetext += "?"; 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}



                        	// AST REWRITE
                        	// elements:          p2, STAR, o2, tn2
                        	// token labels:      o2
                        	// rule labels:       retval, p2, tn2
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_o2 = new RewriteRuleNodeStream(adaptor, "token o2", o2);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_p2 = new RewriteRuleSubtreeStream(adaptor, "rule p2", p2!=null ? p2.Tree : null);
                        	RewriteRuleSubtreeStream stream_tn2 = new RewriteRuleSubtreeStream(adaptor, "rule tn2", tn2!=null ? tn2.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1101:215: -> ^( TYPE ( $p2)? ( $tn2)? ( '*' )* ( $o2)? )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:218: ^( TYPE ( $p2)? ( $tn2)? ( '*' )* ( $o2)? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:225: ( $p2)?
                        	    if ( stream_p2.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_p2.NextTree());

                        	    }
                        	    stream_p2.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:230: ( $tn2)?
                        	    if ( stream_tn2.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_tn2.NextTree());

                        	    }
                        	    stream_tn2.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:236: ( '*' )*
                        	    while ( stream_STAR.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_STAR.NextNode());

                        	    }
                        	    stream_STAR.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:241: ( $o2)?
                        	    if ( stream_o2.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_o2.NextNode());

                        	    }
                        	    stream_o2.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1102:10: (p3= predefined_type | tn3= type_name )
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1102:10: (p3= predefined_type | tn3= type_name )
                        	int alt94 = 2;
                        	int LA94_0 = input.LA(1);

                        	if ( (LA94_0 == OBJECT || (LA94_0 >= BOOL && LA94_0 <= DOUBLE) || (LA94_0 >= 251 && LA94_0 <= 254) || (LA94_0 >= 275 && LA94_0 <= 276)) )
                        	{
                        	    alt94 = 1;
                        	}
                        	else if ( (LA94_0 == IDENTIFIER || (LA94_0 >= ELIF && LA94_0 <= UNDEF) || LA94_0 == 195 || LA94_0 == 221 || (LA94_0 >= 224 && LA94_0 <= 239) || (LA94_0 >= 241 && LA94_0 <= 244) || (LA94_0 >= 247 && LA94_0 <= 250) || LA94_0 == 256 || (LA94_0 >= 263 && LA94_0 <= 264) || LA94_0 == 274 || LA94_0 == 277) )
                        	{
                        	    alt94 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d94s0 =
                        	        new NoViableAltException("", 94, 0, input);

                        	    throw nvae_d94s0;
                        	}
                        	switch (alt94) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1102:11: p3= predefined_type
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_predefined_type_in_type4089);
                        	        	p3 = predefined_type();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_predefined_type.Add(p3.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.thetext =  ((p3 != null) ? p3.thetext : default(string)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1102:60: tn3= type_name
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_name_in_type4097);
                        	        	tn3 = type_name();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_type_name.Add(tn3.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	   retval.thetext =  ((tn3 != null) ? tn3.thetext : default(string)); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}



                        	// AST REWRITE
                        	// elements:          tn3, p3
                        	// token labels:      
                        	// rule labels:       retval, p3, tn3
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_p3 = new RewriteRuleSubtreeStream(adaptor, "rule p3", p3!=null ? p3.Tree : null);
                        	RewriteRuleSubtreeStream stream_tn3 = new RewriteRuleSubtreeStream(adaptor, "rule tn3", tn3!=null ? tn3.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1102:104: -> ^( TYPE ( $p3)? ( $tn3)? )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1102:107: ^( TYPE ( $p3)? ( $tn3)? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1102:114: ( $p3)?
                        	    if ( stream_p3.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_p3.NextTree());

                        	    }
                        	    stream_p3.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1102:119: ( $tn3)?
                        	    if ( stream_tn3.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_tn3.NextTree());

                        	    }
                        	    stream_tn3.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1103:10: v= 'void' ( '*' )+
                        {
                        	_last = (CommonTree)input.LT(1);
                        	v=(CommonTree)Match(input,206,FOLLOW_206_in_type4127); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_206.Add(v);

                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Void"; 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1103:49: ( '*' )+
                        	int cnt95 = 0;
                        	do 
                        	{
                        	    int alt95 = 2;
                        	    int LA95_0 = input.LA(1);

                        	    if ( (LA95_0 == STAR) )
                        	    {
                        	        alt95 = 1;
                        	    }


                        	    switch (alt95) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1103:50: '*'
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	char_literal228=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_type4132); if (state.failed) return retval; 
                        			    	if ( (state.backtracking==0) ) stream_STAR.Add(char_literal228);

                        			    	if ( (state.backtracking==0) )
                        			    	{
                        			    	   retval.thetext += "*"; 
                        			    	}

                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    if ( cnt95 >= 1 ) goto loop95;
                        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        		            EarlyExitException eee95 =
                        		                new EarlyExitException(95, input);
                        		            throw eee95;
                        	    }
                        	    cnt95++;
                        	} while (true);

                        	loop95:
                        		;	// Stops C# compiler whining that label 'loop95' has no statements



                        	// AST REWRITE
                        	// elements:          v, STAR
                        	// token labels:      v
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_v = new RewriteRuleNodeStream(adaptor, "token v", v);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1103:78: -> ^( TYPE[$v.token, \"TYPE\"] $v ( '*' )+ )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1103:81: ^( TYPE[$v.token, \"TYPE\"] $v ( '*' )+ )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, v.token, "TYPE"), root_1);

                        	    adaptor.AddChild(root_1, stream_v.NextNode());
                        	    if ( !(stream_STAR.HasNext) ) {
                        	        throw new RewriteEarlyExitException();
                        	    }
                        	    while ( stream_STAR.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_STAR.NextNode());

                        	    }
                        	    stream_STAR.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type"

        public class non_nullable_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "non_nullable_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1105:1: non_nullable_type : ( (p= predefined_type | t= type_name ) (rs= rank_specifiers )? ( '*' )* -> ^( TYPE[\"TYPE\"] ( $p)? ( $t)? ( $rs)? ( '*' )* ) | v= 'void' ( '*' )+ -> ^( TYPE[$v.token,\"TYPE\"] $v ( '*' )+ ) );
        public JavaMaker.non_nullable_type_return non_nullable_type() // throws RecognitionException [1]
        {   
            JavaMaker.non_nullable_type_return retval = new JavaMaker.non_nullable_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree v = null;
            CommonTree char_literal229 = null;
            CommonTree char_literal230 = null;
            JavaMaker.predefined_type_return p = default(JavaMaker.predefined_type_return);

            JavaMaker.type_name_return t = default(JavaMaker.type_name_return);

            JavaMaker.rank_specifiers_return rs = default(JavaMaker.rank_specifiers_return);


            CommonTree v_tree=null;
            CommonTree char_literal229_tree=null;
            CommonTree char_literal230_tree=null;
            RewriteRuleNodeStream stream_STAR = new RewriteRuleNodeStream(adaptor,"token STAR");
            RewriteRuleNodeStream stream_206 = new RewriteRuleNodeStream(adaptor,"token 206");
            RewriteRuleSubtreeStream stream_rank_specifiers = new RewriteRuleSubtreeStream(adaptor,"rule rank_specifiers");
            RewriteRuleSubtreeStream stream_predefined_type = new RewriteRuleSubtreeStream(adaptor,"rule predefined_type");
            RewriteRuleSubtreeStream stream_type_name = new RewriteRuleSubtreeStream(adaptor,"rule type_name");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1105:18: ( (p= predefined_type | t= type_name ) (rs= rank_specifiers )? ( '*' )* -> ^( TYPE[\"TYPE\"] ( $p)? ( $t)? ( $rs)? ( '*' )* ) | v= 'void' ( '*' )+ -> ^( TYPE[$v.token,\"TYPE\"] $v ( '*' )+ ) )
                int alt101 = 2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0 == OBJECT || (LA101_0 >= BOOL && LA101_0 <= IDENTIFIER) || (LA101_0 >= ELIF && LA101_0 <= UNDEF) || LA101_0 == 195 || LA101_0 == 221 || (LA101_0 >= 224 && LA101_0 <= 239) || (LA101_0 >= 241 && LA101_0 <= 244) || (LA101_0 >= 247 && LA101_0 <= 254) || LA101_0 == 256 || (LA101_0 >= 263 && LA101_0 <= 264) || (LA101_0 >= 274 && LA101_0 <= 277)) )
                {
                    alt101 = 1;
                }
                else if ( (LA101_0 == 206) )
                {
                    alt101 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d101s0 =
                        new NoViableAltException("", 101, 0, input);

                    throw nvae_d101s0;
                }
                switch (alt101) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:2: (p= predefined_type | t= type_name ) (rs= rank_specifiers )? ( '*' )*
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:2: (p= predefined_type | t= type_name )
                        	int alt97 = 2;
                        	int LA97_0 = input.LA(1);

                        	if ( (LA97_0 == OBJECT || (LA97_0 >= BOOL && LA97_0 <= DOUBLE) || (LA97_0 >= 251 && LA97_0 <= 254) || (LA97_0 >= 275 && LA97_0 <= 276)) )
                        	{
                        	    alt97 = 1;
                        	}
                        	else if ( (LA97_0 == IDENTIFIER || (LA97_0 >= ELIF && LA97_0 <= UNDEF) || LA97_0 == 195 || LA97_0 == 221 || (LA97_0 >= 224 && LA97_0 <= 239) || (LA97_0 >= 241 && LA97_0 <= 244) || (LA97_0 >= 247 && LA97_0 <= 250) || LA97_0 == 256 || (LA97_0 >= 263 && LA97_0 <= 264) || LA97_0 == 274 || LA97_0 == 277) )
                        	{
                        	    alt97 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d97s0 =
                        	        new NoViableAltException("", 97, 0, input);

                        	    throw nvae_d97s0;
                        	}
                        	switch (alt97) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:3: p= predefined_type
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_predefined_type_in_non_nullable_type4168);
                        	        	p = predefined_type();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_predefined_type.Add(p.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:23: t= type_name
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_type_name_in_non_nullable_type4174);
                        	        	t = type_name();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_type_name.Add(t.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:38: (rs= rank_specifiers )?
                        	int alt98 = 2;
                        	int LA98_0 = input.LA(1);

                        	if ( (LA98_0 == OPEN_BRACKET) )
                        	{
                        	    alt98 = 1;
                        	}
                        	switch (alt98) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:38: rs= rank_specifiers
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_rank_specifiers_in_non_nullable_type4179);
                        	        	rs = rank_specifiers();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_rank_specifiers.Add(rs.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:56: ( '*' )*
                        	do 
                        	{
                        	    int alt99 = 2;
                        	    int LA99_0 = input.LA(1);

                        	    if ( (LA99_0 == STAR) )
                        	    {
                        	        alt99 = 1;
                        	    }


                        	    switch (alt99) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:56: '*'
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	char_literal229=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_non_nullable_type4182); if (state.failed) return retval; 
                        			    	if ( (state.backtracking==0) ) stream_STAR.Add(char_literal229);


                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    goto loop99;
                        	    }
                        	} while (true);

                        	loop99:
                        		;	// Stops C# compiler whining that label 'loop99' has no statements



                        	// AST REWRITE
                        	// elements:          p, t, STAR, rs
                        	// token labels:      
                        	// rule labels:       retval, t, p, rs
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_t = new RewriteRuleSubtreeStream(adaptor, "rule t", t!=null ? t.Tree : null);
                        	RewriteRuleSubtreeStream stream_p = new RewriteRuleSubtreeStream(adaptor, "rule p", p!=null ? p.Tree : null);
                        	RewriteRuleSubtreeStream stream_rs = new RewriteRuleSubtreeStream(adaptor, "rule rs", rs!=null ? rs.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1106:61: -> ^( TYPE[\"TYPE\"] ( $p)? ( $t)? ( $rs)? ( '*' )* )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:65: ^( TYPE[\"TYPE\"] ( $p)? ( $t)? ( $rs)? ( '*' )* )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:80: ( $p)?
                        	    if ( stream_p.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_p.NextTree());

                        	    }
                        	    stream_p.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:84: ( $t)?
                        	    if ( stream_t.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_t.NextTree());

                        	    }
                        	    stream_t.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:88: ( $rs)?
                        	    if ( stream_rs.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_rs.NextTree());

                        	    }
                        	    stream_rs.Reset();
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1106:93: ( '*' )*
                        	    while ( stream_STAR.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_STAR.NextNode());

                        	    }
                        	    stream_STAR.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1107:10: v= 'void' ( '*' )+
                        {
                        	_last = (CommonTree)input.LT(1);
                        	v=(CommonTree)Match(input,206,FOLLOW_206_in_non_nullable_type4219); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_206.Add(v);

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1107:19: ( '*' )+
                        	int cnt100 = 0;
                        	do 
                        	{
                        	    int alt100 = 2;
                        	    int LA100_0 = input.LA(1);

                        	    if ( (LA100_0 == STAR) )
                        	    {
                        	        alt100 = 1;
                        	    }


                        	    switch (alt100) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1107:19: '*'
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	char_literal230=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_non_nullable_type4221); if (state.failed) return retval; 
                        			    	if ( (state.backtracking==0) ) stream_STAR.Add(char_literal230);


                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    if ( cnt100 >= 1 ) goto loop100;
                        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        		            EarlyExitException eee100 =
                        		                new EarlyExitException(100, input);
                        		            throw eee100;
                        	    }
                        	    cnt100++;
                        	} while (true);

                        	loop100:
                        		;	// Stops C# compiler whining that label 'loop100' has no statements



                        	// AST REWRITE
                        	// elements:          STAR, v
                        	// token labels:      v
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_v = new RewriteRuleNodeStream(adaptor, "token v", v);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1107:25: -> ^( TYPE[$v.token,\"TYPE\"] $v ( '*' )+ )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1107:28: ^( TYPE[$v.token,\"TYPE\"] $v ( '*' )+ )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, v.token, "TYPE"), root_1);

                        	    adaptor.AddChild(root_1, stream_v.NextNode());
                        	    if ( !(stream_STAR.HasNext) ) {
                        	        throw new RewriteEarlyExitException();
                        	    }
                        	    while ( stream_STAR.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_STAR.NextNode());

                        	    }
                        	    stream_STAR.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "non_nullable_type"

        public class non_array_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "non_array_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1109:1: non_array_type : type ;
        public JavaMaker.non_array_type_return non_array_type() // throws RecognitionException [1]
        {   
            JavaMaker.non_array_type_return retval = new JavaMaker.non_array_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_return type231 = default(JavaMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1109:15: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1110:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_non_array_type4251);
                	type231 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type231.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "non_array_type"

        public class array_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "array_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1111:1: array_type : type ;
        public JavaMaker.array_type_return array_type() // throws RecognitionException [1]
        {   
            JavaMaker.array_type_return retval = new JavaMaker.array_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_return type232 = default(JavaMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1111:11: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1112:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_array_type4258);
                	type232 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type232.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "array_type"

        public class unmanaged_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unmanaged_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1113:1: unmanaged_type : type ;
        public JavaMaker.unmanaged_type_return unmanaged_type() // throws RecognitionException [1]
        {   
            JavaMaker.unmanaged_type_return retval = new JavaMaker.unmanaged_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_return type233 = default(JavaMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1113:15: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1114:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_unmanaged_type4265);
                	type233 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type233.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unmanaged_type"

        public class class_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1115:1: class_type : type ;
        public JavaMaker.class_type_return class_type() // throws RecognitionException [1]
        {   
            JavaMaker.class_type_return retval = new JavaMaker.class_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_return type234 = default(JavaMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1115:11: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1116:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_class_type4272);
                	type234 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type234.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_type"

        public class pointer_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "pointer_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1117:1: pointer_type : type ;
        public JavaMaker.pointer_type_return pointer_type() // throws RecognitionException [1]
        {   
            JavaMaker.pointer_type_return retval = new JavaMaker.pointer_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_return type235 = default(JavaMaker.type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1117:13: ( type )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1118:2: type
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_pointer_type4279);
                	type235 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type235.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "pointer_type"

        public class block_return : TreeRuleReturnScope
        {
            public bool isEmpty;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "block"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1124:1: block returns [bool isEmpty] : ( ';' | '{' ( statement_list )? '}' );
        public JavaMaker.block_return block() // throws RecognitionException [1]
        {   
            JavaMaker.block_return retval = new JavaMaker.block_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal236 = null;
            CommonTree char_literal237 = null;
            CommonTree char_literal239 = null;
            JavaMaker.statement_list_return statement_list238 = default(JavaMaker.statement_list_return);


            CommonTree char_literal236_tree=null;
            CommonTree char_literal237_tree=null;
            CommonTree char_literal239_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1124:29: ( ';' | '{' ( statement_list )? '}' )
                int alt103 = 2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0 == SEMI) )
                {
                    alt103 = 1;
                }
                else if ( (LA103_0 == OPEN_BRACE) )
                {
                    alt103 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d103s0 =
                        new NoViableAltException("", 103, 0, input);

                    throw nvae_d103s0;
                }
                switch (alt103) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1125:2: ';'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal236=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_block4295); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal236_tree = (CommonTree)adaptor.DupNode(char_literal236);

                        		adaptor.AddChild(root_0, char_literal236_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.isEmpty =  true; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1126:4: '{' ( statement_list )? '}'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal237=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_block4302); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal237_tree = (CommonTree)adaptor.DupNode(char_literal237);

                        		adaptor.AddChild(root_0, char_literal237_tree);
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1126:10: ( statement_list )?
                        	int alt102 = 2;
                        	int LA102_0 = input.LA(1);

                        	if ( ((LA102_0 >= MONONOT && LA102_0 <= MONOTWIDDLE) || LA102_0 == NEW_ARRAY || (LA102_0 >= RETURN && LA102_0 <= TRY) || LA102_0 == THROW || (LA102_0 >= BREAK && LA102_0 <= FOREACH) || LA102_0 == OPEN_BRACE || LA102_0 == LPAREN || LA102_0 == IF || LA102_0 == BIT_AND || (LA102_0 >= PLUS && LA102_0 <= MINUS) || LA102_0 == STAR || (LA102_0 >= BOOL && LA102_0 <= NULL) || (LA102_0 >= USING && LA102_0 <= SEMI) || LA102_0 == 195 || (LA102_0 >= 197 && LA102_0 <= 198) || (LA102_0 >= 205 && LA102_0 <= 207) || (LA102_0 >= 209 && LA102_0 <= 210) || (LA102_0 >= 214 && LA102_0 <= 219) || LA102_0 == 221 || (LA102_0 >= 224 && LA102_0 <= 239) || (LA102_0 >= 241 && LA102_0 <= 244) || (LA102_0 >= 247 && LA102_0 <= 254) || LA102_0 == 256 || (LA102_0 >= 262 && LA102_0 <= 264) || LA102_0 == 266 || (LA102_0 >= 268 && LA102_0 <= 277)) )
                        	{
                        	    alt102 = 1;
                        	}
                        	switch (alt102) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1126:10: statement_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_statement_list_in_block4306);
                        	        	statement_list238 = statement_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, statement_list238.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	char_literal239=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_block4311); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal239_tree = (CommonTree)adaptor.DupNode(char_literal239);

                        		adaptor.AddChild(root_0, char_literal239_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.isEmpty =  false; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "block"

        public class statement_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1127:1: statement_list : ( statement[/* isStatementListCtxt */ true] )+ ;
        public JavaMaker.statement_list_return statement_list() // throws RecognitionException [1]
        {   
            JavaMaker.statement_list_return retval = new JavaMaker.statement_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.statement_return statement240 = default(JavaMaker.statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1127:15: ( ( statement[/* isStatementListCtxt */ true] )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1128:2: ( statement[/* isStatementListCtxt */ true] )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1128:2: ( statement[/* isStatementListCtxt */ true] )+
                	int cnt104 = 0;
                	do 
                	{
                	    int alt104 = 2;
                	    int LA104_0 = input.LA(1);

                	    if ( (LA104_0 == 217) )
                	    {
                	        int LA104_2 = input.LA(2);

                	        if ( (LA104_2 == LPAREN) )
                	        {
                	            alt104 = 1;
                	        }


                	    }
                	    else if ( ((LA104_0 >= MONONOT && LA104_0 <= MONOTWIDDLE) || LA104_0 == NEW_ARRAY || (LA104_0 >= RETURN && LA104_0 <= TRY) || LA104_0 == THROW || (LA104_0 >= BREAK && LA104_0 <= FOREACH) || LA104_0 == OPEN_BRACE || LA104_0 == LPAREN || LA104_0 == IF || LA104_0 == BIT_AND || (LA104_0 >= PLUS && LA104_0 <= MINUS) || LA104_0 == STAR || (LA104_0 >= BOOL && LA104_0 <= NULL) || (LA104_0 >= USING && LA104_0 <= SEMI) || LA104_0 == 195 || (LA104_0 >= 197 && LA104_0 <= 198) || (LA104_0 >= 205 && LA104_0 <= 207) || (LA104_0 >= 209 && LA104_0 <= 210) || (LA104_0 >= 214 && LA104_0 <= 216) || (LA104_0 >= 218 && LA104_0 <= 219) || LA104_0 == 221 || (LA104_0 >= 224 && LA104_0 <= 239) || (LA104_0 >= 241 && LA104_0 <= 244) || (LA104_0 >= 247 && LA104_0 <= 254) || LA104_0 == 256 || (LA104_0 >= 262 && LA104_0 <= 264) || LA104_0 == 266 || (LA104_0 >= 268 && LA104_0 <= 277)) )
                	    {
                	        alt104 = 1;
                	    }


                	    switch (alt104) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1128:2: statement[/* isStatementListCtxt */ true]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_statement_in_statement_list4320);
                			    	statement240 = statement(/* isStatementListCtxt */ true);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, statement240.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt104 >= 1 ) goto loop104;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee104 =
                		                new EarlyExitException(104, input);
                		            throw eee104;
                	    }
                	    cnt104++;
                	} while (true);

                	loop104:
                		;	// Stops C# compiler whining that label 'loop104' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement_list"

        public class expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1133:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
        public JavaMaker.expression_return expression() // throws RecognitionException [1]
        {   
            JavaMaker.expression_return retval = new JavaMaker.expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.assignment_return assignment241 = default(JavaMaker.assignment_return);

            JavaMaker.non_assignment_expression_return non_assignment_expression242 = default(JavaMaker.non_assignment_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1133:11: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )
                int alt105 = 2;
                alt105 = dfa105.Predict(input);
                switch (alt105) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1134:2: ( unary_expression assignment_operator )=> assignment
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_assignment_in_expression4346);
                        	assignment241 = assignment();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, assignment241.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1135:4: non_assignment_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_non_assignment_expression_in_expression4352);
                        	non_assignment_expression242 = non_assignment_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, non_assignment_expression242.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "expression"

        public class expression_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "expression_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1137:1: expression_list : expression ( ',' expression )* ;
        public JavaMaker.expression_list_return expression_list() // throws RecognitionException [1]
        {   
            JavaMaker.expression_list_return retval = new JavaMaker.expression_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal244 = null;
            JavaMaker.expression_return expression243 = default(JavaMaker.expression_return);

            JavaMaker.expression_return expression245 = default(JavaMaker.expression_return);


            CommonTree char_literal244_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1137:16: ( expression ( ',' expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1138:2: expression ( ',' expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_expression_list4361);
                	expression243 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression243.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1138:14: ( ',' expression )*
                	do 
                	{
                	    int alt106 = 2;
                	    int LA106_0 = input.LA(1);

                	    if ( (LA106_0 == COMMA) )
                	    {
                	        alt106 = 1;
                	    }


                	    switch (alt106) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1138:15: ',' expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal244=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_expression_list4365); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal244_tree = (CommonTree)adaptor.DupNode(char_literal244);

                			    		adaptor.AddChild(root_0, char_literal244_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_expression_in_expression_list4369);
                			    	expression245 = expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, expression245.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop106;
                	    }
                	} while (true);

                	loop106:
                		;	// Stops C# compiler whining that label 'loop106' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "expression_list"

        public class assignment_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "assignment"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1139:1: assignment : unary_expression assignment_operator expression ;
        public JavaMaker.assignment_return assignment() // throws RecognitionException [1]
        {   
            JavaMaker.assignment_return retval = new JavaMaker.assignment_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.unary_expression_return unary_expression246 = default(JavaMaker.unary_expression_return);

            JavaMaker.assignment_operator_return assignment_operator247 = default(JavaMaker.assignment_operator_return);

            JavaMaker.expression_return expression248 = default(JavaMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1139:11: ( unary_expression assignment_operator expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1140:2: unary_expression assignment_operator expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unary_expression_in_assignment4379);
                	unary_expression246 = unary_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, unary_expression246.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_assignment_operator_in_assignment4383);
                	assignment_operator247 = assignment_operator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, assignment_operator247.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_assignment4387);
                	expression248 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression248.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "assignment"

        public class unary_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unary_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1141:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression -> primary_or_array_creation_expression | p= '+' unary_expression -> ^( MONOPLUS[$p.token,\"+\"] unary_expression ) | m= '-' unary_expression -> ^( MONOMINUS[$m.token, \"-\"] unary_expression ) | n= '!' unary_expression -> ^( MONONOT[$n.token, \"!\"] unary_expression ) | t= '~' unary_expression -> ^( MONOTWIDDLE[$t.token, \"~\"] unary_expression ) | pre_increment_expression -> pre_increment_expression | pre_decrement_expression -> pre_decrement_expression | pointer_indirection_expression -> pointer_indirection_expression | addressof_expression -> addressof_expression );
        public JavaMaker.unary_expression_return unary_expression() // throws RecognitionException [1]
        {   
            JavaMaker.unary_expression_return retval = new JavaMaker.unary_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree p = null;
            CommonTree m = null;
            CommonTree n = null;
            CommonTree t = null;
            JavaMaker.cast_expression_return cast_expression249 = default(JavaMaker.cast_expression_return);

            JavaMaker.primary_or_array_creation_expression_return primary_or_array_creation_expression250 = default(JavaMaker.primary_or_array_creation_expression_return);

            JavaMaker.unary_expression_return unary_expression251 = default(JavaMaker.unary_expression_return);

            JavaMaker.unary_expression_return unary_expression252 = default(JavaMaker.unary_expression_return);

            JavaMaker.unary_expression_return unary_expression253 = default(JavaMaker.unary_expression_return);

            JavaMaker.unary_expression_return unary_expression254 = default(JavaMaker.unary_expression_return);

            JavaMaker.pre_increment_expression_return pre_increment_expression255 = default(JavaMaker.pre_increment_expression_return);

            JavaMaker.pre_decrement_expression_return pre_decrement_expression256 = default(JavaMaker.pre_decrement_expression_return);

            JavaMaker.pointer_indirection_expression_return pointer_indirection_expression257 = default(JavaMaker.pointer_indirection_expression_return);

            JavaMaker.addressof_expression_return addressof_expression258 = default(JavaMaker.addressof_expression_return);


            CommonTree p_tree=null;
            CommonTree m_tree=null;
            CommonTree n_tree=null;
            CommonTree t_tree=null;
            RewriteRuleNodeStream stream_PLUS = new RewriteRuleNodeStream(adaptor,"token PLUS");
            RewriteRuleNodeStream stream_MONONOT = new RewriteRuleNodeStream(adaptor,"token MONONOT");
            RewriteRuleNodeStream stream_MINUS = new RewriteRuleNodeStream(adaptor,"token MINUS");
            RewriteRuleNodeStream stream_MONOTWIDDLE = new RewriteRuleNodeStream(adaptor,"token MONOTWIDDLE");
            RewriteRuleSubtreeStream stream_pre_decrement_expression = new RewriteRuleSubtreeStream(adaptor,"rule pre_decrement_expression");
            RewriteRuleSubtreeStream stream_primary_or_array_creation_expression = new RewriteRuleSubtreeStream(adaptor,"rule primary_or_array_creation_expression");
            RewriteRuleSubtreeStream stream_pre_increment_expression = new RewriteRuleSubtreeStream(adaptor,"rule pre_increment_expression");
            RewriteRuleSubtreeStream stream_pointer_indirection_expression = new RewriteRuleSubtreeStream(adaptor,"rule pointer_indirection_expression");
            RewriteRuleSubtreeStream stream_unary_expression = new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
            RewriteRuleSubtreeStream stream_addressof_expression = new RewriteRuleSubtreeStream(adaptor,"rule addressof_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1141:17: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression -> primary_or_array_creation_expression | p= '+' unary_expression -> ^( MONOPLUS[$p.token,\"+\"] unary_expression ) | m= '-' unary_expression -> ^( MONOMINUS[$m.token, \"-\"] unary_expression ) | n= '!' unary_expression -> ^( MONONOT[$n.token, \"!\"] unary_expression ) | t= '~' unary_expression -> ^( MONOTWIDDLE[$t.token, \"~\"] unary_expression ) | pre_increment_expression -> pre_increment_expression | pre_decrement_expression -> pre_decrement_expression | pointer_indirection_expression -> pointer_indirection_expression | addressof_expression -> addressof_expression )
                int alt107 = 10;
                alt107 = dfa107.Predict(input);
                switch (alt107) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1143:5: ( cast_expression )=> cast_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_cast_expression_in_unary_expression4407);
                        	cast_expression249 = cast_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, cast_expression249.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1144:4: primary_or_array_creation_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_primary_or_array_creation_expression_in_unary_expression4412);
                        	primary_or_array_creation_expression250 = primary_or_array_creation_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_primary_or_array_creation_expression.Add(primary_or_array_creation_expression250.Tree);


                        	// AST REWRITE
                        	// elements:          primary_or_array_creation_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1144:41: -> primary_or_array_creation_expression
                        	{
                        	    adaptor.AddChild(root_0, stream_primary_or_array_creation_expression.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1145:4: p= '+' unary_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	p=(CommonTree)Match(input,PLUS,FOLLOW_PLUS_in_unary_expression4423); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_PLUS.Add(p);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4427);
                        	unary_expression251 = unary_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression251.Tree);


                        	// AST REWRITE
                        	// elements:          unary_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1145:29: -> ^( MONOPLUS[$p.token,\"+\"] unary_expression )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1145:32: ^( MONOPLUS[$p.token,\"+\"] unary_expression )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MONOPLUS, p.token, "+"), root_1);

                        	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1146:4: m= '-' unary_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	m=(CommonTree)Match(input,MINUS,FOLLOW_MINUS_in_unary_expression4444); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_MINUS.Add(m);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4448);
                        	unary_expression252 = unary_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression252.Tree);


                        	// AST REWRITE
                        	// elements:          unary_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1146:29: -> ^( MONOMINUS[$m.token, \"-\"] unary_expression )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1146:32: ^( MONOMINUS[$m.token, \"-\"] unary_expression )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MONOMINUS, m.token, "-"), root_1);

                        	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1147:4: n= '!' unary_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	n=(CommonTree)Match(input,MONONOT,FOLLOW_MONONOT_in_unary_expression4465); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_MONONOT.Add(n);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4469);
                        	unary_expression253 = unary_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression253.Tree);


                        	// AST REWRITE
                        	// elements:          unary_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1147:29: -> ^( MONONOT[$n.token, \"!\"] unary_expression )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1147:32: ^( MONONOT[$n.token, \"!\"] unary_expression )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MONONOT, n.token, "!"), root_1);

                        	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1148:4: t= '~' unary_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	t=(CommonTree)Match(input,MONOTWIDDLE,FOLLOW_MONOTWIDDLE_in_unary_expression4486); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_MONOTWIDDLE.Add(t);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unary_expression_in_unary_expression4490);
                        	unary_expression254 = unary_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression254.Tree);


                        	// AST REWRITE
                        	// elements:          unary_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1148:29: -> ^( MONOTWIDDLE[$t.token, \"~\"] unary_expression )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1148:32: ^( MONOTWIDDLE[$t.token, \"~\"] unary_expression )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MONOTWIDDLE, t.token, "~"), root_1);

                        	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1149:4: pre_increment_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_pre_increment_expression_in_unary_expression4505);
                        	pre_increment_expression255 = pre_increment_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_pre_increment_expression.Add(pre_increment_expression255.Tree);


                        	// AST REWRITE
                        	// elements:          pre_increment_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1149:29: -> pre_increment_expression
                        	{
                        	    adaptor.AddChild(root_0, stream_pre_increment_expression.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1150:4: pre_decrement_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_pre_decrement_expression_in_unary_expression4514);
                        	pre_decrement_expression256 = pre_decrement_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_pre_decrement_expression.Add(pre_decrement_expression256.Tree);


                        	// AST REWRITE
                        	// elements:          pre_decrement_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1150:29: -> pre_decrement_expression
                        	{
                        	    adaptor.AddChild(root_0, stream_pre_decrement_expression.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1151:4: pointer_indirection_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression4523);
                        	pointer_indirection_expression257 = pointer_indirection_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_pointer_indirection_expression.Add(pointer_indirection_expression257.Tree);


                        	// AST REWRITE
                        	// elements:          pointer_indirection_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1151:35: -> pointer_indirection_expression
                        	{
                        	    adaptor.AddChild(root_0, stream_pointer_indirection_expression.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1152:4: addressof_expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_addressof_expression_in_unary_expression4532);
                        	addressof_expression258 = addressof_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_addressof_expression.Add(addressof_expression258.Tree);


                        	// AST REWRITE
                        	// elements:          addressof_expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1152:25: -> addressof_expression
                        	{
                        	    adaptor.AddChild(root_0, stream_addressof_expression.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unary_expression"

        public class cast_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "cast_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1154:1: cast_expression : l= '(' type ')' unary_expression -> ^( CAST_EXPR[$l.token, \"CAST\"] type unary_expression ) ;
        public JavaMaker.cast_expression_return cast_expression() // throws RecognitionException [1]
        {   
            JavaMaker.cast_expression_return retval = new JavaMaker.cast_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree l = null;
            CommonTree char_literal260 = null;
            JavaMaker.type_return type259 = default(JavaMaker.type_return);

            JavaMaker.unary_expression_return unary_expression261 = default(JavaMaker.unary_expression_return);


            CommonTree l_tree=null;
            CommonTree char_literal260_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_unary_expression = new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1154:16: (l= '(' type ')' unary_expression -> ^( CAST_EXPR[$l.token, \"CAST\"] type unary_expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1156:2: l= '(' type ')' unary_expression
                {
                	_last = (CommonTree)input.LT(1);
                	l=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_cast_expression4549); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(l);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_cast_expression4553);
                	type259 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(type259.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal260=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_cast_expression4557); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal260);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unary_expression_in_cast_expression4561);
                	unary_expression261 = unary_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression261.Tree);


                	// AST REWRITE
                	// elements:          unary_expression, type
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1156:40: -> ^( CAST_EXPR[$l.token, \"CAST\"] type unary_expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1156:43: ^( CAST_EXPR[$l.token, \"CAST\"] type unary_expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, l.token, "CAST"), root_1);

                	    adaptor.AddChild(root_1, stream_type.NextTree());
                	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "cast_expression"

        public class assignment_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "assignment_operator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1157:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | r= '>' '>=' -> RIGHT_SHIFT_ASSIGN[$r.token, \">>=\"] );
        public JavaMaker.assignment_operator_return assignment_operator() // throws RecognitionException [1]
        {   
            JavaMaker.assignment_operator_return retval = new JavaMaker.assignment_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree r = null;
            CommonTree char_literal262 = null;
            CommonTree string_literal263 = null;
            CommonTree string_literal264 = null;
            CommonTree string_literal265 = null;
            CommonTree string_literal266 = null;
            CommonTree string_literal267 = null;
            CommonTree string_literal268 = null;
            CommonTree string_literal269 = null;
            CommonTree string_literal270 = null;
            CommonTree string_literal271 = null;
            CommonTree string_literal272 = null;

            CommonTree r_tree=null;
            CommonTree char_literal262_tree=null;
            CommonTree string_literal263_tree=null;
            CommonTree string_literal264_tree=null;
            CommonTree string_literal265_tree=null;
            CommonTree string_literal266_tree=null;
            CommonTree string_literal267_tree=null;
            CommonTree string_literal268_tree=null;
            CommonTree string_literal269_tree=null;
            CommonTree string_literal270_tree=null;
            CommonTree string_literal271_tree=null;
            CommonTree string_literal272_tree=null;
            RewriteRuleNodeStream stream_GT = new RewriteRuleNodeStream(adaptor,"token GT");
            RewriteRuleNodeStream stream_GTE = new RewriteRuleNodeStream(adaptor,"token GTE");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1157:20: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | r= '>' '>=' -> RIGHT_SHIFT_ASSIGN[$r.token, \">>=\"] )
                int alt108 = 11;
                switch ( input.LA(1) ) 
                {
                case ASSIGN:
                	{
                    alt108 = 1;
                    }
                    break;
                case PLUS_ASSIGN:
                	{
                    alt108 = 2;
                    }
                    break;
                case MINUS_ASSIGN:
                	{
                    alt108 = 3;
                    }
                    break;
                case STAR_ASSIGN:
                	{
                    alt108 = 4;
                    }
                    break;
                case DIV_ASSIGN:
                	{
                    alt108 = 5;
                    }
                    break;
                case MOD_ASSIGN:
                	{
                    alt108 = 6;
                    }
                    break;
                case BIT_AND_ASSIGN:
                	{
                    alt108 = 7;
                    }
                    break;
                case BIT_OR_ASSIGN:
                	{
                    alt108 = 8;
                    }
                    break;
                case BIT_XOR_ASSIGN:
                	{
                    alt108 = 9;
                    }
                    break;
                case LEFT_SHIFT_ASSIGN:
                	{
                    alt108 = 10;
                    }
                    break;
                case GT:
                	{
                    alt108 = 11;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d108s0 =
                	        new NoViableAltException("", 108, 0, input);

                	    throw nvae_d108s0;
                }

                switch (alt108) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:2: '='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal262=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_operator4579); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal262_tree = (CommonTree)adaptor.DupNode(char_literal262);

                        		adaptor.AddChild(root_0, char_literal262_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:8: '+='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal263=(CommonTree)Match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignment_operator4583); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal263_tree = (CommonTree)adaptor.DupNode(string_literal263);

                        		adaptor.AddChild(root_0, string_literal263_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:15: '-='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal264=(CommonTree)Match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignment_operator4587); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal264_tree = (CommonTree)adaptor.DupNode(string_literal264);

                        		adaptor.AddChild(root_0, string_literal264_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:22: '*='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal265=(CommonTree)Match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignment_operator4591); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal265_tree = (CommonTree)adaptor.DupNode(string_literal265);

                        		adaptor.AddChild(root_0, string_literal265_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:29: '/='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal266=(CommonTree)Match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignment_operator4595); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal266_tree = (CommonTree)adaptor.DupNode(string_literal266);

                        		adaptor.AddChild(root_0, string_literal266_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:36: '%='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal267=(CommonTree)Match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignment_operator4599); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal267_tree = (CommonTree)adaptor.DupNode(string_literal267);

                        		adaptor.AddChild(root_0, string_literal267_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:43: '&='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal268=(CommonTree)Match(input,BIT_AND_ASSIGN,FOLLOW_BIT_AND_ASSIGN_in_assignment_operator4603); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal268_tree = (CommonTree)adaptor.DupNode(string_literal268);

                        		adaptor.AddChild(root_0, string_literal268_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:50: '|='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal269=(CommonTree)Match(input,BIT_OR_ASSIGN,FOLLOW_BIT_OR_ASSIGN_in_assignment_operator4607); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal269_tree = (CommonTree)adaptor.DupNode(string_literal269);

                        		adaptor.AddChild(root_0, string_literal269_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:57: '^='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal270=(CommonTree)Match(input,BIT_XOR_ASSIGN,FOLLOW_BIT_XOR_ASSIGN_in_assignment_operator4611); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal270_tree = (CommonTree)adaptor.DupNode(string_literal270);

                        		adaptor.AddChild(root_0, string_literal270_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:64: '<<='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal271=(CommonTree)Match(input,LEFT_SHIFT_ASSIGN,FOLLOW_LEFT_SHIFT_ASSIGN_in_assignment_operator4615); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal271_tree = (CommonTree)adaptor.DupNode(string_literal271);

                        		adaptor.AddChild(root_0, string_literal271_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1158:72: r= '>' '>='
                        {
                        	_last = (CommonTree)input.LT(1);
                        	r=(CommonTree)Match(input,GT,FOLLOW_GT_in_assignment_operator4621); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_GT.Add(r);

                        	_last = (CommonTree)input.LT(1);
                        	string_literal272=(CommonTree)Match(input,GTE,FOLLOW_GTE_in_assignment_operator4623); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_GTE.Add(string_literal272);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1158:83: -> RIGHT_SHIFT_ASSIGN[$r.token, \">>=\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(RIGHT_SHIFT_ASSIGN, r.token, ">>="));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "assignment_operator"

        public class pre_increment_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "pre_increment_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1159:1: pre_increment_expression : s= '++' unary_expression -> ^( PREINC[$s.token, \"++\"] unary_expression ) ;
        public JavaMaker.pre_increment_expression_return pre_increment_expression() // throws RecognitionException [1]
        {   
            JavaMaker.pre_increment_expression_return retval = new JavaMaker.pre_increment_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            JavaMaker.unary_expression_return unary_expression273 = default(JavaMaker.unary_expression_return);


            CommonTree s_tree=null;
            RewriteRuleNodeStream stream_209 = new RewriteRuleNodeStream(adaptor,"token 209");
            RewriteRuleSubtreeStream stream_unary_expression = new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1159:25: (s= '++' unary_expression -> ^( PREINC[$s.token, \"++\"] unary_expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1160:2: s= '++' unary_expression
                {
                	_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,209,FOLLOW_209_in_pre_increment_expression4639); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_209.Add(s);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unary_expression_in_pre_increment_expression4643);
                	unary_expression273 = unary_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression273.Tree);


                	// AST REWRITE
                	// elements:          unary_expression
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1160:28: -> ^( PREINC[$s.token, \"++\"] unary_expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1160:31: ^( PREINC[$s.token, \"++\"] unary_expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PREINC, s.token, "++"), root_1);

                	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "pre_increment_expression"

        public class pre_decrement_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "pre_decrement_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1161:1: pre_decrement_expression : s= '--' unary_expression -> ^( PREDEC[$s.token, \"--\"] unary_expression ) ;
        public JavaMaker.pre_decrement_expression_return pre_decrement_expression() // throws RecognitionException [1]
        {   
            JavaMaker.pre_decrement_expression_return retval = new JavaMaker.pre_decrement_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            JavaMaker.unary_expression_return unary_expression274 = default(JavaMaker.unary_expression_return);


            CommonTree s_tree=null;
            RewriteRuleNodeStream stream_210 = new RewriteRuleNodeStream(adaptor,"token 210");
            RewriteRuleSubtreeStream stream_unary_expression = new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1161:25: (s= '--' unary_expression -> ^( PREDEC[$s.token, \"--\"] unary_expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1162:2: s= '--' unary_expression
                {
                	_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,210,FOLLOW_210_in_pre_decrement_expression4663); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_210.Add(s);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unary_expression_in_pre_decrement_expression4667);
                	unary_expression274 = unary_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression274.Tree);


                	// AST REWRITE
                	// elements:          unary_expression
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1162:28: -> ^( PREDEC[$s.token, \"--\"] unary_expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1162:31: ^( PREDEC[$s.token, \"--\"] unary_expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PREDEC, s.token, "--"), root_1);

                	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "pre_decrement_expression"

        public class pointer_indirection_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "pointer_indirection_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1163:1: pointer_indirection_expression : s= '*' unary_expression -> ^( MONOSTAR[$s.token, \"*\"] unary_expression ) ;
        public JavaMaker.pointer_indirection_expression_return pointer_indirection_expression() // throws RecognitionException [1]
        {   
            JavaMaker.pointer_indirection_expression_return retval = new JavaMaker.pointer_indirection_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            JavaMaker.unary_expression_return unary_expression275 = default(JavaMaker.unary_expression_return);


            CommonTree s_tree=null;
            RewriteRuleNodeStream stream_STAR = new RewriteRuleNodeStream(adaptor,"token STAR");
            RewriteRuleSubtreeStream stream_unary_expression = new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1163:31: (s= '*' unary_expression -> ^( MONOSTAR[$s.token, \"*\"] unary_expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1164:2: s= '*' unary_expression
                {
                	_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_pointer_indirection_expression4685); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_STAR.Add(s);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression4689);
                	unary_expression275 = unary_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression275.Tree);


                	// AST REWRITE
                	// elements:          unary_expression
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1164:27: -> ^( MONOSTAR[$s.token, \"*\"] unary_expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1164:30: ^( MONOSTAR[$s.token, \"*\"] unary_expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MONOSTAR, s.token, "*"), root_1);

                	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "pointer_indirection_expression"

        public class addressof_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "addressof_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1165:1: addressof_expression : a= '&' unary_expression -> ^( ADDRESSOF[$a.token, \"&\"] unary_expression ) ;
        public JavaMaker.addressof_expression_return addressof_expression() // throws RecognitionException [1]
        {   
            JavaMaker.addressof_expression_return retval = new JavaMaker.addressof_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree a = null;
            JavaMaker.unary_expression_return unary_expression276 = default(JavaMaker.unary_expression_return);


            CommonTree a_tree=null;
            RewriteRuleNodeStream stream_BIT_AND = new RewriteRuleNodeStream(adaptor,"token BIT_AND");
            RewriteRuleSubtreeStream stream_unary_expression = new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1165:21: (a= '&' unary_expression -> ^( ADDRESSOF[$a.token, \"&\"] unary_expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1166:2: a= '&' unary_expression
                {
                	_last = (CommonTree)input.LT(1);
                	a=(CommonTree)Match(input,BIT_AND,FOLLOW_BIT_AND_in_addressof_expression4707); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_BIT_AND.Add(a);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unary_expression_in_addressof_expression4711);
                	unary_expression276 = unary_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_unary_expression.Add(unary_expression276.Tree);


                	// AST REWRITE
                	// elements:          unary_expression
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1166:27: -> ^( ADDRESSOF[$a.token, \"&\"] unary_expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1166:30: ^( ADDRESSOF[$a.token, \"&\"] unary_expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ADDRESSOF, a.token, "&"), root_1);

                	    adaptor.AddChild(root_1, stream_unary_expression.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "addressof_expression"

        public class non_assignment_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "non_assignment_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1168:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
        public JavaMaker.non_assignment_expression_return non_assignment_expression() // throws RecognitionException [1]
        {   
            JavaMaker.non_assignment_expression_return retval = new JavaMaker.non_assignment_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.lambda_expression_return lambda_expression277 = default(JavaMaker.lambda_expression_return);

            JavaMaker.query_expression_return query_expression278 = default(JavaMaker.query_expression_return);

            JavaMaker.conditional_expression_return conditional_expression279 = default(JavaMaker.conditional_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1168:26: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )
                int alt109 = 3;
                alt109 = dfa109.Predict(input);
                switch (alt109) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1170:2: ( anonymous_function_signature '=>' )=> lambda_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_lambda_expression_in_non_assignment_expression4740);
                        	lambda_expression277 = lambda_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, lambda_expression277.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1171:4: ( query_expression )=> query_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_query_expression_in_non_assignment_expression4751);
                        	query_expression278 = query_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, query_expression278.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1172:4: conditional_expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_conditional_expression_in_non_assignment_expression4757);
                        	conditional_expression279 = conditional_expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, conditional_expression279.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "non_assignment_expression"

        public class multiplicative_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "multiplicative_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1179:1: multiplicative_expression : (u1= unary_expression -> $u1) ( (op= '*' | op= '/' | op= '%' ) un= unary_expression -> ^( $op $multiplicative_expression $un) )* ;
        public JavaMaker.multiplicative_expression_return multiplicative_expression() // throws RecognitionException [1]
        {   
            JavaMaker.multiplicative_expression_return retval = new JavaMaker.multiplicative_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree op = null;
            JavaMaker.unary_expression_return u1 = default(JavaMaker.unary_expression_return);

            JavaMaker.unary_expression_return un = default(JavaMaker.unary_expression_return);


            CommonTree op_tree=null;
            RewriteRuleNodeStream stream_STAR = new RewriteRuleNodeStream(adaptor,"token STAR");
            RewriteRuleNodeStream stream_DIV = new RewriteRuleNodeStream(adaptor,"token DIV");
            RewriteRuleNodeStream stream_MOD = new RewriteRuleNodeStream(adaptor,"token MOD");
            RewriteRuleSubtreeStream stream_unary_expression = new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1179:26: ( (u1= unary_expression -> $u1) ( (op= '*' | op= '/' | op= '%' ) un= unary_expression -> ^( $op $multiplicative_expression $un) )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:2: (u1= unary_expression -> $u1) ( (op= '*' | op= '/' | op= '%' ) un= unary_expression -> ^( $op $multiplicative_expression $un) )*
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:2: (u1= unary_expression -> $u1)
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:3: u1= unary_expression
                	{
                		_last = (CommonTree)input.LT(1);
                		PushFollow(FOLLOW_unary_expression_in_multiplicative_expression4774);
                		u1 = unary_expression();
                		state._fsp--;
                		if (state.failed) return retval;
                		if ( (state.backtracking==0) ) stream_unary_expression.Add(u1.Tree);


                		// AST REWRITE
                		// elements:          u1
                		// token labels:      
                		// rule labels:       retval, u1
                		// token list labels: 
                		// rule list labels:  
                		// wildcard labels: 
                		if ( (state.backtracking==0) ) {
                		retval.tree = root_0;
                		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                		RewriteRuleSubtreeStream stream_u1 = new RewriteRuleSubtreeStream(adaptor, "rule u1", u1!=null ? u1.Tree : null);

                		root_0 = (CommonTree)adaptor.Nil;
                		// 1180:23: -> $u1
                		{
                		    adaptor.AddChild(root_0, stream_u1.NextTree());

                		}

                		retval.tree = root_0;}
                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:31: ( (op= '*' | op= '/' | op= '%' ) un= unary_expression -> ^( $op $multiplicative_expression $un) )*
                	do 
                	{
                	    int alt111 = 2;
                	    int LA111_0 = input.LA(1);

                	    if ( ((LA111_0 >= DIV && LA111_0 <= STAR)) )
                	    {
                	        alt111 = 1;
                	    }


                	    switch (alt111) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:32: (op= '*' | op= '/' | op= '%' ) un= unary_expression
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:32: (op= '*' | op= '/' | op= '%' )
                			    	int alt110 = 3;
                			    	switch ( input.LA(1) ) 
                			    	{
                			    	case STAR:
                			    		{
                			    	    alt110 = 1;
                			    	    }
                			    	    break;
                			    	case DIV:
                			    		{
                			    	    alt110 = 2;
                			    	    }
                			    	    break;
                			    	case MOD:
                			    		{
                			    	    alt110 = 3;
                			    	    }
                			    	    break;
                			    		default:
                			    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                			    		    NoViableAltException nvae_d110s0 =
                			    		        new NoViableAltException("", 110, 0, input);

                			    		    throw nvae_d110s0;
                			    	}

                			    	switch (alt110) 
                			    	{
                			    	    case 1 :
                			    	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:33: op= '*'
                			    	        {
                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	op=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_multiplicative_expression4786); if (state.failed) return retval; 
                			    	        	if ( (state.backtracking==0) ) stream_STAR.Add(op);


                			    	        	if ( (state.backtracking==0) ) {
                			    	        	}
                			    	        }
                			    	        break;
                			    	    case 2 :
                			    	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:40: op= '/'
                			    	        {
                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	op=(CommonTree)Match(input,DIV,FOLLOW_DIV_in_multiplicative_expression4790); if (state.failed) return retval; 
                			    	        	if ( (state.backtracking==0) ) stream_DIV.Add(op);


                			    	        	if ( (state.backtracking==0) ) {
                			    	        	}
                			    	        }
                			    	        break;
                			    	    case 3 :
                			    	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:47: op= '%'
                			    	        {
                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	op=(CommonTree)Match(input,MOD,FOLLOW_MOD_in_multiplicative_expression4794); if (state.failed) return retval; 
                			    	        	if ( (state.backtracking==0) ) stream_MOD.Add(op);


                			    	        	if ( (state.backtracking==0) ) {
                			    	        	}
                			    	        }
                			    	        break;

                			    	}

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_unary_expression_in_multiplicative_expression4800);
                			    	un = unary_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_unary_expression.Add(un.Tree);


                			    	// AST REWRITE
                			    	// elements:          un, multiplicative_expression, op
                			    	// token labels:      op
                			    	// rule labels:       retval, un
                			    	// token list labels: 
                			    	// rule list labels:  
                			    	// wildcard labels: 
                			    	if ( (state.backtracking==0) ) {
                			    	retval.tree = root_0;
                			    	RewriteRuleNodeStream stream_op = new RewriteRuleNodeStream(adaptor, "token op", op);
                			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                			    	RewriteRuleSubtreeStream stream_un = new RewriteRuleSubtreeStream(adaptor, "rule un", un!=null ? un.Tree : null);

                			    	root_0 = (CommonTree)adaptor.Nil;
                			    	// 1180:76: -> ^( $op $multiplicative_expression $un)
                			    	{
                			    	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1180:79: ^( $op $multiplicative_expression $un)
                			    	    {
                			    	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

                			    	    adaptor.AddChild(root_1, stream_retval.NextTree());
                			    	    adaptor.AddChild(root_1, stream_un.NextTree());

                			    	    adaptor.AddChild(root_0, root_1);
                			    	    }

                			    	}

                			    	retval.tree = root_0;}
                			    }
                			    break;

                			default:
                			    goto loop111;
                	    }
                	} while (true);

                	loop111:
                		;	// Stops C# compiler whining that label 'loop111' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "multiplicative_expression"

        public class additive_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "additive_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1181:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
        public JavaMaker.additive_expression_return additive_expression() // throws RecognitionException [1]
        {   
            JavaMaker.additive_expression_return retval = new JavaMaker.additive_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set281 = null;
            JavaMaker.multiplicative_expression_return multiplicative_expression280 = default(JavaMaker.multiplicative_expression_return);

            JavaMaker.multiplicative_expression_return multiplicative_expression282 = default(JavaMaker.multiplicative_expression_return);


            CommonTree set281_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1181:20: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1182:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_multiplicative_expression_in_additive_expression4824);
                	multiplicative_expression280 = multiplicative_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, multiplicative_expression280.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1182:28: ( ( '+' | '-' ) multiplicative_expression )*
                	do 
                	{
                	    int alt112 = 2;
                	    int LA112_0 = input.LA(1);

                	    if ( ((LA112_0 >= PLUS && LA112_0 <= MINUS)) )
                	    {
                	        alt112 = 1;
                	    }


                	    switch (alt112) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1182:29: ( '+' | '-' ) multiplicative_expression
                			    {
                			    	set281 = (CommonTree)input.LT(1);
                			    	if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) 
                			    	{
                			    	    input.Consume();

                			    	    if ( (state.backtracking==0) ) {
                			    	    set281_tree = (CommonTree)adaptor.DupNode(set281);

                			    	    root_0 = (CommonTree)adaptor.BecomeRoot(set281_tree, root_0);
                			    	    }
                			    	    state.errorRecovery = false;state.failed = false;
                			    	}
                			    	else 
                			    	{
                			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
                			    	    throw mse;
                			    	}

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_multiplicative_expression_in_additive_expression4836);
                			    	multiplicative_expression282 = multiplicative_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, multiplicative_expression282.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop112;
                	    }
                	} while (true);

                	loop112:
                		;	// Stops C# compiler whining that label 'loop112' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "additive_expression"

        public class shift_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "shift_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1184:1: shift_expression : (a1= additive_expression -> $a1) ( (so= '<<' a3= additive_expression -> ^( $so $shift_expression $a3) ) | (r= '>' '>' a2= additive_expression -> ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2) ) )* ;
        public JavaMaker.shift_expression_return shift_expression() // throws RecognitionException [1]
        {   
            JavaMaker.shift_expression_return retval = new JavaMaker.shift_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree so = null;
            CommonTree r = null;
            CommonTree char_literal283 = null;
            JavaMaker.additive_expression_return a1 = default(JavaMaker.additive_expression_return);

            JavaMaker.additive_expression_return a3 = default(JavaMaker.additive_expression_return);

            JavaMaker.additive_expression_return a2 = default(JavaMaker.additive_expression_return);


            CommonTree so_tree=null;
            CommonTree r_tree=null;
            CommonTree char_literal283_tree=null;
            RewriteRuleNodeStream stream_GT = new RewriteRuleNodeStream(adaptor,"token GT");
            RewriteRuleNodeStream stream_LEFT_SHIFT = new RewriteRuleNodeStream(adaptor,"token LEFT_SHIFT");
            RewriteRuleSubtreeStream stream_additive_expression = new RewriteRuleSubtreeStream(adaptor,"rule additive_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1184:17: ( (a1= additive_expression -> $a1) ( (so= '<<' a3= additive_expression -> ^( $so $shift_expression $a3) ) | (r= '>' '>' a2= additive_expression -> ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2) ) )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:5: (a1= additive_expression -> $a1) ( (so= '<<' a3= additive_expression -> ^( $so $shift_expression $a3) ) | (r= '>' '>' a2= additive_expression -> ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2) ) )*
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:5: (a1= additive_expression -> $a1)
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:6: a1= additive_expression
                	{
                		_last = (CommonTree)input.LT(1);
                		PushFollow(FOLLOW_additive_expression_in_shift_expression4853);
                		a1 = additive_expression();
                		state._fsp--;
                		if (state.failed) return retval;
                		if ( (state.backtracking==0) ) stream_additive_expression.Add(a1.Tree);


                		// AST REWRITE
                		// elements:          a1
                		// token labels:      
                		// rule labels:       retval, a1
                		// token list labels: 
                		// rule list labels:  
                		// wildcard labels: 
                		if ( (state.backtracking==0) ) {
                		retval.tree = root_0;
                		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                		RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(adaptor, "rule a1", a1!=null ? a1.Tree : null);

                		root_0 = (CommonTree)adaptor.Nil;
                		// 1185:29: -> $a1
                		{
                		    adaptor.AddChild(root_0, stream_a1.NextTree());

                		}

                		retval.tree = root_0;}
                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:37: ( (so= '<<' a3= additive_expression -> ^( $so $shift_expression $a3) ) | (r= '>' '>' a2= additive_expression -> ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2) ) )*
                	do 
                	{
                	    int alt113 = 3;
                	    int LA113_0 = input.LA(1);

                	    if ( (LA113_0 == GT) )
                	    {
                	        int LA113_2 = input.LA(2);

                	        if ( (LA113_2 == GT) )
                	        {
                	            alt113 = 2;
                	        }


                	    }
                	    else if ( (LA113_0 == LEFT_SHIFT) )
                	    {
                	        alt113 = 1;
                	    }


                	    switch (alt113) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:38: (so= '<<' a3= additive_expression -> ^( $so $shift_expression $a3) )
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:38: (so= '<<' a3= additive_expression -> ^( $so $shift_expression $a3) )
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:39: so= '<<' a3= additive_expression
                			    	{
                			    		_last = (CommonTree)input.LT(1);
                			    		so=(CommonTree)Match(input,LEFT_SHIFT,FOLLOW_LEFT_SHIFT_in_shift_expression4865); if (state.failed) return retval; 
                			    		if ( (state.backtracking==0) ) stream_LEFT_SHIFT.Add(so);

                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_additive_expression_in_shift_expression4869);
                			    		a3 = additive_expression();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) stream_additive_expression.Add(a3.Tree);


                			    		// AST REWRITE
                			    		// elements:          so, shift_expression, a3
                			    		// token labels:      so
                			    		// rule labels:       retval, a3
                			    		// token list labels: 
                			    		// rule list labels:  
                			    		// wildcard labels: 
                			    		if ( (state.backtracking==0) ) {
                			    		retval.tree = root_0;
                			    		RewriteRuleNodeStream stream_so = new RewriteRuleNodeStream(adaptor, "token so", so);
                			    		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                			    		RewriteRuleSubtreeStream stream_a3 = new RewriteRuleSubtreeStream(adaptor, "rule a3", a3!=null ? a3.Tree : null);

                			    		root_0 = (CommonTree)adaptor.Nil;
                			    		// 1185:70: -> ^( $so $shift_expression $a3)
                			    		{
                			    		    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1185:73: ^( $so $shift_expression $a3)
                			    		    {
                			    		    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    		    root_1 = (CommonTree)adaptor.BecomeRoot(stream_so.NextNode(), root_1);

                			    		    adaptor.AddChild(root_1, stream_retval.NextTree());
                			    		    adaptor.AddChild(root_1, stream_a3.NextTree());

                			    		    adaptor.AddChild(root_0, root_1);
                			    		    }

                			    		}

                			    		retval.tree = root_0;}
                			    	}


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;
                			case 2 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1186:31: (r= '>' '>' a2= additive_expression -> ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2) )
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1186:31: (r= '>' '>' a2= additive_expression -> ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2) )
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1186:32: r= '>' '>' a2= additive_expression
                			    	{
                			    		_last = (CommonTree)input.LT(1);
                			    		r=(CommonTree)Match(input,GT,FOLLOW_GT_in_shift_expression4918); if (state.failed) return retval; 
                			    		if ( (state.backtracking==0) ) stream_GT.Add(r);

                			    		_last = (CommonTree)input.LT(1);
                			    		char_literal283=(CommonTree)Match(input,GT,FOLLOW_GT_in_shift_expression4920); if (state.failed) return retval; 
                			    		if ( (state.backtracking==0) ) stream_GT.Add(char_literal283);

                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_additive_expression_in_shift_expression4924);
                			    		a2 = additive_expression();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) stream_additive_expression.Add(a2.Tree);


                			    		// AST REWRITE
                			    		// elements:          a2, shift_expression
                			    		// token labels:      
                			    		// rule labels:       retval, a2
                			    		// token list labels: 
                			    		// rule list labels:  
                			    		// wildcard labels: 
                			    		if ( (state.backtracking==0) ) {
                			    		retval.tree = root_0;
                			    		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                			    		RewriteRuleSubtreeStream stream_a2 = new RewriteRuleSubtreeStream(adaptor, "rule a2", a2!=null ? a2.Tree : null);

                			    		root_0 = (CommonTree)adaptor.Nil;
                			    		// 1186:65: -> ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2)
                			    		{
                			    		    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1186:68: ^( RIGHT_SHIFT[$r.token, \">>\"] $shift_expression $a2)
                			    		    {
                			    		    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    		    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RIGHT_SHIFT, r.token, ">>"), root_1);

                			    		    adaptor.AddChild(root_1, stream_retval.NextTree());
                			    		    adaptor.AddChild(root_1, stream_a2.NextTree());

                			    		    adaptor.AddChild(root_0, root_1);
                			    		    }

                			    		}

                			    		retval.tree = root_0;}
                			    	}


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop113;
                	    }
                	} while (true);

                	loop113:
                		;	// Stops C# compiler whining that label 'loop113' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "shift_expression"

        public class relational_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "relational_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1188:1: relational_expression : (s1= shift_expression -> $s1) ( ( (o= '<' | o= '>' | o= '>=' | o= '<=' ) s2= shift_expression -> ^( $o $relational_expression $s2) ) | (i= 'is' t= non_nullable_type -> ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t) | i1= 'as' t1= non_nullable_type -> ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) ) ) )* ;
        public JavaMaker.relational_expression_return relational_expression() // throws RecognitionException [1]
        {   
            JavaMaker.relational_expression_return retval = new JavaMaker.relational_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o = null;
            CommonTree i = null;
            CommonTree i1 = null;
            JavaMaker.shift_expression_return s1 = default(JavaMaker.shift_expression_return);

            JavaMaker.shift_expression_return s2 = default(JavaMaker.shift_expression_return);

            JavaMaker.non_nullable_type_return t = default(JavaMaker.non_nullable_type_return);

            JavaMaker.non_nullable_type_return t1 = default(JavaMaker.non_nullable_type_return);


            CommonTree o_tree=null;
            CommonTree i_tree=null;
            CommonTree i1_tree=null;
            RewriteRuleNodeStream stream_222 = new RewriteRuleNodeStream(adaptor,"token 222");
            RewriteRuleNodeStream stream_GT = new RewriteRuleNodeStream(adaptor,"token GT");
            RewriteRuleNodeStream stream_LTHAN = new RewriteRuleNodeStream(adaptor,"token LTHAN");
            RewriteRuleNodeStream stream_223 = new RewriteRuleNodeStream(adaptor,"token 223");
            RewriteRuleNodeStream stream_LTE = new RewriteRuleNodeStream(adaptor,"token LTE");
            RewriteRuleNodeStream stream_GTE = new RewriteRuleNodeStream(adaptor,"token GTE");
            RewriteRuleSubtreeStream stream_shift_expression = new RewriteRuleSubtreeStream(adaptor,"rule shift_expression");
            RewriteRuleSubtreeStream stream_non_nullable_type = new RewriteRuleSubtreeStream(adaptor,"rule non_nullable_type");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1188:22: ( (s1= shift_expression -> $s1) ( ( (o= '<' | o= '>' | o= '>=' | o= '<=' ) s2= shift_expression -> ^( $o $relational_expression $s2) ) | (i= 'is' t= non_nullable_type -> ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t) | i1= 'as' t1= non_nullable_type -> ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) ) ) )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1189:2: (s1= shift_expression -> $s1) ( ( (o= '<' | o= '>' | o= '>=' | o= '<=' ) s2= shift_expression -> ^( $o $relational_expression $s2) ) | (i= 'is' t= non_nullable_type -> ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t) | i1= 'as' t1= non_nullable_type -> ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) ) ) )*
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1189:2: (s1= shift_expression -> $s1)
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1189:3: s1= shift_expression
                	{
                		_last = (CommonTree)input.LT(1);
                		PushFollow(FOLLOW_shift_expression_in_relational_expression4980);
                		s1 = shift_expression();
                		state._fsp--;
                		if (state.failed) return retval;
                		if ( (state.backtracking==0) ) stream_shift_expression.Add(s1.Tree);


                		// AST REWRITE
                		// elements:          s1
                		// token labels:      
                		// rule labels:       retval, s1
                		// token list labels: 
                		// rule list labels:  
                		// wildcard labels: 
                		if ( (state.backtracking==0) ) {
                		retval.tree = root_0;
                		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                		RewriteRuleSubtreeStream stream_s1 = new RewriteRuleSubtreeStream(adaptor, "rule s1", s1!=null ? s1.Tree : null);

                		root_0 = (CommonTree)adaptor.Nil;
                		// 1189:23: -> $s1
                		{
                		    adaptor.AddChild(root_0, stream_s1.NextTree());

                		}

                		retval.tree = root_0;}
                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:3: ( ( (o= '<' | o= '>' | o= '>=' | o= '<=' ) s2= shift_expression -> ^( $o $relational_expression $s2) ) | (i= 'is' t= non_nullable_type -> ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t) | i1= 'as' t1= non_nullable_type -> ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) ) ) )*
                	do 
                	{
                	    int alt116 = 3;
                	    int LA116_0 = input.LA(1);

                	    if ( ((LA116_0 >= LTHAN && LA116_0 <= GTE) || LA116_0 == GT) )
                	    {
                	        alt116 = 1;
                	    }
                	    else if ( ((LA116_0 >= 222 && LA116_0 <= 223)) )
                	    {
                	        alt116 = 2;
                	    }


                	    switch (alt116) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:5: ( (o= '<' | o= '>' | o= '>=' | o= '<=' ) s2= shift_expression -> ^( $o $relational_expression $s2) )
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:5: ( (o= '<' | o= '>' | o= '>=' | o= '<=' ) s2= shift_expression -> ^( $o $relational_expression $s2) )
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:6: (o= '<' | o= '>' | o= '>=' | o= '<=' ) s2= shift_expression
                			    	{
                			    		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:6: (o= '<' | o= '>' | o= '>=' | o= '<=' )
                			    		int alt114 = 4;
                			    		switch ( input.LA(1) ) 
                			    		{
                			    		case LTHAN:
                			    			{
                			    		    alt114 = 1;
                			    		    }
                			    		    break;
                			    		case GT:
                			    			{
                			    		    alt114 = 2;
                			    		    }
                			    		    break;
                			    		case GTE:
                			    			{
                			    		    alt114 = 3;
                			    		    }
                			    		    break;
                			    		case LTE:
                			    			{
                			    		    alt114 = 4;
                			    		    }
                			    		    break;
                			    			default:
                			    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                			    			    NoViableAltException nvae_d114s0 =
                			    			        new NoViableAltException("", 114, 0, input);

                			    			    throw nvae_d114s0;
                			    		}

                			    		switch (alt114) 
                			    		{
                			    		    case 1 :
                			    		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:7: o= '<'
                			    		        {
                			    		        	_last = (CommonTree)input.LT(1);
                			    		        	o=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_relational_expression4997); if (state.failed) return retval; 
                			    		        	if ( (state.backtracking==0) ) stream_LTHAN.Add(o);


                			    		        	if ( (state.backtracking==0) ) {
                			    		        	}
                			    		        }
                			    		        break;
                			    		    case 2 :
                			    		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:13: o= '>'
                			    		        {
                			    		        	_last = (CommonTree)input.LT(1);
                			    		        	o=(CommonTree)Match(input,GT,FOLLOW_GT_in_relational_expression5001); if (state.failed) return retval; 
                			    		        	if ( (state.backtracking==0) ) stream_GT.Add(o);


                			    		        	if ( (state.backtracking==0) ) {
                			    		        	}
                			    		        }
                			    		        break;
                			    		    case 3 :
                			    		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:19: o= '>='
                			    		        {
                			    		        	_last = (CommonTree)input.LT(1);
                			    		        	o=(CommonTree)Match(input,GTE,FOLLOW_GTE_in_relational_expression5005); if (state.failed) return retval; 
                			    		        	if ( (state.backtracking==0) ) stream_GTE.Add(o);


                			    		        	if ( (state.backtracking==0) ) {
                			    		        	}
                			    		        }
                			    		        break;
                			    		    case 4 :
                			    		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:26: o= '<='
                			    		        {
                			    		        	_last = (CommonTree)input.LT(1);
                			    		        	o=(CommonTree)Match(input,LTE,FOLLOW_LTE_in_relational_expression5009); if (state.failed) return retval; 
                			    		        	if ( (state.backtracking==0) ) stream_LTE.Add(o);


                			    		        	if ( (state.backtracking==0) ) {
                			    		        	}
                			    		        }
                			    		        break;

                			    		}

                			    		_last = (CommonTree)input.LT(1);
                			    		PushFollow(FOLLOW_shift_expression_in_relational_expression5014);
                			    		s2 = shift_expression();
                			    		state._fsp--;
                			    		if (state.failed) return retval;
                			    		if ( (state.backtracking==0) ) stream_shift_expression.Add(s2.Tree);


                			    		// AST REWRITE
                			    		// elements:          s2, relational_expression, o
                			    		// token labels:      o
                			    		// rule labels:       retval, s2
                			    		// token list labels: 
                			    		// rule list labels:  
                			    		// wildcard labels: 
                			    		if ( (state.backtracking==0) ) {
                			    		retval.tree = root_0;
                			    		RewriteRuleNodeStream stream_o = new RewriteRuleNodeStream(adaptor, "token o", o);
                			    		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                			    		RewriteRuleSubtreeStream stream_s2 = new RewriteRuleSubtreeStream(adaptor, "rule s2", s2!=null ? s2.Tree : null);

                			    		root_0 = (CommonTree)adaptor.Nil;
                			    		// 1190:54: -> ^( $o $relational_expression $s2)
                			    		{
                			    		    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1190:57: ^( $o $relational_expression $s2)
                			    		    {
                			    		    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    		    root_1 = (CommonTree)adaptor.BecomeRoot(stream_o.NextNode(), root_1);

                			    		    adaptor.AddChild(root_1, stream_retval.NextTree());
                			    		    adaptor.AddChild(root_1, stream_s2.NextTree());

                			    		    adaptor.AddChild(root_0, root_1);
                			    		    }

                			    		}

                			    		retval.tree = root_0;}
                			    	}


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;
                			case 2 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1191:6: (i= 'is' t= non_nullable_type -> ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t) | i1= 'as' t1= non_nullable_type -> ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) ) )
                			    {
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1191:6: (i= 'is' t= non_nullable_type -> ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t) | i1= 'as' t1= non_nullable_type -> ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) ) )
                			    	int alt115 = 2;
                			    	int LA115_0 = input.LA(1);

                			    	if ( (LA115_0 == 222) )
                			    	{
                			    	    alt115 = 1;
                			    	}
                			    	else if ( (LA115_0 == 223) )
                			    	{
                			    	    alt115 = 2;
                			    	}
                			    	else 
                			    	{
                			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                			    	    NoViableAltException nvae_d115s0 =
                			    	        new NoViableAltException("", 115, 0, input);

                			    	    throw nvae_d115s0;
                			    	}
                			    	switch (alt115) 
                			    	{
                			    	    case 1 :
                			    	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1191:7: i= 'is' t= non_nullable_type
                			    	        {
                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	i=(CommonTree)Match(input,222,FOLLOW_222_in_relational_expression5038); if (state.failed) return retval; 
                			    	        	if ( (state.backtracking==0) ) stream_222.Add(i);

                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	PushFollow(FOLLOW_non_nullable_type_in_relational_expression5043);
                			    	        	t = non_nullable_type();
                			    	        	state._fsp--;
                			    	        	if (state.failed) return retval;
                			    	        	if ( (state.backtracking==0) ) stream_non_nullable_type.Add(t.Tree);


                			    	        	// AST REWRITE
                			    	        	// elements:          relational_expression, t
                			    	        	// token labels:      
                			    	        	// rule labels:       retval, t
                			    	        	// token list labels: 
                			    	        	// rule list labels:  
                			    	        	// wildcard labels: 
                			    	        	if ( (state.backtracking==0) ) {
                			    	        	retval.tree = root_0;
                			    	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                			    	        	RewriteRuleSubtreeStream stream_t = new RewriteRuleSubtreeStream(adaptor, "rule t", t!=null ? t.Tree : null);

                			    	        	root_0 = (CommonTree)adaptor.Nil;
                			    	        	// 1191:35: -> ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t)
                			    	        	{
                			    	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1191:38: ^( INSTANCEOF[$i.Token,\"instanceof\"] $relational_expression $t)
                			    	        	    {
                			    	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSTANCEOF, i.Token, "instanceof"), root_1);

                			    	        	    adaptor.AddChild(root_1, stream_retval.NextTree());
                			    	        	    adaptor.AddChild(root_1, stream_t.NextTree());

                			    	        	    adaptor.AddChild(root_0, root_1);
                			    	        	    }

                			    	        	}

                			    	        	retval.tree = root_0;}
                			    	        }
                			    	        break;
                			    	    case 2 :
                			    	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1192:19: i1= 'as' t1= non_nullable_type
                			    	        {
                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	i1=(CommonTree)Match(input,223,FOLLOW_223_in_relational_expression5079); if (state.failed) return retval; 
                			    	        	if ( (state.backtracking==0) ) stream_223.Add(i1);

                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	PushFollow(FOLLOW_non_nullable_type_in_relational_expression5083);
                			    	        	t1 = non_nullable_type();
                			    	        	state._fsp--;
                			    	        	if (state.failed) return retval;
                			    	        	if ( (state.backtracking==0) ) stream_non_nullable_type.Add(t1.Tree);


                			    	        	// AST REWRITE
                			    	        	// elements:          
                			    	        	// token labels:      
                			    	        	// rule labels:       retval
                			    	        	// token list labels: 
                			    	        	// rule list labels:  
                			    	        	// wildcard labels: 
                			    	        	if ( (state.backtracking==0) ) {
                			    	        	retval.tree = root_0;
                			    	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                			    	        	root_0 = (CommonTree)adaptor.Nil;
                			    	        	// 1192:48: -> ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) )
                			    	        	{
                			    	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1192:51: ^( COND_EXPR[$i1.Token, \"?:\"] ^( INSTANCEOF[$i1.Token,\"instanceof\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] ) ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] ) )
                			    	        	    {
                			    	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COND_EXPR, i1.Token, "?:"), root_1);

                			    	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1193:57: ^( INSTANCEOF[$i1.Token,\"instanceof\"] )
                			    	        	    {
                			    	        	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                			    	        	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSTANCEOF, i1.Token, "instanceof"), root_2);

                			    	        	    adaptor.AddChild(root_2,  dupTree(((s1 != null) ? ((CommonTree)s1.Tree) : null)) );
                			    	        	    adaptor.AddChild(root_2,  dupTree(((t1 != null) ? ((CommonTree)t1.Tree) : null)) );

                			    	        	    adaptor.AddChild(root_1, root_2);
                			    	        	    }
                			    	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1194:57: ^( CAST_EXPR[$i1.Token, \"(cast)\"] )
                			    	        	    {
                			    	        	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                			    	        	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, i1.Token, "(cast)"), root_2);

                			    	        	    adaptor.AddChild(root_2,  dupTree(((t1 != null) ? ((CommonTree)t1.Tree) : null)) );
                			    	        	    adaptor.AddChild(root_2,  dupTree(((s1 != null) ? ((CommonTree)s1.Tree) : null)) );

                			    	        	    adaptor.AddChild(root_1, root_2);
                			    	        	    }
                			    	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1195:57: ^( CAST_EXPR[$i1.Token, \"(cast)\"] NULL[$i1.Token, \"null\"] )
                			    	        	    {
                			    	        	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                			    	        	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, i1.Token, "(cast)"), root_2);

                			    	        	    adaptor.AddChild(root_2,  dupTree(((t1 != null) ? ((CommonTree)t1.Tree) : null)) );
                			    	        	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(NULL, i1.Token, "null"));

                			    	        	    adaptor.AddChild(root_1, root_2);
                			    	        	    }

                			    	        	    adaptor.AddChild(root_0, root_1);
                			    	        	    }

                			    	        	}

                			    	        	retval.tree = root_0;}
                			    	        }
                			    	        break;

                			    	}


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop116;
                	    }
                	} while (true);

                	loop116:
                		;	// Stops C# compiler whining that label 'loop116' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "relational_expression"

        public class equality_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "equality_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1197:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
        public JavaMaker.equality_expression_return equality_expression() // throws RecognitionException [1]
        {   
            JavaMaker.equality_expression_return retval = new JavaMaker.equality_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set285 = null;
            JavaMaker.relational_expression_return relational_expression284 = default(JavaMaker.relational_expression_return);

            JavaMaker.relational_expression_return relational_expression286 = default(JavaMaker.relational_expression_return);


            CommonTree set285_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1197:20: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1198:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_relational_expression_in_equality_expression5304);
                	relational_expression284 = relational_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, relational_expression284.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1199:5: ( ( '==' | '!=' ) relational_expression )*
                	do 
                	{
                	    int alt117 = 2;
                	    int LA117_0 = input.LA(1);

                	    if ( ((LA117_0 >= NOT_EQUAL && LA117_0 <= EQUAL)) )
                	    {
                	        alt117 = 1;
                	    }


                	    switch (alt117) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1199:6: ( '==' | '!=' ) relational_expression
                			    {
                			    	set285 = (CommonTree)input.LT(1);
                			    	if ( (input.LA(1) >= NOT_EQUAL && input.LA(1) <= EQUAL) ) 
                			    	{
                			    	    input.Consume();

                			    	    if ( (state.backtracking==0) ) {
                			    	    set285_tree = (CommonTree)adaptor.DupNode(set285);

                			    	    root_0 = (CommonTree)adaptor.BecomeRoot(set285_tree, root_0);
                			    	    }
                			    	    state.errorRecovery = false;state.failed = false;
                			    	}
                			    	else 
                			    	{
                			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
                			    	    throw mse;
                			    	}

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_relational_expression_in_equality_expression5320);
                			    	relational_expression286 = relational_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, relational_expression286.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop117;
                	    }
                	} while (true);

                	loop117:
                		;	// Stops C# compiler whining that label 'loop117' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "equality_expression"

        public class and_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "and_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1200:1: and_expression : equality_expression ( '&' equality_expression )* ;
        public JavaMaker.and_expression_return and_expression() // throws RecognitionException [1]
        {   
            JavaMaker.and_expression_return retval = new JavaMaker.and_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal288 = null;
            JavaMaker.equality_expression_return equality_expression287 = default(JavaMaker.equality_expression_return);

            JavaMaker.equality_expression_return equality_expression289 = default(JavaMaker.equality_expression_return);


            CommonTree char_literal288_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1200:15: ( equality_expression ( '&' equality_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1201:2: equality_expression ( '&' equality_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_equality_expression_in_and_expression5330);
                	equality_expression287 = equality_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, equality_expression287.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1201:22: ( '&' equality_expression )*
                	do 
                	{
                	    int alt118 = 2;
                	    int LA118_0 = input.LA(1);

                	    if ( (LA118_0 == BIT_AND) )
                	    {
                	        alt118 = 1;
                	    }


                	    switch (alt118) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1201:23: '&' equality_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal288=(CommonTree)Match(input,BIT_AND,FOLLOW_BIT_AND_in_and_expression5333); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal288_tree = (CommonTree)adaptor.DupNode(char_literal288);

                			    		root_0 = (CommonTree)adaptor.BecomeRoot(char_literal288_tree, root_0);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_equality_expression_in_and_expression5338);
                			    	equality_expression289 = equality_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, equality_expression289.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop118;
                	    }
                	} while (true);

                	loop118:
                		;	// Stops C# compiler whining that label 'loop118' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "and_expression"

        public class exclusive_or_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "exclusive_or_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1202:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
        public JavaMaker.exclusive_or_expression_return exclusive_or_expression() // throws RecognitionException [1]
        {   
            JavaMaker.exclusive_or_expression_return retval = new JavaMaker.exclusive_or_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal291 = null;
            JavaMaker.and_expression_return and_expression290 = default(JavaMaker.and_expression_return);

            JavaMaker.and_expression_return and_expression292 = default(JavaMaker.and_expression_return);


            CommonTree char_literal291_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1202:24: ( and_expression ( '^' and_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1203:2: and_expression ( '^' and_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_and_expression_in_exclusive_or_expression5348);
                	and_expression290 = and_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, and_expression290.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1203:17: ( '^' and_expression )*
                	do 
                	{
                	    int alt119 = 2;
                	    int LA119_0 = input.LA(1);

                	    if ( (LA119_0 == BIT_XOR) )
                	    {
                	        alt119 = 1;
                	    }


                	    switch (alt119) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1203:18: '^' and_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal291=(CommonTree)Match(input,BIT_XOR,FOLLOW_BIT_XOR_in_exclusive_or_expression5351); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal291_tree = (CommonTree)adaptor.DupNode(char_literal291);

                			    		root_0 = (CommonTree)adaptor.BecomeRoot(char_literal291_tree, root_0);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_and_expression_in_exclusive_or_expression5356);
                			    	and_expression292 = and_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, and_expression292.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop119;
                	    }
                	} while (true);

                	loop119:
                		;	// Stops C# compiler whining that label 'loop119' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "exclusive_or_expression"

        public class inclusive_or_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "inclusive_or_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1204:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
        public JavaMaker.inclusive_or_expression_return inclusive_or_expression() // throws RecognitionException [1]
        {   
            JavaMaker.inclusive_or_expression_return retval = new JavaMaker.inclusive_or_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal294 = null;
            JavaMaker.exclusive_or_expression_return exclusive_or_expression293 = default(JavaMaker.exclusive_or_expression_return);

            JavaMaker.exclusive_or_expression_return exclusive_or_expression295 = default(JavaMaker.exclusive_or_expression_return);


            CommonTree char_literal294_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1204:24: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1205:2: exclusive_or_expression ( '|' exclusive_or_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression5366);
                	exclusive_or_expression293 = exclusive_or_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, exclusive_or_expression293.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1205:28: ( '|' exclusive_or_expression )*
                	do 
                	{
                	    int alt120 = 2;
                	    int LA120_0 = input.LA(1);

                	    if ( (LA120_0 == BIT_OR) )
                	    {
                	        alt120 = 1;
                	    }


                	    switch (alt120) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1205:29: '|' exclusive_or_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal294=(CommonTree)Match(input,BIT_OR,FOLLOW_BIT_OR_in_inclusive_or_expression5371); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal294_tree = (CommonTree)adaptor.DupNode(char_literal294);

                			    		root_0 = (CommonTree)adaptor.BecomeRoot(char_literal294_tree, root_0);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression5376);
                			    	exclusive_or_expression295 = exclusive_or_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, exclusive_or_expression295.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop120;
                	    }
                	} while (true);

                	loop120:
                		;	// Stops C# compiler whining that label 'loop120' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "inclusive_or_expression"

        public class conditional_and_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "conditional_and_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1206:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
        public JavaMaker.conditional_and_expression_return conditional_and_expression() // throws RecognitionException [1]
        {   
            JavaMaker.conditional_and_expression_return retval = new JavaMaker.conditional_and_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal297 = null;
            JavaMaker.inclusive_or_expression_return inclusive_or_expression296 = default(JavaMaker.inclusive_or_expression_return);

            JavaMaker.inclusive_or_expression_return inclusive_or_expression298 = default(JavaMaker.inclusive_or_expression_return);


            CommonTree string_literal297_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1206:27: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1207:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression5386);
                	inclusive_or_expression296 = inclusive_or_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, inclusive_or_expression296.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1207:28: ( '&&' inclusive_or_expression )*
                	do 
                	{
                	    int alt121 = 2;
                	    int LA121_0 = input.LA(1);

                	    if ( (LA121_0 == LOG_AND) )
                	    {
                	        alt121 = 1;
                	    }


                	    switch (alt121) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1207:29: '&&' inclusive_or_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	string_literal297=(CommonTree)Match(input,LOG_AND,FOLLOW_LOG_AND_in_conditional_and_expression5391); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{string_literal297_tree = (CommonTree)adaptor.DupNode(string_literal297);

                			    		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal297_tree, root_0);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression5396);
                			    	inclusive_or_expression298 = inclusive_or_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, inclusive_or_expression298.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop121;
                	    }
                	} while (true);

                	loop121:
                		;	// Stops C# compiler whining that label 'loop121' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "conditional_and_expression"

        public class conditional_or_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "conditional_or_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1208:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
        public JavaMaker.conditional_or_expression_return conditional_or_expression() // throws RecognitionException [1]
        {   
            JavaMaker.conditional_or_expression_return retval = new JavaMaker.conditional_or_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal300 = null;
            JavaMaker.conditional_and_expression_return conditional_and_expression299 = default(JavaMaker.conditional_and_expression_return);

            JavaMaker.conditional_and_expression_return conditional_and_expression301 = default(JavaMaker.conditional_and_expression_return);


            CommonTree string_literal300_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1208:26: ( conditional_and_expression ( '||' conditional_and_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1209:2: conditional_and_expression ( '||' conditional_and_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression5406);
                	conditional_and_expression299 = conditional_and_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, conditional_and_expression299.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1209:30: ( '||' conditional_and_expression )*
                	do 
                	{
                	    int alt122 = 2;
                	    int LA122_0 = input.LA(1);

                	    if ( (LA122_0 == LOG_OR) )
                	    {
                	        alt122 = 1;
                	    }


                	    switch (alt122) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1209:31: '||' conditional_and_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	string_literal300=(CommonTree)Match(input,LOG_OR,FOLLOW_LOG_OR_in_conditional_or_expression5410); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{string_literal300_tree = (CommonTree)adaptor.DupNode(string_literal300);

                			    		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal300_tree, root_0);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression5415);
                			    	conditional_and_expression301 = conditional_and_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, conditional_and_expression301.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop122;
                	    }
                	} while (true);

                	loop122:
                		;	// Stops C# compiler whining that label 'loop122' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "conditional_or_expression"

        public class null_coalescing_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "null_coalescing_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1211:1: null_coalescing_expression : (e1= conditional_or_expression -> $e1) (qq= '??' e2= conditional_or_expression -> ^( COND_EXPR[$qq.token, \"?:\"] ^( NOT_EQUAL[$qq.token, \"!=\"] NULL[$qq.Token, \"null\"] ) ) )* ;
        public JavaMaker.null_coalescing_expression_return null_coalescing_expression() // throws RecognitionException [1]
        {   
            JavaMaker.null_coalescing_expression_return retval = new JavaMaker.null_coalescing_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree qq = null;
            JavaMaker.conditional_or_expression_return e1 = default(JavaMaker.conditional_or_expression_return);

            JavaMaker.conditional_or_expression_return e2 = default(JavaMaker.conditional_or_expression_return);


            CommonTree qq_tree=null;
            RewriteRuleNodeStream stream_NULL_COALESCE = new RewriteRuleNodeStream(adaptor,"token NULL_COALESCE");
            RewriteRuleSubtreeStream stream_conditional_or_expression = new RewriteRuleSubtreeStream(adaptor,"rule conditional_or_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1211:27: ( (e1= conditional_or_expression -> $e1) (qq= '??' e2= conditional_or_expression -> ^( COND_EXPR[$qq.token, \"?:\"] ^( NOT_EQUAL[$qq.token, \"!=\"] NULL[$qq.Token, \"null\"] ) ) )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1212:2: (e1= conditional_or_expression -> $e1) (qq= '??' e2= conditional_or_expression -> ^( COND_EXPR[$qq.token, \"?:\"] ^( NOT_EQUAL[$qq.token, \"!=\"] NULL[$qq.Token, \"null\"] ) ) )*
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1212:2: (e1= conditional_or_expression -> $e1)
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1212:3: e1= conditional_or_expression
                	{
                		_last = (CommonTree)input.LT(1);
                		PushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression5429);
                		e1 = conditional_or_expression();
                		state._fsp--;
                		if (state.failed) return retval;
                		if ( (state.backtracking==0) ) stream_conditional_or_expression.Add(e1.Tree);


                		// AST REWRITE
                		// elements:          e1
                		// token labels:      
                		// rule labels:       retval, e1
                		// token list labels: 
                		// rule list labels:  
                		// wildcard labels: 
                		if ( (state.backtracking==0) ) {
                		retval.tree = root_0;
                		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                		RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(adaptor, "rule e1", e1!=null ? e1.Tree : null);

                		root_0 = (CommonTree)adaptor.Nil;
                		// 1212:32: -> $e1
                		{
                		    adaptor.AddChild(root_0, stream_e1.NextTree());

                		}

                		retval.tree = root_0;}
                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1212:41: (qq= '??' e2= conditional_or_expression -> ^( COND_EXPR[$qq.token, \"?:\"] ^( NOT_EQUAL[$qq.token, \"!=\"] NULL[$qq.Token, \"null\"] ) ) )*
                	do 
                	{
                	    int alt123 = 2;
                	    int LA123_0 = input.LA(1);

                	    if ( (LA123_0 == NULL_COALESCE) )
                	    {
                	        alt123 = 1;
                	    }


                	    switch (alt123) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1212:42: qq= '??' e2= conditional_or_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	qq=(CommonTree)Match(input,NULL_COALESCE,FOLLOW_NULL_COALESCE_in_null_coalescing_expression5441); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_NULL_COALESCE.Add(qq);

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression5447);
                			    	e2 = conditional_or_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_conditional_or_expression.Add(e2.Tree);


                			    	// AST REWRITE
                			    	// elements:          
                			    	// token labels:      
                			    	// rule labels:       retval
                			    	// token list labels: 
                			    	// rule list labels:  
                			    	// wildcard labels: 
                			    	if ( (state.backtracking==0) ) {
                			    	retval.tree = root_0;
                			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                			    	root_0 = (CommonTree)adaptor.Nil;
                			    	// 1212:81: -> ^( COND_EXPR[$qq.token, \"?:\"] ^( NOT_EQUAL[$qq.token, \"!=\"] NULL[$qq.Token, \"null\"] ) )
                			    	{
                			    	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1212:84: ^( COND_EXPR[$qq.token, \"?:\"] ^( NOT_EQUAL[$qq.token, \"!=\"] NULL[$qq.Token, \"null\"] ) )
                			    	    {
                			    	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                			    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COND_EXPR, qq.token, "?:"), root_1);

                			    	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1213:91: ^( NOT_EQUAL[$qq.token, \"!=\"] NULL[$qq.Token, \"null\"] )
                			    	    {
                			    	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                			    	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_EQUAL, qq.token, "!="), root_2);

                			    	    adaptor.AddChild(root_2,  dupTree(((CommonTree)retval.Tree)) );
                			    	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(NULL, qq.Token, "null"));

                			    	    adaptor.AddChild(root_1, root_2);
                			    	    }
                			    	    adaptor.AddChild(root_1,  dupTree(((CommonTree)retval.Tree)) );
                			    	    adaptor.AddChild(root_1,  dupTree(((e2 != null) ? ((CommonTree)e2.Tree) : null)) );

                			    	    adaptor.AddChild(root_0, root_1);
                			    	    }

                			    	}

                			    	retval.tree = root_0;}
                			    }
                			    break;

                			default:
                			    goto loop123;
                	    }
                	} while (true);

                	loop123:
                		;	// Stops C# compiler whining that label 'loop123' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "null_coalescing_expression"

        public class conditional_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "conditional_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1217:1: conditional_expression : (ne= null_coalescing_expression -> $ne) (q= '?' te= expression ':' ee= expression -> ^( COND_EXPR[$q.token, \"?:\"] $conditional_expression $te $ee) )? ;
        public JavaMaker.conditional_expression_return conditional_expression() // throws RecognitionException [1]
        {   
            JavaMaker.conditional_expression_return retval = new JavaMaker.conditional_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree q = null;
            CommonTree char_literal302 = null;
            JavaMaker.null_coalescing_expression_return ne = default(JavaMaker.null_coalescing_expression_return);

            JavaMaker.expression_return te = default(JavaMaker.expression_return);

            JavaMaker.expression_return ee = default(JavaMaker.expression_return);


            CommonTree q_tree=null;
            CommonTree char_literal302_tree=null;
            RewriteRuleNodeStream stream_211 = new RewriteRuleNodeStream(adaptor,"token 211");
            RewriteRuleNodeStream stream_220 = new RewriteRuleNodeStream(adaptor,"token 220");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_null_coalescing_expression = new RewriteRuleSubtreeStream(adaptor,"rule null_coalescing_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1217:23: ( (ne= null_coalescing_expression -> $ne) (q= '?' te= expression ':' ee= expression -> ^( COND_EXPR[$q.token, \"?:\"] $conditional_expression $te $ee) )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1218:6: (ne= null_coalescing_expression -> $ne) (q= '?' te= expression ':' ee= expression -> ^( COND_EXPR[$q.token, \"?:\"] $conditional_expression $te $ee) )?
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1218:6: (ne= null_coalescing_expression -> $ne)
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1218:7: ne= null_coalescing_expression
                	{
                		_last = (CommonTree)input.LT(1);
                		PushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression5799);
                		ne = null_coalescing_expression();
                		state._fsp--;
                		if (state.failed) return retval;
                		if ( (state.backtracking==0) ) stream_null_coalescing_expression.Add(ne.Tree);


                		// AST REWRITE
                		// elements:          ne
                		// token labels:      
                		// rule labels:       retval, ne
                		// token list labels: 
                		// rule list labels:  
                		// wildcard labels: 
                		if ( (state.backtracking==0) ) {
                		retval.tree = root_0;
                		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                		RewriteRuleSubtreeStream stream_ne = new RewriteRuleSubtreeStream(adaptor, "rule ne", ne!=null ? ne.Tree : null);

                		root_0 = (CommonTree)adaptor.Nil;
                		// 1218:38: -> $ne
                		{
                		    adaptor.AddChild(root_0, stream_ne.NextTree());

                		}

                		retval.tree = root_0;}
                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1218:46: (q= '?' te= expression ':' ee= expression -> ^( COND_EXPR[$q.token, \"?:\"] $conditional_expression $te $ee) )?
                	int alt124 = 2;
                	int LA124_0 = input.LA(1);

                	if ( (LA124_0 == 220) )
                	{
                	    alt124 = 1;
                	}
                	switch (alt124) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1218:47: q= '?' te= expression ':' ee= expression
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	q=(CommonTree)Match(input,220,FOLLOW_220_in_conditional_expression5811); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_220.Add(q);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_conditional_expression5817);
                	        	te = expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_expression.Add(te.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal302=(CommonTree)Match(input,211,FOLLOW_211_in_conditional_expression5821); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_211.Add(char_literal302);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_conditional_expression5827);
                	        	ee = expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_expression.Add(ee.Tree);


                	        	// AST REWRITE
                	        	// elements:          ee, conditional_expression, te
                	        	// token labels:      
                	        	// rule labels:       retval, ee, te
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_ee = new RewriteRuleSubtreeStream(adaptor, "rule ee", ee!=null ? ee.Tree : null);
                	        	RewriteRuleSubtreeStream stream_te = new RewriteRuleSubtreeStream(adaptor, "rule te", te!=null ? te.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1218:91: -> ^( COND_EXPR[$q.token, \"?:\"] $conditional_expression $te $ee)
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1218:95: ^( COND_EXPR[$q.token, \"?:\"] $conditional_expression $te $ee)
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COND_EXPR, q.token, "?:"), root_1);

                	        	    adaptor.AddChild(root_1, stream_retval.NextTree());
                	        	    adaptor.AddChild(root_1, stream_te.NextTree());
                	        	    adaptor.AddChild(root_1, stream_ee.NextTree());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "conditional_expression"

        public class lambda_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "lambda_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1225:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
        public JavaMaker.lambda_expression_return lambda_expression() // throws RecognitionException [1]
        {   
            JavaMaker.lambda_expression_return retval = new JavaMaker.lambda_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal304 = null;
            JavaMaker.anonymous_function_signature_return anonymous_function_signature303 = default(JavaMaker.anonymous_function_signature_return);

            JavaMaker.anonymous_function_body_return anonymous_function_body305 = default(JavaMaker.anonymous_function_body_return);


            CommonTree string_literal304_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1225:18: ( anonymous_function_signature '=>' anonymous_function_body )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1226:2: anonymous_function_signature '=>' anonymous_function_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression5866);
                	anonymous_function_signature303 = anonymous_function_signature();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, anonymous_function_signature303.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal304=(CommonTree)Match(input,LAMBDA,FOLLOW_LAMBDA_in_lambda_expression5870); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal304_tree = (CommonTree)adaptor.DupNode(string_literal304);

                		adaptor.AddChild(root_0, string_literal304_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_anonymous_function_body_in_lambda_expression5874);
                	anonymous_function_body305 = anonymous_function_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, anonymous_function_body305.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "lambda_expression"

        public class anonymous_function_signature_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_function_signature"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1227:1: anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list -> ^( PARAMS explicit_anonymous_function_parameter_list ) | implicit_anonymous_function_parameter_list -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list ) )? ')' | implicit_anonymous_function_parameter_list -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list ) );
        public JavaMaker.anonymous_function_signature_return anonymous_function_signature() // throws RecognitionException [1]
        {   
            JavaMaker.anonymous_function_signature_return retval = new JavaMaker.anonymous_function_signature_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal306 = null;
            CommonTree char_literal309 = null;
            JavaMaker.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list307 = default(JavaMaker.explicit_anonymous_function_parameter_list_return);

            JavaMaker.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list308 = default(JavaMaker.implicit_anonymous_function_parameter_list_return);

            JavaMaker.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list310 = default(JavaMaker.implicit_anonymous_function_parameter_list_return);


            CommonTree char_literal306_tree=null;
            CommonTree char_literal309_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_implicit_anonymous_function_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule implicit_anonymous_function_parameter_list");
            RewriteRuleSubtreeStream stream_explicit_anonymous_function_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule explicit_anonymous_function_parameter_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1227:29: ( '(' ( explicit_anonymous_function_parameter_list -> ^( PARAMS explicit_anonymous_function_parameter_list ) | implicit_anonymous_function_parameter_list -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list ) )? ')' | implicit_anonymous_function_parameter_list -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list ) )
                int alt126 = 2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0 == LPAREN) )
                {
                    alt126 = 1;
                }
                else if ( (LA126_0 == IDENTIFIER || (LA126_0 >= ELIF && LA126_0 <= UNDEF) || LA126_0 == 195 || LA126_0 == 221 || (LA126_0 >= 224 && LA126_0 <= 239) || (LA126_0 >= 241 && LA126_0 <= 244) || (LA126_0 >= 247 && LA126_0 <= 250) || LA126_0 == 256 || (LA126_0 >= 263 && LA126_0 <= 264) || LA126_0 == 274 || LA126_0 == 277) )
                {
                    alt126 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d126s0 =
                        new NoViableAltException("", 126, 0, input);

                    throw nvae_d126s0;
                }
                switch (alt126) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1228:7: '(' ( explicit_anonymous_function_parameter_list -> ^( PARAMS explicit_anonymous_function_parameter_list ) | implicit_anonymous_function_parameter_list -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list ) )? ')'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	char_literal306=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_anonymous_function_signature5886); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal306);

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1228:15: ( explicit_anonymous_function_parameter_list -> ^( PARAMS explicit_anonymous_function_parameter_list ) | implicit_anonymous_function_parameter_list -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list ) )?
                        	int alt125 = 3;
                        	switch ( input.LA(1) ) 
                        	{
                        	    case OBJECT:
                        	    case BOOL:
                        	    case BYTE:
                        	    case CHAR:
                        	    case SHORT:
                        	    case INT:
                        	    case LONG:
                        	    case FLOAT:
                        	    case DOUBLE:
                        	    case 206:
                        	    case 212:
                        	    case 213:
                        	    case 251:
                        	    case 252:
                        	    case 253:
                        	    case 254:
                        	    case 275:
                        	    case 276:
                        	    	{
                        	        alt125 = 1;
                        	        }
                        	        break;
                        	    case IDENTIFIER:
                        	    	{
                        	        int LA125_2 = input.LA(2);

                        	        if ( (LA125_2 == COMMA || LA125_2 == RPAREN) )
                        	        {
                        	            alt125 = 2;
                        	        }
                        	        else if ( (LA125_2 == OPEN_BRACKET || LA125_2 == LTHAN || LA125_2 == STAR || LA125_2 == IDENTIFIER || LA125_2 == DOT || (LA125_2 >= ELIF && LA125_2 <= UNDEF) || LA125_2 == 195 || LA125_2 == 208 || (LA125_2 >= 220 && LA125_2 <= 221) || (LA125_2 >= 224 && LA125_2 <= 239) || (LA125_2 >= 241 && LA125_2 <= 244) || (LA125_2 >= 247 && LA125_2 <= 250) || LA125_2 == 256 || (LA125_2 >= 263 && LA125_2 <= 264) || LA125_2 == 274 || LA125_2 == 277) )
                        	        {
                        	            alt125 = 1;
                        	        }
                        	        }
                        	        break;
                        	    case ELIF:
                        	    case ENDIF:
                        	    case DEFINE:
                        	    case UNDEF:
                        	    case 195:
                        	    case 221:
                        	    case 224:
                        	    case 225:
                        	    case 226:
                        	    case 227:
                        	    case 228:
                        	    case 229:
                        	    case 230:
                        	    case 231:
                        	    case 232:
                        	    case 233:
                        	    case 234:
                        	    case 235:
                        	    case 236:
                        	    case 237:
                        	    case 238:
                        	    case 239:
                        	    case 241:
                        	    case 242:
                        	    case 243:
                        	    case 244:
                        	    case 247:
                        	    case 248:
                        	    case 249:
                        	    case 250:
                        	    case 256:
                        	    case 263:
                        	    case 264:
                        	    case 274:
                        	    case 277:
                        	    	{
                        	        int LA125_3 = input.LA(2);

                        	        if ( (LA125_3 == COMMA || LA125_3 == RPAREN) )
                        	        {
                        	            alt125 = 2;
                        	        }
                        	        else if ( (LA125_3 == OPEN_BRACKET || LA125_3 == LTHAN || LA125_3 == STAR || LA125_3 == IDENTIFIER || LA125_3 == DOT || (LA125_3 >= ELIF && LA125_3 <= UNDEF) || LA125_3 == 195 || LA125_3 == 208 || (LA125_3 >= 220 && LA125_3 <= 221) || (LA125_3 >= 224 && LA125_3 <= 239) || (LA125_3 >= 241 && LA125_3 <= 244) || (LA125_3 >= 247 && LA125_3 <= 250) || LA125_3 == 256 || (LA125_3 >= 263 && LA125_3 <= 264) || LA125_3 == 274 || LA125_3 == 277) )
                        	        {
                        	            alt125 = 1;
                        	        }
                        	        }
                        	        break;
                        	}

                        	switch (alt125) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1228:16: explicit_anonymous_function_parameter_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature5893);
                        	        	explicit_anonymous_function_parameter_list307 = explicit_anonymous_function_parameter_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_explicit_anonymous_function_parameter_list.Add(explicit_anonymous_function_parameter_list307.Tree);


                        	        	// AST REWRITE
                        	        	// elements:          explicit_anonymous_function_parameter_list
                        	        	// token labels:      
                        	        	// rule labels:       retval
                        	        	// token list labels: 
                        	        	// rule list labels:  
                        	        	// wildcard labels: 
                        	        	if ( (state.backtracking==0) ) {
                        	        	retval.tree = root_0;
                        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	        	root_0 = (CommonTree)adaptor.Nil;
                        	        	// 1228:59: -> ^( PARAMS explicit_anonymous_function_parameter_list )
                        	        	{
                        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1228:62: ^( PARAMS explicit_anonymous_function_parameter_list )
                        	        	    {
                        	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, "PARAMS"), root_1);

                        	        	    adaptor.AddChild(root_1, stream_explicit_anonymous_function_parameter_list.NextTree());

                        	        	    adaptor.AddChild(root_0, root_1);
                        	        	    }

                        	        	}

                        	        	retval.tree = root_0;}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1229:17: implicit_anonymous_function_parameter_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5919);
                        	        	implicit_anonymous_function_parameter_list308 = implicit_anonymous_function_parameter_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_implicit_anonymous_function_parameter_list.Add(implicit_anonymous_function_parameter_list308.Tree);


                        	        	// AST REWRITE
                        	        	// elements:          implicit_anonymous_function_parameter_list
                        	        	// token labels:      
                        	        	// rule labels:       retval
                        	        	// token list labels: 
                        	        	// rule list labels:  
                        	        	// wildcard labels: 
                        	        	if ( (state.backtracking==0) ) {
                        	        	retval.tree = root_0;
                        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	        	root_0 = (CommonTree)adaptor.Nil;
                        	        	// 1229:60: -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list )
                        	        	{
                        	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1229:63: ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list )
                        	        	    {
                        	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS_TYPELESS, "PARAMS_TYPELESS"), root_1);

                        	        	    adaptor.AddChild(root_1, stream_implicit_anonymous_function_parameter_list.NextTree());

                        	        	    adaptor.AddChild(root_0, root_1);
                        	        	    }

                        	        	}

                        	        	retval.tree = root_0;}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	char_literal309=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_anonymous_function_signature5932); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal309);


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1230:4: implicit_anonymous_function_parameter_list
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5937);
                        	implicit_anonymous_function_parameter_list310 = implicit_anonymous_function_parameter_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_implicit_anonymous_function_parameter_list.Add(implicit_anonymous_function_parameter_list310.Tree);


                        	// AST REWRITE
                        	// elements:          implicit_anonymous_function_parameter_list
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1230:47: -> ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1230:50: ^( PARAMS_TYPELESS implicit_anonymous_function_parameter_list )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS_TYPELESS, "PARAMS_TYPELESS"), root_1);

                        	    adaptor.AddChild(root_1, stream_implicit_anonymous_function_parameter_list.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_function_signature"

        public class implicit_anonymous_function_parameter_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "implicit_anonymous_function_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1232:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
        public JavaMaker.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() // throws RecognitionException [1]
        {   
            JavaMaker.implicit_anonymous_function_parameter_list_return retval = new JavaMaker.implicit_anonymous_function_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal312 = null;
            JavaMaker.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter311 = default(JavaMaker.implicit_anonymous_function_parameter_return);

            JavaMaker.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter313 = default(JavaMaker.implicit_anonymous_function_parameter_return);


            CommonTree char_literal312_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1232:43: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1233:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5954);
                	implicit_anonymous_function_parameter311 = implicit_anonymous_function_parameter();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, implicit_anonymous_function_parameter311.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1233:42: ( ',' implicit_anonymous_function_parameter )*
                	do 
                	{
                	    int alt127 = 2;
                	    int LA127_0 = input.LA(1);

                	    if ( (LA127_0 == COMMA) )
                	    {
                	        alt127 = 1;
                	    }


                	    switch (alt127) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1233:43: ',' implicit_anonymous_function_parameter
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal312=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list5959); if (state.failed) return retval;
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5964);
                			    	implicit_anonymous_function_parameter313 = implicit_anonymous_function_parameter();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, implicit_anonymous_function_parameter313.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop127;
                	    }
                	} while (true);

                	loop127:
                		;	// Stops C# compiler whining that label 'loop127' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "implicit_anonymous_function_parameter_list"

        public class implicit_anonymous_function_parameter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "implicit_anonymous_function_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1234:1: implicit_anonymous_function_parameter : identifier ;
        public JavaMaker.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() // throws RecognitionException [1]
        {   
            JavaMaker.implicit_anonymous_function_parameter_return retval = new JavaMaker.implicit_anonymous_function_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.identifier_return identifier314 = default(JavaMaker.identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1234:38: ( identifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1235:2: identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_implicit_anonymous_function_parameter5974);
                	identifier314 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier314.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "implicit_anonymous_function_parameter"

        public class anonymous_function_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "anonymous_function_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1236:1: anonymous_function_body : ( expression | block );
        public JavaMaker.anonymous_function_body_return anonymous_function_body() // throws RecognitionException [1]
        {   
            JavaMaker.anonymous_function_body_return retval = new JavaMaker.anonymous_function_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression315 = default(JavaMaker.expression_return);

            JavaMaker.block_return block316 = default(JavaMaker.block_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1236:24: ( expression | block )
                int alt128 = 2;
                int LA128_0 = input.LA(1);

                if ( ((LA128_0 >= MONONOT && LA128_0 <= MONOTWIDDLE) || LA128_0 == NEW_ARRAY || (LA128_0 >= OBJECT && LA128_0 <= THIS) || LA128_0 == LPAREN || LA128_0 == BIT_AND || (LA128_0 >= PLUS && LA128_0 <= MINUS) || LA128_0 == STAR || (LA128_0 >= BOOL && LA128_0 <= NULL) || (LA128_0 >= ELIF && LA128_0 <= UNDEF) || LA128_0 == 195 || LA128_0 == 197 || LA128_0 == 207 || (LA128_0 >= 209 && LA128_0 <= 210) || (LA128_0 >= 214 && LA128_0 <= 219) || LA128_0 == 221 || (LA128_0 >= 224 && LA128_0 <= 239) || (LA128_0 >= 241 && LA128_0 <= 244) || (LA128_0 >= 247 && LA128_0 <= 254) || LA128_0 == 256 || (LA128_0 >= 263 && LA128_0 <= 264) || (LA128_0 >= 274 && LA128_0 <= 277)) )
                {
                    alt128 = 1;
                }
                else if ( (LA128_0 == OPEN_BRACE || LA128_0 == SEMI) )
                {
                    alt128 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d128s0 =
                        new NoViableAltException("", 128, 0, input);

                    throw nvae_d128s0;
                }
                switch (alt128) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1237:2: expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_anonymous_function_body5981);
                        	expression315 = expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression315.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1238:4: block
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_anonymous_function_body5987);
                        	block316 = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, block316.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "anonymous_function_body"

        public class query_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1243:1: query_expression : from_clause query_body ;
        public JavaMaker.query_expression_return query_expression() // throws RecognitionException [1]
        {   
            JavaMaker.query_expression_return retval = new JavaMaker.query_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.from_clause_return from_clause317 = default(JavaMaker.from_clause_return);

            JavaMaker.query_body_return query_body318 = default(JavaMaker.query_body_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1243:17: ( from_clause query_body )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1244:2: from_clause query_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_from_clause_in_query_expression5999);
                	from_clause317 = from_clause();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, from_clause317.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_query_body_in_query_expression6003);
                	query_body318 = query_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, query_body318.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_expression"

        public class query_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1245:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
        public JavaMaker.query_body_return query_body() // throws RecognitionException [1]
        {   
            JavaMaker.query_body_return retval = new JavaMaker.query_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.query_body_clauses_return query_body_clauses319 = default(JavaMaker.query_body_clauses_return);

            JavaMaker.select_or_group_clause_return select_or_group_clause320 = default(JavaMaker.select_or_group_clause_return);

            JavaMaker.query_continuation_return query_continuation321 = default(JavaMaker.query_continuation_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1245:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1247:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1247:2: ( query_body_clauses )?
                	int alt129 = 2;
                	int LA129_0 = input.LA(1);

                	if ( ((LA129_0 >= 225 && LA129_0 <= 226) || (LA129_0 >= 229 && LA129_0 <= 230) || LA129_0 == 236) )
                	{
                	    alt129 = 1;
                	}
                	switch (alt129) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1247:2: query_body_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_query_body_clauses_in_query_body6013);
                	        	query_body_clauses319 = query_body_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, query_body_clauses319.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_select_or_group_clause_in_query_body6018);
                	select_or_group_clause320 = select_or_group_clause();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, select_or_group_clause320.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1247:49: ( ( 'into' )=> query_continuation )?
                	int alt130 = 2;
                	int LA130_0 = input.LA(1);

                	if ( (LA130_0 == 224) )
                	{
                	    int LA130_1 = input.LA(2);

                	    if ( (synpred25_JavaMaker()) )
                	    {
                	        alt130 = 1;
                	    }
                	}
                	switch (alt130) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1247:50: ( 'into' )=> query_continuation
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_query_continuation_in_query_body6029);
                	        	query_continuation321 = query_continuation();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, query_continuation321.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_body"

        public class query_continuation_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_continuation"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1248:1: query_continuation : 'into' identifier query_body ;
        public JavaMaker.query_continuation_return query_continuation() // throws RecognitionException [1]
        {   
            JavaMaker.query_continuation_return retval = new JavaMaker.query_continuation_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal322 = null;
            JavaMaker.identifier_return identifier323 = default(JavaMaker.identifier_return);

            JavaMaker.query_body_return query_body324 = default(JavaMaker.query_body_return);


            CommonTree string_literal322_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1248:19: ( 'into' identifier query_body )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1249:2: 'into' identifier query_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal322=(CommonTree)Match(input,224,FOLLOW_224_in_query_continuation6039); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal322_tree = (CommonTree)adaptor.DupNode(string_literal322);

                		adaptor.AddChild(root_0, string_literal322_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_query_continuation6043);
                	identifier323 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier323.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_query_body_in_query_continuation6047);
                	query_body324 = query_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, query_body324.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_continuation"

        public class query_body_clauses_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_body_clauses"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1250:1: query_body_clauses : ( query_body_clause )+ ;
        public JavaMaker.query_body_clauses_return query_body_clauses() // throws RecognitionException [1]
        {   
            JavaMaker.query_body_clauses_return retval = new JavaMaker.query_body_clauses_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.query_body_clause_return query_body_clause325 = default(JavaMaker.query_body_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1250:19: ( ( query_body_clause )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1251:2: ( query_body_clause )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1251:2: ( query_body_clause )+
                	int cnt131 = 0;
                	do 
                	{
                	    int alt131 = 2;
                	    int LA131_0 = input.LA(1);

                	    if ( ((LA131_0 >= 225 && LA131_0 <= 226) || (LA131_0 >= 229 && LA131_0 <= 230) || LA131_0 == 236) )
                	    {
                	        alt131 = 1;
                	    }


                	    switch (alt131) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1251:2: query_body_clause
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_query_body_clause_in_query_body_clauses6054);
                			    	query_body_clause325 = query_body_clause();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, query_body_clause325.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt131 >= 1 ) goto loop131;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee131 =
                		                new EarlyExitException(131, input);
                		            throw eee131;
                	    }
                	    cnt131++;
                	} while (true);

                	loop131:
                		;	// Stops C# compiler whining that label 'loop131' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_body_clauses"

        public class query_body_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "query_body_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1252:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
        public JavaMaker.query_body_clause_return query_body_clause() // throws RecognitionException [1]
        {   
            JavaMaker.query_body_clause_return retval = new JavaMaker.query_body_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.from_clause_return from_clause326 = default(JavaMaker.from_clause_return);

            JavaMaker.let_clause_return let_clause327 = default(JavaMaker.let_clause_return);

            JavaMaker.where_clause_return where_clause328 = default(JavaMaker.where_clause_return);

            JavaMaker.join_clause_return join_clause329 = default(JavaMaker.join_clause_return);

            JavaMaker.orderby_clause_return orderby_clause330 = default(JavaMaker.orderby_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1252:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
                int alt132 = 5;
                switch ( input.LA(1) ) 
                {
                case 225:
                	{
                    alt132 = 1;
                    }
                    break;
                case 229:
                	{
                    alt132 = 2;
                    }
                    break;
                case 236:
                	{
                    alt132 = 3;
                    }
                    break;
                case 226:
                	{
                    alt132 = 4;
                    }
                    break;
                case 230:
                	{
                    alt132 = 5;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d132s0 =
                	        new NoViableAltException("", 132, 0, input);

                	    throw nvae_d132s0;
                }

                switch (alt132) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1253:2: from_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_from_clause_in_query_body_clause6063);
                        	from_clause326 = from_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, from_clause326.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1254:4: let_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_let_clause_in_query_body_clause6068);
                        	let_clause327 = let_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, let_clause327.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1255:4: where_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_where_clause_in_query_body_clause6073);
                        	where_clause328 = where_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, where_clause328.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1256:4: join_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_join_clause_in_query_body_clause6078);
                        	join_clause329 = join_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, join_clause329.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1257:4: orderby_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_orderby_clause_in_query_body_clause6083);
                        	orderby_clause330 = orderby_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, orderby_clause330.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "query_body_clause"

        public class from_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "from_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1258:1: from_clause : 'from' ( type )? identifier 'in' expression ;
        public JavaMaker.from_clause_return from_clause() // throws RecognitionException [1]
        {   
            JavaMaker.from_clause_return retval = new JavaMaker.from_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal331 = null;
            CommonTree string_literal334 = null;
            JavaMaker.type_return type332 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier333 = default(JavaMaker.identifier_return);

            JavaMaker.expression_return expression335 = default(JavaMaker.expression_return);


            CommonTree string_literal331_tree=null;
            CommonTree string_literal334_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1258:12: ( 'from' ( type )? identifier 'in' expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1259:2: 'from' ( type )? identifier 'in' expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal331=(CommonTree)Match(input,225,FOLLOW_225_in_from_clause6090); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal331_tree = (CommonTree)adaptor.DupNode(string_literal331);

                		adaptor.AddChild(root_0, string_literal331_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1259:11: ( type )?
                	int alt133 = 2;
                	switch ( input.LA(1) ) 
                	{
                	    case OBJECT:
                	    case BOOL:
                	    case BYTE:
                	    case CHAR:
                	    case SHORT:
                	    case INT:
                	    case LONG:
                	    case FLOAT:
                	    case DOUBLE:
                	    case 206:
                	    case 251:
                	    case 252:
                	    case 253:
                	    case 254:
                	    case 275:
                	    case 276:
                	    	{
                	        alt133 = 1;
                	        }
                	        break;
                	    case IDENTIFIER:
                	    	{
                	        int LA133_2 = input.LA(2);

                	        if ( (LA133_2 == OPEN_BRACKET || LA133_2 == LTHAN || LA133_2 == STAR || LA133_2 == IDENTIFIER || LA133_2 == DOT || (LA133_2 >= ELIF && LA133_2 <= UNDEF) || LA133_2 == 195 || LA133_2 == 208 || (LA133_2 >= 220 && LA133_2 <= 221) || (LA133_2 >= 224 && LA133_2 <= 239) || (LA133_2 >= 241 && LA133_2 <= 244) || (LA133_2 >= 247 && LA133_2 <= 250) || LA133_2 == 256 || (LA133_2 >= 263 && LA133_2 <= 264) || LA133_2 == 274 || LA133_2 == 277) )
                	        {
                	            alt133 = 1;
                	        }
                	        }
                	        break;
                	    case ELIF:
                	    case ENDIF:
                	    case DEFINE:
                	    case UNDEF:
                	    case 195:
                	    case 221:
                	    case 224:
                	    case 225:
                	    case 226:
                	    case 227:
                	    case 228:
                	    case 229:
                	    case 230:
                	    case 231:
                	    case 232:
                	    case 233:
                	    case 234:
                	    case 235:
                	    case 236:
                	    case 237:
                	    case 238:
                	    case 239:
                	    case 241:
                	    case 242:
                	    case 243:
                	    case 244:
                	    case 247:
                	    case 248:
                	    case 249:
                	    case 250:
                	    case 256:
                	    case 263:
                	    case 264:
                	    case 274:
                	    case 277:
                	    	{
                	        int LA133_3 = input.LA(2);

                	        if ( (LA133_3 == OPEN_BRACKET || LA133_3 == LTHAN || LA133_3 == STAR || LA133_3 == IDENTIFIER || LA133_3 == DOT || (LA133_3 >= ELIF && LA133_3 <= UNDEF) || LA133_3 == 195 || LA133_3 == 208 || (LA133_3 >= 220 && LA133_3 <= 221) || (LA133_3 >= 224 && LA133_3 <= 239) || (LA133_3 >= 241 && LA133_3 <= 244) || (LA133_3 >= 247 && LA133_3 <= 250) || LA133_3 == 256 || (LA133_3 >= 263 && LA133_3 <= 264) || LA133_3 == 274 || LA133_3 == 277) )
                	        {
                	            alt133 = 1;
                	        }
                	        }
                	        break;
                	}

                	switch (alt133) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1259:11: type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_from_clause6094);
                	        	type332 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type332.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_from_clause6099);
                	identifier333 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier333.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal334=(CommonTree)Match(input,IN,FOLLOW_IN_in_from_clause6103); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal334_tree = (CommonTree)adaptor.DupNode(string_literal334);

                		adaptor.AddChild(root_0, string_literal334_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_from_clause6107);
                	expression335 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression335.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "from_clause"

        public class join_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "join_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1260:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
        public JavaMaker.join_clause_return join_clause() // throws RecognitionException [1]
        {   
            JavaMaker.join_clause_return retval = new JavaMaker.join_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal336 = null;
            CommonTree string_literal339 = null;
            CommonTree string_literal341 = null;
            CommonTree string_literal343 = null;
            CommonTree string_literal345 = null;
            JavaMaker.type_return type337 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier338 = default(JavaMaker.identifier_return);

            JavaMaker.expression_return expression340 = default(JavaMaker.expression_return);

            JavaMaker.expression_return expression342 = default(JavaMaker.expression_return);

            JavaMaker.expression_return expression344 = default(JavaMaker.expression_return);

            JavaMaker.identifier_return identifier346 = default(JavaMaker.identifier_return);


            CommonTree string_literal336_tree=null;
            CommonTree string_literal339_tree=null;
            CommonTree string_literal341_tree=null;
            CommonTree string_literal343_tree=null;
            CommonTree string_literal345_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1260:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1261:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal336=(CommonTree)Match(input,226,FOLLOW_226_in_join_clause6115); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal336_tree = (CommonTree)adaptor.DupNode(string_literal336);

                		adaptor.AddChild(root_0, string_literal336_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1261:11: ( type )?
                	int alt134 = 2;
                	switch ( input.LA(1) ) 
                	{
                	    case OBJECT:
                	    case BOOL:
                	    case BYTE:
                	    case CHAR:
                	    case SHORT:
                	    case INT:
                	    case LONG:
                	    case FLOAT:
                	    case DOUBLE:
                	    case 206:
                	    case 251:
                	    case 252:
                	    case 253:
                	    case 254:
                	    case 275:
                	    case 276:
                	    	{
                	        alt134 = 1;
                	        }
                	        break;
                	    case IDENTIFIER:
                	    	{
                	        int LA134_2 = input.LA(2);

                	        if ( (LA134_2 == OPEN_BRACKET || LA134_2 == LTHAN || LA134_2 == STAR || LA134_2 == IDENTIFIER || LA134_2 == DOT || (LA134_2 >= ELIF && LA134_2 <= UNDEF) || LA134_2 == 195 || LA134_2 == 208 || (LA134_2 >= 220 && LA134_2 <= 221) || (LA134_2 >= 224 && LA134_2 <= 239) || (LA134_2 >= 241 && LA134_2 <= 244) || (LA134_2 >= 247 && LA134_2 <= 250) || LA134_2 == 256 || (LA134_2 >= 263 && LA134_2 <= 264) || LA134_2 == 274 || LA134_2 == 277) )
                	        {
                	            alt134 = 1;
                	        }
                	        }
                	        break;
                	    case ELIF:
                	    case ENDIF:
                	    case DEFINE:
                	    case UNDEF:
                	    case 195:
                	    case 221:
                	    case 224:
                	    case 225:
                	    case 226:
                	    case 227:
                	    case 228:
                	    case 229:
                	    case 230:
                	    case 231:
                	    case 232:
                	    case 233:
                	    case 234:
                	    case 235:
                	    case 236:
                	    case 237:
                	    case 238:
                	    case 239:
                	    case 241:
                	    case 242:
                	    case 243:
                	    case 244:
                	    case 247:
                	    case 248:
                	    case 249:
                	    case 250:
                	    case 256:
                	    case 263:
                	    case 264:
                	    case 274:
                	    case 277:
                	    	{
                	        int LA134_3 = input.LA(2);

                	        if ( (LA134_3 == OPEN_BRACKET || LA134_3 == LTHAN || LA134_3 == STAR || LA134_3 == IDENTIFIER || LA134_3 == DOT || (LA134_3 >= ELIF && LA134_3 <= UNDEF) || LA134_3 == 195 || LA134_3 == 208 || (LA134_3 >= 220 && LA134_3 <= 221) || (LA134_3 >= 224 && LA134_3 <= 239) || (LA134_3 >= 241 && LA134_3 <= 244) || (LA134_3 >= 247 && LA134_3 <= 250) || LA134_3 == 256 || (LA134_3 >= 263 && LA134_3 <= 264) || LA134_3 == 274 || LA134_3 == 277) )
                	        {
                	            alt134 = 1;
                	        }
                	        }
                	        break;
                	}

                	switch (alt134) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1261:11: type
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_join_clause6119);
                	        	type337 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type337.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_join_clause6124);
                	identifier338 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier338.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal339=(CommonTree)Match(input,IN,FOLLOW_IN_in_join_clause6128); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal339_tree = (CommonTree)adaptor.DupNode(string_literal339);

                		adaptor.AddChild(root_0, string_literal339_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_join_clause6132);
                	expression340 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression340.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal341=(CommonTree)Match(input,227,FOLLOW_227_in_join_clause6136); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal341_tree = (CommonTree)adaptor.DupNode(string_literal341);

                		adaptor.AddChild(root_0, string_literal341_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_join_clause6140);
                	expression342 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression342.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal343=(CommonTree)Match(input,228,FOLLOW_228_in_join_clause6144); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal343_tree = (CommonTree)adaptor.DupNode(string_literal343);

                		adaptor.AddChild(root_0, string_literal343_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_join_clause6148);
                	expression344 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression344.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1261:94: ( 'into' identifier )?
                	int alt135 = 2;
                	int LA135_0 = input.LA(1);

                	if ( (LA135_0 == 224) )
                	{
                	    alt135 = 1;
                	}
                	switch (alt135) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1261:95: 'into' identifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal345=(CommonTree)Match(input,224,FOLLOW_224_in_join_clause6151); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal345_tree = (CommonTree)adaptor.DupNode(string_literal345);

                	        		adaptor.AddChild(root_0, string_literal345_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_join_clause6153);
                	        	identifier346 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier346.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "join_clause"

        public class let_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "let_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1262:1: let_clause : 'let' identifier '=' expression ;
        public JavaMaker.let_clause_return let_clause() // throws RecognitionException [1]
        {   
            JavaMaker.let_clause_return retval = new JavaMaker.let_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal347 = null;
            CommonTree char_literal349 = null;
            JavaMaker.identifier_return identifier348 = default(JavaMaker.identifier_return);

            JavaMaker.expression_return expression350 = default(JavaMaker.expression_return);


            CommonTree string_literal347_tree=null;
            CommonTree char_literal349_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1262:11: ( 'let' identifier '=' expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1263:2: 'let' identifier '=' expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal347=(CommonTree)Match(input,229,FOLLOW_229_in_let_clause6163); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal347_tree = (CommonTree)adaptor.DupNode(string_literal347);

                		adaptor.AddChild(root_0, string_literal347_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_let_clause6167);
                	identifier348 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier348.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal349=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_let_clause6171); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal349_tree = (CommonTree)adaptor.DupNode(char_literal349);

                		adaptor.AddChild(root_0, char_literal349_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_let_clause6175);
                	expression350 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression350.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "let_clause"

        public class orderby_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "orderby_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1264:1: orderby_clause : 'orderby' ordering_list ;
        public JavaMaker.orderby_clause_return orderby_clause() // throws RecognitionException [1]
        {   
            JavaMaker.orderby_clause_return retval = new JavaMaker.orderby_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal351 = null;
            JavaMaker.ordering_list_return ordering_list352 = default(JavaMaker.ordering_list_return);


            CommonTree string_literal351_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1264:15: ( 'orderby' ordering_list )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1265:2: 'orderby' ordering_list
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal351=(CommonTree)Match(input,230,FOLLOW_230_in_orderby_clause6182); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal351_tree = (CommonTree)adaptor.DupNode(string_literal351);

                		adaptor.AddChild(root_0, string_literal351_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_ordering_list_in_orderby_clause6186);
                	ordering_list352 = ordering_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, ordering_list352.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "orderby_clause"

        public class ordering_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ordering_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1266:1: ordering_list : ordering ( ',' ordering )* ;
        public JavaMaker.ordering_list_return ordering_list() // throws RecognitionException [1]
        {   
            JavaMaker.ordering_list_return retval = new JavaMaker.ordering_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal354 = null;
            JavaMaker.ordering_return ordering353 = default(JavaMaker.ordering_return);

            JavaMaker.ordering_return ordering355 = default(JavaMaker.ordering_return);


            CommonTree char_literal354_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1266:14: ( ordering ( ',' ordering )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1267:2: ordering ( ',' ordering )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_ordering_in_ordering_list6194);
                	ordering353 = ordering();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, ordering353.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1267:13: ( ',' ordering )*
                	do 
                	{
                	    int alt136 = 2;
                	    int LA136_0 = input.LA(1);

                	    if ( (LA136_0 == COMMA) )
                	    {
                	        alt136 = 1;
                	    }


                	    switch (alt136) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1267:14: ',' ordering
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal354=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_ordering_list6199); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal354_tree = (CommonTree)adaptor.DupNode(char_literal354);

                			    		adaptor.AddChild(root_0, char_literal354_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_ordering_in_ordering_list6203);
                			    	ordering355 = ordering();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, ordering355.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop136;
                	    }
                	} while (true);

                	loop136:
                		;	// Stops C# compiler whining that label 'loop136' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ordering_list"

        public class ordering_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ordering"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1268:1: ordering : expression ( ordering_direction )? ;
        public JavaMaker.ordering_return ordering() // throws RecognitionException [1]
        {   
            JavaMaker.ordering_return retval = new JavaMaker.ordering_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression356 = default(JavaMaker.expression_return);

            JavaMaker.ordering_direction_return ordering_direction357 = default(JavaMaker.ordering_direction_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1268:9: ( expression ( ordering_direction )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1269:2: expression ( ordering_direction )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_ordering6213);
                	expression356 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression356.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1269:16: ( ordering_direction )?
                	int alt137 = 2;
                	int LA137_0 = input.LA(1);

                	if ( ((LA137_0 >= 231 && LA137_0 <= 232)) )
                	{
                	    alt137 = 1;
                	}
                	switch (alt137) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1269:16: ordering_direction
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_ordering_direction_in_ordering6218);
                	        	ordering_direction357 = ordering_direction();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, ordering_direction357.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ordering"

        public class ordering_direction_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "ordering_direction"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1271:1: ordering_direction : ( 'ascending' | 'descending' );
        public JavaMaker.ordering_direction_return ordering_direction() // throws RecognitionException [1]
        {   
            JavaMaker.ordering_direction_return retval = new JavaMaker.ordering_direction_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set358 = null;

            CommonTree set358_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1271:19: ( 'ascending' | 'descending' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set358 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= 231 && input.LA(1) <= 232) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set358_tree = (CommonTree)adaptor.DupNode(set358);

                	    adaptor.AddChild(root_0, set358_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "ordering_direction"

        public class select_or_group_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "select_or_group_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1274:1: select_or_group_clause : ( select_clause | group_clause );
        public JavaMaker.select_or_group_clause_return select_or_group_clause() // throws RecognitionException [1]
        {   
            JavaMaker.select_or_group_clause_return retval = new JavaMaker.select_or_group_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.select_clause_return select_clause359 = default(JavaMaker.select_clause_return);

            JavaMaker.group_clause_return group_clause360 = default(JavaMaker.group_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1274:23: ( select_clause | group_clause )
                int alt138 = 2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0 == 233) )
                {
                    alt138 = 1;
                }
                else if ( (LA138_0 == 234) )
                {
                    alt138 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d138s0 =
                        new NoViableAltException("", 138, 0, input);

                    throw nvae_d138s0;
                }
                switch (alt138) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1275:2: select_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_select_clause_in_select_or_group_clause6241);
                        	select_clause359 = select_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, select_clause359.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1276:4: group_clause
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_group_clause_in_select_or_group_clause6246);
                        	group_clause360 = group_clause();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, group_clause360.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "select_or_group_clause"

        public class select_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "select_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1277:1: select_clause : 'select' expression ;
        public JavaMaker.select_clause_return select_clause() // throws RecognitionException [1]
        {   
            JavaMaker.select_clause_return retval = new JavaMaker.select_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal361 = null;
            JavaMaker.expression_return expression362 = default(JavaMaker.expression_return);


            CommonTree string_literal361_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1277:14: ( 'select' expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1278:2: 'select' expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal361=(CommonTree)Match(input,233,FOLLOW_233_in_select_clause6254); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal361_tree = (CommonTree)adaptor.DupNode(string_literal361);

                		adaptor.AddChild(root_0, string_literal361_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_select_clause6258);
                	expression362 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression362.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "select_clause"

        public class group_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "group_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1279:1: group_clause : 'group' expression 'by' expression ;
        public JavaMaker.group_clause_return group_clause() // throws RecognitionException [1]
        {   
            JavaMaker.group_clause_return retval = new JavaMaker.group_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal363 = null;
            CommonTree string_literal365 = null;
            JavaMaker.expression_return expression364 = default(JavaMaker.expression_return);

            JavaMaker.expression_return expression366 = default(JavaMaker.expression_return);


            CommonTree string_literal363_tree=null;
            CommonTree string_literal365_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1279:13: ( 'group' expression 'by' expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1280:2: 'group' expression 'by' expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal363=(CommonTree)Match(input,234,FOLLOW_234_in_group_clause6266); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal363_tree = (CommonTree)adaptor.DupNode(string_literal363);

                		adaptor.AddChild(root_0, string_literal363_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_group_clause6270);
                	expression364 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression364.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal365=(CommonTree)Match(input,235,FOLLOW_235_in_group_clause6274); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal365_tree = (CommonTree)adaptor.DupNode(string_literal365);

                		adaptor.AddChild(root_0, string_literal365_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_group_clause6278);
                	expression366 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression366.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "group_clause"

        public class where_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "where_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1281:1: where_clause : 'where' boolean_expression ;
        public JavaMaker.where_clause_return where_clause() // throws RecognitionException [1]
        {   
            JavaMaker.where_clause_return retval = new JavaMaker.where_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal367 = null;
            JavaMaker.boolean_expression_return boolean_expression368 = default(JavaMaker.boolean_expression_return);


            CommonTree string_literal367_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1281:13: ( 'where' boolean_expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1282:2: 'where' boolean_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal367=(CommonTree)Match(input,236,FOLLOW_236_in_where_clause6286); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal367_tree = (CommonTree)adaptor.DupNode(string_literal367);

                		adaptor.AddChild(root_0, string_literal367_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_where_clause6290);
                	boolean_expression368 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, boolean_expression368.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "where_clause"

        public class boolean_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "boolean_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1283:1: boolean_expression : expression ;
        public JavaMaker.boolean_expression_return boolean_expression() // throws RecognitionException [1]
        {   
            JavaMaker.boolean_expression_return retval = new JavaMaker.boolean_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression369 = default(JavaMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1283:19: ( expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1284:2: expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_boolean_expression6298);
                	expression369 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression369.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "boolean_expression"

        public class global_attributes_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attributes"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1289:1: global_attributes : ( global_attribute )+ ;
        public JavaMaker.global_attributes_return global_attributes() // throws RecognitionException [1]
        {   
            JavaMaker.global_attributes_return retval = new JavaMaker.global_attributes_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.global_attribute_return global_attribute370 = default(JavaMaker.global_attribute_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1289:18: ( ( global_attribute )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1290:2: ( global_attribute )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1290:2: ( global_attribute )+
                	int cnt139 = 0;
                	do 
                	{
                	    int alt139 = 2;
                	    int LA139_0 = input.LA(1);

                	    if ( (LA139_0 == OPEN_BRACKET) )
                	    {
                	        int LA139_2 = input.LA(2);

                	        if ( ((LA139_2 >= 237 && LA139_2 <= 238)) )
                	        {
                	            int LA139_3 = input.LA(3);

                	            if ( (LA139_3 == 211) )
                	            {
                	                alt139 = 1;
                	            }


                	        }


                	    }


                	    switch (alt139) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1290:2: global_attribute
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_global_attribute_in_global_attributes6310);
                			    	global_attribute370 = global_attribute();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, global_attribute370.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt139 >= 1 ) goto loop139;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee139 =
                		                new EarlyExitException(139, input);
                		            throw eee139;
                	    }
                	    cnt139++;
                	} while (true);

                	loop139:
                		;	// Stops C# compiler whining that label 'loop139' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attributes"

        public class global_attribute_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attribute"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1291:1: global_attribute : o= '[' global_attribute_target_specifier attribute_list ( ',' )? ']' -> ^( GLOBAL_ATTRIBUTE[$o.token, \"GLOBAL_ATTRIBUTE\"] ( global_attribute_target_specifier )? attribute_list ) ;
        public JavaMaker.global_attribute_return global_attribute() // throws RecognitionException [1]
        {   
            JavaMaker.global_attribute_return retval = new JavaMaker.global_attribute_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o = null;
            CommonTree char_literal373 = null;
            CommonTree char_literal374 = null;
            JavaMaker.global_attribute_target_specifier_return global_attribute_target_specifier371 = default(JavaMaker.global_attribute_target_specifier_return);

            JavaMaker.attribute_list_return attribute_list372 = default(JavaMaker.attribute_list_return);


            CommonTree o_tree=null;
            CommonTree char_literal373_tree=null;
            CommonTree char_literal374_tree=null;
            RewriteRuleNodeStream stream_OPEN_BRACKET = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACKET");
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleNodeStream stream_CLOSE_BRACKET = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACKET");
            RewriteRuleSubtreeStream stream_global_attribute_target_specifier = new RewriteRuleSubtreeStream(adaptor,"rule global_attribute_target_specifier");
            RewriteRuleSubtreeStream stream_attribute_list = new RewriteRuleSubtreeStream(adaptor,"rule attribute_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1291:17: (o= '[' global_attribute_target_specifier attribute_list ( ',' )? ']' -> ^( GLOBAL_ATTRIBUTE[$o.token, \"GLOBAL_ATTRIBUTE\"] ( global_attribute_target_specifier )? attribute_list ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1292:2: o= '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
                {
                	_last = (CommonTree)input.LT(1);
                	o=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_global_attribute6322); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACKET.Add(o);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute6326);
                	global_attribute_target_specifier371 = global_attribute_target_specifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_global_attribute_target_specifier.Add(global_attribute_target_specifier371.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_list_in_global_attribute6330);
                	attribute_list372 = attribute_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_attribute_list.Add(attribute_list372.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1292:63: ( ',' )?
                	int alt140 = 2;
                	int LA140_0 = input.LA(1);

                	if ( (LA140_0 == COMMA) )
                	{
                	    alt140 = 1;
                	}
                	switch (alt140) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1292:63: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal373=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_global_attribute6334); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal373);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal374=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_global_attribute6339); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACKET.Add(char_literal374);



                	// AST REWRITE
                	// elements:          attribute_list, global_attribute_target_specifier
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1292:74: -> ^( GLOBAL_ATTRIBUTE[$o.token, \"GLOBAL_ATTRIBUTE\"] ( global_attribute_target_specifier )? attribute_list )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1292:77: ^( GLOBAL_ATTRIBUTE[$o.token, \"GLOBAL_ATTRIBUTE\"] ( global_attribute_target_specifier )? attribute_list )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GLOBAL_ATTRIBUTE, o.token, "GLOBAL_ATTRIBUTE"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1292:126: ( global_attribute_target_specifier )?
                	    if ( stream_global_attribute_target_specifier.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_global_attribute_target_specifier.NextTree());

                	    }
                	    stream_global_attribute_target_specifier.Reset();
                	    adaptor.AddChild(root_1, stream_attribute_list.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attribute"

        public class global_attribute_target_specifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attribute_target_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1293:1: global_attribute_target_specifier : global_attribute_target ':' ;
        public JavaMaker.global_attribute_target_specifier_return global_attribute_target_specifier() // throws RecognitionException [1]
        {   
            JavaMaker.global_attribute_target_specifier_return retval = new JavaMaker.global_attribute_target_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal376 = null;
            JavaMaker.global_attribute_target_return global_attribute_target375 = default(JavaMaker.global_attribute_target_return);


            CommonTree char_literal376_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1293:34: ( global_attribute_target ':' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1294:2: global_attribute_target ':'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier6362);
                	global_attribute_target375 = global_attribute_target();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, global_attribute_target375.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal376=(CommonTree)Match(input,211,FOLLOW_211_in_global_attribute_target_specifier6366); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal376_tree = (CommonTree)adaptor.DupNode(char_literal376);

                		adaptor.AddChild(root_0, char_literal376_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attribute_target_specifier"

        public class global_attribute_target_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "global_attribute_target"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1295:1: global_attribute_target : ( 'assembly' | 'module' );
        public JavaMaker.global_attribute_target_return global_attribute_target() // throws RecognitionException [1]
        {   
            JavaMaker.global_attribute_target_return retval = new JavaMaker.global_attribute_target_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set377 = null;

            CommonTree set377_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1295:24: ( 'assembly' | 'module' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set377 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= 237 && input.LA(1) <= 238) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set377_tree = (CommonTree)adaptor.DupNode(set377);

                	    adaptor.AddChild(root_0, set377_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "global_attribute_target"

        public class attributes_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attributes"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1297:1: attributes : attribute_sections ;
        public JavaMaker.attributes_return attributes() // throws RecognitionException [1]
        {   
            JavaMaker.attributes_return retval = new JavaMaker.attributes_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.attribute_sections_return attribute_sections378 = default(JavaMaker.attribute_sections_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1297:11: ( attribute_sections )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1298:2: attribute_sections
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_sections_in_attributes6388);
                	attribute_sections378 = attribute_sections();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_sections378.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attributes"

        public class attribute_sections_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_sections"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1299:1: attribute_sections : ( attribute_section )+ ;
        public JavaMaker.attribute_sections_return attribute_sections() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_sections_return retval = new JavaMaker.attribute_sections_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.attribute_section_return attribute_section379 = default(JavaMaker.attribute_section_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1299:19: ( ( attribute_section )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1300:2: ( attribute_section )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1300:2: ( attribute_section )+
                	int cnt141 = 0;
                	do 
                	{
                	    int alt141 = 2;
                	    int LA141_0 = input.LA(1);

                	    if ( (LA141_0 == OPEN_BRACKET) )
                	    {
                	        alt141 = 1;
                	    }


                	    switch (alt141) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1300:2: attribute_section
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_attribute_section_in_attribute_sections6397);
                			    	attribute_section379 = attribute_section();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, attribute_section379.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt141 >= 1 ) goto loop141;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee141 =
                		                new EarlyExitException(141, input);
                		            throw eee141;
                	    }
                	    cnt141++;
                	} while (true);

                	loop141:
                		;	// Stops C# compiler whining that label 'loop141' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_sections"

        public class attribute_section_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_section"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1301:1: attribute_section : o= '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' -> ^( ATTRIBUTE[$o.token, \"ATTRIBUTE\"] ( attribute_target_specifier )? attribute_list ) ;
        public JavaMaker.attribute_section_return attribute_section() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_section_return retval = new JavaMaker.attribute_section_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o = null;
            CommonTree char_literal382 = null;
            CommonTree char_literal383 = null;
            JavaMaker.attribute_target_specifier_return attribute_target_specifier380 = default(JavaMaker.attribute_target_specifier_return);

            JavaMaker.attribute_list_return attribute_list381 = default(JavaMaker.attribute_list_return);


            CommonTree o_tree=null;
            CommonTree char_literal382_tree=null;
            CommonTree char_literal383_tree=null;
            RewriteRuleNodeStream stream_OPEN_BRACKET = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACKET");
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleNodeStream stream_CLOSE_BRACKET = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACKET");
            RewriteRuleSubtreeStream stream_attribute_target_specifier = new RewriteRuleSubtreeStream(adaptor,"rule attribute_target_specifier");
            RewriteRuleSubtreeStream stream_attribute_list = new RewriteRuleSubtreeStream(adaptor,"rule attribute_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1301:18: (o= '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' -> ^( ATTRIBUTE[$o.token, \"ATTRIBUTE\"] ( attribute_target_specifier )? attribute_list ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1302:2: o= '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
                {
                	_last = (CommonTree)input.LT(1);
                	o=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_attribute_section6409); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACKET.Add(o);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1302:10: ( attribute_target_specifier )?
                	int alt142 = 2;
                	int LA142_0 = input.LA(1);

                	if ( (LA142_0 == 239 || (LA142_0 >= 241 && LA142_0 <= 244)) )
                	{
                	    int LA142_1 = input.LA(2);

                	    if ( (LA142_1 == 211) )
                	    {
                	        alt142 = 1;
                	    }
                	}
                	else if ( (LA142_0 == RETURN || LA142_0 == 240) )
                	{
                	    alt142 = 1;
                	}
                	switch (alt142) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1302:10: attribute_target_specifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attribute_target_specifier_in_attribute_section6413);
                	        	attribute_target_specifier380 = attribute_target_specifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attribute_target_specifier.Add(attribute_target_specifier380.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_list_in_attribute_section6418);
                	attribute_list381 = attribute_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_attribute_list.Add(attribute_list381.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1302:57: ( ',' )?
                	int alt143 = 2;
                	int LA143_0 = input.LA(1);

                	if ( (LA143_0 == COMMA) )
                	{
                	    alt143 = 1;
                	}
                	switch (alt143) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1302:57: ','
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal382=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_attribute_section6422); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal382);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal383=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_attribute_section6427); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACKET.Add(char_literal383);



                	// AST REWRITE
                	// elements:          attribute_list, attribute_target_specifier
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1302:68: -> ^( ATTRIBUTE[$o.token, \"ATTRIBUTE\"] ( attribute_target_specifier )? attribute_list )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1302:71: ^( ATTRIBUTE[$o.token, \"ATTRIBUTE\"] ( attribute_target_specifier )? attribute_list )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTE, o.token, "ATTRIBUTE"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1302:106: ( attribute_target_specifier )?
                	    if ( stream_attribute_target_specifier.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_attribute_target_specifier.NextTree());

                	    }
                	    stream_attribute_target_specifier.Reset();
                	    adaptor.AddChild(root_1, stream_attribute_list.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_section"

        public class attribute_target_specifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_target_specifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1303:1: attribute_target_specifier : attribute_target ':' ;
        public JavaMaker.attribute_target_specifier_return attribute_target_specifier() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_target_specifier_return retval = new JavaMaker.attribute_target_specifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal385 = null;
            JavaMaker.attribute_target_return attribute_target384 = default(JavaMaker.attribute_target_return);


            CommonTree char_literal385_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1303:27: ( attribute_target ':' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1304:2: attribute_target ':'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_target_in_attribute_target_specifier6449);
                	attribute_target384 = attribute_target();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_target384.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal385=(CommonTree)Match(input,211,FOLLOW_211_in_attribute_target_specifier6453); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal385_tree = (CommonTree)adaptor.DupNode(char_literal385);

                		adaptor.AddChild(root_0, char_literal385_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_target_specifier"

        public class attribute_target_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_target"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1305:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
        public JavaMaker.attribute_target_return attribute_target() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_target_return retval = new JavaMaker.attribute_target_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set386 = null;

            CommonTree set386_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1305:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set386 = (CommonTree)input.LT(1);
                	if ( input.LA(1) == RETURN || (input.LA(1) >= 239 && input.LA(1) <= 244) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set386_tree = (CommonTree)adaptor.DupNode(set386);

                	    adaptor.AddChild(root_0, set386_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_target"

        public class attribute_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1307:1: attribute_list : attribute ( ',' attribute )* ;
        public JavaMaker.attribute_list_return attribute_list() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_list_return retval = new JavaMaker.attribute_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal388 = null;
            JavaMaker.attribute_return attribute387 = default(JavaMaker.attribute_return);

            JavaMaker.attribute_return attribute389 = default(JavaMaker.attribute_return);


            CommonTree char_literal388_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1307:15: ( attribute ( ',' attribute )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1308:2: attribute ( ',' attribute )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_in_attribute_list6495);
                	attribute387 = attribute();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute387.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1308:12: ( ',' attribute )*
                	do 
                	{
                	    int alt144 = 2;
                	    int LA144_0 = input.LA(1);

                	    if ( (LA144_0 == COMMA) )
                	    {
                	        int LA144_1 = input.LA(2);

                	        if ( (LA144_1 == IDENTIFIER || (LA144_1 >= ELIF && LA144_1 <= UNDEF) || LA144_1 == 195 || LA144_1 == 221 || (LA144_1 >= 224 && LA144_1 <= 239) || (LA144_1 >= 241 && LA144_1 <= 244) || (LA144_1 >= 247 && LA144_1 <= 250) || LA144_1 == 256 || (LA144_1 >= 263 && LA144_1 <= 264) || LA144_1 == 274 || LA144_1 == 277) )
                	        {
                	            alt144 = 1;
                	        }


                	    }


                	    switch (alt144) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1308:13: ',' attribute
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal388=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_attribute_list6498); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal388_tree = (CommonTree)adaptor.DupNode(char_literal388);

                			    		adaptor.AddChild(root_0, char_literal388_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_attribute_in_attribute_list6500);
                			    	attribute389 = attribute();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, attribute389.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop144;
                	    }
                	} while (true);

                	loop144:
                		;	// Stops C# compiler whining that label 'loop144' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_list"

        public class attribute_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1309:1: attribute : type_name ( attribute_arguments )? ;
        public JavaMaker.attribute_return attribute() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_return retval = new JavaMaker.attribute_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_name_return type_name390 = default(JavaMaker.type_name_return);

            JavaMaker.attribute_arguments_return attribute_arguments391 = default(JavaMaker.attribute_arguments_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1309:10: ( type_name ( attribute_arguments )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1310:2: type_name ( attribute_arguments )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_attribute6512);
                	type_name390 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_name390.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1310:14: ( attribute_arguments )?
                	int alt145 = 2;
                	int LA145_0 = input.LA(1);

                	if ( (LA145_0 == LPAREN) )
                	{
                	    alt145 = 1;
                	}
                	switch (alt145) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1310:14: attribute_arguments
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attribute_arguments_in_attribute6516);
                	        	attribute_arguments391 = attribute_arguments();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attribute_arguments391.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute"

        public class attribute_arguments_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_arguments"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1312:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
        public JavaMaker.attribute_arguments_return attribute_arguments() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_arguments_return retval = new JavaMaker.attribute_arguments_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal392 = null;
            CommonTree char_literal393 = null;
            CommonTree char_literal396 = null;
            CommonTree char_literal398 = null;
            JavaMaker.positional_argument_return positional_argument394 = default(JavaMaker.positional_argument_return);

            JavaMaker.named_argument_return named_argument395 = default(JavaMaker.named_argument_return);

            JavaMaker.positional_argument_return positional_argument397 = default(JavaMaker.positional_argument_return);


            CommonTree char_literal392_tree=null;
            CommonTree char_literal393_tree=null;
            CommonTree char_literal396_tree=null;
            CommonTree char_literal398_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1312:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1313:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal392=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_attribute_arguments6527); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal392_tree = (CommonTree)adaptor.DupNode(char_literal392);

                		adaptor.AddChild(root_0, char_literal392_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1313:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
                	int alt147 = 2;
                	int LA147_0 = input.LA(1);

                	if ( (LA147_0 == RPAREN) )
                	{
                	    alt147 = 1;
                	}
                	else if ( ((LA147_0 >= MONONOT && LA147_0 <= MONOTWIDDLE) || LA147_0 == NEW_ARRAY || (LA147_0 >= OBJECT && LA147_0 <= THIS) || LA147_0 == LPAREN || LA147_0 == BIT_AND || (LA147_0 >= PLUS && LA147_0 <= MINUS) || LA147_0 == STAR || (LA147_0 >= BOOL && LA147_0 <= NULL) || (LA147_0 >= ELIF && LA147_0 <= UNDEF) || LA147_0 == 195 || LA147_0 == 197 || LA147_0 == 207 || (LA147_0 >= 209 && LA147_0 <= 210) || (LA147_0 >= 214 && LA147_0 <= 219) || LA147_0 == 221 || (LA147_0 >= 224 && LA147_0 <= 239) || (LA147_0 >= 241 && LA147_0 <= 244) || (LA147_0 >= 247 && LA147_0 <= 254) || LA147_0 == 256 || (LA147_0 >= 263 && LA147_0 <= 264) || (LA147_0 >= 274 && LA147_0 <= 277)) )
                	{
                	    alt147 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d147s0 =
                	        new NoViableAltException("", 147, 0, input);

                	    throw nvae_d147s0;
                	}
                	switch (alt147) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1313:9: ')'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal393=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments6532); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal393_tree = (CommonTree)adaptor.DupNode(char_literal393);

                	        		adaptor.AddChild(root_0, char_literal393_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1314:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
                	        {
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1314:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1314:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                	        	{
                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_positional_argument_in_attribute_arguments6552);
                	        		positional_argument394 = positional_argument();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, positional_argument394.Tree);
                	        		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1314:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                	        		do 
                	        		{
                	        		    int alt146 = 3;
                	        		    int LA146_0 = input.LA(1);

                	        		    if ( (LA146_0 == IDENTIFIER) && (synpred26_JavaMaker()) )
                	        		    {
                	        		        alt146 = 1;
                	        		    }
                	        		    else if ( ((LA146_0 >= ELIF && LA146_0 <= UNDEF) || LA146_0 == 195 || LA146_0 == 221 || (LA146_0 >= 224 && LA146_0 <= 239) || (LA146_0 >= 241 && LA146_0 <= 244) || (LA146_0 >= 247 && LA146_0 <= 250) || LA146_0 == 256 || (LA146_0 >= 263 && LA146_0 <= 264) || LA146_0 == 274 || LA146_0 == 277) && (synpred26_JavaMaker()) )
                	        		    {
                	        		        alt146 = 1;
                	        		    }
                	        		    else if ( (LA146_0 == COMMA) )
                	        		    {
                	        		        alt146 = 2;
                	        		    }


                	        		    switch (alt146) 
                	        			{
                	        				case 1 :
                	        				    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1314:32: ( ',' identifier '=' )=> named_argument
                	        				    {
                	        				    	_last = (CommonTree)input.LT(1);
                	        				    	PushFollow(FOLLOW_named_argument_in_attribute_arguments6571);
                	        				    	named_argument395 = named_argument();
                	        				    	state._fsp--;
                	        				    	if (state.failed) return retval;
                	        				    	if ( (state.backtracking==0) ) 
                	        				    	adaptor.AddChild(root_0, named_argument395.Tree);

                	        				    	if ( (state.backtracking==0) ) {
                	        				    	}
                	        				    }
                	        				    break;
                	        				case 2 :
                	        				    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1315:15: ',' positional_argument
                	        				    {
                	        				    	_last = (CommonTree)input.LT(1);
                	        				    	char_literal396=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_attribute_arguments6587); if (state.failed) return retval;
                	        				    	if ( state.backtracking == 0 )
                	        				    	{char_literal396_tree = (CommonTree)adaptor.DupNode(char_literal396);

                	        				    		adaptor.AddChild(root_0, char_literal396_tree);
                	        				    	}
                	        				    	_last = (CommonTree)input.LT(1);
                	        				    	PushFollow(FOLLOW_positional_argument_in_attribute_arguments6589);
                	        				    	positional_argument397 = positional_argument();
                	        				    	state._fsp--;
                	        				    	if (state.failed) return retval;
                	        				    	if ( (state.backtracking==0) ) 
                	        				    	adaptor.AddChild(root_0, positional_argument397.Tree);

                	        				    	if ( (state.backtracking==0) ) {
                	        				    	}
                	        				    }
                	        				    break;

                	        				default:
                	        				    goto loop146;
                	        		    }
                	        		} while (true);

                	        		loop146:
                	        			;	// Stops C# compiler whining that label 'loop146' has no statements


                	        		if ( (state.backtracking==0) ) {
                	        		}
                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal398=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments6600); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal398_tree = (CommonTree)adaptor.DupNode(char_literal398);

                	        		adaptor.AddChild(root_0, char_literal398_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_arguments"

        public class positional_argument_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "positional_argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1318:1: positional_argument_list : a1= positional_argument ( ',' an+= positional_argument )* -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* ) ;
        public JavaMaker.positional_argument_list_return positional_argument_list() // throws RecognitionException [1]
        {   
            JavaMaker.positional_argument_list_return retval = new JavaMaker.positional_argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal399 = null;
            List list_an = null;
            JavaMaker.positional_argument_return a1 = default(JavaMaker.positional_argument_return);

            RuleReturnScope an = null;
            CommonTree char_literal399_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_positional_argument = new RewriteRuleSubtreeStream(adaptor,"rule positional_argument");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1318:25: (a1= positional_argument ( ',' an+= positional_argument )* -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1319:2: a1= positional_argument ( ',' an+= positional_argument )*
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_positional_argument_in_positional_argument_list6616);
                	a1 = positional_argument();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_positional_argument.Add(a1.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1319:25: ( ',' an+= positional_argument )*
                	do 
                	{
                	    int alt148 = 2;
                	    int LA148_0 = input.LA(1);

                	    if ( (LA148_0 == COMMA) )
                	    {
                	        alt148 = 1;
                	    }


                	    switch (alt148) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1319:26: ',' an+= positional_argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal399=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_positional_argument_list6619); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal399);

                			    	_last = (CommonTree)input.LT(1);
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_positional_argument_in_positional_argument_list6623);
                			    	an = positional_argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_positional_argument.Add(an.Tree);
                			    	if (list_an == null) list_an = new ArrayList();
                			    	list_an.Add(an.Tree);


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop148;
                	    }
                	} while (true);

                	loop148:
                		;	// Stops C# compiler whining that label 'loop148' has no statements



                	// AST REWRITE
                	// elements:          an, a1
                	// token labels:      
                	// rule labels:       retval, a1
                	// token list labels: 
                	// rule list labels:  an
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(adaptor, "rule a1", a1!=null ? a1.Tree : null);
                	RewriteRuleSubtreeStream stream_an = new RewriteRuleSubtreeStream(adaptor, "token an", list_an);
                	root_0 = (CommonTree)adaptor.Nil;
                	// 1319:56: -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1319:59: ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, ((a1 != null) ? ((CommonTree)a1.Start) : null).Token, "ARGS"), root_1);

                	    adaptor.AddChild(root_1, stream_a1.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1319:94: ( $an)*
                	    while ( stream_an.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_an.NextTree());

                	    }
                	    stream_an.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "positional_argument_list"

        public class positional_argument_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "positional_argument"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1320:1: positional_argument : attribute_argument_expression ;
        public JavaMaker.positional_argument_return positional_argument() // throws RecognitionException [1]
        {   
            JavaMaker.positional_argument_return retval = new JavaMaker.positional_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.attribute_argument_expression_return attribute_argument_expression400 = default(JavaMaker.attribute_argument_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1320:20: ( attribute_argument_expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1321:2: attribute_argument_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_argument_expression_in_positional_argument6647);
                	attribute_argument_expression400 = attribute_argument_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_argument_expression400.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "positional_argument"

        public class named_argument_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "named_argument_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1322:1: named_argument_list : a1= named_argument ( ',' an+= named_argument )* -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* ) ;
        public JavaMaker.named_argument_list_return named_argument_list() // throws RecognitionException [1]
        {   
            JavaMaker.named_argument_list_return retval = new JavaMaker.named_argument_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal401 = null;
            List list_an = null;
            JavaMaker.named_argument_return a1 = default(JavaMaker.named_argument_return);

            RuleReturnScope an = null;
            CommonTree char_literal401_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_named_argument = new RewriteRuleSubtreeStream(adaptor,"rule named_argument");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1322:20: (a1= named_argument ( ',' an+= named_argument )* -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1323:2: a1= named_argument ( ',' an+= named_argument )*
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_named_argument_in_named_argument_list6658);
                	a1 = named_argument();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_named_argument.Add(a1.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1323:20: ( ',' an+= named_argument )*
                	do 
                	{
                	    int alt149 = 2;
                	    int LA149_0 = input.LA(1);

                	    if ( (LA149_0 == COMMA) )
                	    {
                	        alt149 = 1;
                	    }


                	    switch (alt149) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1323:21: ',' an+= named_argument
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal401=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_named_argument_list6661); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal401);

                			    	_last = (CommonTree)input.LT(1);
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_named_argument_in_named_argument_list6665);
                			    	an = named_argument();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_named_argument.Add(an.Tree);
                			    	if (list_an == null) list_an = new ArrayList();
                			    	list_an.Add(an.Tree);


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop149;
                	    }
                	} while (true);

                	loop149:
                		;	// Stops C# compiler whining that label 'loop149' has no statements



                	// AST REWRITE
                	// elements:          a1, an
                	// token labels:      
                	// rule labels:       retval, a1
                	// token list labels: 
                	// rule list labels:  an
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(adaptor, "rule a1", a1!=null ? a1.Tree : null);
                	RewriteRuleSubtreeStream stream_an = new RewriteRuleSubtreeStream(adaptor, "token an", list_an);
                	root_0 = (CommonTree)adaptor.Nil;
                	// 1323:46: -> ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1323:49: ^( ARGS[$a1.start.Token,\"ARGS\"] $a1 ( $an)* )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, ((a1 != null) ? ((CommonTree)a1.Start) : null).Token, "ARGS"), root_1);

                	    adaptor.AddChild(root_1, stream_a1.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1323:84: ( $an)*
                	    while ( stream_an.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_an.NextTree());

                	    }
                	    stream_an.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "named_argument_list"

        public class named_argument_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "named_argument"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1324:1: named_argument : identifier '=' attribute_argument_expression ;
        public JavaMaker.named_argument_return named_argument() // throws RecognitionException [1]
        {   
            JavaMaker.named_argument_return retval = new JavaMaker.named_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal403 = null;
            JavaMaker.identifier_return identifier402 = default(JavaMaker.identifier_return);

            JavaMaker.attribute_argument_expression_return attribute_argument_expression404 = default(JavaMaker.attribute_argument_expression_return);


            CommonTree char_literal403_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1324:15: ( identifier '=' attribute_argument_expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1325:2: identifier '=' attribute_argument_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_named_argument6689);
                	identifier402 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier402.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal403=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_named_argument6693); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal403_tree = (CommonTree)adaptor.DupNode(char_literal403);

                		adaptor.AddChild(root_0, char_literal403_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_attribute_argument_expression_in_named_argument6697);
                	attribute_argument_expression404 = attribute_argument_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, attribute_argument_expression404.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "named_argument"

        public class attribute_argument_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "attribute_argument_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1326:1: attribute_argument_expression : expression ;
        public JavaMaker.attribute_argument_expression_return attribute_argument_expression() // throws RecognitionException [1]
        {   
            JavaMaker.attribute_argument_expression_return retval = new JavaMaker.attribute_argument_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression405 = default(JavaMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1326:30: ( expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1327:2: expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_attribute_argument_expression6706);
                	expression405 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression405.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "attribute_argument_expression"

        public class class_declaration_return : TreeRuleReturnScope
        {
            public string name;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1333:1: class_declaration[CommonTree atts, CommonTree mods, CommonTree partial, bool toplevel] returns [string name] : c= 'class' identifier ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? class_body ) ;
        public JavaMaker.class_declaration_return class_declaration(CommonTree atts, CommonTree mods, CommonTree partial, bool toplevel) // throws RecognitionException [1]
        {   
            TypeContext_stack.Push(new TypeContext_scope());

            JavaMaker.class_declaration_return retval = new JavaMaker.class_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree char_literal411 = null;
            JavaMaker.identifier_return identifier406 = default(JavaMaker.identifier_return);

            JavaMaker.type_parameter_list_return type_parameter_list407 = default(JavaMaker.type_parameter_list_return);

            JavaMaker.class_base_return class_base408 = default(JavaMaker.class_base_return);

            JavaMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses409 = default(JavaMaker.type_parameter_constraints_clauses_return);

            JavaMaker.class_body_return class_body410 = default(JavaMaker.class_body_return);


            CommonTree c_tree=null;
            CommonTree char_literal411_tree=null;
            RewriteRuleNodeStream stream_245 = new RewriteRuleNodeStream(adaptor,"token 245");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleSubtreeStream stream_class_body = new RewriteRuleSubtreeStream(adaptor,"rule class_body");
            RewriteRuleSubtreeStream stream_type_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_list");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_class_base = new RewriteRuleSubtreeStream(adaptor,"rule class_base");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

                CommonTree mangledMods = toplevel ? mkRemoveMods(mods, new int[] {STATIC}) : addModifier(mods, (CommonTree)adaptor.Create(STATIC, "static"));
                // If no access modifier then type is internal, which we relax to public
                if (toplevel && !containsMods(mangledMods, new int[] {PUBLIC, PRIVATE})) {
                   mangledMods =  addModifier(mangledMods, (CommonTree)adaptor.Create(PUBLIC, "public"));
                }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1342:1: (c= 'class' identifier ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? class_body ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:2: c= 'class' identifier ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
                {
                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,245,FOLLOW_245_in_class_declaration6737); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_245.Add(c);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_class_declaration6739);
                	identifier406 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier406.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   ((TypeContext_scope)TypeContext_stack.Peek()).typeName =  ((identifier406 != null) ? identifier406.thetext : default(string)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:74: ( type_parameter_list )?
                	int alt150 = 2;
                	int LA150_0 = input.LA(1);

                	if ( (LA150_0 == LTHAN) )
                	{
                	    alt150 = 1;
                	}
                	switch (alt150) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:74: type_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_list_in_class_declaration6744);
                	        	type_parameter_list407 = type_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_list.Add(type_parameter_list407.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   retval.name =  mkGenericTypeAlias(((identifier406 != null) ? identifier406.thetext : default(string)), ((type_parameter_list407 != null) ? type_parameter_list407.names : default(List<string>))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:177: ( class_base )?
                	int alt151 = 2;
                	int LA151_0 = input.LA(1);

                	if ( (LA151_0 == 211) )
                	{
                	    alt151 = 1;
                	}
                	switch (alt151) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:177: class_base
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_base_in_class_declaration6750);
                	        	class_base408 = class_base();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_class_base.Add(class_base408.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:191: ( type_parameter_constraints_clauses )?
                	int alt152 = 2;
                	int LA152_0 = input.LA(1);

                	if ( (LA152_0 == 236) )
                	{
                	    alt152 = 1;
                	}
                	switch (alt152) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:191: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration6755);
                	        	type_parameter_constraints_clauses409 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses409.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_class_body_in_class_declaration6760);
                	class_body410 = class_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_class_body.Add(class_body410.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:240: ( ';' )?
                	int alt153 = 2;
                	int LA153_0 = input.LA(1);

                	if ( (LA153_0 == SEMI) )
                	{
                	    alt153 = 1;
                	}
                	switch (alt153) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1343:240: ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal411=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_class_declaration6762); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal411);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}



                	// AST REWRITE
                	// elements:          class_body, type_parameter_constraints_clauses, type_parameter_list, identifier, class_base
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1344:5: -> ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? class_body )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1344:8: ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? class_body )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS, c.token, "class"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(partial) );
                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  mangledMods );
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1344:103: ( type_parameter_constraints_clauses )?
                	    if ( stream_type_parameter_constraints_clauses.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_constraints_clauses.NextTree());

                	    }
                	    stream_type_parameter_constraints_clauses.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1344:139: ( type_parameter_list )?
                	    if ( stream_type_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_list.NextTree());

                	    }
                	    stream_type_parameter_list.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1344:160: ( class_base )?
                	    if ( stream_class_base.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_class_base.NextTree());

                	    }
                	    stream_class_base.Reset();
                	    adaptor.AddChild(root_1, stream_class_body.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                TypeContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "class_declaration"

        public class type_parameter_list_return : TreeRuleReturnScope
        {
            public List<string> names;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1346:1: type_parameter_list returns [List<string> names] : '<' ( attributes )? t1= type_parameter ( ',' ( attributes )? tn= type_parameter )* '>' ;
        public JavaMaker.type_parameter_list_return type_parameter_list() // throws RecognitionException [1]
        {   
            JavaMaker.type_parameter_list_return retval = new JavaMaker.type_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal412 = null;
            CommonTree char_literal414 = null;
            CommonTree char_literal416 = null;
            JavaMaker.type_parameter_return t1 = default(JavaMaker.type_parameter_return);

            JavaMaker.type_parameter_return tn = default(JavaMaker.type_parameter_return);

            JavaMaker.attributes_return attributes413 = default(JavaMaker.attributes_return);

            JavaMaker.attributes_return attributes415 = default(JavaMaker.attributes_return);


            CommonTree char_literal412_tree=null;
            CommonTree char_literal414_tree=null;
            CommonTree char_literal416_tree=null;


                List<string> names = new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1349:2: ( '<' ( attributes )? t1= type_parameter ( ',' ( attributes )? tn= type_parameter )* '>' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1350:5: '<' ( attributes )? t1= type_parameter ( ',' ( attributes )? tn= type_parameter )* '>'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal412=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_type_parameter_list6816); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1350:10: ( attributes )?
                	int alt154 = 2;
                	int LA154_0 = input.LA(1);

                	if ( (LA154_0 == OPEN_BRACKET) )
                	{
                	    alt154 = 1;
                	}
                	switch (alt154) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1350:10: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_type_parameter_list6819);
                	        	attributes413 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attributes413.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_parameter_in_type_parameter_list6824);
                	t1 = type_parameter();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, t1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   names.Add(((t1 != null) ? t1.name : default(string))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1350:65: ( ',' ( attributes )? tn= type_parameter )*
                	do 
                	{
                	    int alt156 = 2;
                	    int LA156_0 = input.LA(1);

                	    if ( (LA156_0 == COMMA) )
                	    {
                	        alt156 = 1;
                	    }


                	    switch (alt156) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1350:67: ',' ( attributes )? tn= type_parameter
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal414=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_type_parameter_list6830); if (state.failed) return retval;
                			    	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1350:73: ( attributes )?
                			    	int alt155 = 2;
                			    	int LA155_0 = input.LA(1);

                			    	if ( (LA155_0 == OPEN_BRACKET) )
                			    	{
                			    	    alt155 = 1;
                			    	}
                			    	switch (alt155) 
                			    	{
                			    	    case 1 :
                			    	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1350:73: attributes
                			    	        {
                			    	        	_last = (CommonTree)input.LT(1);
                			    	        	PushFollow(FOLLOW_attributes_in_type_parameter_list6834);
                			    	        	attributes415 = attributes();
                			    	        	state._fsp--;
                			    	        	if (state.failed) return retval;
                			    	        	if ( (state.backtracking==0) ) 
                			    	        	adaptor.AddChild(root_0, attributes415.Tree);

                			    	        	if ( (state.backtracking==0) ) {
                			    	        	}
                			    	        }
                			    	        break;

                			    	}

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_parameter_in_type_parameter_list6839);
                			    	tn = type_parameter();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, tn.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   names.Add(((tn != null) ? tn.name : default(string))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop156;
                	    }
                	} while (true);

                	loop156:
                		;	// Stops C# compiler whining that label 'loop156' has no statements

                	_last = (CommonTree)input.LT(1);
                	char_literal416=(CommonTree)Match(input,GT,FOLLOW_GT_in_type_parameter_list6845); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter_list"

        public class type_parameter_return : TreeRuleReturnScope
        {
            public string name;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1352:1: type_parameter returns [string name] : identifier ;
        public JavaMaker.type_parameter_return type_parameter() // throws RecognitionException [1]
        {   
            JavaMaker.type_parameter_return retval = new JavaMaker.type_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.identifier_return identifier417 = default(JavaMaker.identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1352:37: ( identifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1353:5: identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_type_parameter6862);
                	identifier417 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier417.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.name =  ((identifier417 != null) ? identifier417.thetext : default(string)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter"

        public class class_base_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_base"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1355:1: class_base : ':' ts+= type ( ',' ts+= type )* -> ( ^( IMPLEMENTS $ts) )* ;
        public JavaMaker.class_base_return class_base() // throws RecognitionException [1]
        {   
            JavaMaker.class_base_return retval = new JavaMaker.class_base_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal418 = null;
            CommonTree char_literal419 = null;
            List list_ts = null;
            RuleReturnScope ts = null;
            CommonTree char_literal418_tree=null;
            CommonTree char_literal419_tree=null;
            RewriteRuleNodeStream stream_211 = new RewriteRuleNodeStream(adaptor,"token 211");
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1355:11: ( ':' ts+= type ( ',' ts+= type )* -> ( ^( IMPLEMENTS $ts) )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1357:2: ':' ts+= type ( ',' ts+= type )*
                {
                	_last = (CommonTree)input.LT(1);
                	char_literal418=(CommonTree)Match(input,211,FOLLOW_211_in_class_base6875); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_211.Add(char_literal418);

                	_last = (CommonTree)input.LT(1);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_class_base6881);
                	ts = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(ts.Tree);
                	if (list_ts == null) list_ts = new ArrayList();
                	list_ts.Add(ts.Tree);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1357:17: ( ',' ts+= type )*
                	do 
                	{
                	    int alt157 = 2;
                	    int LA157_0 = input.LA(1);

                	    if ( (LA157_0 == COMMA) )
                	    {
                	        alt157 = 1;
                	    }


                	    switch (alt157) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1357:18: ',' ts+= type
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal419=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_class_base6884); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal419);

                			    	_last = (CommonTree)input.LT(1);
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_in_class_base6890);
                			    	ts = type();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_type.Add(ts.Tree);
                			    	if (list_ts == null) list_ts = new ArrayList();
                			    	list_ts.Add(ts.Tree);


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop157;
                	    }
                	} while (true);

                	loop157:
                		;	// Stops C# compiler whining that label 'loop157' has no statements



                	// AST REWRITE
                	// elements:          ts
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  ts
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_ts = new RewriteRuleSubtreeStream(adaptor, "token ts", list_ts);
                	root_0 = (CommonTree)adaptor.Nil;
                	// 1357:35: -> ( ^( IMPLEMENTS $ts) )*
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1357:38: ( ^( IMPLEMENTS $ts) )*
                	    while ( stream_ts.HasNext )
                	    {
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1357:38: ^( IMPLEMENTS $ts)
                	        {
                	        CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                	        adaptor.AddChild(root_1, stream_ts.NextTree());

                	        adaptor.AddChild(root_0, root_1);
                	        }

                	    }
                	    stream_ts.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_base"

        public class class_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1362:1: class_body : '{' ( class_member_declarations )? '}' ;
        public JavaMaker.class_body_return class_body() // throws RecognitionException [1]
        {   
            JavaMaker.class_body_return retval = new JavaMaker.class_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal420 = null;
            CommonTree char_literal422 = null;
            JavaMaker.class_member_declarations_return class_member_declarations421 = default(JavaMaker.class_member_declarations_return);


            CommonTree char_literal420_tree=null;
            CommonTree char_literal422_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1362:11: ( '{' ( class_member_declarations )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1363:2: '{' ( class_member_declarations )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal420=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_class_body6914); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal420_tree = (CommonTree)adaptor.DupNode(char_literal420);

                		adaptor.AddChild(root_0, char_literal420_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1363:8: ( class_member_declarations )?
                	int alt158 = 2;
                	int LA158_0 = input.LA(1);

                	if ( (LA158_0 == ENUM || LA158_0 == MONOTWIDDLE || (LA158_0 >= PUBLIC && LA158_0 <= STATIC) || LA158_0 == OBJECT || LA158_0 == OPEN_BRACKET || (LA158_0 >= BOOL && LA158_0 <= IDENTIFIER) || (LA158_0 >= ELIF && LA158_0 <= UNDEF) || (LA158_0 >= 194 && LA158_0 <= 206) || LA158_0 == 218 || LA158_0 == 221 || (LA158_0 >= 224 && LA158_0 <= 245) || (LA158_0 >= 247 && LA158_0 <= 256) || LA158_0 == 258 || (LA158_0 >= 260 && LA158_0 <= 261) || (LA158_0 >= 263 && LA158_0 <= 264) || (LA158_0 >= 274 && LA158_0 <= 277)) )
                	{
                	    alt158 = 1;
                	}
                	switch (alt158) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1363:8: class_member_declarations
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_member_declarations_in_class_body6918);
                	        	class_member_declarations421 = class_member_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, class_member_declarations421.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal422=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_class_body6922); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal422_tree = (CommonTree)adaptor.DupNode(char_literal422);

                		adaptor.AddChild(root_0, char_literal422_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_body"

        public class class_member_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "class_member_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1364:1: class_member_declarations : ( class_member_declaration )+ ;
        public JavaMaker.class_member_declarations_return class_member_declarations() // throws RecognitionException [1]
        {   
            JavaMaker.class_member_declarations_return retval = new JavaMaker.class_member_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.class_member_declaration_return class_member_declaration423 = default(JavaMaker.class_member_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1364:26: ( ( class_member_declaration )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1365:2: ( class_member_declaration )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1365:2: ( class_member_declaration )+
                	int cnt159 = 0;
                	do 
                	{
                	    int alt159 = 2;
                	    int LA159_0 = input.LA(1);

                	    if ( (LA159_0 == ENUM || LA159_0 == MONOTWIDDLE || (LA159_0 >= PUBLIC && LA159_0 <= STATIC) || LA159_0 == OBJECT || LA159_0 == OPEN_BRACKET || (LA159_0 >= BOOL && LA159_0 <= IDENTIFIER) || (LA159_0 >= ELIF && LA159_0 <= UNDEF) || (LA159_0 >= 194 && LA159_0 <= 206) || LA159_0 == 218 || LA159_0 == 221 || (LA159_0 >= 224 && LA159_0 <= 245) || (LA159_0 >= 247 && LA159_0 <= 256) || LA159_0 == 258 || (LA159_0 >= 260 && LA159_0 <= 261) || (LA159_0 >= 263 && LA159_0 <= 264) || (LA159_0 >= 274 && LA159_0 <= 277)) )
                	    {
                	        alt159 = 1;
                	    }


                	    switch (alt159) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1365:2: class_member_declaration
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_class_member_declaration_in_class_member_declarations6931);
                			    	class_member_declaration423 = class_member_declaration();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, class_member_declaration423.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt159 >= 1 ) goto loop159;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee159 =
                		                new EarlyExitException(159, input);
                		            throw eee159;
                	    }
                	    cnt159++;
                	} while (true);

                	loop159:
                		;	// Stops C# compiler whining that label 'loop159' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "class_member_declarations"

        public class constant_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1368:1: constant_declaration : 'const' type constant_declarators ';' ;
        public JavaMaker.constant_declaration_return constant_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.constant_declaration_return retval = new JavaMaker.constant_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal424 = null;
            CommonTree char_literal427 = null;
            JavaMaker.type_return type425 = default(JavaMaker.type_return);

            JavaMaker.constant_declarators_return constant_declarators426 = default(JavaMaker.constant_declarators_return);


            CommonTree string_literal424_tree=null;
            CommonTree char_literal427_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1368:21: ( 'const' type constant_declarators ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1369:2: 'const' type constant_declarators ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal424=(CommonTree)Match(input,205,FOLLOW_205_in_constant_declaration6942); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal424_tree = (CommonTree)adaptor.DupNode(string_literal424);

                		adaptor.AddChild(root_0, string_literal424_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_constant_declaration6946);
                	type425 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type425.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_constant_declarators_in_constant_declaration6950);
                	constant_declarators426 = constant_declarators();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, constant_declarators426.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal427=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_constant_declaration6954); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal427_tree = (CommonTree)adaptor.DupNode(char_literal427);

                		adaptor.AddChild(root_0, char_literal427_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_declaration"

        public class constant_declarators_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1370:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
        public JavaMaker.constant_declarators_return constant_declarators() // throws RecognitionException [1]
        {   
            JavaMaker.constant_declarators_return retval = new JavaMaker.constant_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal429 = null;
            JavaMaker.constant_declarator_return constant_declarator428 = default(JavaMaker.constant_declarator_return);

            JavaMaker.constant_declarator_return constant_declarator430 = default(JavaMaker.constant_declarator_return);


            CommonTree char_literal429_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1370:21: ( constant_declarator ( ',' constant_declarator )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1371:2: constant_declarator ( ',' constant_declarator )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_constant_declarator_in_constant_declarators6962);
                	constant_declarator428 = constant_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, constant_declarator428.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1371:22: ( ',' constant_declarator )*
                	do 
                	{
                	    int alt160 = 2;
                	    int LA160_0 = input.LA(1);

                	    if ( (LA160_0 == COMMA) )
                	    {
                	        alt160 = 1;
                	    }


                	    switch (alt160) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1371:23: ',' constant_declarator
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal429=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_constant_declarators6965); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal429_tree = (CommonTree)adaptor.DupNode(char_literal429);

                			    		adaptor.AddChild(root_0, char_literal429_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_constant_declarator_in_constant_declarators6967);
                			    	constant_declarator430 = constant_declarator();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, constant_declarator430.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop160;
                	    }
                	} while (true);

                	loop160:
                		;	// Stops C# compiler whining that label 'loop160' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_declarators"

        public class constant_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1372:1: constant_declarator : identifier ( '=' constant_expression )? ;
        public JavaMaker.constant_declarator_return constant_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.constant_declarator_return retval = new JavaMaker.constant_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal432 = null;
            JavaMaker.identifier_return identifier431 = default(JavaMaker.identifier_return);

            JavaMaker.constant_expression_return constant_expression433 = default(JavaMaker.constant_expression_return);


            CommonTree char_literal432_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1372:20: ( identifier ( '=' constant_expression )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1373:2: identifier ( '=' constant_expression )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_constant_declarator6977);
                	identifier431 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier431.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1373:15: ( '=' constant_expression )?
                	int alt161 = 2;
                	int LA161_0 = input.LA(1);

                	if ( (LA161_0 == ASSIGN) )
                	{
                	    alt161 = 1;
                	}
                	switch (alt161) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1373:16: '=' constant_expression
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal432=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_constant_declarator6982); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal432_tree = (CommonTree)adaptor.DupNode(char_literal432);

                	        		adaptor.AddChild(root_0, char_literal432_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_constant_expression_in_constant_declarator6986);
                	        	constant_expression433 = constant_expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, constant_expression433.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_declarator"

        public class constant_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constant_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1374:1: constant_expression : expression ;
        public JavaMaker.constant_expression_return constant_expression() // throws RecognitionException [1]
        {   
            JavaMaker.constant_expression_return retval = new JavaMaker.constant_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression434 = default(JavaMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1374:20: ( expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1375:2: expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_constant_expression6996);
                	expression434 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression434.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constant_expression"

        public class field_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "field_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1378:1: field_declaration : variable_declarators ';' ;
        public JavaMaker.field_declaration_return field_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.field_declaration_return retval = new JavaMaker.field_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal436 = null;
            JavaMaker.variable_declarators_return variable_declarators435 = default(JavaMaker.variable_declarators_return);


            CommonTree char_literal436_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1378:18: ( variable_declarators ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1379:2: variable_declarators ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variable_declarators_in_field_declaration7005);
                	variable_declarators435 = variable_declarators();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, variable_declarators435.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal436=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_field_declaration7009); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "field_declaration"

        public class variable_declarators_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1380:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
        public JavaMaker.variable_declarators_return variable_declarators() // throws RecognitionException [1]
        {   
            JavaMaker.variable_declarators_return retval = new JavaMaker.variable_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal438 = null;
            JavaMaker.variable_declarator_return variable_declarator437 = default(JavaMaker.variable_declarator_return);

            JavaMaker.variable_declarator_return variable_declarator439 = default(JavaMaker.variable_declarator_return);


            CommonTree char_literal438_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1380:21: ( variable_declarator ( ',' variable_declarator )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1381:2: variable_declarator ( ',' variable_declarator )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7018);
                	variable_declarator437 = variable_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, variable_declarator437.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1381:22: ( ',' variable_declarator )*
                	do 
                	{
                	    int alt162 = 2;
                	    int LA162_0 = input.LA(1);

                	    if ( (LA162_0 == COMMA) )
                	    {
                	        alt162 = 1;
                	    }


                	    switch (alt162) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1381:23: ',' variable_declarator
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal438=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_variable_declarators7021); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal438_tree = (CommonTree)adaptor.DupNode(char_literal438);

                			    		adaptor.AddChild(root_0, char_literal438_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7025);
                			    	variable_declarator439 = variable_declarator();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, variable_declarator439.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop162;
                	    }
                	} while (true);

                	loop162:
                		;	// Stops C# compiler whining that label 'loop162' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_declarators"

        public class variable_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variable_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1382:1: variable_declarator : type_name ( '=' variable_initializer )? ;
        public JavaMaker.variable_declarator_return variable_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.variable_declarator_return retval = new JavaMaker.variable_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal441 = null;
            JavaMaker.type_name_return type_name440 = default(JavaMaker.type_name_return);

            JavaMaker.variable_initializer_return variable_initializer442 = default(JavaMaker.variable_initializer_return);


            CommonTree char_literal441_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1382:20: ( type_name ( '=' variable_initializer )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1383:2: type_name ( '=' variable_initializer )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_variable_declarator7035);
                	type_name440 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_name440.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1383:12: ( '=' variable_initializer )?
                	int alt163 = 2;
                	int LA163_0 = input.LA(1);

                	if ( (LA163_0 == ASSIGN) )
                	{
                	    alt163 = 1;
                	}
                	switch (alt163) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1383:13: '=' variable_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal441=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_variable_declarator7038); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal441_tree = (CommonTree)adaptor.DupNode(char_literal441);

                	        		adaptor.AddChild(root_0, char_literal441_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variable_initializer_in_variable_declarator7042);
                	        	variable_initializer442 = variable_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, variable_initializer442.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variable_declarator"

        public class method_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "method_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1386:1: method_declaration[CommonTree atts, CommonTree mods, List<string> modList, CommonTree type, string typeText, bool isPartial] : member_name ( type_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ( throw_exceptions )? b= method_body[isToString || isGetHashCode || (isEquals && isEqualsArg) || isClone] argParam= magicMainArgs[isMain && isMainHasArg, $member_name.tree.Token] mainApply= magicMainApply[isMain, $member_name.tree.Token, (isMain ? $TypeContext::typeName : null), $argParam.tree] mainCall= magicMainExit[isMain, isInt, $member_name.tree.Token, $mainApply.tree] mainMethod= magicMainWrapper[isMain, $member_name.tree.Token, $mainCall.tree] magicIdentifier[$member_name.tree.Token, newMethodName] -> {!($isPartial && $b.isEmpty)}? ( $mainMethod)? ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? $b) ->;
        public JavaMaker.method_declaration_return method_declaration(CommonTree atts, CommonTree mods, List<string> modList, CommonTree type, string typeText, bool isPartial) // throws RecognitionException [1]
        {   
            JavaMaker.method_declaration_return retval = new JavaMaker.method_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal445 = null;
            CommonTree char_literal447 = null;
            JavaMaker.method_body_return b = default(JavaMaker.method_body_return);

            JavaMaker.magicMainArgs_return argParam = default(JavaMaker.magicMainArgs_return);

            JavaMaker.magicMainApply_return mainApply = default(JavaMaker.magicMainApply_return);

            JavaMaker.magicMainExit_return mainCall = default(JavaMaker.magicMainExit_return);

            JavaMaker.magicMainWrapper_return mainMethod = default(JavaMaker.magicMainWrapper_return);

            JavaMaker.member_name_return member_name443 = default(JavaMaker.member_name_return);

            JavaMaker.type_parameter_list_return type_parameter_list444 = default(JavaMaker.type_parameter_list_return);

            JavaMaker.formal_parameter_list_return formal_parameter_list446 = default(JavaMaker.formal_parameter_list_return);

            JavaMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses448 = default(JavaMaker.type_parameter_constraints_clauses_return);

            JavaMaker.throw_exceptions_return throw_exceptions449 = default(JavaMaker.throw_exceptions_return);

            JavaMaker.magicIdentifier_return magicIdentifier450 = default(JavaMaker.magicIdentifier_return);


            CommonTree char_literal445_tree=null;
            CommonTree char_literal447_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_magicMainApply = new RewriteRuleSubtreeStream(adaptor,"rule magicMainApply");
            RewriteRuleSubtreeStream stream_magicMainExit = new RewriteRuleSubtreeStream(adaptor,"rule magicMainExit");
            RewriteRuleSubtreeStream stream_throw_exceptions = new RewriteRuleSubtreeStream(adaptor,"rule throw_exceptions");
            RewriteRuleSubtreeStream stream_magicIdentifier = new RewriteRuleSubtreeStream(adaptor,"rule magicIdentifier");
            RewriteRuleSubtreeStream stream_magicMainArgs = new RewriteRuleSubtreeStream(adaptor,"rule magicMainArgs");
            RewriteRuleSubtreeStream stream_magicMainWrapper = new RewriteRuleSubtreeStream(adaptor,"rule magicMainWrapper");
            RewriteRuleSubtreeStream stream_type_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_list");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            RewriteRuleSubtreeStream stream_method_body = new RewriteRuleSubtreeStream(adaptor,"rule method_body");
            RewriteRuleSubtreeStream stream_member_name = new RewriteRuleSubtreeStream(adaptor,"rule member_name");

                bool isToString = false;
                bool isClone = false;
                bool isEquals = false;
                bool isEqualsArg = false;
                CommonTree exceptions = null;
                CommonTree optMain = null;
                bool isVoid = typeText == "void";
                bool isInt = typeText == "int"  || typeText == "System.Int32" || typeText == "Int32";
                bool isBool = typeText == "bool"  || typeText == "System.Boolean" || typeText == "Boolean";
                bool isMain = isVoid || isInt;
                bool isMainHasArg = false;
                bool isGetHashCode = isInt;
                string newMethodName = "";

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1401:2: ( member_name ( type_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ( throw_exceptions )? b= method_body[isToString || isGetHashCode || (isEquals && isEqualsArg) || isClone] argParam= magicMainArgs[isMain && isMainHasArg, $member_name.tree.Token] mainApply= magicMainApply[isMain, $member_name.tree.Token, (isMain ? $TypeContext::typeName : null), $argParam.tree] mainCall= magicMainExit[isMain, isInt, $member_name.tree.Token, $mainApply.tree] mainMethod= magicMainWrapper[isMain, $member_name.tree.Token, $mainCall.tree] magicIdentifier[$member_name.tree.Token, newMethodName] -> {!($isPartial && $b.isEmpty)}? ( $mainMethod)? ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? $b) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1404:3: member_name ( type_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ( throw_exceptions )? b= method_body[isToString || isGetHashCode || (isEquals && isEqualsArg) || isClone] argParam= magicMainArgs[isMain && isMainHasArg, $member_name.tree.Token] mainApply= magicMainApply[isMain, $member_name.tree.Token, (isMain ? $TypeContext::typeName : null), $argParam.tree] mainCall= magicMainExit[isMain, isInt, $member_name.tree.Token, $mainApply.tree] mainMethod= magicMainWrapper[isMain, $member_name.tree.Token, $mainCall.tree] magicIdentifier[$member_name.tree.Token, newMethodName]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_name_in_method_declaration7082);
                	member_name443 = member_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_member_name.Add(member_name443.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   isToString = ((member_name443 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(member_name443.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(member_name443.Start)) : null) == "ToString"; 
                	                        isGetHashCode &= ((member_name443 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(member_name443.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(member_name443.Start)) : null) == "GetHashCode"; 
                	                        isEquals = ((member_name443 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(member_name443.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(member_name443.Start)) : null) == "Equals"; 
                	                        isMain &= ((member_name443 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(member_name443.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(member_name443.Start)) : null) == "Main"; 
                	                        isClone = ((member_name443 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(member_name443.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(member_name443.Start)) : null) == "Clone"; 
                	                      
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1410:9: ( type_parameter_list )?
                	int alt164 = 2;
                	int LA164_0 = input.LA(1);

                	if ( (LA164_0 == LTHAN) )
                	{
                	    alt164 = 1;
                	}
                	switch (alt164) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1410:10: type_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_list_in_method_declaration7095);
                	        	type_parameter_list444 = type_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_list.Add(type_parameter_list444.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isToString = false; isMain = false; 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal445=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_method_declaration7110); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal445);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1413:13: ( formal_parameter_list )?
                	int alt165 = 2;
                	int LA165_0 = input.LA(1);

                	if ( ((LA165_0 >= OBJECT && LA165_0 <= THIS) || LA165_0 == OPEN_BRACKET || (LA165_0 >= BOOL && LA165_0 <= IDENTIFIER) || (LA165_0 >= ELIF && LA165_0 <= UNDEF) || LA165_0 == 195 || LA165_0 == 206 || (LA165_0 >= 212 && LA165_0 <= 213) || LA165_0 == 221 || (LA165_0 >= 224 && LA165_0 <= 239) || (LA165_0 >= 241 && LA165_0 <= 244) || (LA165_0 >= 247 && LA165_0 <= 254) || (LA165_0 >= 256 && LA165_0 <= 257) || (LA165_0 >= 263 && LA165_0 <= 264) || (LA165_0 >= 274 && LA165_0 <= 277)) )
                	{
                	    alt165 = 1;
                	}
                	switch (alt165) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1413:14: formal_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_formal_parameter_list_in_method_declaration7139);
                	        	formal_parameter_list446 = formal_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(formal_parameter_list446.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isToString = false; isGetHashCode = false; isClone = false;
                	        	                  isEqualsArg = ((formal_parameter_list446 != null) ? formal_parameter_list446.numArgs : default(int)) == 1;
                	        	                  if (isMain) {
                	        	                      isMain = false;
                	        	                      // since we have an argument, must check its an array of String
                	        	                      if (((formal_parameter_list446 != null) ? ((CommonTree)formal_parameter_list446.Tree) : null) != null && ((formal_parameter_list446 != null) ? ((CommonTree)formal_parameter_list446.Tree) : null).Children != null && ((formal_parameter_list446 != null) ? ((CommonTree)formal_parameter_list446.Tree) : null).Children.Count == 2) {
                	        	                          // parameter list children size is 2 (type arg)
                	        	                          CommonTree argTy = (CommonTree)((formal_parameter_list446 != null) ? ((CommonTree)formal_parameter_list446.Tree) : null).Children[0];
                	        	                          if (argTy != null && argTy.Children != null && argTy.Children.Count == 3) {
                	        	                              // Looking for Children of "String" "[" "]"
                	        	                              if (argTy.Children[0].Text.ToLower() == "string" &&
                	        	                                  argTy.Children[1].Text == "[" &&
                	        	                                  argTy.Children[2].Text == "]") {
                	        	                                  // Bingo!
                	        	                                  isMain = true;
                	        	                                  isMainHasArg = true;
                	        	                              }
                	        	                          } 
                	        	                      }
                	        	                  } 
                	        	                
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal447=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_method_declaration7184); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal447);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1437:9: ( type_parameter_constraints_clauses )?
                	int alt166 = 2;
                	int LA166_0 = input.LA(1);

                	if ( (LA166_0 == 236) )
                	{
                	    alt166 = 1;
                	}
                	switch (alt166) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1437:11: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_declaration7198);
                	        	type_parameter_constraints_clauses448 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses448.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   isToString = false; isEquals = false; isMain = false; isClone = false; 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1439:9: ( throw_exceptions )?
                	int alt167 = 2;
                	int LA167_0 = input.LA(1);

                	if ( (LA167_0 == 246) && ((IsJavaish)) )
                	{
                	    alt167 = 1;
                	}
                	switch (alt167) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1439:9: throw_exceptions
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_throw_exceptions_in_method_declaration7224);
                	        	throw_exceptions449 = throw_exceptions();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_throw_exceptions.Add(throw_exceptions449.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_method_body_in_method_declaration7238);
                	b = method_body(isToString || isGetHashCode || (isEquals && isEqualsArg) || isClone);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_method_body.Add(b.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMainArgs_in_method_declaration7262);
                	argParam = magicMainArgs(isMain && isMainHasArg, ((member_name443 != null) ? ((CommonTree)member_name443.Tree) : null).Token);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMainArgs.Add(argParam.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMainApply_in_method_declaration7275);
                	mainApply = magicMainApply(isMain, ((member_name443 != null) ? ((CommonTree)member_name443.Tree) : null).Token, (isMain ? ((TypeContext_scope)TypeContext_stack.Peek()).typeName : null), ((argParam != null) ? ((CommonTree)argParam.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMainApply.Add(mainApply.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMainExit_in_method_declaration7288);
                	mainCall = magicMainExit(isMain, isInt, ((member_name443 != null) ? ((CommonTree)member_name443.Tree) : null).Token, ((mainApply != null) ? ((CommonTree)mainApply.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMainExit.Add(mainCall.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMainWrapper_in_method_declaration7301);
                	mainMethod = magicMainWrapper(isMain, ((member_name443 != null) ? ((CommonTree)member_name443.Tree) : null).Token, ((mainCall != null) ? ((CommonTree)mainCall.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMainWrapper.Add(mainMethod.Tree);
                	if ( (state.backtracking==0) )
                	{

                	              newMethodName = ((member_name443 != null) ? member_name443.full_name : default(string)).Replace(".","___");
                	          
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicIdentifier_in_method_declaration7329);
                	magicIdentifier450 = magicIdentifier(((member_name443 != null) ? ((CommonTree)member_name443.Tree) : null).Token, newMethodName);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicIdentifier.Add(magicIdentifier450.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   if (isToString) {
                	                ((magicIdentifier450 != null) ? ((CommonTree)magicIdentifier450.Tree) : null).Token.Text = "toString";
                	            }
                	            if (isGetHashCode) {
                	                ((magicIdentifier450 != null) ? ((CommonTree)magicIdentifier450.Tree) : null).Token.Text = "hashCode";
                	            }
                	            if (isEquals && isEqualsArg) {
                	                ((magicIdentifier450 != null) ? ((CommonTree)magicIdentifier450.Tree) : null).Token.Text = "equals";
                	            }
                	            if (isClone) {
                	                ((magicIdentifier450 != null) ? ((CommonTree)magicIdentifier450.Tree) : null).Token.Text = "clone";
                	            }
                	            exceptions = IsJavaish ? ((throw_exceptions449 != null) ? ((CommonTree)throw_exceptions449.Tree) : null) : ((b != null) ? b.exceptionList : default(CommonTree));
                	         
                	}


                	// AST REWRITE
                	// elements:          magicIdentifier, b, type_parameter_list, formal_parameter_list, type_parameter_constraints_clauses, mainMethod
                	// token labels:      
                	// rule labels:       retval, b, mainMethod
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_b = new RewriteRuleSubtreeStream(adaptor, "rule b", b!=null ? b.Tree : null);
                	RewriteRuleSubtreeStream stream_mainMethod = new RewriteRuleSubtreeStream(adaptor, "rule mainMethod", mainMethod!=null ? mainMethod.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1469:8: -> {!($isPartial && $b.isEmpty)}? ( $mainMethod)? ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? $b)
                	if (!(isPartial && ((b != null) ? b.isEmpty : default(bool))))
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1470:11: ( $mainMethod)?
                	    if ( stream_mainMethod.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_mainMethod.NextTree());

                	    }
                	    stream_mainMethod.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1471:11: ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? $b)
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1,  dupTree(type) );
                	    adaptor.AddChild(root_1, stream_magicIdentifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1472:29: ( type_parameter_constraints_clauses )?
                	    if ( stream_type_parameter_constraints_clauses.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_constraints_clauses.NextTree());

                	    }
                	    stream_type_parameter_constraints_clauses.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1472:65: ( type_parameter_list )?
                	    if ( stream_type_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_list.NextTree());

                	    }
                	    stream_type_parameter_list.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1472:86: ( formal_parameter_list )?
                	    if ( stream_formal_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_formal_parameter_list.NextTree());

                	    }
                	    stream_formal_parameter_list.Reset();
                	    adaptor.AddChild(root_1, stream_b.NextTree());
                	    adaptor.AddChild(root_1,  exceptions );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 1473:8: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "method_declaration"

        public class method_body_return : TreeRuleReturnScope
        {
            public CommonTree exceptionList;
            public bool isEmpty;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "method_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1476:1: method_body[bool smotherExceptions] returns [CommonTree exceptionList, bool isEmpty] : ({...}?b= block nb= magicSmotherExceptions[dupTree($b.tree) ] -> $nb | b= block el= magicThrowsException[Cfg.TranslatorBlanketThrow,$b.tree.Token] -> $b);
        public JavaMaker.method_body_return method_body(bool smotherExceptions) // throws RecognitionException [1]
        {   
            JavaMaker.method_body_return retval = new JavaMaker.method_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.block_return b = default(JavaMaker.block_return);

            JavaMaker.magicSmotherExceptions_return nb = default(JavaMaker.magicSmotherExceptions_return);

            JavaMaker.magicThrowsException_return el = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicSmotherExceptions = new RewriteRuleSubtreeStream(adaptor,"rule magicSmotherExceptions");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1476:86: ({...}?b= block nb= magicSmotherExceptions[dupTree($b.tree) ] -> $nb | b= block el= magicThrowsException[Cfg.TranslatorBlanketThrow,$b.tree.Token] -> $b)
                int alt168 = 2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0 == SEMI) )
                {
                    int LA168_1 = input.LA(2);

                    if ( ((smotherExceptions)) )
                    {
                        alt168 = 1;
                    }
                    else if ( (true) )
                    {
                        alt168 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d168s1 =
                            new NoViableAltException("", 168, 1, input);

                        throw nvae_d168s1;
                    }
                }
                else if ( (LA168_0 == OPEN_BRACE) )
                {
                    int LA168_2 = input.LA(2);

                    if ( ((smotherExceptions)) )
                    {
                        alt168 = 1;
                    }
                    else if ( (true) )
                    {
                        alt168 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d168s2 =
                            new NoViableAltException("", 168, 2, input);

                        throw nvae_d168s2;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d168s0 =
                        new NoViableAltException("", 168, 0, input);

                    throw nvae_d168s0;
                }
                switch (alt168) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1477:2: {...}?b= block nb= magicSmotherExceptions[dupTree($b.tree) ]
                        {
                        	if ( !((smotherExceptions)) ) 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    throw new FailedPredicateException(input, "method_body", "smotherExceptions");
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_method_body7443);
                        	b = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_block.Add(b.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicSmotherExceptions_in_method_body7447);
                        	nb = magicSmotherExceptions(dupTree(((b != null) ? ((CommonTree)b.Tree) : null)));
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicSmotherExceptions.Add(nb.Tree);


                        	// AST REWRITE
                        	// elements:          nb
                        	// token labels:      
                        	// rule labels:       retval, nb
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_nb = new RewriteRuleSubtreeStream(adaptor, "rule nb", nb!=null ? nb.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1478:8: -> $nb
                        	{
                        	    adaptor.AddChild(root_0, stream_nb.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1479:6: b= block el= magicThrowsException[Cfg.TranslatorBlanketThrow,$b.tree.Token]
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_method_body7470);
                        	b = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_block.Add(b.Tree);
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicThrowsException_in_method_body7474);
                        	el = magicThrowsException(Cfg.TranslatorBlanketThrow, ((b != null) ? ((CommonTree)b.Tree) : null).Token);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(el.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.exceptionList = ((el != null) ? ((CommonTree)el.Tree) : null); retval.isEmpty =  ((b != null) ? b.isEmpty : default(bool)); 
                        	}


                        	// AST REWRITE
                        	// elements:          b
                        	// token labels:      
                        	// rule labels:       retval, b
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_b = new RewriteRuleSubtreeStream(adaptor, "rule b", b!=null ? b.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1480:8: -> $b
                        	{
                        	    adaptor.AddChild(root_0, stream_b.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "method_body"

        public class throw_exceptions_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "throw_exceptions"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1483:1: throw_exceptions : {...}? => 'throws' javaException ( ',' javaException )* ;
        public JavaMaker.throw_exceptions_return throw_exceptions() // throws RecognitionException [1]
        {   
            JavaMaker.throw_exceptions_return retval = new JavaMaker.throw_exceptions_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal451 = null;
            CommonTree char_literal453 = null;
            JavaMaker.javaException_return javaException452 = default(JavaMaker.javaException_return);

            JavaMaker.javaException_return javaException454 = default(JavaMaker.javaException_return);


            CommonTree string_literal451_tree=null;
            CommonTree char_literal453_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1483:17: ({...}? => 'throws' javaException ( ',' javaException )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1484:4: {...}? => 'throws' javaException ( ',' javaException )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	if ( !((IsJavaish)) ) 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    throw new FailedPredicateException(input, "throw_exceptions", "IsJavaish");
                	}
                	_last = (CommonTree)input.LT(1);
                	string_literal451=(CommonTree)Match(input,246,FOLLOW_246_in_throw_exceptions7516); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_javaException_in_throw_exceptions7519);
                	javaException452 = javaException();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, javaException452.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1484:43: ( ',' javaException )*
                	do 
                	{
                	    int alt169 = 2;
                	    int LA169_0 = input.LA(1);

                	    if ( (LA169_0 == COMMA) )
                	    {
                	        alt169 = 1;
                	    }


                	    switch (alt169) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1484:44: ',' javaException
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal453=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_throw_exceptions7522); if (state.failed) return retval;
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_javaException_in_throw_exceptions7525);
                			    	javaException454 = javaException();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, javaException454.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop169;
                	    }
                	} while (true);

                	loop169:
                		;	// Stops C# compiler whining that label 'loop169' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "throw_exceptions"

        public class javaException_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "javaException"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1487:1: javaException : identifier -> EXCEPTION[$identifier.tree.Token, $identifier.tree.Token.Text] ;
        public JavaMaker.javaException_return javaException() // throws RecognitionException [1]
        {   
            JavaMaker.javaException_return retval = new JavaMaker.javaException_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.identifier_return identifier455 = default(JavaMaker.identifier_return);


            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1487:14: ( identifier -> EXCEPTION[$identifier.tree.Token, $identifier.tree.Token.Text] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1488:5: identifier
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_javaException7543);
                	identifier455 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier455.Tree);


                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1488:16: -> EXCEPTION[$identifier.tree.Token, $identifier.tree.Token.Text]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(EXCEPTION, ((identifier455 != null) ? ((CommonTree)identifier455.Tree) : null).Token, ((identifier455 != null) ? ((CommonTree)identifier455.Tree) : null).Token.Text));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "javaException"

        public class member_name_return : TreeRuleReturnScope
        {
            public string rawId;
            public string full_name;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1491:1: member_name returns [string rawId, string full_name] : ( type_or_generic '.' )* i= identifier ;
        public JavaMaker.member_name_return member_name() // throws RecognitionException [1]
        {   
            JavaMaker.member_name_return retval = new JavaMaker.member_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal457 = null;
            JavaMaker.identifier_return i = default(JavaMaker.identifier_return);

            JavaMaker.type_or_generic_return type_or_generic456 = default(JavaMaker.type_or_generic_return);


            CommonTree char_literal457_tree=null;


               retval.full_name =  "";

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1494:2: ( ( type_or_generic '.' )* i= identifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1495:5: ( type_or_generic '.' )* i= identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1495:5: ( type_or_generic '.' )*
                	do 
                	{
                	    int alt170 = 2;
                	    alt170 = dfa170.Predict(input);
                	    switch (alt170) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1495:6: type_or_generic '.'
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_or_generic_in_member_name7570);
                			    	type_or_generic456 = type_or_generic();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, type_or_generic456.Tree);
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal457=(CommonTree)Match(input,DOT,FOLLOW_DOT_in_member_name7572); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal457_tree = (CommonTree)adaptor.DupNode(char_literal457);

                			    		adaptor.AddChild(root_0, char_literal457_tree);
                			    	}
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	  retval.full_name += mkTypeOrGenericString(((type_or_generic456 != null) ? type_or_generic456.type : default(string)), ((type_or_generic456 != null) ? type_or_generic456.generic_arguments : default(List<string>))) + ".";
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop170;
                	    }
                	} while (true);

                	loop170:
                		;	// Stops C# compiler whining that label 'loop170' has no statements

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_member_name7585);
                	i = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, i.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.rawId =  ((i != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(i.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(i.Start)) : null); retval.full_name += ((i != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(i.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(i.Start)) : null); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_name"

        public class member_name_orig_return : TreeRuleReturnScope
        {
            public string name;
            public List<string> tyargs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "member_name_orig"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1500:1: member_name_orig returns [string name, List<string> tyargs] : qid ;
        public JavaMaker.member_name_orig_return member_name_orig() // throws RecognitionException [1]
        {   
            JavaMaker.member_name_orig_return retval = new JavaMaker.member_name_orig_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.qid_return qid458 = default(JavaMaker.qid_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1500:60: ( qid )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1501:2: qid
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_qid_in_member_name_orig7608);
                	qid458 = qid();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, qid458.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.name =  ((qid458 != null) ? qid458.name : default(string)); retval.tyargs =  ((qid458 != null) ? qid458.tyargs : default(List<string>)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "member_name_orig"

        protected class property_declaration_scope 
        {
            protected internal bool emptyGetterSetter;
        }
        protected Stack property_declaration_stack = new Stack();

        public class property_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "property_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1504:1: property_declaration[CommonTree atts, CommonTree mods, bool isAbstract, CommonTree type] : i= member_name '{' ads= accessor_declarations[atts, mods, isAbstract, type, $i.text, $i.rawId] '}' v= magicMkPropertyVar[mkPrivateMod($mods, $i.tree.Token), type, \"__\" + $i.tree.Text] -> $ads;
        public JavaMaker.property_declaration_return property_declaration(CommonTree atts, CommonTree mods, bool isAbstract, CommonTree type) // throws RecognitionException [1]
        {   
            property_declaration_stack.Push(new property_declaration_scope());
            JavaMaker.property_declaration_return retval = new JavaMaker.property_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal459 = null;
            CommonTree char_literal460 = null;
            JavaMaker.member_name_return i = default(JavaMaker.member_name_return);

            JavaMaker.accessor_declarations_return ads = default(JavaMaker.accessor_declarations_return);

            JavaMaker.magicMkPropertyVar_return v = default(JavaMaker.magicMkPropertyVar_return);


            CommonTree char_literal459_tree=null;
            CommonTree char_literal460_tree=null;
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleSubtreeStream stream_magicMkPropertyVar = new RewriteRuleSubtreeStream(adaptor,"rule magicMkPropertyVar");
            RewriteRuleSubtreeStream stream_accessor_declarations = new RewriteRuleSubtreeStream(adaptor,"rule accessor_declarations");
            RewriteRuleSubtreeStream stream_member_name = new RewriteRuleSubtreeStream(adaptor,"rule member_name");

                ((property_declaration_scope)property_declaration_stack.Peek()).emptyGetterSetter =  false;
                CommonTree privateVar = null;               

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1510:1: (i= member_name '{' ads= accessor_declarations[atts, mods, isAbstract, type, $i.text, $i.rawId] '}' v= magicMkPropertyVar[mkPrivateMod($mods, $i.tree.Token), type, \"__\" + $i.tree.Text] -> $ads)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1511:2: i= member_name '{' ads= accessor_declarations[atts, mods, isAbstract, type, $i.text, $i.rawId] '}' v= magicMkPropertyVar[mkPrivateMod($mods, $i.tree.Token), type, \"__\" + $i.tree.Text]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_member_name_in_property_declaration7636);
                	i = member_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_member_name.Add(i.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal459=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_property_declaration7640); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(char_literal459);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_accessor_declarations_in_property_declaration7646);
                	ads = accessor_declarations(atts, mods, isAbstract, type, ((i != null) ? input.TokenStream.ToString(
                	  input.TreeAdaptor.GetTokenStartIndex(i.Start),
                	  input.TreeAdaptor.GetTokenStopIndex(i.Start)) : null), ((i != null) ? i.rawId : default(string)));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_accessor_declarations.Add(ads.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal460=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_property_declaration7651); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(char_literal460);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMkPropertyVar_in_property_declaration7664);
                	v = magicMkPropertyVar(mkPrivateMod(mods, ((i != null) ? ((CommonTree)i.Tree) : null).Token), type, "__" + ((i != null) ? ((CommonTree)i.Tree) : null).Text);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMkPropertyVar.Add(v.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   privateVar = !isAbstract && ((property_declaration_scope)property_declaration_stack.Peek()).emptyGetterSetter ? ((v != null) ? ((CommonTree)v.Tree) : null) : null; 
                	}


                	// AST REWRITE
                	// elements:          ads
                	// token labels:      
                	// rule labels:       retval, ads
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_ads = new RewriteRuleSubtreeStream(adaptor, "rule ads", ads!=null ? ads.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1512:183: -> $ads
                	{
                	    adaptor.AddChild(root_0,  privateVar );
                	    adaptor.AddChild(root_0, stream_ads.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                property_declaration_stack.Pop();
            }
            return retval;
        }
        // $ANTLR end "property_declaration"

        public class accessor_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "accessor_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1514:1: accessor_declarations[CommonTree atts, CommonTree mods, bool isAbstract, CommonTree type, string propName, string rawVarName] : ( accessor_declaration[atts, mods, isAbstract, type, propName, rawVarName] )+ ;
        public JavaMaker.accessor_declarations_return accessor_declarations(CommonTree atts, CommonTree mods, bool isAbstract, CommonTree type, string propName, string rawVarName) // throws RecognitionException [1]
        {   
            JavaMaker.accessor_declarations_return retval = new JavaMaker.accessor_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.accessor_declaration_return accessor_declaration461 = default(JavaMaker.accessor_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1514:127: ( ( accessor_declaration[atts, mods, isAbstract, type, propName, rawVarName] )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1515:5: ( accessor_declaration[atts, mods, isAbstract, type, propName, rawVarName] )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1515:5: ( accessor_declaration[atts, mods, isAbstract, type, propName, rawVarName] )+
                	int cnt171 = 0;
                	do 
                	{
                	    int alt171 = 2;
                	    int LA171_0 = input.LA(1);

                	    if ( ((LA171_0 >= PROTECTED && LA171_0 <= INTERNAL) || LA171_0 == OPEN_BRACKET || (LA171_0 >= 247 && LA171_0 <= 248)) )
                	    {
                	        alt171 = 1;
                	    }


                	    switch (alt171) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1515:5: accessor_declaration[atts, mods, isAbstract, type, propName, rawVarName]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_accessor_declaration_in_accessor_declarations7687);
                			    	accessor_declaration461 = accessor_declaration(atts, mods, isAbstract, type, propName, rawVarName);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, accessor_declaration461.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt171 >= 1 ) goto loop171;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee171 =
                		                new EarlyExitException(171, input);
                		            throw eee171;
                	    }
                	    cnt171++;
                	} while (true);

                	loop171:
                		;	// Stops C# compiler whining that label 'loop171' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "accessor_declarations"

        public class accessor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "accessor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1517:1: accessor_declaration[CommonTree atts, CommonTree mods, bool isAbstract, CommonTree type, string propName, string rawVarName] : (la= attributes )? (lm= accessor_modifier )? (g= 'get' ( ( ';' )=>gbe= semi | gb= block ) getm= magicPropGetter[atts, $la.tree, mods, $lm.tree, type, $g.token, propBlock, propName, mkBody, rawVarName] -> $getm | s= 'set' ( ( ';' )=>sbe= semi | sb= block ) setm= magicPropSetter[atts, $la.tree, mods, $lm.tree, type, $s.token, propBlock, propName, mkBody, rawVarName] -> $setm) ;
        public JavaMaker.accessor_declaration_return accessor_declaration(CommonTree atts, CommonTree mods, bool isAbstract, CommonTree type, string propName, string rawVarName) // throws RecognitionException [1]
        {   
            JavaMaker.accessor_declaration_return retval = new JavaMaker.accessor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree g = null;
            CommonTree s = null;
            JavaMaker.attributes_return la = default(JavaMaker.attributes_return);

            JavaMaker.accessor_modifier_return lm = default(JavaMaker.accessor_modifier_return);

            JavaMaker.semi_return gbe = default(JavaMaker.semi_return);

            JavaMaker.block_return gb = default(JavaMaker.block_return);

            JavaMaker.magicPropGetter_return getm = default(JavaMaker.magicPropGetter_return);

            JavaMaker.semi_return sbe = default(JavaMaker.semi_return);

            JavaMaker.block_return sb = default(JavaMaker.block_return);

            JavaMaker.magicPropSetter_return setm = default(JavaMaker.magicPropSetter_return);


            CommonTree g_tree=null;
            CommonTree s_tree=null;
            RewriteRuleNodeStream stream_248 = new RewriteRuleNodeStream(adaptor,"token 248");
            RewriteRuleNodeStream stream_247 = new RewriteRuleNodeStream(adaptor,"token 247");
            RewriteRuleSubtreeStream stream_magicPropGetter = new RewriteRuleSubtreeStream(adaptor,"rule magicPropGetter");
            RewriteRuleSubtreeStream stream_magicPropSetter = new RewriteRuleSubtreeStream(adaptor,"rule magicPropSetter");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
            RewriteRuleSubtreeStream stream_accessor_modifier = new RewriteRuleSubtreeStream(adaptor,"rule accessor_modifier");
            RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor,"rule semi");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");

                 CommonTree propBlock = null; 
                 bool mkBody = false;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1521:2: ( (la= attributes )? (lm= accessor_modifier )? (g= 'get' ( ( ';' )=>gbe= semi | gb= block ) getm= magicPropGetter[atts, $la.tree, mods, $lm.tree, type, $g.token, propBlock, propName, mkBody, rawVarName] -> $getm | s= 'set' ( ( ';' )=>sbe= semi | sb= block ) setm= magicPropSetter[atts, $la.tree, mods, $lm.tree, type, $s.token, propBlock, propName, mkBody, rawVarName] -> $setm) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1522:2: (la= attributes )? (lm= accessor_modifier )? (g= 'get' ( ( ';' )=>gbe= semi | gb= block ) getm= magicPropGetter[atts, $la.tree, mods, $lm.tree, type, $g.token, propBlock, propName, mkBody, rawVarName] -> $getm | s= 'set' ( ( ';' )=>sbe= semi | sb= block ) setm= magicPropSetter[atts, $la.tree, mods, $lm.tree, type, $s.token, propBlock, propName, mkBody, rawVarName] -> $setm)
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1522:4: (la= attributes )?
                	int alt172 = 2;
                	int LA172_0 = input.LA(1);

                	if ( (LA172_0 == OPEN_BRACKET) )
                	{
                	    alt172 = 1;
                	}
                	switch (alt172) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1522:4: la= attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_accessor_declaration7706);
                	        	la = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(la.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1522:19: (lm= accessor_modifier )?
                	int alt173 = 2;
                	int LA173_0 = input.LA(1);

                	if ( ((LA173_0 >= PROTECTED && LA173_0 <= INTERNAL)) )
                	{
                	    alt173 = 1;
                	}
                	switch (alt173) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1522:19: lm= accessor_modifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_accessor_modifier_in_accessor_declaration7711);
                	        	lm = accessor_modifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_accessor_modifier.Add(lm.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1523:7: (g= 'get' ( ( ';' )=>gbe= semi | gb= block ) getm= magicPropGetter[atts, $la.tree, mods, $lm.tree, type, $g.token, propBlock, propName, mkBody, rawVarName] -> $getm | s= 'set' ( ( ';' )=>sbe= semi | sb= block ) setm= magicPropSetter[atts, $la.tree, mods, $lm.tree, type, $s.token, propBlock, propName, mkBody, rawVarName] -> $setm)
                	int alt176 = 2;
                	int LA176_0 = input.LA(1);

                	if ( (LA176_0 == 247) )
                	{
                	    alt176 = 1;
                	}
                	else if ( (LA176_0 == 248) )
                	{
                	    alt176 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d176s0 =
                	        new NoViableAltException("", 176, 0, input);

                	    throw nvae_d176s0;
                	}
                	switch (alt176) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1523:8: g= 'get' ( ( ';' )=>gbe= semi | gb= block ) getm= magicPropGetter[atts, $la.tree, mods, $lm.tree, type, $g.token, propBlock, propName, mkBody, rawVarName]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	g=(CommonTree)Match(input,247,FOLLOW_247_in_accessor_declaration7724); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_247.Add(g);

                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1523:16: ( ( ';' )=>gbe= semi | gb= block )
                	        	int alt174 = 2;
                	        	int LA174_0 = input.LA(1);

                	        	if ( (LA174_0 == SEMI) )
                	        	{
                	        	    int LA174_1 = input.LA(2);

                	        	    if ( (synpred27_JavaMaker()) )
                	        	    {
                	        	        alt174 = 1;
                	        	    }
                	        	    else if ( (true) )
                	        	    {
                	        	        alt174 = 2;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d174s1 =
                	        	            new NoViableAltException("", 174, 1, input);

                	        	        throw nvae_d174s1;
                	        	    }
                	        	}
                	        	else if ( (LA174_0 == OPEN_BRACE) )
                	        	{
                	        	    alt174 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d174s0 =
                	        	        new NoViableAltException("", 174, 0, input);

                	        	    throw nvae_d174s0;
                	        	}
                	        	switch (alt174) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1523:17: ( ';' )=>gbe= semi
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_semi_in_accessor_declaration7734);
                	        	        	gbe = semi();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_semi.Add(gbe.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   ((property_declaration_scope)property_declaration_stack.Peek()).emptyGetterSetter =  true; propBlock = ((gbe != null) ? ((CommonTree)gbe.Tree) : null); mkBody = !isAbstract; rawVarName = "__" + rawVarName; 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1524:19: gb= block
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_block_in_accessor_declaration7760);
                	        	        	gb = block();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_block.Add(gb.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   propBlock = ((gb != null) ? ((CommonTree)gb.Tree) : null); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicPropGetter_in_accessor_declaration7768);
                	        	getm = magicPropGetter(atts, ((la != null) ? ((CommonTree)la.Tree) : null), mods, ((lm != null) ? ((CommonTree)lm.Tree) : null), type, g.token, propBlock, propName, mkBody, rawVarName);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicPropGetter.Add(getm.Tree);


                	        	// AST REWRITE
                	        	// elements:          getm
                	        	// token labels:      
                	        	// rule labels:       retval, getm
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_getm = new RewriteRuleSubtreeStream(adaptor, "rule getm", getm!=null ? getm.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1524:166: -> $getm
                	        	{
                	        	    adaptor.AddChild(root_0, stream_getm.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1525:10: s= 'set' ( ( ';' )=>sbe= semi | sb= block ) setm= magicPropSetter[atts, $la.tree, mods, $lm.tree, type, $s.token, propBlock, propName, mkBody, rawVarName]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	s=(CommonTree)Match(input,248,FOLLOW_248_in_accessor_declaration7787); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_248.Add(s);

                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1525:18: ( ( ';' )=>sbe= semi | sb= block )
                	        	int alt175 = 2;
                	        	int LA175_0 = input.LA(1);

                	        	if ( (LA175_0 == SEMI) )
                	        	{
                	        	    int LA175_1 = input.LA(2);

                	        	    if ( (synpred28_JavaMaker()) )
                	        	    {
                	        	        alt175 = 1;
                	        	    }
                	        	    else if ( (true) )
                	        	    {
                	        	        alt175 = 2;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d175s1 =
                	        	            new NoViableAltException("", 175, 1, input);

                	        	        throw nvae_d175s1;
                	        	    }
                	        	}
                	        	else if ( (LA175_0 == OPEN_BRACE) )
                	        	{
                	        	    alt175 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d175s0 =
                	        	        new NoViableAltException("", 175, 0, input);

                	        	    throw nvae_d175s0;
                	        	}
                	        	switch (alt175) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1525:19: ( ';' )=>sbe= semi
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_semi_in_accessor_declaration7797);
                	        	        	sbe = semi();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_semi.Add(sbe.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   ((property_declaration_scope)property_declaration_stack.Peek()).emptyGetterSetter =  true; propBlock = ((sbe != null) ? ((CommonTree)sbe.Tree) : null); mkBody = !isAbstract; rawVarName = "__" + rawVarName; 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1526:21: sb= block
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_block_in_accessor_declaration7825);
                	        	        	sb = block();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_block.Add(sb.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   propBlock = ((sb != null) ? ((CommonTree)sb.Tree) : null); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicPropSetter_in_accessor_declaration7833);
                	        	setm = magicPropSetter(atts, ((la != null) ? ((CommonTree)la.Tree) : null), mods, ((lm != null) ? ((CommonTree)lm.Tree) : null), type, s.token, propBlock, propName, mkBody, rawVarName);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicPropSetter.Add(setm.Tree);


                	        	// AST REWRITE
                	        	// elements:          setm
                	        	// token labels:      
                	        	// rule labels:       retval, setm
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_setm = new RewriteRuleSubtreeStream(adaptor, "rule setm", setm!=null ? setm.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1526:168: -> $setm
                	        	{
                	        	    adaptor.AddChild(root_0, stream_setm.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "accessor_declaration"

        public class accessor_modifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "accessor_modifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1528:1: accessor_modifier : ( 'protected' ( 'internal' )? | 'private' | 'internal' ( 'protected' )? );
        public JavaMaker.accessor_modifier_return accessor_modifier() // throws RecognitionException [1]
        {   
            JavaMaker.accessor_modifier_return retval = new JavaMaker.accessor_modifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal462 = null;
            CommonTree string_literal463 = null;
            CommonTree string_literal464 = null;
            CommonTree string_literal465 = null;
            CommonTree string_literal466 = null;

            CommonTree string_literal462_tree=null;
            CommonTree string_literal463_tree=null;
            CommonTree string_literal464_tree=null;
            CommonTree string_literal465_tree=null;
            CommonTree string_literal466_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1528:18: ( 'protected' ( 'internal' )? | 'private' | 'internal' ( 'protected' )? )
                int alt179 = 3;
                switch ( input.LA(1) ) 
                {
                case PROTECTED:
                	{
                    alt179 = 1;
                    }
                    break;
                case PRIVATE:
                	{
                    alt179 = 2;
                    }
                    break;
                case INTERNAL:
                	{
                    alt179 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d179s0 =
                	        new NoViableAltException("", 179, 0, input);

                	    throw nvae_d179s0;
                }

                switch (alt179) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1529:2: 'protected' ( 'internal' )?
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal462=(CommonTree)Match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier7852); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal462_tree = (CommonTree)adaptor.DupNode(string_literal462);

                        		adaptor.AddChild(root_0, string_literal462_tree);
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1529:14: ( 'internal' )?
                        	int alt177 = 2;
                        	int LA177_0 = input.LA(1);

                        	if ( (LA177_0 == INTERNAL) )
                        	{
                        	    alt177 = 1;
                        	}
                        	switch (alt177) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1529:14: 'internal'
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	string_literal463=(CommonTree)Match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier7854); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{string_literal463_tree = (CommonTree)adaptor.DupNode(string_literal463);

                        	        		adaptor.AddChild(root_0, string_literal463_tree);
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1529:28: 'private'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal464=(CommonTree)Match(input,PRIVATE,FOLLOW_PRIVATE_in_accessor_modifier7859); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal464_tree = (CommonTree)adaptor.DupNode(string_literal464);

                        		adaptor.AddChild(root_0, string_literal464_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1529:40: 'internal' ( 'protected' )?
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal465=(CommonTree)Match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier7863); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal465_tree = (CommonTree)adaptor.DupNode(string_literal465);

                        		adaptor.AddChild(root_0, string_literal465_tree);
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1529:51: ( 'protected' )?
                        	int alt178 = 2;
                        	int LA178_0 = input.LA(1);

                        	if ( (LA178_0 == PROTECTED) )
                        	{
                        	    alt178 = 1;
                        	}
                        	switch (alt178) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1529:51: 'protected'
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	string_literal466=(CommonTree)Match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier7865); if (state.failed) return retval;
                        	        	if ( state.backtracking == 0 )
                        	        	{string_literal466_tree = (CommonTree)adaptor.DupNode(string_literal466);

                        	        		adaptor.AddChild(root_0, string_literal466_tree);
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "accessor_modifier"

        public class semi_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "semi"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1531:1: semi : ';' ;
        public JavaMaker.semi_return semi() // throws RecognitionException [1]
        {   
            JavaMaker.semi_return retval = new JavaMaker.semi_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal467 = null;

            CommonTree char_literal467_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1531:5: ( ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1532:5: ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal467=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_semi7877); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal467_tree = (CommonTree)adaptor.DupNode(char_literal467);

                		adaptor.AddChild(root_0, char_literal467_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "semi"

        public class event_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "event_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1535:1: event_declaration[CommonTree atts, CommonTree mods] : e= 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' -> ^( EVENT[$e.token, \"EVENT\"] type member_name '{' event_accessor_declarations '}' ) | variable_declarators ';' -> ^( FIELD[$e.token,\"FIELD\"] type variable_declarators ) ) ;
        public JavaMaker.event_declaration_return event_declaration(CommonTree atts, CommonTree mods) // throws RecognitionException [1]
        {   
            JavaMaker.event_declaration_return retval = new JavaMaker.event_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree e = null;
            CommonTree char_literal470 = null;
            CommonTree char_literal472 = null;
            CommonTree char_literal474 = null;
            JavaMaker.type_return type468 = default(JavaMaker.type_return);

            JavaMaker.member_name_return member_name469 = default(JavaMaker.member_name_return);

            JavaMaker.event_accessor_declarations_return event_accessor_declarations471 = default(JavaMaker.event_accessor_declarations_return);

            JavaMaker.variable_declarators_return variable_declarators473 = default(JavaMaker.variable_declarators_return);


            CommonTree e_tree=null;
            CommonTree char_literal470_tree=null;
            CommonTree char_literal472_tree=null;
            CommonTree char_literal474_tree=null;
            RewriteRuleNodeStream stream_240 = new RewriteRuleNodeStream(adaptor,"token 240");
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleSubtreeStream stream_event_accessor_declarations = new RewriteRuleSubtreeStream(adaptor,"rule event_accessor_declarations");
            RewriteRuleSubtreeStream stream_variable_declarators = new RewriteRuleSubtreeStream(adaptor,"rule variable_declarators");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_member_name = new RewriteRuleSubtreeStream(adaptor,"rule member_name");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1535:52: (e= 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' -> ^( EVENT[$e.token, \"EVENT\"] type member_name '{' event_accessor_declarations '}' ) | variable_declarators ';' -> ^( FIELD[$e.token,\"FIELD\"] type variable_declarators ) ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1536:2: e= 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' -> ^( EVENT[$e.token, \"EVENT\"] type member_name '{' event_accessor_declarations '}' ) | variable_declarators ';' -> ^( FIELD[$e.token,\"FIELD\"] type variable_declarators ) )
                {
                	_last = (CommonTree)input.LT(1);
                	e=(CommonTree)Match(input,240,FOLLOW_240_in_event_declaration7890); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_240.Add(e);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_event_declaration7894);
                	type468 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(type468.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1537:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' -> ^( EVENT[$e.token, \"EVENT\"] type member_name '{' event_accessor_declarations '}' ) | variable_declarators ';' -> ^( FIELD[$e.token,\"FIELD\"] type variable_declarators ) )
                	int alt180 = 2;
                	int LA180_0 = input.LA(1);

                	if ( (LA180_0 == IDENTIFIER) )
                	{
                	    int LA180_1 = input.LA(2);

                	    if ( (synpred29_JavaMaker()) )
                	    {
                	        alt180 = 1;
                	    }
                	    else if ( (true) )
                	    {
                	        alt180 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d180s1 =
                	            new NoViableAltException("", 180, 1, input);

                	        throw nvae_d180s1;
                	    }
                	}
                	else if ( ((LA180_0 >= ELIF && LA180_0 <= UNDEF) || LA180_0 == 195 || LA180_0 == 221 || (LA180_0 >= 224 && LA180_0 <= 239) || (LA180_0 >= 241 && LA180_0 <= 244) || (LA180_0 >= 247 && LA180_0 <= 250) || LA180_0 == 256 || (LA180_0 >= 263 && LA180_0 <= 264) || LA180_0 == 274 || LA180_0 == 277) )
                	{
                	    int LA180_2 = input.LA(2);

                	    if ( (synpred29_JavaMaker()) )
                	    {
                	        alt180 = 1;
                	    }
                	    else if ( (true) )
                	    {
                	        alt180 = 2;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d180s2 =
                	            new NoViableAltException("", 180, 2, input);

                	        throw nvae_d180s2;
                	    }
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d180s0 =
                	        new NoViableAltException("", 180, 0, input);

                	    throw nvae_d180s0;
                	}
                	switch (alt180) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1537:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_member_name_in_event_declaration7909);
                	        	member_name469 = member_name();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_member_name.Add(member_name469.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal470=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_event_declaration7913); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(char_literal470);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_event_accessor_declarations_in_event_declaration7917);
                	        	event_accessor_declarations471 = event_accessor_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_event_accessor_declarations.Add(event_accessor_declarations471.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal472=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_event_declaration7921); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(char_literal472);



                	        	// AST REWRITE
                	        	// elements:          CLOSE_BRACE, event_accessor_declarations, type, member_name, OPEN_BRACE
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1537:81: -> ^( EVENT[$e.token, \"EVENT\"] type member_name '{' event_accessor_declarations '}' )
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1537:84: ^( EVENT[$e.token, \"EVENT\"] type member_name '{' event_accessor_declarations '}' )
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT, e.token, "EVENT"), root_1);

                	        	    adaptor.AddChild(root_1,  dupTree(atts) );
                	        	    adaptor.AddChild(root_1,  dupTree(mods) );
                	        	    adaptor.AddChild(root_1, stream_type.NextTree());
                	        	    adaptor.AddChild(root_1, stream_member_name.NextTree());
                	        	    adaptor.AddChild(root_1, stream_OPEN_BRACE.NextNode());
                	        	    adaptor.AddChild(root_1, stream_event_accessor_declarations.NextTree());
                	        	    adaptor.AddChild(root_1, stream_CLOSE_BRACE.NextNode());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1538:5: variable_declarators ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variable_declarators_in_event_declaration7954);
                	        	variable_declarators473 = variable_declarators();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_variable_declarators.Add(variable_declarators473.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal474=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_event_declaration7958); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal474);



                	        	// AST REWRITE
                	        	// elements:          variable_declarators, type
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1538:32: -> ^( FIELD[$e.token,\"FIELD\"] type variable_declarators )
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1538:35: ^( FIELD[$e.token,\"FIELD\"] type variable_declarators )
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FIELD, e.token, "FIELD"), root_1);

                	        	    adaptor.AddChild(root_1,  dupTree(atts) );
                	        	    adaptor.AddChild(root_1,  dupTree(mods) );
                	        	    adaptor.AddChild(root_1, stream_type.NextTree());
                	        	    adaptor.AddChild(root_1, stream_variable_declarators.NextTree());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "event_declaration"

        public class event_modifiers_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "event_modifiers"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1540:1: event_modifiers : ( modifier )+ ;
        public JavaMaker.event_modifiers_return event_modifiers() // throws RecognitionException [1]
        {   
            JavaMaker.event_modifiers_return retval = new JavaMaker.event_modifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.modifier_return modifier475 = default(JavaMaker.modifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1540:16: ( ( modifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1541:2: ( modifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1541:2: ( modifier )+
                	int cnt181 = 0;
                	do 
                	{
                	    int alt181 = 2;
                	    int LA181_0 = input.LA(1);

                	    if ( ((LA181_0 >= PUBLIC && LA181_0 <= STATIC) || LA181_0 == 194 || (LA181_0 >= 197 && LA181_0 <= 204)) )
                	    {
                	        alt181 = 1;
                	    }


                	    switch (alt181) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1541:2: modifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_modifier_in_event_modifiers7985);
                			    	modifier475 = modifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, modifier475.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt181 >= 1 ) goto loop181;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee181 =
                		                new EarlyExitException(181, input);
                		            throw eee181;
                	    }
                	    cnt181++;
                	} while (true);

                	loop181:
                		;	// Stops C# compiler whining that label 'loop181' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "event_modifiers"

        public class event_accessor_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "event_accessor_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1542:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
        public JavaMaker.event_accessor_declarations_return event_accessor_declarations() // throws RecognitionException [1]
        {   
            JavaMaker.event_accessor_declarations_return retval = new JavaMaker.event_accessor_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.attributes_return attributes476 = default(JavaMaker.attributes_return);

            JavaMaker.add_accessor_declaration_return add_accessor_declaration477 = default(JavaMaker.add_accessor_declaration_return);

            JavaMaker.attributes_return attributes478 = default(JavaMaker.attributes_return);

            JavaMaker.remove_accessor_declaration_return remove_accessor_declaration479 = default(JavaMaker.remove_accessor_declaration_return);

            JavaMaker.remove_accessor_declaration_return remove_accessor_declaration480 = default(JavaMaker.remove_accessor_declaration_return);

            JavaMaker.attributes_return attributes481 = default(JavaMaker.attributes_return);

            JavaMaker.add_accessor_declaration_return add_accessor_declaration482 = default(JavaMaker.add_accessor_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1542:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:2: ( attributes )?
                	int alt182 = 2;
                	int LA182_0 = input.LA(1);

                	if ( (LA182_0 == OPEN_BRACKET) )
                	{
                	    alt182 = 1;
                	}
                	switch (alt182) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:2: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations7994);
                	        	attributes476 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attributes476.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
                	int alt185 = 2;
                	int LA185_0 = input.LA(1);

                	if ( (LA185_0 == 249) )
                	{
                	    alt185 = 1;
                	}
                	else if ( (LA185_0 == 250) )
                	{
                	    alt185 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d185s0 =
                	        new NoViableAltException("", 185, 0, input);

                	    throw nvae_d185s0;
                	}
                	switch (alt185) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                	        {
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
                	        	{
                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations8001);
                	        		add_accessor_declaration477 = add_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, add_accessor_declaration477.Tree);
                	        		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:45: ( attributes )?
                	        		int alt183 = 2;
                	        		int LA183_0 = input.LA(1);

                	        		if ( (LA183_0 == OPEN_BRACKET) )
                	        		{
                	        		    alt183 = 1;
                	        		}
                	        		switch (alt183) 
                	        		{
                	        		    case 1 :
                	        		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1543:45: attributes
                	        		        {
                	        		        	_last = (CommonTree)input.LT(1);
                	        		        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations8005);
                	        		        	attributes478 = attributes();
                	        		        	state._fsp--;
                	        		        	if (state.failed) return retval;
                	        		        	if ( (state.backtracking==0) ) 
                	        		        	adaptor.AddChild(root_0, attributes478.Tree);

                	        		        	if ( (state.backtracking==0) ) {
                	        		        	}
                	        		        }
                	        		        break;

                	        		}

                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8010);
                	        		remove_accessor_declaration479 = remove_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, remove_accessor_declaration479.Tree);

                	        		if ( (state.backtracking==0) ) {
                	        		}
                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1544:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                	        {
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1544:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1544:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
                	        	{
                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8031);
                	        		remove_accessor_declaration480 = remove_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, remove_accessor_declaration480.Tree);
                	        		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1544:49: ( attributes )?
                	        		int alt184 = 2;
                	        		int LA184_0 = input.LA(1);

                	        		if ( (LA184_0 == OPEN_BRACKET) )
                	        		{
                	        		    alt184 = 1;
                	        		}
                	        		switch (alt184) 
                	        		{
                	        		    case 1 :
                	        		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1544:49: attributes
                	        		        {
                	        		        	_last = (CommonTree)input.LT(1);
                	        		        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations8035);
                	        		        	attributes481 = attributes();
                	        		        	state._fsp--;
                	        		        	if (state.failed) return retval;
                	        		        	if ( (state.backtracking==0) ) 
                	        		        	adaptor.AddChild(root_0, attributes481.Tree);

                	        		        	if ( (state.backtracking==0) ) {
                	        		        	}
                	        		        }
                	        		        break;

                	        		}

                	        		_last = (CommonTree)input.LT(1);
                	        		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations8040);
                	        		add_accessor_declaration482 = add_accessor_declaration();
                	        		state._fsp--;
                	        		if (state.failed) return retval;
                	        		if ( (state.backtracking==0) ) 
                	        		adaptor.AddChild(root_0, add_accessor_declaration482.Tree);

                	        		if ( (state.backtracking==0) ) {
                	        		}
                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "event_accessor_declarations"

        public class add_accessor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "add_accessor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1545:1: add_accessor_declaration : 'add' block ;
        public JavaMaker.add_accessor_declaration_return add_accessor_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.add_accessor_declaration_return retval = new JavaMaker.add_accessor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal483 = null;
            JavaMaker.block_return block484 = default(JavaMaker.block_return);


            CommonTree string_literal483_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1545:25: ( 'add' block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1546:2: 'add' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal483=(CommonTree)Match(input,249,FOLLOW_249_in_add_accessor_declaration8050); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal483_tree = (CommonTree)adaptor.DupNode(string_literal483);

                		adaptor.AddChild(root_0, string_literal483_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_add_accessor_declaration8054);
                	block484 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block484.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "add_accessor_declaration"

        public class remove_accessor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "remove_accessor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1547:1: remove_accessor_declaration : 'remove' block ;
        public JavaMaker.remove_accessor_declaration_return remove_accessor_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.remove_accessor_declaration_return retval = new JavaMaker.remove_accessor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal485 = null;
            JavaMaker.block_return block486 = default(JavaMaker.block_return);


            CommonTree string_literal485_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1547:28: ( 'remove' block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1548:2: 'remove' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal485=(CommonTree)Match(input,250,FOLLOW_250_in_remove_accessor_declaration8062); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal485_tree = (CommonTree)adaptor.DupNode(string_literal485);

                		adaptor.AddChild(root_0, string_literal485_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_remove_accessor_declaration8066);
                	block486 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block486.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "remove_accessor_declaration"

        public class enum_declaration_return : TreeRuleReturnScope
        {
            public string name;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1553:1: enum_declaration[CommonTree atts, CommonTree mods] returns [string name] : ({...}? =>e1= 'enum' identifier magicBoxedType[true,$e1.token,\"System.Int32\"] ( enum_base )? enum_body_asnumber[constType] ( ';' )? -> ^( CLASS[$e1.token, \"class\"] identifier enum_body_asnumber ) | e2= 'enum' identifier ( enum_base )? enum_body ( ';' )? -> ^( ENUM[$e2.token, \"ENUM\"] identifier ( enum_base )? enum_body ) );
        public JavaMaker.enum_declaration_return enum_declaration(CommonTree atts, CommonTree mods) // throws RecognitionException [1]
        {   
            TypeContext_stack.Push(new TypeContext_scope());

            JavaMaker.enum_declaration_return retval = new JavaMaker.enum_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree e1 = null;
            CommonTree e2 = null;
            CommonTree char_literal491 = null;
            CommonTree char_literal495 = null;
            JavaMaker.identifier_return identifier487 = default(JavaMaker.identifier_return);

            JavaMaker.magicBoxedType_return magicBoxedType488 = default(JavaMaker.magicBoxedType_return);

            JavaMaker.enum_base_return enum_base489 = default(JavaMaker.enum_base_return);

            JavaMaker.enum_body_asnumber_return enum_body_asnumber490 = default(JavaMaker.enum_body_asnumber_return);

            JavaMaker.identifier_return identifier492 = default(JavaMaker.identifier_return);

            JavaMaker.enum_base_return enum_base493 = default(JavaMaker.enum_base_return);

            JavaMaker.enum_body_return enum_body494 = default(JavaMaker.enum_body_return);


            CommonTree e1_tree=null;
            CommonTree e2_tree=null;
            CommonTree char_literal491_tree=null;
            CommonTree char_literal495_tree=null;
            RewriteRuleNodeStream stream_ENUM = new RewriteRuleNodeStream(adaptor,"token ENUM");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleSubtreeStream stream_enum_body_asnumber = new RewriteRuleSubtreeStream(adaptor,"rule enum_body_asnumber");
            RewriteRuleSubtreeStream stream_enum_base = new RewriteRuleSubtreeStream(adaptor,"rule enum_base");
            RewriteRuleSubtreeStream stream_enum_body = new RewriteRuleSubtreeStream(adaptor,"rule enum_body");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_magicBoxedType = new RewriteRuleSubtreeStream(adaptor,"rule magicBoxedType");

               CommonTree constType = null;
               CommonTree mangledMods = mkRemoveMods(mods, new int[] {STATIC});
               // If no access modifier then type is internal, which we relax to public
               if (!containsMods(mangledMods, new int[] {PUBLIC, PRIVATE})) {
                  mangledMods =  addModifier(mangledMods, (CommonTree)adaptor.Create(PUBLIC, "public"));
               }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1563:1: ({...}? =>e1= 'enum' identifier magicBoxedType[true,$e1.token,\"System.Int32\"] ( enum_base )? enum_body_asnumber[constType] ( ';' )? -> ^( CLASS[$e1.token, \"class\"] identifier enum_body_asnumber ) | e2= 'enum' identifier ( enum_base )? enum_body ( ';' )? -> ^( ENUM[$e2.token, \"ENUM\"] identifier ( enum_base )? enum_body ) )
                int alt190 = 2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0 == ENUM) )
                {
                    int LA190_1 = input.LA(2);

                    if ( (( Cfg.EnumsAsNumericConsts )) )
                    {
                        alt190 = 1;
                    }
                    else if ( (true) )
                    {
                        alt190 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d190s1 =
                            new NoViableAltException("", 190, 1, input);

                        throw nvae_d190s1;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d190s0 =
                        new NoViableAltException("", 190, 0, input);

                    throw nvae_d190s0;
                }
                switch (alt190) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1564:5: {...}? =>e1= 'enum' identifier magicBoxedType[true,$e1.token,\"System.Int32\"] ( enum_base )? enum_body_asnumber[constType] ( ';' )?
                        {
                        	if ( !(( Cfg.EnumsAsNumericConsts )) ) 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    throw new FailedPredicateException(input, "enum_declaration", " Cfg.EnumsAsNumericConsts ");
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	e1=(CommonTree)Match(input,ENUM,FOLLOW_ENUM_in_enum_declaration8116); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_ENUM.Add(e1);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_enum_declaration8120);
                        	identifier487 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_identifier.Add(identifier487.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.name =  ((identifier487 != null) ? identifier487.thetext : default(string)); ((TypeContext_scope)TypeContext_stack.Peek()).typeName =  ((identifier487 != null) ? identifier487.thetext : default(string)); WriteStartEnum(retval.name); 
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_magicBoxedType_in_enum_declaration8125);
                        	magicBoxedType488 = magicBoxedType(true, e1.token, "System.Int32");
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_magicBoxedType.Add(magicBoxedType488.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   constType = ((magicBoxedType488 != null) ? ((CommonTree)magicBoxedType488.Tree) : null); 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1565:222: ( enum_base )?
                        	int alt186 = 2;
                        	int LA186_0 = input.LA(1);

                        	if ( (LA186_0 == 211) )
                        	{
                        	    alt186 = 1;
                        	}
                        	switch (alt186) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1565:223: enum_base
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_enum_base_in_enum_declaration8131);
                        	        	enum_base489 = enum_base();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_enum_base.Add(enum_base489.Tree);
                        	        	if ( (state.backtracking==0) )
                        	        	{
                        	        	  constType = ((enum_base489 != null) ? ((CommonTree)enum_base489.Tree) : null); 
                        	        	}

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_enum_body_asnumber_in_enum_declaration8140);
                        	enum_body_asnumber490 = enum_body_asnumber(constType);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_enum_body_asnumber.Add(enum_body_asnumber490.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1565:302: ( ';' )?
                        	int alt187 = 2;
                        	int LA187_0 = input.LA(1);

                        	if ( (LA187_0 == SEMI) )
                        	{
                        	    alt187 = 1;
                        	}
                        	switch (alt187) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1565:302: ';'
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	char_literal491=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_enum_declaration8145); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal491);


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   WriteEndEnum(); 
                        	}


                        	// AST REWRITE
                        	// elements:          enum_body_asnumber, identifier
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1566:13: -> ^( CLASS[$e1.token, \"class\"] identifier enum_body_asnumber )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1566:16: ^( CLASS[$e1.token, \"class\"] identifier enum_body_asnumber )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS, e1.token, "class"), root_1);

                        	    adaptor.AddChild(root_1,  dupTree(atts) );
                        	    adaptor.AddChild(root_1,  mangledMods );
                        	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                        	    adaptor.AddChild(root_1, stream_enum_body_asnumber.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1567:6: e2= 'enum' identifier ( enum_base )? enum_body ( ';' )?
                        {
                        	_last = (CommonTree)input.LT(1);
                        	e2=(CommonTree)Match(input,ENUM,FOLLOW_ENUM_in_enum_declaration8184); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_ENUM.Add(e2);

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_identifier_in_enum_declaration8188);
                        	identifier492 = identifier();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_identifier.Add(identifier492.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.name =  ((identifier492 != null) ? identifier492.thetext : default(string)); ((TypeContext_scope)TypeContext_stack.Peek()).typeName =  ((identifier492 != null) ? identifier492.thetext : default(string)); WriteStartEnum(retval.name); 
                        	}
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1567:132: ( enum_base )?
                        	int alt188 = 2;
                        	int LA188_0 = input.LA(1);

                        	if ( (LA188_0 == 211) )
                        	{
                        	    alt188 = 1;
                        	}
                        	switch (alt188) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1567:132: enum_base
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_enum_base_in_enum_declaration8193);
                        	        	enum_base493 = enum_base();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_enum_base.Add(enum_base493.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_enum_body_in_enum_declaration8198);
                        	enum_body494 = enum_body();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_enum_body.Add(enum_body494.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1567:157: ( ';' )?
                        	int alt189 = 2;
                        	int LA189_0 = input.LA(1);

                        	if ( (LA189_0 == SEMI) )
                        	{
                        	    alt189 = 1;
                        	}
                        	switch (alt189) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1567:157: ';'
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	char_literal495=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_enum_declaration8202); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal495);


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	if ( (state.backtracking==0) )
                        	{
                        	   WriteEndEnum(); 
                        	}


                        	// AST REWRITE
                        	// elements:          enum_base, identifier, enum_body
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1568:13: -> ^( ENUM[$e2.token, \"ENUM\"] identifier ( enum_base )? enum_body )
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1568:16: ^( ENUM[$e2.token, \"ENUM\"] identifier ( enum_base )? enum_body )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ENUM, e2.token, "ENUM"), root_1);

                        	    adaptor.AddChild(root_1,  dupTree(atts) );
                        	    adaptor.AddChild(root_1,  mangledMods );
                        	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1568:88: ( enum_base )?
                        	    if ( stream_enum_base.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_enum_base.NextTree());

                        	    }
                        	    stream_enum_base.Reset();
                        	    adaptor.AddChild(root_1, stream_enum_body.NextTree());

                        	    adaptor.AddChild(root_0, root_1);
                        	    }

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                TypeContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "enum_declaration"

        public class enum_base_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_base"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1570:1: enum_base : c= ':' integral_type -> ^( TYPE[$c.token, \"TYPE\"] integral_type ) ;
        public JavaMaker.enum_base_return enum_base() // throws RecognitionException [1]
        {   
            JavaMaker.enum_base_return retval = new JavaMaker.enum_base_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            JavaMaker.integral_type_return integral_type496 = default(JavaMaker.integral_type_return);


            CommonTree c_tree=null;
            RewriteRuleNodeStream stream_211 = new RewriteRuleNodeStream(adaptor,"token 211");
            RewriteRuleSubtreeStream stream_integral_type = new RewriteRuleSubtreeStream(adaptor,"rule integral_type");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1570:10: (c= ':' integral_type -> ^( TYPE[$c.token, \"TYPE\"] integral_type ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1571:2: c= ':' integral_type
                {
                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,211,FOLLOW_211_in_enum_base8245); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_211.Add(c);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_integral_type_in_enum_base8249);
                	integral_type496 = integral_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_integral_type.Add(integral_type496.Tree);


                	// AST REWRITE
                	// elements:          integral_type
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1571:24: -> ^( TYPE[$c.token, \"TYPE\"] integral_type )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1571:27: ^( TYPE[$c.token, \"TYPE\"] integral_type )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, c.token, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, stream_integral_type.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_base"

        public class enum_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1572:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' -> ^( ENUM_BODY ( enum_member_declarations )? ) ;
        public JavaMaker.enum_body_return enum_body() // throws RecognitionException [1]
        {   
            JavaMaker.enum_body_return retval = new JavaMaker.enum_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal497 = null;
            CommonTree char_literal499 = null;
            CommonTree char_literal500 = null;
            JavaMaker.enum_member_declarations_return enum_member_declarations498 = default(JavaMaker.enum_member_declarations_return);


            CommonTree char_literal497_tree=null;
            CommonTree char_literal499_tree=null;
            CommonTree char_literal500_tree=null;
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleSubtreeStream stream_enum_member_declarations = new RewriteRuleSubtreeStream(adaptor,"rule enum_member_declarations");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1572:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' -> ^( ENUM_BODY ( enum_member_declarations )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1573:4: '{' ( enum_member_declarations ( ',' )? )? '}'
                {
                	_last = (CommonTree)input.LT(1);
                	char_literal497=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_enum_body8269); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(char_literal497);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1573:8: ( enum_member_declarations ( ',' )? )?
                	int alt192 = 2;
                	int LA192_0 = input.LA(1);

                	if ( (LA192_0 == OPEN_BRACKET || LA192_0 == IDENTIFIER || (LA192_0 >= ELIF && LA192_0 <= UNDEF) || LA192_0 == 195 || LA192_0 == 221 || (LA192_0 >= 224 && LA192_0 <= 239) || (LA192_0 >= 241 && LA192_0 <= 244) || (LA192_0 >= 247 && LA192_0 <= 250) || LA192_0 == 256 || (LA192_0 >= 263 && LA192_0 <= 264) || LA192_0 == 274 || LA192_0 == 277) )
                	{
                	    alt192 = 1;
                	}
                	switch (alt192) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1573:9: enum_member_declarations ( ',' )?
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_enum_member_declarations_in_enum_body8272);
                	        	enum_member_declarations498 = enum_member_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_enum_member_declarations.Add(enum_member_declarations498.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1573:34: ( ',' )?
                	        	int alt191 = 2;
                	        	int LA191_0 = input.LA(1);

                	        	if ( (LA191_0 == COMMA) )
                	        	{
                	        	    alt191 = 1;
                	        	}
                	        	switch (alt191) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1573:34: ','
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	char_literal499=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_enum_body8274); if (state.failed) return retval; 
                	        	        	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal499);


                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal500=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_enum_body8281); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(char_literal500);



                	// AST REWRITE
                	// elements:          enum_member_declarations
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1573:47: -> ^( ENUM_BODY ( enum_member_declarations )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1573:50: ^( ENUM_BODY ( enum_member_declarations )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ENUM_BODY, "ENUM_BODY"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1573:62: ( enum_member_declarations )?
                	    if ( stream_enum_member_declarations.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_enum_member_declarations.NextTree());

                	    }
                	    stream_enum_member_declarations.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_body"

        public class enum_member_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_member_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1574:1: enum_member_declarations : e= enum_member_declaration[members,ref next] ( ',' enum_member_declaration[members, ref next] )* ->;
        public JavaMaker.enum_member_declarations_return enum_member_declarations() // throws RecognitionException [1]
        {   
            JavaMaker.enum_member_declarations_return retval = new JavaMaker.enum_member_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal501 = null;
            JavaMaker.enum_member_declaration_return e = default(JavaMaker.enum_member_declaration_return);

            JavaMaker.enum_member_declaration_return enum_member_declaration502 = default(JavaMaker.enum_member_declaration_return);


            CommonTree char_literal501_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_enum_member_declaration = new RewriteRuleSubtreeStream(adaptor,"rule enum_member_declaration");

                SortedList<int,CommonTree> members = new SortedList<int,CommonTree>();
                int next = 0;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1600:1: (e= enum_member_declaration[members,ref next] ( ',' enum_member_declaration[members, ref next] )* ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1601:2: e= enum_member_declaration[members,ref next] ( ',' enum_member_declaration[members, ref next] )*
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations8311);
                	e = enum_member_declaration(members, ref next);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_enum_member_declaration.Add(e.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1601:46: ( ',' enum_member_declaration[members, ref next] )*
                	do 
                	{
                	    int alt193 = 2;
                	    int LA193_0 = input.LA(1);

                	    if ( (LA193_0 == COMMA) )
                	    {
                	        int LA193_1 = input.LA(2);

                	        if ( (LA193_1 == OPEN_BRACKET || LA193_1 == IDENTIFIER || (LA193_1 >= ELIF && LA193_1 <= UNDEF) || LA193_1 == 195 || LA193_1 == 221 || (LA193_1 >= 224 && LA193_1 <= 239) || (LA193_1 >= 241 && LA193_1 <= 244) || (LA193_1 >= 247 && LA193_1 <= 250) || LA193_1 == 256 || (LA193_1 >= 263 && LA193_1 <= 264) || LA193_1 == 274 || LA193_1 == 277) )
                	        {
                	            alt193 = 1;
                	        }


                	    }


                	    switch (alt193) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1601:47: ',' enum_member_declaration[members, ref next]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal501=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_enum_member_declarations8315); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal501);

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations8317);
                			    	enum_member_declaration502 = enum_member_declaration(members, ref next);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_enum_member_declaration.Add(enum_member_declaration502.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop193;
                	    }
                	} while (true);

                	loop193:
                		;	// Stops C# compiler whining that label 'loop193' has no statements



                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1602:5: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      retval.tree =  (CommonTree)adaptor.Nil;
                      if (next > 0 && next < MAX_DUMMY_ENUMS) {
                         int dummyCounter = 0;
                         for (int i = 0; i < next; i++) {
                            if (members.ContainsKey(i)) {
                               adaptor.AddChild(((CommonTree)retval.Tree), members[i]);
                               WriteEnumMember(members[i].Text, i);
                            }
                            else {
                               adaptor.AddChild(((CommonTree)retval.Tree), adaptor.Create(IDENTIFIER, ((e != null) ? ((CommonTree)e.Start) : null).Token, "__dummyEnum__" + dummyCounter++));
                            }
                         }
                      }
                      else {
                         Warning(((e != null) ? ((CommonTree)e.Tree) : null).Line, "[UNSUPPORTED] We do not yet generate dummy enum members for enums that need more than " + MAX_DUMMY_ENUMS + " entries.");
                         foreach (CommonTree en in members.Values) {
                            adaptor.AddChild(((CommonTree)retval.Tree), en);
                         }
                      }

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_member_declarations"

        public class enum_member_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_member_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1604:1: enum_member_declaration[ SortedList<int,CommonTree> members, ref int next] : ( attributes )? identifier ( (eq= '=' ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression ) )? ) ;
        public JavaMaker.enum_member_declaration_return enum_member_declaration(SortedList<int,CommonTree> members, ref int next) // throws RecognitionException [1]
        {   
            JavaMaker.enum_member_declaration_return retval = new JavaMaker.enum_member_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree eq = null;
            CommonTree i = null;
            JavaMaker.attributes_return attributes503 = default(JavaMaker.attributes_return);

            JavaMaker.identifier_return identifier504 = default(JavaMaker.identifier_return);

            JavaMaker.expression_return expression505 = default(JavaMaker.expression_return);


            CommonTree eq_tree=null;
            CommonTree i_tree=null;


                int calcValue = 0;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1607:2: ( ( attributes )? identifier ( (eq= '=' ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression ) )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1609:2: ( attributes )? identifier ( (eq= '=' ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression ) )? )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1609:2: ( attributes )?
                	int alt194 = 2;
                	int LA194_0 = input.LA(1);

                	if ( (LA194_0 == OPEN_BRACKET) )
                	{
                	    alt194 = 1;
                	}
                	switch (alt194) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1609:2: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_enum_member_declaration8355);
                	        	attributes503 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attributes503.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_enum_member_declaration8360);
                	identifier504 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier504.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   members[next] = ((identifier504 != null) ? ((CommonTree)identifier504.Tree) : null); next++; 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:9: ( (eq= '=' ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression ) )? )
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:10: (eq= '=' ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression ) )?
                	{
                		// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:10: (eq= '=' ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression ) )?
                		int alt197 = 2;
                		int LA197_0 = input.LA(1);

                		if ( (LA197_0 == ASSIGN) )
                		{
                		    alt197 = 1;
                		}
                		switch (alt197) 
                		{
                		    case 1 :
                		        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:11: eq= '=' ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression )
                		        {
                		        	_last = (CommonTree)input.LT(1);
                		        	eq=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_enum_member_declaration8378); if (state.failed) return retval;
                		        	if ( state.backtracking == 0 )
                		        	{eq_tree = (CommonTree)adaptor.DupNode(eq);

                		        		adaptor.AddChild(root_0, eq_tree);
                		        	}
                		        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:20: ( ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number ) | expression )
                		        	int alt196 = 2;
                		        	switch ( input.LA(1) ) 
                		        	{
                		        	case NUMBER:
                		        		{
                		        	    int LA196_1 = input.LA(2);

                		        	    if ( (synpred30_JavaMaker()) )
                		        	    {
                		        	        alt196 = 1;
                		        	    }
                		        	    else if ( (true) )
                		        	    {
                		        	        alt196 = 2;
                		        	    }
                		        	    else 
                		        	    {
                		        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		        	        NoViableAltException nvae_d196s1 =
                		        	            new NoViableAltException("", 196, 1, input);

                		        	        throw nvae_d196s1;
                		        	    }
                		        	    }
                		        	    break;
                		        	case Hex_number:
                		        		{
                		        	    int LA196_2 = input.LA(2);

                		        	    if ( (synpred30_JavaMaker()) )
                		        	    {
                		        	        alt196 = 1;
                		        	    }
                		        	    else if ( (true) )
                		        	    {
                		        	        alt196 = 2;
                		        	    }
                		        	    else 
                		        	    {
                		        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		        	        NoViableAltException nvae_d196s2 =
                		        	            new NoViableAltException("", 196, 2, input);

                		        	        throw nvae_d196s2;
                		        	    }
                		        	    }
                		        	    break;
                		        	case MONONOT:
                		        	case MONOTWIDDLE:
                		        	case NEW_ARRAY:
                		        	case OBJECT:
                		        	case THIS:
                		        	case LPAREN:
                		        	case BIT_AND:
                		        	case PLUS:
                		        	case MINUS:
                		        	case STAR:
                		        	case BOOL:
                		        	case BYTE:
                		        	case CHAR:
                		        	case SHORT:
                		        	case INT:
                		        	case LONG:
                		        	case FLOAT:
                		        	case DOUBLE:
                		        	case IDENTIFIER:
                		        	case Real_literal:
                		        	case Character_literal:
                		        	case STRINGLITERAL:
                		        	case Verbatim_string_literal:
                		        	case TRUE:
                		        	case FALSE:
                		        	case NULL:
                		        	case ELIF:
                		        	case ENDIF:
                		        	case DEFINE:
                		        	case UNDEF:
                		        	case 195:
                		        	case 197:
                		        	case 207:
                		        	case 209:
                		        	case 210:
                		        	case 214:
                		        	case 215:
                		        	case 216:
                		        	case 217:
                		        	case 218:
                		        	case 219:
                		        	case 221:
                		        	case 224:
                		        	case 225:
                		        	case 226:
                		        	case 227:
                		        	case 228:
                		        	case 229:
                		        	case 230:
                		        	case 231:
                		        	case 232:
                		        	case 233:
                		        	case 234:
                		        	case 235:
                		        	case 236:
                		        	case 237:
                		        	case 238:
                		        	case 239:
                		        	case 241:
                		        	case 242:
                		        	case 243:
                		        	case 244:
                		        	case 247:
                		        	case 248:
                		        	case 249:
                		        	case 250:
                		        	case 251:
                		        	case 252:
                		        	case 253:
                		        	case 254:
                		        	case 256:
                		        	case 263:
                		        	case 264:
                		        	case 274:
                		        	case 275:
                		        	case 276:
                		        	case 277:
                		        		{
                		        	    alt196 = 2;
                		        	    }
                		        	    break;
                		        		default:
                		        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		        		    NoViableAltException nvae_d196s0 =
                		        		        new NoViableAltException("", 196, 0, input);

                		        		    throw nvae_d196s0;
                		        	}

                		        	switch (alt196) 
                		        	{
                		        	    case 1 :
                		        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:22: ( ( NUMBER | Hex_number ) ( ',' | '}' ) )=> (i= NUMBER | i= Hex_number )
                		        	        {
                		        	        	if ( (state.backtracking==0) )
                		        	        	{
                		        	        	   members.Remove(next-1); 
                		        	        	}
                		        	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1612:28: (i= NUMBER | i= Hex_number )
                		        	        	int alt195 = 2;
                		        	        	int LA195_0 = input.LA(1);

                		        	        	if ( (LA195_0 == NUMBER) )
                		        	        	{
                		        	        	    alt195 = 1;
                		        	        	}
                		        	        	else if ( (LA195_0 == Hex_number) )
                		        	        	{
                		        	        	    alt195 = 2;
                		        	        	}
                		        	        	else 
                		        	        	{
                		        	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		        	        	    NoViableAltException nvae_d195s0 =
                		        	        	        new NoViableAltException("", 195, 0, input);

                		        	        	    throw nvae_d195s0;
                		        	        	}
                		        	        	switch (alt195) 
                		        	        	{
                		        	        	    case 1 :
                		        	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1612:29: i= NUMBER
                		        	        	        {
                		        	        	        	_last = (CommonTree)input.LT(1);
                		        	        	        	i=(CommonTree)Match(input,NUMBER,FOLLOW_NUMBER_in_enum_member_declaration8460); if (state.failed) return retval;
                		        	        	        	if ( state.backtracking == 0 )
                		        	        	        	{i_tree = (CommonTree)adaptor.DupNode(i);

                		        	        	        		adaptor.AddChild(root_0, i_tree);
                		        	        	        	}
                		        	        	        	if ( (state.backtracking==0) )
                		        	        	        	{
                		        	        	        	   calcValue = Int32.Parse(((i != null) ? i.Text : null)); 
                		        	        	        	}

                		        	        	        	if ( (state.backtracking==0) ) {
                		        	        	        	}
                		        	        	        }
                		        	        	        break;
                		        	        	    case 2 :
                		        	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1613:31: i= Hex_number
                		        	        	        {
                		        	        	        	_last = (CommonTree)input.LT(1);
                		        	        	        	i=(CommonTree)Match(input,Hex_number,FOLLOW_Hex_number_in_enum_member_declaration8497); if (state.failed) return retval;
                		        	        	        	if ( state.backtracking == 0 )
                		        	        	        	{i_tree = (CommonTree)adaptor.DupNode(i);

                		        	        	        		adaptor.AddChild(root_0, i_tree);
                		        	        	        	}
                		        	        	        	if ( (state.backtracking==0) )
                		        	        	        	{
                		        	        	        	   calcValue = Int32.Parse(((i != null) ? i.Text : null).Substring(2), NumberStyles.AllowHexSpecifier); 
                		        	        	        	}

                		        	        	        	if ( (state.backtracking==0) ) {
                		        	        	        	}
                		        	        	        }
                		        	        	        break;

                		        	        	}

                		        	        	if ( (state.backtracking==0) )
                		        	        	{
                		        	        	   if (calcValue < 0 || calcValue > Int32.MaxValue) {
                		        	        	                               Warning(((eq != null) ? eq.Line : 0), "[UNSUPPORTED] enum member's value initialization ignored, only numeric literals in the range 0..MAXINT supported for enum values"); 
                		        	        	                               calcValue = next-1;
                		        	        	                            }
                		        	        	                            else if (calcValue < next-1) {
                		        	        	                               Warning(((eq != null) ? eq.Line : 0), "[UNSUPPORTED] enum member's value initialization ignored, value has already been assigned and enum values must be unique"); 
                		        	        	                               calcValue = next-1;
                		        	        	                            }
                		        	        	                            members[calcValue] = ((identifier504 != null) ? ((CommonTree)identifier504.Tree) : null); next =  calcValue + 1; 
                		        	        	}

                		        	        	if ( (state.backtracking==0) ) {
                		        	        	}
                		        	        }
                		        	        break;
                		        	    case 2 :
                		        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1623:21: expression
                		        	        {
                		        	        	_last = (CommonTree)input.LT(1);
                		        	        	PushFollow(FOLLOW_expression_in_enum_member_declaration8552);
                		        	        	expression505 = expression();
                		        	        	state._fsp--;
                		        	        	if (state.failed) return retval;
                		        	        	if ( (state.backtracking==0) ) 
                		        	        	adaptor.AddChild(root_0, expression505.Tree);
                		        	        	if ( (state.backtracking==0) )
                		        	        	{
                		        	        	   Warning(((eq != null) ? eq.Line : 0), "[UNSUPPORTED] enum member's value initialization ignored, only numeric literals supported for enum values"); 
                		        	        	}

                		        	        	if ( (state.backtracking==0) ) {
                		        	        	}
                		        	        }
                		        	        break;

                		        	}


                		        	if ( (state.backtracking==0) ) {
                		        	}
                		        }
                		        break;

                		}


                		if ( (state.backtracking==0) ) {
                		}
                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_member_declaration"

        public class integral_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "integral_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1628:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
        public JavaMaker.integral_type_return integral_type() // throws RecognitionException [1]
        {   
            JavaMaker.integral_type_return retval = new JavaMaker.integral_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set506 = null;

            CommonTree set506_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1628:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set506 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= BYTE && input.LA(1) <= LONG) || (input.LA(1) >= 251 && input.LA(1) <= 254) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set506_tree = (CommonTree)adaptor.DupNode(set506);

                	    adaptor.AddChild(root_0, set506_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "integral_type"

        public class enum_body_asnumber_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_body_asnumber"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1632:1: enum_body_asnumber[ CommonTree typeTree ] : '{' ( enum_member_declarations_asnumber[typeTree] ( ',' )? )? '}' ;
        public JavaMaker.enum_body_asnumber_return enum_body_asnumber(CommonTree typeTree) // throws RecognitionException [1]
        {   
            JavaMaker.enum_body_asnumber_return retval = new JavaMaker.enum_body_asnumber_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal507 = null;
            CommonTree char_literal509 = null;
            CommonTree char_literal510 = null;
            JavaMaker.enum_member_declarations_asnumber_return enum_member_declarations_asnumber508 = default(JavaMaker.enum_member_declarations_asnumber_return);


            CommonTree char_literal507_tree=null;
            CommonTree char_literal509_tree=null;
            CommonTree char_literal510_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1632:43: ( '{' ( enum_member_declarations_asnumber[typeTree] ( ',' )? )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1633:4: '{' ( enum_member_declarations_asnumber[typeTree] ( ',' )? )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal507=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_enum_body_asnumber8621); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal507_tree = (CommonTree)adaptor.DupNode(char_literal507);

                		adaptor.AddChild(root_0, char_literal507_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1633:8: ( enum_member_declarations_asnumber[typeTree] ( ',' )? )?
                	int alt199 = 2;
                	int LA199_0 = input.LA(1);

                	if ( (LA199_0 == OPEN_BRACKET || LA199_0 == IDENTIFIER || (LA199_0 >= ELIF && LA199_0 <= UNDEF) || LA199_0 == 195 || LA199_0 == 221 || (LA199_0 >= 224 && LA199_0 <= 239) || (LA199_0 >= 241 && LA199_0 <= 244) || (LA199_0 >= 247 && LA199_0 <= 250) || LA199_0 == 256 || (LA199_0 >= 263 && LA199_0 <= 264) || LA199_0 == 274 || LA199_0 == 277) )
                	{
                	    alt199 = 1;
                	}
                	switch (alt199) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1633:9: enum_member_declarations_asnumber[typeTree] ( ',' )?
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_enum_member_declarations_asnumber_in_enum_body_asnumber8624);
                	        	enum_member_declarations_asnumber508 = enum_member_declarations_asnumber(typeTree);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, enum_member_declarations_asnumber508.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1633:53: ( ',' )?
                	        	int alt198 = 2;
                	        	int LA198_0 = input.LA(1);

                	        	if ( (LA198_0 == COMMA) )
                	        	{
                	        	    alt198 = 1;
                	        	}
                	        	switch (alt198) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1633:54: ','
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	char_literal509=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_enum_body_asnumber8628); if (state.failed) return retval;

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal510=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_enum_body_asnumber8637); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal510_tree = (CommonTree)adaptor.DupNode(char_literal510);

                		adaptor.AddChild(root_0, char_literal510_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_body_asnumber"

        public class enum_member_declarations_asnumber_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_member_declarations_asnumber"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1634:1: enum_member_declarations_asnumber[ CommonTree typeTree ] : e1= enum_member_declaration_asnumber[typeTree, prevTree] ( ',' en= enum_member_declaration_asnumber[typeTree, prevTree] )* ;
        public JavaMaker.enum_member_declarations_asnumber_return enum_member_declarations_asnumber(CommonTree typeTree) // throws RecognitionException [1]
        {   
            JavaMaker.enum_member_declarations_asnumber_return retval = new JavaMaker.enum_member_declarations_asnumber_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal511 = null;
            JavaMaker.enum_member_declaration_asnumber_return e1 = default(JavaMaker.enum_member_declaration_asnumber_return);

            JavaMaker.enum_member_declaration_asnumber_return en = default(JavaMaker.enum_member_declaration_asnumber_return);


            CommonTree char_literal511_tree=null;


               CommonTree prevTree = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1637:2: (e1= enum_member_declaration_asnumber[typeTree, prevTree] ( ',' en= enum_member_declaration_asnumber[typeTree, prevTree] )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1638:2: e1= enum_member_declaration_asnumber[typeTree, prevTree] ( ',' en= enum_member_declaration_asnumber[typeTree, prevTree] )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_enum_member_declaration_asnumber_in_enum_member_declarations_asnumber8654);
                	e1 = enum_member_declaration_asnumber(typeTree, prevTree);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, e1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   prevTree = ((e1 != null) ? e1.thisTree : default(CommonTree)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1639:10: ( ',' en= enum_member_declaration_asnumber[typeTree, prevTree] )*
                	do 
                	{
                	    int alt200 = 2;
                	    int LA200_0 = input.LA(1);

                	    if ( (LA200_0 == COMMA) )
                	    {
                	        int LA200_1 = input.LA(2);

                	        if ( (LA200_1 == OPEN_BRACKET || LA200_1 == IDENTIFIER || (LA200_1 >= ELIF && LA200_1 <= UNDEF) || LA200_1 == 195 || LA200_1 == 221 || (LA200_1 >= 224 && LA200_1 <= 239) || (LA200_1 >= 241 && LA200_1 <= 244) || (LA200_1 >= 247 && LA200_1 <= 250) || LA200_1 == 256 || (LA200_1 >= 263 && LA200_1 <= 264) || LA200_1 == 274 || LA200_1 == 277) )
                	        {
                	            alt200 = 1;
                	        }


                	    }


                	    switch (alt200) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1639:11: ',' en= enum_member_declaration_asnumber[typeTree, prevTree]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal511=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_enum_member_declarations_asnumber8670); if (state.failed) return retval;
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_enum_member_declaration_asnumber_in_enum_member_declarations_asnumber8675);
                			    	en = enum_member_declaration_asnumber(typeTree, prevTree);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, en.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   prevTree = ((en != null) ? en.thisTree : default(CommonTree)); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop200;
                	    }
                	} while (true);

                	loop200:
                		;	// Stops C# compiler whining that label 'loop200' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_member_declarations_asnumber"

        public class enum_member_declaration_asnumber_return : TreeRuleReturnScope
        {
            public CommonTree thisTree;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "enum_member_declaration_asnumber"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1641:1: enum_member_declaration_asnumber[ CommonTree typeTree, CommonTree prevTree ] returns [ CommonTree thisTree ] : ( attributes )? identifier (eq= '=' expression -> ^( FIELD[$eq.token, \"FIELD\"] ( attributes )? PUBLIC[$eq.token, \"public\"] STATIC[$eq.token, \"static\"] FINAL[$eq.token, \"final\"] identifier $eq expression ) | magicNumber[$prevTree == null, $identifier.tree.Token, \"0\"] magicIncrement[$prevTree != null, $identifier.tree.token, $prevTree] -> ^( FIELD[$identifier.tree.Token, \"FIELD\"] ( attributes )? PUBLIC[$identifier.tree.Token, \"public\"] STATIC[$identifier.tree.Token, \"static\"] FINAL[$identifier.tree.Token, \"final\"] identifier ASSIGN[$identifier.tree.Token, \"=\"] ) ) ;
        public JavaMaker.enum_member_declaration_asnumber_return enum_member_declaration_asnumber(CommonTree typeTree, CommonTree prevTree) // throws RecognitionException [1]
        {   
            JavaMaker.enum_member_declaration_asnumber_return retval = new JavaMaker.enum_member_declaration_asnumber_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree eq = null;
            JavaMaker.attributes_return attributes512 = default(JavaMaker.attributes_return);

            JavaMaker.identifier_return identifier513 = default(JavaMaker.identifier_return);

            JavaMaker.expression_return expression514 = default(JavaMaker.expression_return);

            JavaMaker.magicNumber_return magicNumber515 = default(JavaMaker.magicNumber_return);

            JavaMaker.magicIncrement_return magicIncrement516 = default(JavaMaker.magicIncrement_return);


            CommonTree eq_tree=null;
            RewriteRuleNodeStream stream_ASSIGN = new RewriteRuleNodeStream(adaptor,"token ASSIGN");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_magicNumber = new RewriteRuleSubtreeStream(adaptor,"rule magicNumber");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            RewriteRuleSubtreeStream stream_magicIncrement = new RewriteRuleSubtreeStream(adaptor,"rule magicIncrement");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

             CommonTree prev = prevTree;  

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1644:2: ( ( attributes )? identifier (eq= '=' expression -> ^( FIELD[$eq.token, \"FIELD\"] ( attributes )? PUBLIC[$eq.token, \"public\"] STATIC[$eq.token, \"static\"] FINAL[$eq.token, \"final\"] identifier $eq expression ) | magicNumber[$prevTree == null, $identifier.tree.Token, \"0\"] magicIncrement[$prevTree != null, $identifier.tree.token, $prevTree] -> ^( FIELD[$identifier.tree.Token, \"FIELD\"] ( attributes )? PUBLIC[$identifier.tree.Token, \"public\"] STATIC[$identifier.tree.Token, \"static\"] FINAL[$identifier.tree.Token, \"final\"] identifier ASSIGN[$identifier.tree.Token, \"=\"] ) ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1645:2: ( attributes )? identifier (eq= '=' expression -> ^( FIELD[$eq.token, \"FIELD\"] ( attributes )? PUBLIC[$eq.token, \"public\"] STATIC[$eq.token, \"static\"] FINAL[$eq.token, \"final\"] identifier $eq expression ) | magicNumber[$prevTree == null, $identifier.tree.Token, \"0\"] magicIncrement[$prevTree != null, $identifier.tree.token, $prevTree] -> ^( FIELD[$identifier.tree.Token, \"FIELD\"] ( attributes )? PUBLIC[$identifier.tree.Token, \"public\"] STATIC[$identifier.tree.Token, \"static\"] FINAL[$identifier.tree.Token, \"final\"] identifier ASSIGN[$identifier.tree.Token, \"=\"] ) )
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1645:2: ( attributes )?
                	int alt201 = 2;
                	int LA201_0 = input.LA(1);

                	if ( (LA201_0 == OPEN_BRACKET) )
                	{
                	    alt201 = 1;
                	}
                	switch (alt201) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1645:2: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_enum_member_declaration_asnumber8705);
                	        	attributes512 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(attributes512.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_enum_member_declaration_asnumber8710);
                	identifier513 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier513.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.thisTree =  ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1646:12: (eq= '=' expression -> ^( FIELD[$eq.token, \"FIELD\"] ( attributes )? PUBLIC[$eq.token, \"public\"] STATIC[$eq.token, \"static\"] FINAL[$eq.token, \"final\"] identifier $eq expression ) | magicNumber[$prevTree == null, $identifier.tree.Token, \"0\"] magicIncrement[$prevTree != null, $identifier.tree.token, $prevTree] -> ^( FIELD[$identifier.tree.Token, \"FIELD\"] ( attributes )? PUBLIC[$identifier.tree.Token, \"public\"] STATIC[$identifier.tree.Token, \"static\"] FINAL[$identifier.tree.Token, \"final\"] identifier ASSIGN[$identifier.tree.Token, \"=\"] ) )
                	int alt202 = 2;
                	int LA202_0 = input.LA(1);

                	if ( (LA202_0 == ASSIGN) )
                	{
                	    alt202 = 1;
                	}
                	else if ( (LA202_0 == CLOSE_BRACE || LA202_0 == COMMA) )
                	{
                	    alt202 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d202s0 =
                	        new NoViableAltException("", 202, 0, input);

                	    throw nvae_d202s0;
                	}
                	switch (alt202) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1646:13: eq= '=' expression
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	eq=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_enum_member_declaration_asnumber8728); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_ASSIGN.Add(eq);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_enum_member_declaration_asnumber8732);
                	        	expression514 = expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_expression.Add(expression514.Tree);


                	        	// AST REWRITE
                	        	// elements:          identifier, eq, attributes, expression
                	        	// token labels:      eq
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleNodeStream stream_eq = new RewriteRuleNodeStream(adaptor, "token eq", eq);
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1646:33: -> ^( FIELD[$eq.token, \"FIELD\"] ( attributes )? PUBLIC[$eq.token, \"public\"] STATIC[$eq.token, \"static\"] FINAL[$eq.token, \"final\"] identifier $eq expression )
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1646:36: ^( FIELD[$eq.token, \"FIELD\"] ( attributes )? PUBLIC[$eq.token, \"public\"] STATIC[$eq.token, \"static\"] FINAL[$eq.token, \"final\"] identifier $eq expression )
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FIELD, eq.token, "FIELD"), root_1);

                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1646:64: ( attributes )?
                	        	    if ( stream_attributes.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_attributes.NextTree());

                	        	    }
                	        	    stream_attributes.Reset();
                	        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, eq.token, "public"));
                	        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(STATIC, eq.token, "static"));
                	        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(FINAL, eq.token, "final"));
                	        	    adaptor.AddChild(root_1,  dupTree(typeTree) );
                	        	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	        	    adaptor.AddChild(root_1, stream_eq.NextNode());
                	        	    adaptor.AddChild(root_1, stream_expression.NextTree());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1647:15: magicNumber[$prevTree == null, $identifier.tree.Token, \"0\"] magicIncrement[$prevTree != null, $identifier.tree.token, $prevTree]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicNumber_in_enum_member_declaration_asnumber8776);
                	        	magicNumber515 = magicNumber(prevTree == null, ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null).Token, "0");
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicNumber.Add(magicNumber515.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicIncrement_in_enum_member_declaration_asnumber8779);
                	        	magicIncrement516 = magicIncrement(prevTree != null, ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null).token, prevTree);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicIncrement.Add(magicIncrement516.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   prev = prevTree == null ? ((magicNumber515 != null) ? ((CommonTree)magicNumber515.Tree) : null) : ((magicIncrement516 != null) ? ((CommonTree)magicIncrement516.Tree) : null);  
                	        	}


                	        	// AST REWRITE
                	        	// elements:          attributes, identifier
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1648:92: -> ^( FIELD[$identifier.tree.Token, \"FIELD\"] ( attributes )? PUBLIC[$identifier.tree.Token, \"public\"] STATIC[$identifier.tree.Token, \"static\"] FINAL[$identifier.tree.Token, \"final\"] identifier ASSIGN[$identifier.tree.Token, \"=\"] )
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1648:95: ^( FIELD[$identifier.tree.Token, \"FIELD\"] ( attributes )? PUBLIC[$identifier.tree.Token, \"public\"] STATIC[$identifier.tree.Token, \"static\"] FINAL[$identifier.tree.Token, \"final\"] identifier ASSIGN[$identifier.tree.Token, \"=\"] )
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FIELD, ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null).Token, "FIELD"), root_1);

                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1648:136: ( attributes )?
                	        	    if ( stream_attributes.HasNext )
                	        	    {
                	        	        adaptor.AddChild(root_1, stream_attributes.NextTree());

                	        	    }
                	        	    stream_attributes.Reset();
                	        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null).Token, "public"));
                	        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(STATIC, ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null).Token, "static"));
                	        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(FINAL, ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null).Token, "final"));
                	        	    adaptor.AddChild(root_1,  dupTree(typeTree) );
                	        	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ASSIGN, ((identifier513 != null) ? ((CommonTree)identifier513.Tree) : null).Token, "="));
                	        	    adaptor.AddChild(root_1,  dupTree(prev) );

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "enum_member_declaration_asnumber"

        public class delegate_declaration_return : TreeRuleReturnScope
        {
            public Dictionary<String, CommonTree> compUnits;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "delegate_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1651:1: delegate_declaration[CommonTree atts, CommonTree mods, bool toplevel] returns [Dictionary<String, CommonTree> compUnits] : d= 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' magicDelegateInterface[$d.token, $return_type.tree, $identifier.tree, $formal_parameter_list.tree, $variant_generic_parameter_list.tyargs] magicMultiInvokerMethod[$d.token, $return_type.tree, $return_type.thetext == \"Void\" || $return_type.thetext == \"System.Void\", ifTree, $formal_parameter_list.tree, mkArgsFromParams($d.token, $formal_parameter_list.tree), $variant_generic_parameter_list.tyargs] magicMultiDelClass[$d.token, $atts, mangledMods, multiDelName, ifTree, $type_parameter_constraints_clauses.tree, $variant_generic_parameter_list.tree, $magicMultiInvokerMethod.tree, delClassMemberNodes] -> ^( INTERFACE[$d.token, \"interface\"] identifier magicDelegateInterface ) ;
        public JavaMaker.delegate_declaration_return delegate_declaration(CommonTree atts, CommonTree mods, bool toplevel) // throws RecognitionException [1]
        {   
            TypeContext_stack.Push(new TypeContext_scope());

            JavaMaker.delegate_declaration_return retval = new JavaMaker.delegate_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree d = null;
            CommonTree char_literal520 = null;
            CommonTree char_literal522 = null;
            CommonTree char_literal524 = null;
            JavaMaker.return_type_return return_type517 = default(JavaMaker.return_type_return);

            JavaMaker.identifier_return identifier518 = default(JavaMaker.identifier_return);

            JavaMaker.variant_generic_parameter_list_return variant_generic_parameter_list519 = default(JavaMaker.variant_generic_parameter_list_return);

            JavaMaker.formal_parameter_list_return formal_parameter_list521 = default(JavaMaker.formal_parameter_list_return);

            JavaMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses523 = default(JavaMaker.type_parameter_constraints_clauses_return);

            JavaMaker.magicDelegateInterface_return magicDelegateInterface525 = default(JavaMaker.magicDelegateInterface_return);

            JavaMaker.magicMultiInvokerMethod_return magicMultiInvokerMethod526 = default(JavaMaker.magicMultiInvokerMethod_return);

            JavaMaker.magicMultiDelClass_return magicMultiDelClass527 = default(JavaMaker.magicMultiDelClass_return);


            CommonTree d_tree=null;
            CommonTree char_literal520_tree=null;
            CommonTree char_literal522_tree=null;
            CommonTree char_literal524_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_218 = new RewriteRuleNodeStream(adaptor,"token 218");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_magicMultiInvokerMethod = new RewriteRuleSubtreeStream(adaptor,"rule magicMultiInvokerMethod");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_return_type = new RewriteRuleSubtreeStream(adaptor,"rule return_type");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            RewriteRuleSubtreeStream stream_magicDelegateInterface = new RewriteRuleSubtreeStream(adaptor,"rule magicDelegateInterface");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_variant_generic_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule variant_generic_parameter_list");
            RewriteRuleSubtreeStream stream_magicMultiDelClass = new RewriteRuleSubtreeStream(adaptor,"rule magicMultiDelClass");

                CommonTree mangledMods = toplevel ? mkRemoveMods(mods, new int[] {STATIC}) : addModifier(mods, (CommonTree)adaptor.Create(STATIC, "static"));
                // If no access modifier then type is internal, which we relax to public
                if (toplevel && !containsMods(mangledMods, new int[] {PUBLIC, PRIVATE})) {
                   mangledMods =  addModifier(mangledMods, (CommonTree)adaptor.Create(PUBLIC, "public"));
                }

                retval.compUnits =  new Dictionary<String,CommonTree>();
                CommonTree delClassMemberNodes = null;
                CommonTree ifTree = null;
                String delName = "";
                String multiDelName = "";

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1669:1: (d= 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' magicDelegateInterface[$d.token, $return_type.tree, $identifier.tree, $formal_parameter_list.tree, $variant_generic_parameter_list.tyargs] magicMultiInvokerMethod[$d.token, $return_type.tree, $return_type.thetext == \"Void\" || $return_type.thetext == \"System.Void\", ifTree, $formal_parameter_list.tree, mkArgsFromParams($d.token, $formal_parameter_list.tree), $variant_generic_parameter_list.tyargs] magicMultiDelClass[$d.token, $atts, mangledMods, multiDelName, ifTree, $type_parameter_constraints_clauses.tree, $variant_generic_parameter_list.tree, $magicMultiInvokerMethod.tree, delClassMemberNodes] -> ^( INTERFACE[$d.token, \"interface\"] identifier magicDelegateInterface ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1670:2: d= 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' magicDelegateInterface[$d.token, $return_type.tree, $identifier.tree, $formal_parameter_list.tree, $variant_generic_parameter_list.tyargs] magicMultiInvokerMethod[$d.token, $return_type.tree, $return_type.thetext == \"Void\" || $return_type.thetext == \"System.Void\", ifTree, $formal_parameter_list.tree, mkArgsFromParams($d.token, $formal_parameter_list.tree), $variant_generic_parameter_list.tyargs] magicMultiDelClass[$d.token, $atts, mangledMods, multiDelName, ifTree, $type_parameter_constraints_clauses.tree, $variant_generic_parameter_list.tree, $magicMultiInvokerMethod.tree, delClassMemberNodes]
                {
                	_last = (CommonTree)input.LT(1);
                	d=(CommonTree)Match(input,218,FOLLOW_218_in_delegate_declaration8862); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_218.Add(d);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_return_type_in_delegate_declaration8866);
                	return_type517 = return_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_return_type.Add(return_type517.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_delegate_declaration8870);
                	identifier518 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier518.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   delName = ((identifier518 != null) ? identifier518.thetext : default(string)); ((TypeContext_scope)TypeContext_stack.Peek()).typeName =  ((identifier518 != null) ? identifier518.thetext : default(string)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1670:124: ( variant_generic_parameter_list )?
                	int alt203 = 2;
                	int LA203_0 = input.LA(1);

                	if ( (LA203_0 == LTHAN) )
                	{
                	    alt203 = 1;
                	}
                	switch (alt203) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1670:124: variant_generic_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variant_generic_parameter_list_in_delegate_declaration8875);
                	        	variant_generic_parameter_list519 = variant_generic_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_variant_generic_parameter_list.Add(variant_generic_parameter_list519.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	  ifTree = mkType(d.token, ((identifier518 != null) ? ((CommonTree)identifier518.Tree) : null), ((variant_generic_parameter_list519 != null) ? variant_generic_parameter_list519.tyargs : default(List<string>))); 
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal520=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_delegate_declaration8884); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal520);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1671:9: ( formal_parameter_list )?
                	int alt204 = 2;
                	int LA204_0 = input.LA(1);

                	if ( ((LA204_0 >= OBJECT && LA204_0 <= THIS) || LA204_0 == OPEN_BRACKET || (LA204_0 >= BOOL && LA204_0 <= IDENTIFIER) || (LA204_0 >= ELIF && LA204_0 <= UNDEF) || LA204_0 == 195 || LA204_0 == 206 || (LA204_0 >= 212 && LA204_0 <= 213) || LA204_0 == 221 || (LA204_0 >= 224 && LA204_0 <= 239) || (LA204_0 >= 241 && LA204_0 <= 244) || (LA204_0 >= 247 && LA204_0 <= 254) || (LA204_0 >= 256 && LA204_0 <= 257) || (LA204_0 >= 263 && LA204_0 <= 264) || (LA204_0 >= 274 && LA204_0 <= 277)) )
                	{
                	    alt204 = 1;
                	}
                	switch (alt204) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1671:9: formal_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration8888);
                	        	formal_parameter_list521 = formal_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(formal_parameter_list521.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal522=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_delegate_declaration8893); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal522);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1671:40: ( type_parameter_constraints_clauses )?
                	int alt205 = 2;
                	int LA205_0 = input.LA(1);

                	if ( (LA205_0 == 236) )
                	{
                	    alt205 = 1;
                	}
                	switch (alt205) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1671:40: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration8897);
                	        	type_parameter_constraints_clauses523 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses523.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal524=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_delegate_declaration8902); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal524);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicDelegateInterface_in_delegate_declaration8917);
                	magicDelegateInterface525 = magicDelegateInterface(d.token, ((return_type517 != null) ? ((CommonTree)return_type517.Tree) : null), ((identifier518 != null) ? ((CommonTree)identifier518.Tree) : null), ((formal_parameter_list521 != null) ? ((CommonTree)formal_parameter_list521.Tree) : null), ((variant_generic_parameter_list519 != null) ? variant_generic_parameter_list519.tyargs : default(List<string>)));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicDelegateInterface.Add(magicDelegateInterface525.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMultiInvokerMethod_in_delegate_declaration8933);
                	magicMultiInvokerMethod526 = magicMultiInvokerMethod(d.token, ((return_type517 != null) ? ((CommonTree)return_type517.Tree) : null), ((return_type517 != null) ? return_type517.thetext : default(string)) == "Void" || ((return_type517 != null) ? return_type517.thetext : default(string)) == "System.Void", ifTree, ((formal_parameter_list521 != null) ? ((CommonTree)formal_parameter_list521.Tree) : null), mkArgsFromParams(d.token, ((formal_parameter_list521 != null) ? ((CommonTree)formal_parameter_list521.Tree) : null)), ((variant_generic_parameter_list519 != null) ? variant_generic_parameter_list519.tyargs : default(List<string>)));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMultiInvokerMethod.Add(magicMultiInvokerMethod526.Tree);
                	if ( (state.backtracking==0) )
                	{

                	           multiDelName = "__Multi" + delName;
                	           delClassMemberNodes = this.parseString("class_member_declarations", this.MultiDelegateMethods(mkTypeString(delName, ((variant_generic_parameter_list519 != null) ? variant_generic_parameter_list519.tyargs : default(List<string>))), mkTypeString(multiDelName, ((variant_generic_parameter_list519 != null) ? variant_generic_parameter_list519.tyargs : default(List<string>))),mkTypeArgString(((variant_generic_parameter_list519 != null) ? variant_generic_parameter_list519.tyargs : default(List<string>)))), false);
                	           AddToImports("java.util.List");
                	           AddToImports("java.util.LinkedList");
                	           AddToImports("java.util.ArrayList");
                	           AddToImports("CS2JNet.JavaSupport.util.ListSupport");
                	           ((NSContext_scope)NSContext_stack.Peek()).namespaces.Add("System.Collection"); // System.Collection.Ilist used in multi invoke method
                	        
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicMultiDelClass_in_delegate_declaration8951);
                	magicMultiDelClass527 = magicMultiDelClass(d.token, atts, mangledMods, multiDelName, ifTree, ((type_parameter_constraints_clauses523 != null) ? ((CommonTree)type_parameter_constraints_clauses523.Tree) : null), ((variant_generic_parameter_list519 != null) ? ((CommonTree)variant_generic_parameter_list519.Tree) : null), ((magicMultiInvokerMethod526 != null) ? ((CommonTree)magicMultiInvokerMethod526.Tree) : null), delClassMemberNodes);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicMultiDelClass.Add(magicMultiDelClass527.Tree);
                	if ( (state.backtracking==0) )
                	{

                	           retval.compUnits.Add(multiDelName, ((magicMultiDelClass527 != null) ? ((CommonTree)magicMultiDelClass527.Tree) : null));
                	        
                	}


                	// AST REWRITE
                	// elements:          magicDelegateInterface, identifier
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1687:7: -> ^( INTERFACE[$d.token, \"interface\"] identifier magicDelegateInterface )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1690:5: ^( INTERFACE[$d.token, \"interface\"] identifier magicDelegateInterface )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INTERFACE, d.token, "interface"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  mangledMods );
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	    adaptor.AddChild(root_1,  dupTree(((type_parameter_constraints_clauses523 != null) ? ((CommonTree)type_parameter_constraints_clauses523.Tree) : null)) );
                	    adaptor.AddChild(root_1,  dupTree(((variant_generic_parameter_list519 != null) ? ((CommonTree)variant_generic_parameter_list519.Tree) : null)) );
                	    adaptor.AddChild(root_1, stream_magicDelegateInterface.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                           retval.compUnits.Add(delName, dupTree(((CommonTree)retval.Tree)));

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                TypeContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "delegate_declaration"

        public class delegate_modifiers_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "delegate_modifiers"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1692:1: delegate_modifiers : ( modifier )+ ;
        public JavaMaker.delegate_modifiers_return delegate_modifiers() // throws RecognitionException [1]
        {   
            JavaMaker.delegate_modifiers_return retval = new JavaMaker.delegate_modifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.modifier_return modifier528 = default(JavaMaker.modifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1692:19: ( ( modifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1693:2: ( modifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1693:2: ( modifier )+
                	int cnt206 = 0;
                	do 
                	{
                	    int alt206 = 2;
                	    int LA206_0 = input.LA(1);

                	    if ( ((LA206_0 >= PUBLIC && LA206_0 <= STATIC) || LA206_0 == 194 || (LA206_0 >= 197 && LA206_0 <= 204)) )
                	    {
                	        alt206 = 1;
                	    }


                	    switch (alt206) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1693:2: modifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_modifier_in_delegate_modifiers9008);
                			    	modifier528 = modifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, modifier528.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt206 >= 1 ) goto loop206;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee206 =
                		                new EarlyExitException(206, input);
                		            throw eee206;
                	    }
                	    cnt206++;
                	} while (true);

                	loop206:
                		;	// Stops C# compiler whining that label 'loop206' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "delegate_modifiers"

        public class variant_generic_parameter_list_return : TreeRuleReturnScope
        {
            public List<string> tyargs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variant_generic_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1695:1: variant_generic_parameter_list returns [List<string> tyargs] : '<' variant_type_parameters[$tyargs] '>' ;
        public JavaMaker.variant_generic_parameter_list_return variant_generic_parameter_list() // throws RecognitionException [1]
        {   
            JavaMaker.variant_generic_parameter_list_return retval = new JavaMaker.variant_generic_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal529 = null;
            CommonTree char_literal531 = null;
            JavaMaker.variant_type_parameters_return variant_type_parameters530 = default(JavaMaker.variant_type_parameters_return);


            CommonTree char_literal529_tree=null;
            CommonTree char_literal531_tree=null;


                retval.tyargs =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1698:2: ( '<' variant_type_parameters[$tyargs] '>' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1699:2: '<' variant_type_parameters[$tyargs] '>'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal529=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_variant_generic_parameter_list9027); if (state.failed) return retval;
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variant_type_parameters_in_variant_generic_parameter_list9032);
                	variant_type_parameters530 = variant_type_parameters(retval.tyargs);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, variant_type_parameters530.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal531=(CommonTree)Match(input,GT,FOLLOW_GT_in_variant_generic_parameter_list9037); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variant_generic_parameter_list"

        public class variant_type_parameters_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variant_type_parameters"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1700:1: variant_type_parameters[List<string> tyargs] : v1= variant_type_variable_name ( ',' vn= variant_type_variable_name )* -> ( variant_type_variable_name )+ ;
        public JavaMaker.variant_type_parameters_return variant_type_parameters(List<string> tyargs) // throws RecognitionException [1]
        {   
            JavaMaker.variant_type_parameters_return retval = new JavaMaker.variant_type_parameters_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal532 = null;
            JavaMaker.variant_type_variable_name_return v1 = default(JavaMaker.variant_type_variable_name_return);

            JavaMaker.variant_type_variable_name_return vn = default(JavaMaker.variant_type_variable_name_return);


            CommonTree char_literal532_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_variant_type_variable_name = new RewriteRuleSubtreeStream(adaptor,"rule variant_type_variable_name");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1700:46: (v1= variant_type_variable_name ( ',' vn= variant_type_variable_name )* -> ( variant_type_variable_name )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1701:2: v1= variant_type_variable_name ( ',' vn= variant_type_variable_name )*
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters9050);
                	v1 = variant_type_variable_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_variant_type_variable_name.Add(v1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   tyargs.Add(((v1 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(v1.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(v1.Start)) : null)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1701:58: ( ',' vn= variant_type_variable_name )*
                	do 
                	{
                	    int alt207 = 2;
                	    int LA207_0 = input.LA(1);

                	    if ( (LA207_0 == COMMA) )
                	    {
                	        alt207 = 1;
                	    }


                	    switch (alt207) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1701:59: ',' vn= variant_type_variable_name
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal532=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_variant_type_parameters9055); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal532);

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters9059);
                			    	vn = variant_type_variable_name();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_variant_type_variable_name.Add(vn.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   tyargs.Add(((vn != null) ? input.TokenStream.ToString(
                			    	    input.TreeAdaptor.GetTokenStartIndex(vn.Start),
                			    	    input.TreeAdaptor.GetTokenStopIndex(vn.Start)) : null)); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop207;
                	    }
                	} while (true);

                	loop207:
                		;	// Stops C# compiler whining that label 'loop207' has no statements



                	// AST REWRITE
                	// elements:          variant_type_variable_name
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1701:122: -> ( variant_type_variable_name )+
                	{
                	    if ( !(stream_variant_type_variable_name.HasNext) ) {
                	        throw new RewriteEarlyExitException();
                	    }
                	    while ( stream_variant_type_variable_name.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_variant_type_variable_name.NextTree());

                	    }
                	    stream_variant_type_variable_name.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variant_type_parameters"

        public class variant_type_variable_name_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variant_type_variable_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1702:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
        public JavaMaker.variant_type_variable_name_return variant_type_variable_name() // throws RecognitionException [1]
        {   
            JavaMaker.variant_type_variable_name_return retval = new JavaMaker.variant_type_variable_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.attributes_return attributes533 = default(JavaMaker.attributes_return);

            JavaMaker.variance_annotation_return variance_annotation534 = default(JavaMaker.variance_annotation_return);

            JavaMaker.type_variable_name_return type_variable_name535 = default(JavaMaker.type_variable_name_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1702:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1703:2: ( attributes )? ( variance_annotation )? type_variable_name
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1703:2: ( attributes )?
                	int alt208 = 2;
                	int LA208_0 = input.LA(1);

                	if ( (LA208_0 == OPEN_BRACKET) )
                	{
                	    alt208 = 1;
                	}
                	switch (alt208) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1703:2: attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_variant_type_variable_name9077);
                	        	attributes533 = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, attributes533.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1703:16: ( variance_annotation )?
                	int alt209 = 2;
                	int LA209_0 = input.LA(1);

                	if ( (LA209_0 == IN || LA209_0 == 212) )
                	{
                	    alt209 = 1;
                	}
                	switch (alt209) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1703:16: variance_annotation
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variance_annotation_in_variant_type_variable_name9082);
                	        	variance_annotation534 = variance_annotation();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, variance_annotation534.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_variable_name_in_variant_type_variable_name9087);
                	type_variable_name535 = type_variable_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_variable_name535.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variant_type_variable_name"

        public class variance_annotation_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "variance_annotation"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1704:1: variance_annotation : ( 'in' -> IN | 'out' -> OUT );
        public JavaMaker.variance_annotation_return variance_annotation() // throws RecognitionException [1]
        {   
            JavaMaker.variance_annotation_return retval = new JavaMaker.variance_annotation_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal536 = null;
            CommonTree string_literal537 = null;

            CommonTree string_literal536_tree=null;
            CommonTree string_literal537_tree=null;
            RewriteRuleNodeStream stream_212 = new RewriteRuleNodeStream(adaptor,"token 212");
            RewriteRuleNodeStream stream_IN = new RewriteRuleNodeStream(adaptor,"token IN");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1704:20: ( 'in' -> IN | 'out' -> OUT )
                int alt210 = 2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0 == IN) )
                {
                    alt210 = 1;
                }
                else if ( (LA210_0 == 212) )
                {
                    alt210 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d210s0 =
                        new NoViableAltException("", 210, 0, input);

                    throw nvae_d210s0;
                }
                switch (alt210) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1705:2: 'in'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal536=(CommonTree)Match(input,IN,FOLLOW_IN_in_variance_annotation9095); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_IN.Add(string_literal536);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1705:7: -> IN
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IN, "IN"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1705:15: 'out'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	string_literal537=(CommonTree)Match(input,212,FOLLOW_212_in_variance_annotation9103); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_212.Add(string_literal537);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1705:21: -> OUT
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OUT, "OUT"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "variance_annotation"

        public class type_parameter_constraints_clauses_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter_constraints_clauses"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1707:1: type_parameter_constraints_clauses : ( type_parameter_constraints_clause )+ ;
        public JavaMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() // throws RecognitionException [1]
        {   
            JavaMaker.type_parameter_constraints_clauses_return retval = new JavaMaker.type_parameter_constraints_clauses_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_parameter_constraints_clause_return type_parameter_constraints_clause538 = default(JavaMaker.type_parameter_constraints_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1707:35: ( ( type_parameter_constraints_clause )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1708:2: ( type_parameter_constraints_clause )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1708:2: ( type_parameter_constraints_clause )+
                	int cnt211 = 0;
                	do 
                	{
                	    int alt211 = 2;
                	    int LA211_0 = input.LA(1);

                	    if ( (LA211_0 == 236) )
                	    {
                	        alt211 = 1;
                	    }


                	    switch (alt211) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1708:2: type_parameter_constraints_clause
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses9115);
                			    	type_parameter_constraints_clause538 = type_parameter_constraints_clause();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, type_parameter_constraints_clause538.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt211 >= 1 ) goto loop211;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee211 =
                		                new EarlyExitException(211, input);
                		            throw eee211;
                	    }
                	    cnt211++;
                	} while (true);

                	loop211:
                		;	// Stops C# compiler whining that label 'loop211' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter_constraints_clauses"

        public class type_parameter_constraints_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter_constraints_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1709:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list -> ^( TYPE_PARAM_CONSTRAINT type_variable_name ( type_parameter_constraint_list )? ) ;
        public JavaMaker.type_parameter_constraints_clause_return type_parameter_constraints_clause() // throws RecognitionException [1]
        {   
            JavaMaker.type_parameter_constraints_clause_return retval = new JavaMaker.type_parameter_constraints_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal539 = null;
            CommonTree char_literal541 = null;
            JavaMaker.type_variable_name_return type_variable_name540 = default(JavaMaker.type_variable_name_return);

            JavaMaker.type_parameter_constraint_list_return type_parameter_constraint_list542 = default(JavaMaker.type_parameter_constraint_list_return);


            CommonTree string_literal539_tree=null;
            CommonTree char_literal541_tree=null;
            RewriteRuleNodeStream stream_211 = new RewriteRuleNodeStream(adaptor,"token 211");
            RewriteRuleNodeStream stream_236 = new RewriteRuleNodeStream(adaptor,"token 236");
            RewriteRuleSubtreeStream stream_type_parameter_constraint_list = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraint_list");
            RewriteRuleSubtreeStream stream_type_variable_name = new RewriteRuleSubtreeStream(adaptor,"rule type_variable_name");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1709:34: ( 'where' type_variable_name ':' type_parameter_constraint_list -> ^( TYPE_PARAM_CONSTRAINT type_variable_name ( type_parameter_constraint_list )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1710:2: 'where' type_variable_name ':' type_parameter_constraint_list
                {
                	_last = (CommonTree)input.LT(1);
                	string_literal539=(CommonTree)Match(input,236,FOLLOW_236_in_type_parameter_constraints_clause9124); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_236.Add(string_literal539);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause9128);
                	type_variable_name540 = type_variable_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type_variable_name.Add(type_variable_name540.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal541=(CommonTree)Match(input,211,FOLLOW_211_in_type_parameter_constraints_clause9132); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_211.Add(char_literal541);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause9136);
                	type_parameter_constraint_list542 = type_parameter_constraint_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type_parameter_constraint_list.Add(type_parameter_constraint_list542.Tree);


                	// AST REWRITE
                	// elements:          type_variable_name, type_parameter_constraint_list
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1710:70: -> ^( TYPE_PARAM_CONSTRAINT type_variable_name ( type_parameter_constraint_list )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1710:73: ^( TYPE_PARAM_CONSTRAINT type_variable_name ( type_parameter_constraint_list )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE_PARAM_CONSTRAINT, "TYPE_PARAM_CONSTRAINT"), root_1);

                	    adaptor.AddChild(root_1, stream_type_variable_name.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1710:116: ( type_parameter_constraint_list )?
                	    if ( stream_type_parameter_constraint_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_constraint_list.NextTree());

                	    }
                	    stream_type_parameter_constraint_list.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter_constraints_clause"

        public class type_parameter_constraint_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_parameter_constraint_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1712:1: type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? -> ( secondary_constraint_list )? | secondary_constraint_list ( ',' constructor_constraint )? -> secondary_constraint_list | constructor_constraint ->);
        public JavaMaker.type_parameter_constraint_list_return type_parameter_constraint_list() // throws RecognitionException [1]
        {   
            JavaMaker.type_parameter_constraint_list_return retval = new JavaMaker.type_parameter_constraint_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal543 = null;
            CommonTree string_literal544 = null;
            CommonTree char_literal545 = null;
            CommonTree char_literal547 = null;
            CommonTree char_literal550 = null;
            JavaMaker.secondary_constraint_list_return secondary_constraint_list546 = default(JavaMaker.secondary_constraint_list_return);

            JavaMaker.constructor_constraint_return constructor_constraint548 = default(JavaMaker.constructor_constraint_return);

            JavaMaker.secondary_constraint_list_return secondary_constraint_list549 = default(JavaMaker.secondary_constraint_list_return);

            JavaMaker.constructor_constraint_return constructor_constraint551 = default(JavaMaker.constructor_constraint_return);

            JavaMaker.constructor_constraint_return constructor_constraint552 = default(JavaMaker.constructor_constraint_return);


            CommonTree string_literal543_tree=null;
            CommonTree string_literal544_tree=null;
            CommonTree char_literal545_tree=null;
            CommonTree char_literal547_tree=null;
            CommonTree char_literal550_tree=null;
            RewriteRuleNodeStream stream_245 = new RewriteRuleNodeStream(adaptor,"token 245");
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleNodeStream stream_255 = new RewriteRuleNodeStream(adaptor,"token 255");
            RewriteRuleSubtreeStream stream_secondary_constraint_list = new RewriteRuleSubtreeStream(adaptor,"rule secondary_constraint_list");
            RewriteRuleSubtreeStream stream_constructor_constraint = new RewriteRuleSubtreeStream(adaptor,"rule constructor_constraint");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1712:31: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? -> ( secondary_constraint_list )? | secondary_constraint_list ( ',' constructor_constraint )? -> secondary_constraint_list | constructor_constraint ->)
                int alt216 = 3;
                switch ( input.LA(1) ) 
                {
                case 245:
                case 255:
                	{
                    alt216 = 1;
                    }
                    break;
                case IDENTIFIER:
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 256:
                case 263:
                case 264:
                case 274:
                case 277:
                	{
                    alt216 = 2;
                    }
                    break;
                case 197:
                	{
                    alt216 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d216s0 =
                	        new NoViableAltException("", 216, 0, input);

                	    throw nvae_d216s0;
                }

                switch (alt216) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
                        {
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:5: ( 'class' | 'struct' )
                        	int alt212 = 2;
                        	int LA212_0 = input.LA(1);

                        	if ( (LA212_0 == 245) )
                        	{
                        	    alt212 = 1;
                        	}
                        	else if ( (LA212_0 == 255) )
                        	{
                        	    alt212 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d212s0 =
                        	        new NoViableAltException("", 212, 0, input);

                        	    throw nvae_d212s0;
                        	}
                        	switch (alt212) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:6: 'class'
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	string_literal543=(CommonTree)Match(input,245,FOLLOW_245_in_type_parameter_constraint_list9211); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_245.Add(string_literal543);


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:16: 'struct'
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	string_literal544=(CommonTree)Match(input,255,FOLLOW_255_in_type_parameter_constraint_list9215); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_255.Add(string_literal544);


                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:28: ( ',' secondary_constraint_list )?
                        	int alt213 = 2;
                        	int LA213_0 = input.LA(1);

                        	if ( (LA213_0 == COMMA) )
                        	{
                        	    int LA213_1 = input.LA(2);

                        	    if ( (LA213_1 == IDENTIFIER || (LA213_1 >= ELIF && LA213_1 <= UNDEF) || LA213_1 == 195 || LA213_1 == 221 || (LA213_1 >= 224 && LA213_1 <= 239) || (LA213_1 >= 241 && LA213_1 <= 244) || (LA213_1 >= 247 && LA213_1 <= 250) || LA213_1 == 256 || (LA213_1 >= 263 && LA213_1 <= 264) || LA213_1 == 274 || LA213_1 == 277) )
                        	    {
                        	        alt213 = 1;
                        	    }
                        	}
                        	switch (alt213) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:29: ',' secondary_constraint_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	char_literal545=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraint_list9221); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal545);

                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list9225);
                        	        	secondary_constraint_list546 = secondary_constraint_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_secondary_constraint_list.Add(secondary_constraint_list546.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:65: ( ',' constructor_constraint )?
                        	int alt214 = 2;
                        	int LA214_0 = input.LA(1);

                        	if ( (LA214_0 == COMMA) )
                        	{
                        	    alt214 = 1;
                        	}
                        	switch (alt214) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:66: ',' constructor_constraint
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	char_literal547=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraint_list9232); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal547);

                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list9236);
                        	        	constructor_constraint548 = constructor_constraint();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_constructor_constraint.Add(constructor_constraint548.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}



                        	// AST REWRITE
                        	// elements:          secondary_constraint_list
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1713:97: -> ( secondary_constraint_list )?
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1713:100: ( secondary_constraint_list )?
                        	    if ( stream_secondary_constraint_list.HasNext )
                        	    {
                        	        adaptor.AddChild(root_0, stream_secondary_constraint_list.NextTree());

                        	    }
                        	    stream_secondary_constraint_list.Reset();

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1714:4: secondary_constraint_list ( ',' constructor_constraint )?
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list9248);
                        	secondary_constraint_list549 = secondary_constraint_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_secondary_constraint_list.Add(secondary_constraint_list549.Tree);
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1714:32: ( ',' constructor_constraint )?
                        	int alt215 = 2;
                        	int LA215_0 = input.LA(1);

                        	if ( (LA215_0 == COMMA) )
                        	{
                        	    alt215 = 1;
                        	}
                        	switch (alt215) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1714:33: ',' constructor_constraint
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	char_literal550=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraint_list9253); if (state.failed) return retval; 
                        	        	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal550);

                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list9257);
                        	        	constructor_constraint551 = constructor_constraint();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_constructor_constraint.Add(constructor_constraint551.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}



                        	// AST REWRITE
                        	// elements:          secondary_constraint_list
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1714:64: -> secondary_constraint_list
                        	{
                        	    adaptor.AddChild(root_0, stream_secondary_constraint_list.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1715:4: constructor_constraint
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list9268);
                        	constructor_constraint552 = constructor_constraint();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_constructor_constraint.Add(constructor_constraint552.Tree);


                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1715:27: ->
                        	{
                        	    root_0 = null;
                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_parameter_constraint_list"

        public class secondary_constraint_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "secondary_constraint_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1720:1: secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* -> ( secondary_constraint )+ ;
        public JavaMaker.secondary_constraint_list_return secondary_constraint_list() // throws RecognitionException [1]
        {   
            JavaMaker.secondary_constraint_list_return retval = new JavaMaker.secondary_constraint_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal554 = null;
            JavaMaker.secondary_constraint_return secondary_constraint553 = default(JavaMaker.secondary_constraint_return);

            JavaMaker.secondary_constraint_return secondary_constraint555 = default(JavaMaker.secondary_constraint_return);


            CommonTree char_literal554_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_secondary_constraint = new RewriteRuleSubtreeStream(adaptor,"rule secondary_constraint");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1720:26: ( secondary_constraint ( ',' secondary_constraint )* -> ( secondary_constraint )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1721:2: secondary_constraint ( ',' secondary_constraint )*
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list9282);
                	secondary_constraint553 = secondary_constraint();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_secondary_constraint.Add(secondary_constraint553.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1721:23: ( ',' secondary_constraint )*
                	do 
                	{
                	    int alt217 = 2;
                	    int LA217_0 = input.LA(1);

                	    if ( (LA217_0 == COMMA) )
                	    {
                	        int LA217_1 = input.LA(2);

                	        if ( (LA217_1 == IDENTIFIER || (LA217_1 >= ELIF && LA217_1 <= UNDEF) || LA217_1 == 195 || LA217_1 == 221 || (LA217_1 >= 224 && LA217_1 <= 239) || (LA217_1 >= 241 && LA217_1 <= 244) || (LA217_1 >= 247 && LA217_1 <= 250) || LA217_1 == 256 || (LA217_1 >= 263 && LA217_1 <= 264) || LA217_1 == 274 || LA217_1 == 277) )
                	        {
                	            alt217 = 1;
                	        }


                	    }


                	    switch (alt217) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1721:24: ',' secondary_constraint
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal554=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_secondary_constraint_list9285); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal554);

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list9287);
                			    	secondary_constraint555 = secondary_constraint();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_secondary_constraint.Add(secondary_constraint555.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop217;
                	    }
                	} while (true);

                	loop217:
                		;	// Stops C# compiler whining that label 'loop217' has no statements



                	// AST REWRITE
                	// elements:          secondary_constraint
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1721:51: -> ( secondary_constraint )+
                	{
                	    if ( !(stream_secondary_constraint.HasNext) ) {
                	        throw new RewriteEarlyExitException();
                	    }
                	    while ( stream_secondary_constraint.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_secondary_constraint.NextTree());

                	    }
                	    stream_secondary_constraint.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "secondary_constraint_list"

        public class secondary_constraint_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "secondary_constraint"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1722:1: secondary_constraint : type_name ;
        public JavaMaker.secondary_constraint_return secondary_constraint() // throws RecognitionException [1]
        {   
            JavaMaker.secondary_constraint_return retval = new JavaMaker.secondary_constraint_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_name_return type_name556 = default(JavaMaker.type_name_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1722:21: ( type_name )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1723:2: type_name
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_name_in_secondary_constraint9302);
                	type_name556 = type_name();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type_name556.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "secondary_constraint"

        public class type_variable_name_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "type_variable_name"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1724:1: type_variable_name : identifier ;
        public JavaMaker.type_variable_name_return type_variable_name() // throws RecognitionException [1]
        {   
            JavaMaker.type_variable_name_return retval = new JavaMaker.type_variable_name_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.identifier_return identifier557 = default(JavaMaker.identifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1724:19: ( identifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1725:2: identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_type_variable_name9312);
                	identifier557 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier557.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "type_variable_name"

        public class constructor_constraint_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constructor_constraint"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1727:1: constructor_constraint : 'new' '(' ')' ;
        public JavaMaker.constructor_constraint_return constructor_constraint() // throws RecognitionException [1]
        {   
            JavaMaker.constructor_constraint_return retval = new JavaMaker.constructor_constraint_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal558 = null;
            CommonTree char_literal559 = null;
            CommonTree char_literal560 = null;

            CommonTree string_literal558_tree=null;
            CommonTree char_literal559_tree=null;
            CommonTree char_literal560_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1727:23: ( 'new' '(' ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1728:2: 'new' '(' ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal558=(CommonTree)Match(input,197,FOLLOW_197_in_constructor_constraint9321); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal558_tree = (CommonTree)adaptor.DupNode(string_literal558);

                		adaptor.AddChild(root_0, string_literal558_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal559=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_constraint9325); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal559_tree = (CommonTree)adaptor.DupNode(char_literal559);

                		adaptor.AddChild(root_0, char_literal559_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal560=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_constraint9329); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal560_tree = (CommonTree)adaptor.DupNode(char_literal560);

                		adaptor.AddChild(root_0, char_literal560_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constructor_constraint"

        public class return_type_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "return_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1729:1: return_type returns [string thetext] : ( type | void_type );
        public JavaMaker.return_type_return return_type() // throws RecognitionException [1]
        {   
            JavaMaker.return_type_return retval = new JavaMaker.return_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.type_return type561 = default(JavaMaker.type_return);

            JavaMaker.void_type_return void_type562 = default(JavaMaker.void_type_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1729:37: ( type | void_type )
                int alt218 = 2;
                int LA218_0 = input.LA(1);

                if ( (LA218_0 == OBJECT || (LA218_0 >= BOOL && LA218_0 <= IDENTIFIER) || (LA218_0 >= ELIF && LA218_0 <= UNDEF) || LA218_0 == 195 || LA218_0 == 221 || (LA218_0 >= 224 && LA218_0 <= 239) || (LA218_0 >= 241 && LA218_0 <= 244) || (LA218_0 >= 247 && LA218_0 <= 254) || LA218_0 == 256 || (LA218_0 >= 263 && LA218_0 <= 264) || (LA218_0 >= 274 && LA218_0 <= 277)) )
                {
                    alt218 = 1;
                }
                else if ( (LA218_0 == 206) )
                {
                    int LA218_2 = input.LA(2);

                    if ( (LA218_2 == STAR) )
                    {
                        alt218 = 1;
                    }
                    else if ( (LA218_2 == IDENTIFIER || (LA218_2 >= ELIF && LA218_2 <= UNDEF) || LA218_2 == 195 || LA218_2 == 221 || (LA218_2 >= 224 && LA218_2 <= 239) || (LA218_2 >= 241 && LA218_2 <= 244) || (LA218_2 >= 247 && LA218_2 <= 250) || LA218_2 == 256 || (LA218_2 >= 263 && LA218_2 <= 264) || LA218_2 == 274 || LA218_2 == 277) )
                    {
                        alt218 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d218s2 =
                            new NoViableAltException("", 218, 2, input);

                        throw nvae_d218s2;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d218s0 =
                        new NoViableAltException("", 218, 0, input);

                    throw nvae_d218s0;
                }
                switch (alt218) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1730:2: type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_return_type9341);
                        	type561 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type561.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.thetext =  ((type561 != null) ? type561.thetext : default(string)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1731:5: void_type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_void_type_in_return_type9349);
                        	void_type562 = void_type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, void_type562.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	  retval.thetext =  "System.Void"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "return_type"

        public class formal_parameter_list_return : TreeRuleReturnScope
        {
            public int numArgs;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "formal_parameter_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1732:1: formal_parameter_list returns [int numArgs] : formal_parameter ( ',' formal_parameter )* -> ^( PARAMS ( formal_parameter )+ ) ;
        public JavaMaker.formal_parameter_list_return formal_parameter_list() // throws RecognitionException [1]
        {   
            JavaMaker.formal_parameter_list_return retval = new JavaMaker.formal_parameter_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal564 = null;
            JavaMaker.formal_parameter_return formal_parameter563 = default(JavaMaker.formal_parameter_return);

            JavaMaker.formal_parameter_return formal_parameter565 = default(JavaMaker.formal_parameter_return);


            CommonTree char_literal564_tree=null;
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_formal_parameter = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter");

                retval.numArgs =  0;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1735:2: ( formal_parameter ( ',' formal_parameter )* -> ^( PARAMS ( formal_parameter )+ ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1736:2: formal_parameter ( ',' formal_parameter )*
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_formal_parameter_in_formal_parameter_list9367);
                	formal_parameter563 = formal_parameter();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_formal_parameter.Add(formal_parameter563.Tree);
                	if ( (state.backtracking==0) )
                	{
                	  retval.numArgs++;
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1736:33: ( ',' formal_parameter )*
                	do 
                	{
                	    int alt219 = 2;
                	    int LA219_0 = input.LA(1);

                	    if ( (LA219_0 == COMMA) )
                	    {
                	        alt219 = 1;
                	    }


                	    switch (alt219) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1736:34: ',' formal_parameter
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal564=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_formal_parameter_list9372); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal564);

                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_formal_parameter_in_formal_parameter_list9374);
                			    	formal_parameter565 = formal_parameter();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_formal_parameter.Add(formal_parameter565.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	  retval.numArgs++;
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop219;
                	    }
                	} while (true);

                	loop219:
                		;	// Stops C# compiler whining that label 'loop219' has no statements



                	// AST REWRITE
                	// elements:          formal_parameter
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1736:71: -> ^( PARAMS ( formal_parameter )+ )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1736:74: ^( PARAMS ( formal_parameter )+ )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, "PARAMS"), root_1);

                	    if ( !(stream_formal_parameter.HasNext) ) {
                	        throw new RewriteEarlyExitException();
                	    }
                	    while ( stream_formal_parameter.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_formal_parameter.NextTree());

                	    }
                	    stream_formal_parameter.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "formal_parameter_list"

        public class formal_parameter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "formal_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1737:1: formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
        public JavaMaker.formal_parameter_return formal_parameter() // throws RecognitionException [1]
        {   
            JavaMaker.formal_parameter_return retval = new JavaMaker.formal_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal569 = null;
            JavaMaker.attributes_return attributes566 = default(JavaMaker.attributes_return);

            JavaMaker.fixed_parameter_return fixed_parameter567 = default(JavaMaker.fixed_parameter_return);

            JavaMaker.parameter_array_return parameter_array568 = default(JavaMaker.parameter_array_return);


            CommonTree string_literal569_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1737:17: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )
                int alt222 = 2;
                int LA222_0 = input.LA(1);

                if ( ((LA222_0 >= OBJECT && LA222_0 <= THIS) || LA222_0 == OPEN_BRACKET || (LA222_0 >= BOOL && LA222_0 <= IDENTIFIER) || (LA222_0 >= ELIF && LA222_0 <= UNDEF) || LA222_0 == 195 || LA222_0 == 206 || (LA222_0 >= 212 && LA222_0 <= 213) || LA222_0 == 221 || (LA222_0 >= 224 && LA222_0 <= 239) || (LA222_0 >= 241 && LA222_0 <= 244) || (LA222_0 >= 247 && LA222_0 <= 254) || LA222_0 == 257 || (LA222_0 >= 263 && LA222_0 <= 264) || (LA222_0 >= 274 && LA222_0 <= 277)) )
                {
                    alt222 = 1;
                }
                else if ( (LA222_0 == 256) )
                {
                    int LA222_2 = input.LA(2);

                    if ( (LA222_2 == OPEN_BRACKET || LA222_2 == LTHAN || LA222_2 == STAR || LA222_2 == IDENTIFIER || LA222_2 == DOT || (LA222_2 >= ELIF && LA222_2 <= UNDEF) || LA222_2 == 195 || LA222_2 == 208 || (LA222_2 >= 220 && LA222_2 <= 221) || (LA222_2 >= 224 && LA222_2 <= 239) || (LA222_2 >= 241 && LA222_2 <= 244) || (LA222_2 >= 247 && LA222_2 <= 250) || LA222_2 == 256 || (LA222_2 >= 263 && LA222_2 <= 264) || LA222_2 == 274 || LA222_2 == 277) )
                    {
                        alt222 = 1;
                    }
                    else if ( (LA222_2 == CLOSE_BRACKET || LA222_2 == COMMA || LA222_2 == RPAREN) )
                    {
                        alt222 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d222s2 =
                            new NoViableAltException("", 222, 2, input);

                        throw nvae_d222s2;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d222s0 =
                        new NoViableAltException("", 222, 0, input);

                    throw nvae_d222s0;
                }
                switch (alt222) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1738:2: ( attributes )? ( fixed_parameter | parameter_array )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1738:2: ( attributes )?
                        	int alt220 = 2;
                        	int LA220_0 = input.LA(1);

                        	if ( (LA220_0 == OPEN_BRACKET) )
                        	{
                        	    alt220 = 1;
                        	}
                        	switch (alt220) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1738:2: attributes
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_attributes_in_formal_parameter9394);
                        	        	attributes566 = attributes();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, attributes566.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1738:16: ( fixed_parameter | parameter_array )
                        	int alt221 = 2;
                        	int LA221_0 = input.LA(1);

                        	if ( ((LA221_0 >= OBJECT && LA221_0 <= THIS) || (LA221_0 >= BOOL && LA221_0 <= IDENTIFIER) || (LA221_0 >= ELIF && LA221_0 <= UNDEF) || LA221_0 == 195 || LA221_0 == 206 || (LA221_0 >= 212 && LA221_0 <= 213) || LA221_0 == 221 || (LA221_0 >= 224 && LA221_0 <= 239) || (LA221_0 >= 241 && LA221_0 <= 244) || (LA221_0 >= 247 && LA221_0 <= 254) || LA221_0 == 256 || (LA221_0 >= 263 && LA221_0 <= 264) || (LA221_0 >= 274 && LA221_0 <= 277)) )
                        	{
                        	    alt221 = 1;
                        	}
                        	else if ( (LA221_0 == 257) )
                        	{
                        	    alt221 = 2;
                        	}
                        	else 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d221s0 =
                        	        new NoViableAltException("", 221, 0, input);

                        	    throw nvae_d221s0;
                        	}
                        	switch (alt221) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1738:17: fixed_parameter
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_fixed_parameter_in_formal_parameter9400);
                        	        	fixed_parameter567 = fixed_parameter();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, fixed_parameter567.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;
                        	    case 2 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1738:35: parameter_array
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_parameter_array_in_formal_parameter9404);
                        	        	parameter_array568 = parameter_array();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) 
                        	        	adaptor.AddChild(root_0, parameter_array568.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1739:4: '__arglist'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal569=(CommonTree)Match(input,256,FOLLOW_256_in_formal_parameter9411); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal569_tree = (CommonTree)adaptor.DupNode(string_literal569);

                        		adaptor.AddChild(root_0, string_literal569_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "formal_parameter"

        public class fixed_parameters_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_parameters"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1740:1: fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
        public JavaMaker.fixed_parameters_return fixed_parameters() // throws RecognitionException [1]
        {   
            JavaMaker.fixed_parameters_return retval = new JavaMaker.fixed_parameters_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal571 = null;
            JavaMaker.fixed_parameter_return fixed_parameter570 = default(JavaMaker.fixed_parameter_return);

            JavaMaker.fixed_parameter_return fixed_parameter572 = default(JavaMaker.fixed_parameter_return);


            CommonTree char_literal571_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1740:17: ( fixed_parameter ( ',' fixed_parameter )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1741:2: fixed_parameter ( ',' fixed_parameter )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_fixed_parameter_in_fixed_parameters9419);
                	fixed_parameter570 = fixed_parameter();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, fixed_parameter570.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1741:20: ( ',' fixed_parameter )*
                	do 
                	{
                	    int alt223 = 2;
                	    int LA223_0 = input.LA(1);

                	    if ( (LA223_0 == COMMA) )
                	    {
                	        alt223 = 1;
                	    }


                	    switch (alt223) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1741:21: ',' fixed_parameter
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal571=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_fixed_parameters9424); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal571_tree = (CommonTree)adaptor.DupNode(char_literal571);

                			    		adaptor.AddChild(root_0, char_literal571_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_fixed_parameter_in_fixed_parameters9428);
                			    	fixed_parameter572 = fixed_parameter();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, fixed_parameter572.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop223;
                	    }
                	} while (true);

                	loop223:
                		;	// Stops C# compiler whining that label 'loop223' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_parameters"

        public class fixed_parameter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_parameter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1743:1: fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
        public JavaMaker.fixed_parameter_return fixed_parameter() // throws RecognitionException [1]
        {   
            JavaMaker.fixed_parameter_return retval = new JavaMaker.fixed_parameter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.parameter_modifier_return parameter_modifier573 = default(JavaMaker.parameter_modifier_return);

            JavaMaker.type_return type574 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier575 = default(JavaMaker.identifier_return);

            JavaMaker.default_argument_return default_argument576 = default(JavaMaker.default_argument_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1743:16: ( ( parameter_modifier )? type identifier ( default_argument )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1744:2: ( parameter_modifier )? type identifier ( default_argument )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1744:2: ( parameter_modifier )?
                	int alt224 = 2;
                	int LA224_0 = input.LA(1);

                	if ( (LA224_0 == THIS || (LA224_0 >= 212 && LA224_0 <= 213)) )
                	{
                	    alt224 = 1;
                	}
                	switch (alt224) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1744:2: parameter_modifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_parameter_modifier_in_fixed_parameter9439);
                	        	parameter_modifier573 = parameter_modifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, parameter_modifier573.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_fixed_parameter9444);
                	type574 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type574.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_fixed_parameter9448);
                	identifier575 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier575.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1744:44: ( default_argument )?
                	int alt225 = 2;
                	int LA225_0 = input.LA(1);

                	if ( (LA225_0 == ASSIGN) )
                	{
                	    alt225 = 1;
                	}
                	switch (alt225) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1744:44: default_argument
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_default_argument_in_fixed_parameter9452);
                	        	default_argument576 = default_argument();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, default_argument576.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_parameter"

        public class default_argument_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "default_argument"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1746:1: default_argument : '=' expression ;
        public JavaMaker.default_argument_return default_argument() // throws RecognitionException [1]
        {   
            JavaMaker.default_argument_return retval = new JavaMaker.default_argument_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal577 = null;
            JavaMaker.expression_return expression578 = default(JavaMaker.expression_return);


            CommonTree char_literal577_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1746:17: ( '=' expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1747:2: '=' expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal577=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_default_argument9462); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal577_tree = (CommonTree)adaptor.DupNode(char_literal577);

                		adaptor.AddChild(root_0, char_literal577_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_default_argument9464);
                	expression578 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression578.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "default_argument"

        public class parameter_modifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "parameter_modifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1748:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
        public JavaMaker.parameter_modifier_return parameter_modifier() // throws RecognitionException [1]
        {   
            JavaMaker.parameter_modifier_return retval = new JavaMaker.parameter_modifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set579 = null;

            CommonTree set579_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1748:19: ( 'ref' | 'out' | 'this' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set579 = (CommonTree)input.LT(1);
                	if ( input.LA(1) == THIS || (input.LA(1) >= 212 && input.LA(1) <= 213) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set579_tree = (CommonTree)adaptor.DupNode(set579);

                	    adaptor.AddChild(root_0, set579_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "parameter_modifier"

        public class parameter_array_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "parameter_array"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1750:1: parameter_array : p= 'params' t= type identifier ;
        public JavaMaker.parameter_array_return parameter_array() // throws RecognitionException [1]
        {   
            JavaMaker.parameter_array_return retval = new JavaMaker.parameter_array_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree p = null;
            JavaMaker.type_return t = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier580 = default(JavaMaker.identifier_return);


            CommonTree p_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1750:16: (p= 'params' t= type identifier )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1751:2: p= 'params' t= type identifier
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	p=(CommonTree)Match(input,257,FOLLOW_257_in_parameter_array9489); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{p_tree = (CommonTree)adaptor.DupNode(p);

                		root_0 = (CommonTree)adaptor.BecomeRoot(p_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_parameter_array9496);
                	t = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, t.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_parameter_array9500);
                	identifier580 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier580.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   
                	         // type will be an array, need to strip the final [] for java
                	         int numComponents = adaptor.GetChildCount(((t != null) ? ((CommonTree)t.Tree) : null)); 
                	         // sanity check
                	         if (numComponents >= 3 &&
                	              adaptor.GetType(adaptor.GetChild(((t != null) ? ((CommonTree)t.Tree) : null), numComponents-2)) == OPEN_BRACKET &&
                	              adaptor.GetType(adaptor.GetChild(((t != null) ? ((CommonTree)t.Tree) : null), numComponents-1)) == CLOSE_BRACKET) 
                	         {
                	             adaptor.DeleteChild(((t != null) ? ((CommonTree)t.Tree) : null), numComponents-1);
                	             adaptor.DeleteChild(((t != null) ? ((CommonTree)t.Tree) : null), numComponents-2);
                	         }
                	         else {
                	             Error(((p != null) ? p.Line : 0), "[SOURCE ERROR] params type must be an array");
                	         }
                	      
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "parameter_array"

        public class interface_declaration_return : TreeRuleReturnScope
        {
            public string name;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1770:1: interface_declaration[CommonTree atts, CommonTree mods, CommonTree partial] returns [string name] : c= 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? -> ^( INTERFACE[$c.token, \"interface\"] identifier ( type_parameter_constraints_clauses )? ( variant_generic_parameter_list )? ( interface_base )? interface_body ) ;
        public JavaMaker.interface_declaration_return interface_declaration(CommonTree atts, CommonTree mods, CommonTree partial) // throws RecognitionException [1]
        {   
            TypeContext_stack.Push(new TypeContext_scope());

            JavaMaker.interface_declaration_return retval = new JavaMaker.interface_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree char_literal586 = null;
            JavaMaker.identifier_return identifier581 = default(JavaMaker.identifier_return);

            JavaMaker.variant_generic_parameter_list_return variant_generic_parameter_list582 = default(JavaMaker.variant_generic_parameter_list_return);

            JavaMaker.interface_base_return interface_base583 = default(JavaMaker.interface_base_return);

            JavaMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses584 = default(JavaMaker.type_parameter_constraints_clauses_return);

            JavaMaker.interface_body_return interface_body585 = default(JavaMaker.interface_body_return);


            CommonTree c_tree=null;
            CommonTree char_literal586_tree=null;
            RewriteRuleNodeStream stream_258 = new RewriteRuleNodeStream(adaptor,"token 258");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleSubtreeStream stream_interface_body = new RewriteRuleSubtreeStream(adaptor,"rule interface_body");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_interface_base = new RewriteRuleSubtreeStream(adaptor,"rule interface_base");
            RewriteRuleSubtreeStream stream_variant_generic_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule variant_generic_parameter_list");

                CommonTree mangledMods = mkRemoveMods(mods, new int[] {STATIC});
                // If no access modifier then type is internal, which we relax to public
                if (!containsMods(mangledMods, new int[] {PUBLIC, PRIVATE})) {
                   mangledMods =  addModifier(mangledMods, (CommonTree)adaptor.Create(PUBLIC, "public"));
                }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1779:1: (c= 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? -> ^( INTERFACE[$c.token, \"interface\"] identifier ( type_parameter_constraints_clauses )? ( variant_generic_parameter_list )? ( interface_base )? interface_body ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1780:2: c= 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
                {
                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,258,FOLLOW_258_in_interface_declaration9539); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_258.Add(c);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_interface_declaration9543);
                	identifier581 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier581.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.name =  ((identifier581 != null) ? identifier581.thetext : default(string)); ((TypeContext_scope)TypeContext_stack.Peek()).typeName =  ((identifier581 != null) ? identifier581.thetext : default(string)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1780:109: ( variant_generic_parameter_list )?
                	int alt226 = 2;
                	int LA226_0 = input.LA(1);

                	if ( (LA226_0 == LTHAN) )
                	{
                	    alt226 = 1;
                	}
                	switch (alt226) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1780:109: variant_generic_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_variant_generic_parameter_list_in_interface_declaration9548);
                	        	variant_generic_parameter_list582 = variant_generic_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_variant_generic_parameter_list.Add(variant_generic_parameter_list582.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1781:6: ( interface_base )?
                	int alt227 = 2;
                	int LA227_0 = input.LA(1);

                	if ( (LA227_0 == 211) )
                	{
                	    alt227 = 1;
                	}
                	switch (alt227) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1781:6: interface_base
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_interface_base_in_interface_declaration9557);
                	        	interface_base583 = interface_base();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_interface_base.Add(interface_base583.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1781:24: ( type_parameter_constraints_clauses )?
                	int alt228 = 2;
                	int LA228_0 = input.LA(1);

                	if ( (LA228_0 == 236) )
                	{
                	    alt228 = 1;
                	}
                	switch (alt228) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1781:24: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration9562);
                	        	type_parameter_constraints_clauses584 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses584.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_interface_body_in_interface_declaration9567);
                	interface_body585 = interface_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_interface_body.Add(interface_body585.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1781:79: ( ';' )?
                	int alt229 = 2;
                	int LA229_0 = input.LA(1);

                	if ( (LA229_0 == SEMI) )
                	{
                	    alt229 = 1;
                	}
                	switch (alt229) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1781:79: ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal586=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_interface_declaration9571); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal586);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}



                	// AST REWRITE
                	// elements:          interface_body, variant_generic_parameter_list, type_parameter_constraints_clauses, interface_base, identifier
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1782:5: -> ^( INTERFACE[$c.token, \"interface\"] identifier ( type_parameter_constraints_clauses )? ( variant_generic_parameter_list )? ( interface_base )? interface_body )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1782:8: ^( INTERFACE[$c.token, \"interface\"] identifier ( type_parameter_constraints_clauses )? ( variant_generic_parameter_list )? ( interface_base )? interface_body )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INTERFACE, c.token, "interface"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(partial) );
                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  mangledMods );
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1782:111: ( type_parameter_constraints_clauses )?
                	    if ( stream_type_parameter_constraints_clauses.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_constraints_clauses.NextTree());

                	    }
                	    stream_type_parameter_constraints_clauses.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1782:147: ( variant_generic_parameter_list )?
                	    if ( stream_variant_generic_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_variant_generic_parameter_list.NextTree());

                	    }
                	    stream_variant_generic_parameter_list.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1782:179: ( interface_base )?
                	    if ( stream_interface_base.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_interface_base.NextTree());

                	    }
                	    stream_interface_base.Reset();
                	    adaptor.AddChild(root_1, stream_interface_body.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                TypeContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "interface_declaration"

        public class interface_base_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_base"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1784:1: interface_base : c= ':' ts+= type ( ',' ts+= type )* -> ( ^( EXTENDS[$c.token,\"extends\"] $ts) )* ;
        public JavaMaker.interface_base_return interface_base() // throws RecognitionException [1]
        {   
            JavaMaker.interface_base_return retval = new JavaMaker.interface_base_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree char_literal587 = null;
            List list_ts = null;
            RuleReturnScope ts = null;
            CommonTree c_tree=null;
            CommonTree char_literal587_tree=null;
            RewriteRuleNodeStream stream_211 = new RewriteRuleNodeStream(adaptor,"token 211");
            RewriteRuleNodeStream stream_COMMA = new RewriteRuleNodeStream(adaptor,"token COMMA");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1784:15: (c= ':' ts+= type ( ',' ts+= type )* -> ( ^( EXTENDS[$c.token,\"extends\"] $ts) )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1785:2: c= ':' ts+= type ( ',' ts+= type )*
                {
                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,211,FOLLOW_211_in_interface_base9615); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_211.Add(c);

                	_last = (CommonTree)input.LT(1);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_interface_base9621);
                	ts = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(ts.Tree);
                	if (list_ts == null) list_ts = new ArrayList();
                	list_ts.Add(ts.Tree);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1785:19: ( ',' ts+= type )*
                	do 
                	{
                	    int alt230 = 2;
                	    int LA230_0 = input.LA(1);

                	    if ( (LA230_0 == COMMA) )
                	    {
                	        alt230 = 1;
                	    }


                	    switch (alt230) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1785:20: ',' ts+= type
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal587=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_interface_base9624); if (state.failed) return retval; 
                			    	if ( (state.backtracking==0) ) stream_COMMA.Add(char_literal587);

                			    	_last = (CommonTree)input.LT(1);
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_type_in_interface_base9630);
                			    	ts = type();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_type.Add(ts.Tree);
                			    	if (list_ts == null) list_ts = new ArrayList();
                			    	list_ts.Add(ts.Tree);


                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop230;
                	    }
                	} while (true);

                	loop230:
                		;	// Stops C# compiler whining that label 'loop230' has no statements



                	// AST REWRITE
                	// elements:          ts
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  ts
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_ts = new RewriteRuleSubtreeStream(adaptor, "token ts", list_ts);
                	root_0 = (CommonTree)adaptor.Nil;
                	// 1785:37: -> ( ^( EXTENDS[$c.token,\"extends\"] $ts) )*
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1785:40: ( ^( EXTENDS[$c.token,\"extends\"] $ts) )*
                	    while ( stream_ts.HasNext )
                	    {
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1785:40: ^( EXTENDS[$c.token,\"extends\"] $ts)
                	        {
                	        CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS, c.token, "extends"), root_1);

                	        adaptor.AddChild(root_1, stream_ts.NextTree());

                	        adaptor.AddChild(root_0, root_1);
                	        }

                	    }
                	    stream_ts.Reset();

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_base"

        public class interface_modifiers_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_modifiers"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1787:1: interface_modifiers : ( modifier )+ ;
        public JavaMaker.interface_modifiers_return interface_modifiers() // throws RecognitionException [1]
        {   
            JavaMaker.interface_modifiers_return retval = new JavaMaker.interface_modifiers_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.modifier_return modifier588 = default(JavaMaker.modifier_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1787:20: ( ( modifier )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1788:2: ( modifier )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1788:2: ( modifier )+
                	int cnt231 = 0;
                	do 
                	{
                	    int alt231 = 2;
                	    int LA231_0 = input.LA(1);

                	    if ( ((LA231_0 >= PUBLIC && LA231_0 <= STATIC) || LA231_0 == 194 || (LA231_0 >= 197 && LA231_0 <= 204)) )
                	    {
                	        alt231 = 1;
                	    }


                	    switch (alt231) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1788:2: modifier
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_modifier_in_interface_modifiers9652);
                			    	modifier588 = modifier();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, modifier588.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt231 >= 1 ) goto loop231;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee231 =
                		                new EarlyExitException(231, input);
                		            throw eee231;
                	    }
                	    cnt231++;
                	} while (true);

                	loop231:
                		;	// Stops C# compiler whining that label 'loop231' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_modifiers"

        public class interface_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1789:1: interface_body : '{' ( interface_member_declarations )? '}' ;
        public JavaMaker.interface_body_return interface_body() // throws RecognitionException [1]
        {   
            JavaMaker.interface_body_return retval = new JavaMaker.interface_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal589 = null;
            CommonTree char_literal591 = null;
            JavaMaker.interface_member_declarations_return interface_member_declarations590 = default(JavaMaker.interface_member_declarations_return);


            CommonTree char_literal589_tree=null;
            CommonTree char_literal591_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1789:15: ( '{' ( interface_member_declarations )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1790:2: '{' ( interface_member_declarations )? '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal589=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_body9661); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal589_tree = (CommonTree)adaptor.DupNode(char_literal589);

                		adaptor.AddChild(root_0, char_literal589_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1790:8: ( interface_member_declarations )?
                	int alt232 = 2;
                	int LA232_0 = input.LA(1);

                	if ( ((LA232_0 >= PUBLIC && LA232_0 <= STATIC) || LA232_0 == OBJECT || LA232_0 == OPEN_BRACKET || (LA232_0 >= BOOL && LA232_0 <= IDENTIFIER) || (LA232_0 >= ELIF && LA232_0 <= UNDEF) || (LA232_0 >= 194 && LA232_0 <= 195) || (LA232_0 >= 197 && LA232_0 <= 204) || LA232_0 == 206 || LA232_0 == 221 || (LA232_0 >= 224 && LA232_0 <= 244) || (LA232_0 >= 247 && LA232_0 <= 254) || LA232_0 == 256 || (LA232_0 >= 263 && LA232_0 <= 264) || (LA232_0 >= 274 && LA232_0 <= 277)) )
                	{
                	    alt232 = 1;
                	}
                	switch (alt232) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1790:8: interface_member_declarations
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_interface_member_declarations_in_interface_body9665);
                	        	interface_member_declarations590 = interface_member_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, interface_member_declarations590.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal591=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_body9670); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal591_tree = (CommonTree)adaptor.DupNode(char_literal591);

                		adaptor.AddChild(root_0, char_literal591_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_body"

        public class interface_member_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_member_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1791:1: interface_member_declarations : ( interface_member_declaration )+ ;
        public JavaMaker.interface_member_declarations_return interface_member_declarations() // throws RecognitionException [1]
        {   
            JavaMaker.interface_member_declarations_return retval = new JavaMaker.interface_member_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.interface_member_declaration_return interface_member_declaration592 = default(JavaMaker.interface_member_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1791:30: ( ( interface_member_declaration )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1792:2: ( interface_member_declaration )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1792:2: ( interface_member_declaration )+
                	int cnt233 = 0;
                	do 
                	{
                	    int alt233 = 2;
                	    int LA233_0 = input.LA(1);

                	    if ( ((LA233_0 >= PUBLIC && LA233_0 <= STATIC) || LA233_0 == OBJECT || LA233_0 == OPEN_BRACKET || (LA233_0 >= BOOL && LA233_0 <= IDENTIFIER) || (LA233_0 >= ELIF && LA233_0 <= UNDEF) || (LA233_0 >= 194 && LA233_0 <= 195) || (LA233_0 >= 197 && LA233_0 <= 204) || LA233_0 == 206 || LA233_0 == 221 || (LA233_0 >= 224 && LA233_0 <= 244) || (LA233_0 >= 247 && LA233_0 <= 254) || LA233_0 == 256 || (LA233_0 >= 263 && LA233_0 <= 264) || (LA233_0 >= 274 && LA233_0 <= 277)) )
                	    {
                	        alt233 = 1;
                	    }


                	    switch (alt233) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1792:2: interface_member_declaration
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations9678);
                			    	interface_member_declaration592 = interface_member_declaration();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, interface_member_declaration592.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt233 >= 1 ) goto loop233;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee233 =
                		                new EarlyExitException(233, input);
                		            throw eee233;
                	    }
                	    cnt233++;
                	} while (true);

                	loop233:
                		;	// Stops C# compiler whining that label 'loop233' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_member_declarations"

        public class interface_member_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_member_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1793:1: interface_member_declaration : (a= attributes )? (m= modifiers )? (vt= void_type im1= interface_method_declaration[$a.tree, $m.tree, $vt.tree] -> $im1 | ie= interface_event_declaration[$a.tree, $m.tree] -> $ie | t= type ( ( identifier ( type_parameter_list )? '(' )=>im2= interface_method_declaration[$a.tree, $m.tree, $t.tree] -> $im2 | ( member_name '{' )=>ip= interface_property_declaration[$a.tree, $m.tree, $t.tree] -> $ip | ii= interface_indexer_declaration[$a.tree, $m.tree, $t.tree] -> $ii) ) ;
        public JavaMaker.interface_member_declaration_return interface_member_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.interface_member_declaration_return retval = new JavaMaker.interface_member_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.attributes_return a = default(JavaMaker.attributes_return);

            JavaMaker.modifiers_return m = default(JavaMaker.modifiers_return);

            JavaMaker.void_type_return vt = default(JavaMaker.void_type_return);

            JavaMaker.interface_method_declaration_return im1 = default(JavaMaker.interface_method_declaration_return);

            JavaMaker.interface_event_declaration_return ie = default(JavaMaker.interface_event_declaration_return);

            JavaMaker.type_return t = default(JavaMaker.type_return);

            JavaMaker.interface_method_declaration_return im2 = default(JavaMaker.interface_method_declaration_return);

            JavaMaker.interface_property_declaration_return ip = default(JavaMaker.interface_property_declaration_return);

            JavaMaker.interface_indexer_declaration_return ii = default(JavaMaker.interface_indexer_declaration_return);


            RewriteRuleSubtreeStream stream_interface_event_declaration = new RewriteRuleSubtreeStream(adaptor,"rule interface_event_declaration");
            RewriteRuleSubtreeStream stream_interface_property_declaration = new RewriteRuleSubtreeStream(adaptor,"rule interface_property_declaration");
            RewriteRuleSubtreeStream stream_interface_indexer_declaration = new RewriteRuleSubtreeStream(adaptor,"rule interface_indexer_declaration");
            RewriteRuleSubtreeStream stream_interface_method_declaration = new RewriteRuleSubtreeStream(adaptor,"rule interface_method_declaration");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            RewriteRuleSubtreeStream stream_modifiers = new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_void_type = new RewriteRuleSubtreeStream(adaptor,"rule void_type");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1793:29: ( (a= attributes )? (m= modifiers )? (vt= void_type im1= interface_method_declaration[$a.tree, $m.tree, $vt.tree] -> $im1 | ie= interface_event_declaration[$a.tree, $m.tree] -> $ie | t= type ( ( identifier ( type_parameter_list )? '(' )=>im2= interface_method_declaration[$a.tree, $m.tree, $t.tree] -> $im2 | ( member_name '{' )=>ip= interface_property_declaration[$a.tree, $m.tree, $t.tree] -> $ip | ii= interface_indexer_declaration[$a.tree, $m.tree, $t.tree] -> $ii) ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1794:2: (a= attributes )? (m= modifiers )? (vt= void_type im1= interface_method_declaration[$a.tree, $m.tree, $vt.tree] -> $im1 | ie= interface_event_declaration[$a.tree, $m.tree] -> $ie | t= type ( ( identifier ( type_parameter_list )? '(' )=>im2= interface_method_declaration[$a.tree, $m.tree, $t.tree] -> $im2 | ( member_name '{' )=>ip= interface_property_declaration[$a.tree, $m.tree, $t.tree] -> $ip | ii= interface_indexer_declaration[$a.tree, $m.tree, $t.tree] -> $ii) )
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1794:3: (a= attributes )?
                	int alt234 = 2;
                	int LA234_0 = input.LA(1);

                	if ( (LA234_0 == OPEN_BRACKET) )
                	{
                	    alt234 = 1;
                	}
                	switch (alt234) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1794:3: a= attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_interface_member_declaration9689);
                	        	a = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(a.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1794:20: (m= modifiers )?
                	int alt235 = 2;
                	int LA235_0 = input.LA(1);

                	if ( ((LA235_0 >= PUBLIC && LA235_0 <= STATIC) || LA235_0 == 194 || (LA235_0 >= 197 && LA235_0 <= 204)) )
                	{
                	    alt235 = 1;
                	}
                	switch (alt235) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1794:20: m= modifiers
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_modifiers_in_interface_member_declaration9697);
                	        	m = modifiers();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_modifiers.Add(m.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1795:3: (vt= void_type im1= interface_method_declaration[$a.tree, $m.tree, $vt.tree] -> $im1 | ie= interface_event_declaration[$a.tree, $m.tree] -> $ie | t= type ( ( identifier ( type_parameter_list )? '(' )=>im2= interface_method_declaration[$a.tree, $m.tree, $t.tree] -> $im2 | ( member_name '{' )=>ip= interface_property_declaration[$a.tree, $m.tree, $t.tree] -> $ip | ii= interface_indexer_declaration[$a.tree, $m.tree, $t.tree] -> $ii) )
                	int alt237 = 3;
                	switch ( input.LA(1) ) 
                	{
                	case 206:
                		{
                	    int LA237_1 = input.LA(2);

                	    if ( (LA237_1 == IDENTIFIER || (LA237_1 >= ELIF && LA237_1 <= UNDEF) || LA237_1 == 195 || LA237_1 == 221 || (LA237_1 >= 224 && LA237_1 <= 239) || (LA237_1 >= 241 && LA237_1 <= 244) || (LA237_1 >= 247 && LA237_1 <= 250) || LA237_1 == 256 || (LA237_1 >= 263 && LA237_1 <= 264) || LA237_1 == 274 || LA237_1 == 277) )
                	    {
                	        alt237 = 1;
                	    }
                	    else if ( (LA237_1 == STAR) )
                	    {
                	        alt237 = 3;
                	    }
                	    else 
                	    {
                	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        NoViableAltException nvae_d237s1 =
                	            new NoViableAltException("", 237, 1, input);

                	        throw nvae_d237s1;
                	    }
                	    }
                	    break;
                	case 240:
                		{
                	    alt237 = 2;
                	    }
                	    break;
                	case OBJECT:
                	case BOOL:
                	case BYTE:
                	case CHAR:
                	case SHORT:
                	case INT:
                	case LONG:
                	case FLOAT:
                	case DOUBLE:
                	case IDENTIFIER:
                	case ELIF:
                	case ENDIF:
                	case DEFINE:
                	case UNDEF:
                	case 195:
                	case 221:
                	case 224:
                	case 225:
                	case 226:
                	case 227:
                	case 228:
                	case 229:
                	case 230:
                	case 231:
                	case 232:
                	case 233:
                	case 234:
                	case 235:
                	case 236:
                	case 237:
                	case 238:
                	case 239:
                	case 241:
                	case 242:
                	case 243:
                	case 244:
                	case 247:
                	case 248:
                	case 249:
                	case 250:
                	case 251:
                	case 252:
                	case 253:
                	case 254:
                	case 256:
                	case 263:
                	case 264:
                	case 274:
                	case 275:
                	case 276:
                	case 277:
                		{
                	    alt237 = 3;
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d237s0 =
                		        new NoViableAltException("", 237, 0, input);

                		    throw nvae_d237s0;
                	}

                	switch (alt237) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1795:4: vt= void_type im1= interface_method_declaration[$a.tree, $m.tree, $vt.tree]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_void_type_in_interface_member_declaration9705);
                	        	vt = void_type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_void_type.Add(vt.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration9711);
                	        	im1 = interface_method_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), ((vt != null) ? ((CommonTree)vt.Tree) : null));
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_interface_method_declaration.Add(im1.Tree);


                	        	// AST REWRITE
                	        	// elements:          im1
                	        	// token labels:      
                	        	// rule labels:       retval, im1
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_im1 = new RewriteRuleSubtreeStream(adaptor, "rule im1", im1!=null ? im1.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1795:80: -> $im1
                	        	{
                	        	    adaptor.AddChild(root_0, stream_im1.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1796:5: ie= interface_event_declaration[$a.tree, $m.tree]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_interface_event_declaration_in_interface_member_declaration9725);
                	        	ie = interface_event_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null));
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_interface_event_declaration.Add(ie.Tree);


                	        	// AST REWRITE
                	        	// elements:          ie
                	        	// token labels:      
                	        	// rule labels:       retval, ie
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_ie = new RewriteRuleSubtreeStream(adaptor, "rule ie", ie!=null ? ie.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1796:54: -> $ie
                	        	{
                	        	    adaptor.AddChild(root_0, stream_ie.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1797:5: t= type ( ( identifier ( type_parameter_list )? '(' )=>im2= interface_method_declaration[$a.tree, $m.tree, $t.tree] -> $im2 | ( member_name '{' )=>ip= interface_property_declaration[$a.tree, $m.tree, $t.tree] -> $ip | ii= interface_indexer_declaration[$a.tree, $m.tree, $t.tree] -> $ii)
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_interface_member_declaration9739);
                	        	t = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type.Add(t.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1797:14: ( ( identifier ( type_parameter_list )? '(' )=>im2= interface_method_declaration[$a.tree, $m.tree, $t.tree] -> $im2 | ( member_name '{' )=>ip= interface_property_declaration[$a.tree, $m.tree, $t.tree] -> $ip | ii= interface_indexer_declaration[$a.tree, $m.tree, $t.tree] -> $ii)
                	        	int alt236 = 3;
                	        	switch ( input.LA(1) ) 
                	        	{
                	        	case IDENTIFIER:
                	        		{
                	        	    int LA236_1 = input.LA(2);

                	        	    if ( (LA236_1 == LTHAN) && (synpred31_JavaMaker()) )
                	        	    {
                	        	        alt236 = 1;
                	        	    }
                	        	    else if ( (LA236_1 == LPAREN) && (synpred31_JavaMaker()) )
                	        	    {
                	        	        alt236 = 1;
                	        	    }
                	        	    else if ( (LA236_1 == OPEN_BRACE) && (synpred32_JavaMaker()) )
                	        	    {
                	        	        alt236 = 2;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d236s1 =
                	        	            new NoViableAltException("", 236, 1, input);

                	        	        throw nvae_d236s1;
                	        	    }
                	        	    }
                	        	    break;
                	        	case ELIF:
                	        	case ENDIF:
                	        	case DEFINE:
                	        	case UNDEF:
                	        	case 195:
                	        	case 221:
                	        	case 224:
                	        	case 225:
                	        	case 226:
                	        	case 227:
                	        	case 228:
                	        	case 229:
                	        	case 230:
                	        	case 231:
                	        	case 232:
                	        	case 233:
                	        	case 234:
                	        	case 235:
                	        	case 236:
                	        	case 237:
                	        	case 238:
                	        	case 239:
                	        	case 241:
                	        	case 242:
                	        	case 243:
                	        	case 244:
                	        	case 247:
                	        	case 248:
                	        	case 249:
                	        	case 250:
                	        	case 256:
                	        	case 263:
                	        	case 264:
                	        	case 274:
                	        	case 277:
                	        		{
                	        	    int LA236_2 = input.LA(2);

                	        	    if ( (LA236_2 == LTHAN) && (synpred31_JavaMaker()) )
                	        	    {
                	        	        alt236 = 1;
                	        	    }
                	        	    else if ( (LA236_2 == LPAREN) && (synpred31_JavaMaker()) )
                	        	    {
                	        	        alt236 = 1;
                	        	    }
                	        	    else if ( (LA236_2 == OPEN_BRACE) && (synpred32_JavaMaker()) )
                	        	    {
                	        	        alt236 = 2;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d236s2 =
                	        	            new NoViableAltException("", 236, 2, input);

                	        	        throw nvae_d236s2;
                	        	    }
                	        	    }
                	        	    break;
                	        	case THIS:
                	        		{
                	        	    alt236 = 3;
                	        	    }
                	        	    break;
                	        		default:
                	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        		    NoViableAltException nvae_d236s0 =
                	        		        new NoViableAltException("", 236, 0, input);

                	        		    throw nvae_d236s0;
                	        	}

                	        	switch (alt236) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1797:16: ( identifier ( type_parameter_list )? '(' )=>im2= interface_method_declaration[$a.tree, $m.tree, $t.tree]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration9759);
                	        	        	im2 = interface_method_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), ((t != null) ? ((CommonTree)t.Tree) : null));
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_interface_method_declaration.Add(im2.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          im2
                	        	        	// token labels:      
                	        	        	// rule labels:       im2, retval
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_im2 = new RewriteRuleSubtreeStream(adaptor, "rule im2", im2!=null ? im2.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 1797:118: -> $im2
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_im2.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1799:14: ( member_name '{' )=>ip= interface_property_declaration[$a.tree, $m.tree, $t.tree]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_interface_property_declaration_in_interface_member_declaration9812);
                	        	        	ip = interface_property_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), ((t != null) ? ((CommonTree)t.Tree) : null));
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_interface_property_declaration.Add(ip.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          ip
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, ip
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_ip = new RewriteRuleSubtreeStream(adaptor, "rule ip", ip!=null ? ip.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 1799:98: -> $ip
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_ip.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;
                	        	    case 3 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1800:8: ii= interface_indexer_declaration[$a.tree, $m.tree, $t.tree]
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_interface_indexer_declaration_in_interface_member_declaration9830);
                	        	        	ii = interface_indexer_declaration(((a != null) ? ((CommonTree)a.Tree) : null), ((m != null) ? ((CommonTree)m.Tree) : null), ((t != null) ? ((CommonTree)t.Tree) : null));
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_interface_indexer_declaration.Add(ii.Tree);


                	        	        	// AST REWRITE
                	        	        	// elements:          ii
                	        	        	// token labels:      
                	        	        	// rule labels:       retval, ii
                	        	        	// token list labels: 
                	        	        	// rule list labels:  
                	        	        	// wildcard labels: 
                	        	        	if ( (state.backtracking==0) ) {
                	        	        	retval.tree = root_0;
                	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	        	RewriteRuleSubtreeStream stream_ii = new RewriteRuleSubtreeStream(adaptor, "rule ii", ii!=null ? ii.Tree : null);

                	        	        	root_0 = (CommonTree)adaptor.Nil;
                	        	        	// 1800:68: -> $ii
                	        	        	{
                	        	        	    adaptor.AddChild(root_0, stream_ii.NextTree());

                	        	        	}

                	        	        	retval.tree = root_0;}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_member_declaration"

        public class interface_property_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_property_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1803:1: interface_property_declaration[CommonTree atts, CommonTree mods, CommonTree type] : i= identifier '{' iads= interface_accessor_declarations[atts, mods, type, $i.text] '}' -> $iads;
        public JavaMaker.interface_property_declaration_return interface_property_declaration(CommonTree atts, CommonTree mods, CommonTree type) // throws RecognitionException [1]
        {   
            JavaMaker.interface_property_declaration_return retval = new JavaMaker.interface_property_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal593 = null;
            CommonTree char_literal594 = null;
            JavaMaker.identifier_return i = default(JavaMaker.identifier_return);

            JavaMaker.interface_accessor_declarations_return iads = default(JavaMaker.interface_accessor_declarations_return);


            CommonTree char_literal593_tree=null;
            CommonTree char_literal594_tree=null;
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleSubtreeStream stream_interface_accessor_declarations = new RewriteRuleSubtreeStream(adaptor,"rule interface_accessor_declarations");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1803:83: (i= identifier '{' iads= interface_accessor_declarations[atts, mods, type, $i.text] '}' -> $iads)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1804:2: i= identifier '{' iads= interface_accessor_declarations[atts, mods, type, $i.text] '}'
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_interface_property_declaration9856);
                	i = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(i.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal593=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_property_declaration9860); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(char_literal593);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_interface_accessor_declarations_in_interface_property_declaration9866);
                	iads = interface_accessor_declarations(atts, mods, type, ((i != null) ? input.TokenStream.ToString(
                	  input.TreeAdaptor.GetTokenStartIndex(i.Start),
                	  input.TreeAdaptor.GetTokenStopIndex(i.Start)) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_interface_accessor_declarations.Add(iads.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal594=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_property_declaration9871); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(char_literal594);



                	// AST REWRITE
                	// elements:          iads
                	// token labels:      
                	// rule labels:       retval, iads
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_iads = new RewriteRuleSubtreeStream(adaptor, "rule iads", iads!=null ? iads.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1804:93: -> $iads
                	{
                	    adaptor.AddChild(root_0, stream_iads.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_property_declaration"

        public class interface_method_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_method_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1805:1: interface_method_declaration[CommonTree atts, CommonTree mods, CommonTree type] : identifier ( type_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? s= ';' magicThrowsException[Cfg.TranslatorBlanketThrow,$s.token] magicIdentifier[$identifier.tree.Token, newMethodName] -> ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? ( magicThrowsException )? ) ;
        public JavaMaker.interface_method_declaration_return interface_method_declaration(CommonTree atts, CommonTree mods, CommonTree type) // throws RecognitionException [1]
        {   
            JavaMaker.interface_method_declaration_return retval = new JavaMaker.interface_method_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            CommonTree char_literal597 = null;
            CommonTree char_literal599 = null;
            JavaMaker.identifier_return identifier595 = default(JavaMaker.identifier_return);

            JavaMaker.type_parameter_list_return type_parameter_list596 = default(JavaMaker.type_parameter_list_return);

            JavaMaker.formal_parameter_list_return formal_parameter_list598 = default(JavaMaker.formal_parameter_list_return);

            JavaMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses600 = default(JavaMaker.type_parameter_constraints_clauses_return);

            JavaMaker.magicThrowsException_return magicThrowsException601 = default(JavaMaker.magicThrowsException_return);

            JavaMaker.magicIdentifier_return magicIdentifier602 = default(JavaMaker.magicIdentifier_return);


            CommonTree s_tree=null;
            CommonTree char_literal597_tree=null;
            CommonTree char_literal599_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_magicIdentifier = new RewriteRuleSubtreeStream(adaptor,"rule magicIdentifier");
            RewriteRuleSubtreeStream stream_type_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_list");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

                string newMethodName = "";

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1808:2: ( identifier ( type_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? s= ';' magicThrowsException[Cfg.TranslatorBlanketThrow,$s.token] magicIdentifier[$identifier.tree.Token, newMethodName] -> ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? ( magicThrowsException )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1809:2: identifier ( type_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? s= ';' magicThrowsException[Cfg.TranslatorBlanketThrow,$s.token] magicIdentifier[$identifier.tree.Token, newMethodName]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_interface_method_declaration9891);
                	identifier595 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier595.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1809:15: ( type_parameter_list )?
                	int alt238 = 2;
                	int LA238_0 = input.LA(1);

                	if ( (LA238_0 == LTHAN) )
                	{
                	    alt238 = 1;
                	}
                	switch (alt238) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1809:15: type_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_list_in_interface_method_declaration9895);
                	        	type_parameter_list596 = type_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_list.Add(type_parameter_list596.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal597=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_interface_method_declaration9903); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal597);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1810:12: ( formal_parameter_list )?
                	int alt239 = 2;
                	int LA239_0 = input.LA(1);

                	if ( ((LA239_0 >= OBJECT && LA239_0 <= THIS) || LA239_0 == OPEN_BRACKET || (LA239_0 >= BOOL && LA239_0 <= IDENTIFIER) || (LA239_0 >= ELIF && LA239_0 <= UNDEF) || LA239_0 == 195 || LA239_0 == 206 || (LA239_0 >= 212 && LA239_0 <= 213) || LA239_0 == 221 || (LA239_0 >= 224 && LA239_0 <= 239) || (LA239_0 >= 241 && LA239_0 <= 244) || (LA239_0 >= 247 && LA239_0 <= 254) || (LA239_0 >= 256 && LA239_0 <= 257) || (LA239_0 >= 263 && LA239_0 <= 264) || (LA239_0 >= 274 && LA239_0 <= 277)) )
                	{
                	    alt239 = 1;
                	}
                	switch (alt239) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1810:12: formal_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration9907);
                	        	formal_parameter_list598 = formal_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(formal_parameter_list598.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal599=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_interface_method_declaration9912); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal599);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1810:43: ( type_parameter_constraints_clauses )?
                	int alt240 = 2;
                	int LA240_0 = input.LA(1);

                	if ( (LA240_0 == 236) )
                	{
                	    alt240 = 1;
                	}
                	switch (alt240) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1810:43: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration9916);
                	        	type_parameter_constraints_clauses600 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses600.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_interface_method_declaration9924); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_SEMI.Add(s);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_interface_method_declaration9926);
                	magicThrowsException601 = magicThrowsException(Cfg.TranslatorBlanketThrow, s.token);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(magicThrowsException601.Tree);
                	if ( (state.backtracking==0) )
                	{

                	              newMethodName = ((identifier595 != null) ? input.TokenStream.ToString(
                	    input.TreeAdaptor.GetTokenStartIndex(identifier595.Start),
                	    input.TreeAdaptor.GetTokenStopIndex(identifier595.Start)) : null).Replace(".","___");
                	          
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicIdentifier_in_interface_method_declaration9949);
                	magicIdentifier602 = magicIdentifier(((identifier595 != null) ? ((CommonTree)identifier595.Tree) : null).Token, newMethodName);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicIdentifier.Add(magicIdentifier602.Tree);


                	// AST REWRITE
                	// elements:          magicIdentifier, type_parameter_constraints_clauses, type_parameter_list, formal_parameter_list, magicThrowsException
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1817:8: -> ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? ( magicThrowsException )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1817:11: ^( METHOD magicIdentifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( formal_parameter_list )? ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1,  dupTree(type) );
                	    adaptor.AddChild(root_1, stream_magicIdentifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1818:29: ( type_parameter_constraints_clauses )?
                	    if ( stream_type_parameter_constraints_clauses.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_constraints_clauses.NextTree());

                	    }
                	    stream_type_parameter_constraints_clauses.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1818:65: ( type_parameter_list )?
                	    if ( stream_type_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_list.NextTree());

                	    }
                	    stream_type_parameter_list.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1818:86: ( formal_parameter_list )?
                	    if ( stream_formal_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_formal_parameter_list.NextTree());

                	    }
                	    stream_formal_parameter_list.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1818:109: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_method_declaration"

        public class interface_event_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_event_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1819:1: interface_event_declaration[CommonTree atts, CommonTree mods] : e= 'event' type identifier ';' -> ^( EVENT[$e.token, \"EVENT\"] type identifier ) ;
        public JavaMaker.interface_event_declaration_return interface_event_declaration(CommonTree atts, CommonTree mods) // throws RecognitionException [1]
        {   
            JavaMaker.interface_event_declaration_return retval = new JavaMaker.interface_event_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree e = null;
            CommonTree char_literal605 = null;
            JavaMaker.type_return type603 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier604 = default(JavaMaker.identifier_return);


            CommonTree e_tree=null;
            CommonTree char_literal605_tree=null;
            RewriteRuleNodeStream stream_240 = new RewriteRuleNodeStream(adaptor,"token 240");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor,"rule type");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1819:63: (e= 'event' type identifier ';' -> ^( EVENT[$e.token, \"EVENT\"] type identifier ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1821:2: e= 'event' type identifier ';'
                {
                	_last = (CommonTree)input.LT(1);
                	e=(CommonTree)Match(input,240,FOLLOW_240_in_interface_event_declaration10010); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_240.Add(e);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_interface_event_declaration10014);
                	type603 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_type.Add(type603.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_interface_event_declaration10018);
                	identifier604 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier604.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal605=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_interface_event_declaration10022); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal605);



                	// AST REWRITE
                	// elements:          type, identifier
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1821:38: -> ^( EVENT[$e.token, \"EVENT\"] type identifier )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1821:41: ^( EVENT[$e.token, \"EVENT\"] type identifier )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT, e.token, "EVENT"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1, stream_type.NextTree());
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_event_declaration"

        public class interface_indexer_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_indexer_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1823:1: interface_indexer_declaration[CommonTree atts, CommonTree mods, CommonTree type] : 'this' '[' formal_parameter_list ']' '{' indexer_accessor_declarations[atts,mods,type,null,$formal_parameter_list.tree] '}' -> indexer_accessor_declarations ;
        public JavaMaker.interface_indexer_declaration_return interface_indexer_declaration(CommonTree atts, CommonTree mods, CommonTree type) // throws RecognitionException [1]
        {   
            JavaMaker.interface_indexer_declaration_return retval = new JavaMaker.interface_indexer_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal606 = null;
            CommonTree char_literal607 = null;
            CommonTree char_literal609 = null;
            CommonTree char_literal610 = null;
            CommonTree char_literal612 = null;
            JavaMaker.formal_parameter_list_return formal_parameter_list608 = default(JavaMaker.formal_parameter_list_return);

            JavaMaker.indexer_accessor_declarations_return indexer_accessor_declarations611 = default(JavaMaker.indexer_accessor_declarations_return);


            CommonTree string_literal606_tree=null;
            CommonTree char_literal607_tree=null;
            CommonTree char_literal609_tree=null;
            CommonTree char_literal610_tree=null;
            CommonTree char_literal612_tree=null;
            RewriteRuleNodeStream stream_OPEN_BRACKET = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACKET");
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleNodeStream stream_THIS = new RewriteRuleNodeStream(adaptor,"token THIS");
            RewriteRuleNodeStream stream_CLOSE_BRACKET = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACKET");
            RewriteRuleSubtreeStream stream_indexer_accessor_declarations = new RewriteRuleSubtreeStream(adaptor,"rule indexer_accessor_declarations");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1823:82: ( 'this' '[' formal_parameter_list ']' '{' indexer_accessor_declarations[atts,mods,type,null,$formal_parameter_list.tree] '}' -> indexer_accessor_declarations )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1825:2: 'this' '[' formal_parameter_list ']' '{' indexer_accessor_declarations[atts,mods,type,null,$formal_parameter_list.tree] '}'
                {
                	_last = (CommonTree)input.LT(1);
                	string_literal606=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_interface_indexer_declaration10054); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_THIS.Add(string_literal606);

                	_last = (CommonTree)input.LT(1);
                	char_literal607=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration10058); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACKET.Add(char_literal607);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration10062);
                	formal_parameter_list608 = formal_parameter_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(formal_parameter_list608.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal609=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration10066); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACKET.Add(char_literal609);

                	_last = (CommonTree)input.LT(1);
                	char_literal610=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_indexer_declaration10070); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(char_literal610);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_indexer_accessor_declarations_in_interface_indexer_declaration10074);
                	indexer_accessor_declarations611 = indexer_accessor_declarations(atts, mods, type, null, ((formal_parameter_list608 != null) ? ((CommonTree)formal_parameter_list608.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_indexer_accessor_declarations.Add(indexer_accessor_declarations611.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal612=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration10079); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(char_literal612);



                	// AST REWRITE
                	// elements:          indexer_accessor_declarations
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1825:138: -> indexer_accessor_declarations
                	{
                	    adaptor.AddChild(root_0, stream_indexer_accessor_declarations.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_indexer_declaration"

        public class interface_accessor_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_accessor_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1826:1: interface_accessor_declarations[CommonTree atts, CommonTree mods, CommonTree type, string propName] : ( interface_accessor_declaration[atts, mods, type, propName] )+ ;
        public JavaMaker.interface_accessor_declarations_return interface_accessor_declarations(CommonTree atts, CommonTree mods, CommonTree type, string propName) // throws RecognitionException [1]
        {   
            JavaMaker.interface_accessor_declarations_return retval = new JavaMaker.interface_accessor_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.interface_accessor_declaration_return interface_accessor_declaration613 = default(JavaMaker.interface_accessor_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1826:101: ( ( interface_accessor_declaration[atts, mods, type, propName] )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1827:5: ( interface_accessor_declaration[atts, mods, type, propName] )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1827:5: ( interface_accessor_declaration[atts, mods, type, propName] )+
                	int cnt241 = 0;
                	do 
                	{
                	    int alt241 = 2;
                	    int LA241_0 = input.LA(1);

                	    if ( (LA241_0 == OPEN_BRACKET || (LA241_0 >= 247 && LA241_0 <= 248)) )
                	    {
                	        alt241 = 1;
                	    }


                	    switch (alt241) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1827:5: interface_accessor_declaration[atts, mods, type, propName]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_interface_accessor_declaration_in_interface_accessor_declarations10096);
                			    	interface_accessor_declaration613 = interface_accessor_declaration(atts, mods, type, propName);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, interface_accessor_declaration613.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt241 >= 1 ) goto loop241;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee241 =
                		                new EarlyExitException(241, input);
                		            throw eee241;
                	    }
                	    cnt241++;
                	} while (true);

                	loop241:
                		;	// Stops C# compiler whining that label 'loop241' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_accessor_declarations"

        public class interface_accessor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "interface_accessor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1829:1: interface_accessor_declaration[CommonTree atts, CommonTree mods, CommonTree type, string propName] : (la= attributes )? (g= 'get' gbe= semi magicPropGetter[atts, $la.tree, mods, null, type, $g.token, null, propName, false, \"\"] -> magicPropGetter | s= 'set' sbe= semi magicPropSetter[atts, $la.tree, mods, null, type, $s.token, null, propName, false, \"\"] -> magicPropSetter ) ;
        public JavaMaker.interface_accessor_declaration_return interface_accessor_declaration(CommonTree atts, CommonTree mods, CommonTree type, string propName) // throws RecognitionException [1]
        {   
            JavaMaker.interface_accessor_declaration_return retval = new JavaMaker.interface_accessor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree g = null;
            CommonTree s = null;
            JavaMaker.attributes_return la = default(JavaMaker.attributes_return);

            JavaMaker.semi_return gbe = default(JavaMaker.semi_return);

            JavaMaker.semi_return sbe = default(JavaMaker.semi_return);

            JavaMaker.magicPropGetter_return magicPropGetter614 = default(JavaMaker.magicPropGetter_return);

            JavaMaker.magicPropSetter_return magicPropSetter615 = default(JavaMaker.magicPropSetter_return);


            CommonTree g_tree=null;
            CommonTree s_tree=null;
            RewriteRuleNodeStream stream_248 = new RewriteRuleNodeStream(adaptor,"token 248");
            RewriteRuleNodeStream stream_247 = new RewriteRuleNodeStream(adaptor,"token 247");
            RewriteRuleSubtreeStream stream_magicPropGetter = new RewriteRuleSubtreeStream(adaptor,"rule magicPropGetter");
            RewriteRuleSubtreeStream stream_magicPropSetter = new RewriteRuleSubtreeStream(adaptor,"rule magicPropSetter");
            RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor,"rule semi");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1829:100: ( (la= attributes )? (g= 'get' gbe= semi magicPropGetter[atts, $la.tree, mods, null, type, $g.token, null, propName, false, \"\"] -> magicPropGetter | s= 'set' sbe= semi magicPropSetter[atts, $la.tree, mods, null, type, $s.token, null, propName, false, \"\"] -> magicPropSetter ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1830:2: (la= attributes )? (g= 'get' gbe= semi magicPropGetter[atts, $la.tree, mods, null, type, $g.token, null, propName, false, \"\"] -> magicPropGetter | s= 'set' sbe= semi magicPropSetter[atts, $la.tree, mods, null, type, $s.token, null, propName, false, \"\"] -> magicPropSetter )
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1830:4: (la= attributes )?
                	int alt242 = 2;
                	int LA242_0 = input.LA(1);

                	if ( (LA242_0 == OPEN_BRACKET) )
                	{
                	    alt242 = 1;
                	}
                	switch (alt242) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1830:4: la= attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_interface_accessor_declaration10114);
                	        	la = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(la.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1830:17: (g= 'get' gbe= semi magicPropGetter[atts, $la.tree, mods, null, type, $g.token, null, propName, false, \"\"] -> magicPropGetter | s= 'set' sbe= semi magicPropSetter[atts, $la.tree, mods, null, type, $s.token, null, propName, false, \"\"] -> magicPropSetter )
                	int alt243 = 2;
                	int LA243_0 = input.LA(1);

                	if ( (LA243_0 == 247) )
                	{
                	    alt243 = 1;
                	}
                	else if ( (LA243_0 == 248) )
                	{
                	    alt243 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d243s0 =
                	        new NoViableAltException("", 243, 0, input);

                	    throw nvae_d243s0;
                	}
                	switch (alt243) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1830:18: g= 'get' gbe= semi magicPropGetter[atts, $la.tree, mods, null, type, $g.token, null, propName, false, \"\"]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	g=(CommonTree)Match(input,247,FOLLOW_247_in_interface_accessor_declaration10120); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_247.Add(g);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_semi_in_interface_accessor_declaration10124);
                	        	gbe = semi();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_semi.Add(gbe.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicPropGetter_in_interface_accessor_declaration10126);
                	        	magicPropGetter614 = magicPropGetter(atts, ((la != null) ? ((CommonTree)la.Tree) : null), mods, null, type, g.token, null, propName, false, "");
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicPropGetter.Add(magicPropGetter614.Tree);


                	        	// AST REWRITE
                	        	// elements:          magicPropGetter
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1830:122: -> magicPropGetter
                	        	{
                	        	    adaptor.AddChild(root_0, stream_magicPropGetter.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1831:23: s= 'set' sbe= semi magicPropSetter[atts, $la.tree, mods, null, type, $s.token, null, propName, false, \"\"]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	s=(CommonTree)Match(input,248,FOLLOW_248_in_interface_accessor_declaration10157); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_248.Add(s);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_semi_in_interface_accessor_declaration10161);
                	        	sbe = semi();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_semi.Add(sbe.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicPropSetter_in_interface_accessor_declaration10164);
                	        	magicPropSetter615 = magicPropSetter(atts, ((la != null) ? ((CommonTree)la.Tree) : null), mods, null, type, s.token, null, propName, false, "");
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicPropSetter.Add(magicPropSetter615.Tree);


                	        	// AST REWRITE
                	        	// elements:          magicPropSetter
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1831:128: -> magicPropSetter
                	        	{
                	        	    adaptor.AddChild(root_0, stream_magicPropSetter.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "interface_accessor_declaration"

        public class struct_declaration_return : TreeRuleReturnScope
        {
            public string name;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "struct_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1835:1: struct_declaration[CommonTree atts, CommonTree mods, CommonTree partial, bool toplevel] returns [string name] : c= 'struct' identifier ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? struct_body[$identifier.thetext] ( ';' )? -> ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? struct_body ) ;
        public JavaMaker.struct_declaration_return struct_declaration(CommonTree atts, CommonTree mods, CommonTree partial, bool toplevel) // throws RecognitionException [1]
        {   
            TypeContext_stack.Push(new TypeContext_scope());

            JavaMaker.struct_declaration_return retval = new JavaMaker.struct_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree char_literal621 = null;
            JavaMaker.identifier_return identifier616 = default(JavaMaker.identifier_return);

            JavaMaker.type_parameter_list_return type_parameter_list617 = default(JavaMaker.type_parameter_list_return);

            JavaMaker.class_base_return class_base618 = default(JavaMaker.class_base_return);

            JavaMaker.type_parameter_constraints_clauses_return type_parameter_constraints_clauses619 = default(JavaMaker.type_parameter_constraints_clauses_return);

            JavaMaker.struct_body_return struct_body620 = default(JavaMaker.struct_body_return);


            CommonTree c_tree=null;
            CommonTree char_literal621_tree=null;
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_255 = new RewriteRuleNodeStream(adaptor,"token 255");
            RewriteRuleSubtreeStream stream_type_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_list");
            RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses = new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
            RewriteRuleSubtreeStream stream_class_base = new RewriteRuleSubtreeStream(adaptor,"rule class_base");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            RewriteRuleSubtreeStream stream_struct_body = new RewriteRuleSubtreeStream(adaptor,"rule struct_body");

                CommonTree mangledMods = toplevel ? mkRemoveMods(mods, new int[] {STATIC}) : addModifier(mods, (CommonTree)adaptor.Create(STATIC, "static"));
                // If no access modifier then type is internal, which we relax to public
                if (toplevel && !containsMods(mangledMods, new int[] {PUBLIC, PRIVATE})) {
                   mangledMods =  addModifier(mangledMods, (CommonTree)adaptor.Create(PUBLIC, "public"));
                }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1844:1: (c= 'struct' identifier ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? struct_body[$identifier.thetext] ( ';' )? -> ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? struct_body ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:2: c= 'struct' identifier ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? struct_body[$identifier.thetext] ( ';' )?
                {
                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,255,FOLLOW_255_in_struct_declaration10203); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_255.Add(c);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_struct_declaration10206);
                	identifier616 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier616.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   ((TypeContext_scope)TypeContext_stack.Peek()).typeName =  ((identifier616 != null) ? identifier616.thetext : default(string)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:76: ( type_parameter_list )?
                	int alt244 = 2;
                	int LA244_0 = input.LA(1);

                	if ( (LA244_0 == LTHAN) )
                	{
                	    alt244 = 1;
                	}
                	switch (alt244) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:76: type_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_list_in_struct_declaration10211);
                	        	type_parameter_list617 = type_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_list.Add(type_parameter_list617.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   retval.name =  mkGenericTypeAlias(((identifier616 != null) ? identifier616.thetext : default(string)), ((type_parameter_list617 != null) ? type_parameter_list617.names : default(List<string>))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:179: ( class_base )?
                	int alt245 = 2;
                	int LA245_0 = input.LA(1);

                	if ( (LA245_0 == 211) )
                	{
                	    alt245 = 1;
                	}
                	switch (alt245) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:179: class_base
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_base_in_struct_declaration10217);
                	        	class_base618 = class_base();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_class_base.Add(class_base618.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:193: ( type_parameter_constraints_clauses )?
                	int alt246 = 2;
                	int LA246_0 = input.LA(1);

                	if ( (LA246_0 == 236) )
                	{
                	    alt246 = 1;
                	}
                	switch (alt246) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:193: type_parameter_constraints_clauses
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration10222);
                	        	type_parameter_constraints_clauses619 = type_parameter_constraints_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_type_parameter_constraints_clauses.Add(type_parameter_constraints_clauses619.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_struct_body_in_struct_declaration10227);
                	struct_body620 = struct_body(((identifier616 != null) ? identifier616.thetext : default(string)));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_struct_body.Add(struct_body620.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:265: ( ';' )?
                	int alt247 = 2;
                	int LA247_0 = input.LA(1);

                	if ( (LA247_0 == SEMI) )
                	{
                	    alt247 = 1;
                	}
                	switch (alt247) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1845:265: ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal621=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_struct_declaration10231); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal621);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}



                	// AST REWRITE
                	// elements:          class_base, type_parameter_list, identifier, struct_body, type_parameter_constraints_clauses
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1846:5: -> ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? struct_body )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1846:8: ^( CLASS[$c.token, \"class\"] identifier ( type_parameter_constraints_clauses )? ( type_parameter_list )? ( class_base )? struct_body )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS, c.token, "class"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(partial) );
                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  mangledMods );
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1846:103: ( type_parameter_constraints_clauses )?
                	    if ( stream_type_parameter_constraints_clauses.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_constraints_clauses.NextTree());

                	    }
                	    stream_type_parameter_constraints_clauses.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1846:139: ( type_parameter_list )?
                	    if ( stream_type_parameter_list.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_type_parameter_list.NextTree());

                	    }
                	    stream_type_parameter_list.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1846:160: ( class_base )?
                	    if ( stream_class_base.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_class_base.NextTree());

                	    }
                	    stream_class_base.Reset();
                	    adaptor.AddChild(root_1, stream_struct_body.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                TypeContext_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end "struct_declaration"

        public class struct_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "struct_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1848:1: struct_body[string structName] : o= '{' magicDefaultConstructor[$o.token, structName] ( class_member_declarations )? e= '}' -> '{' magicDefaultConstructor ( class_member_declarations )? '}' ;
        public JavaMaker.struct_body_return struct_body(string structName) // throws RecognitionException [1]
        {   
            JavaMaker.struct_body_return retval = new JavaMaker.struct_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree o = null;
            CommonTree e = null;
            JavaMaker.magicDefaultConstructor_return magicDefaultConstructor622 = default(JavaMaker.magicDefaultConstructor_return);

            JavaMaker.class_member_declarations_return class_member_declarations623 = default(JavaMaker.class_member_declarations_return);


            CommonTree o_tree=null;
            CommonTree e_tree=null;
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleSubtreeStream stream_class_member_declarations = new RewriteRuleSubtreeStream(adaptor,"rule class_member_declarations");
            RewriteRuleSubtreeStream stream_magicDefaultConstructor = new RewriteRuleSubtreeStream(adaptor,"rule magicDefaultConstructor");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1848:32: (o= '{' magicDefaultConstructor[$o.token, structName] ( class_member_declarations )? e= '}' -> '{' magicDefaultConstructor ( class_member_declarations )? '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1849:2: o= '{' magicDefaultConstructor[$o.token, structName] ( class_member_declarations )? e= '}'
                {
                	_last = (CommonTree)input.LT(1);
                	o=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_struct_body10277); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(o);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicDefaultConstructor_in_struct_body10280);
                	magicDefaultConstructor622 = magicDefaultConstructor(o.token, structName);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicDefaultConstructor.Add(magicDefaultConstructor622.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1849:55: ( class_member_declarations )?
                	int alt248 = 2;
                	int LA248_0 = input.LA(1);

                	if ( (LA248_0 == ENUM || LA248_0 == MONOTWIDDLE || (LA248_0 >= PUBLIC && LA248_0 <= STATIC) || LA248_0 == OBJECT || LA248_0 == OPEN_BRACKET || (LA248_0 >= BOOL && LA248_0 <= IDENTIFIER) || (LA248_0 >= ELIF && LA248_0 <= UNDEF) || (LA248_0 >= 194 && LA248_0 <= 206) || LA248_0 == 218 || LA248_0 == 221 || (LA248_0 >= 224 && LA248_0 <= 245) || (LA248_0 >= 247 && LA248_0 <= 256) || LA248_0 == 258 || (LA248_0 >= 260 && LA248_0 <= 261) || (LA248_0 >= 263 && LA248_0 <= 264) || (LA248_0 >= 274 && LA248_0 <= 277)) )
                	{
                	    alt248 = 1;
                	}
                	switch (alt248) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1849:55: class_member_declarations
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_member_declarations_in_struct_body10283);
                	        	class_member_declarations623 = class_member_declarations();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_class_member_declarations.Add(class_member_declarations623.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	e=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_struct_body10288); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(e);



                	// AST REWRITE
                	// elements:          magicDefaultConstructor, class_member_declarations, CLOSE_BRACE, OPEN_BRACE
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1850:5: -> '{' magicDefaultConstructor ( class_member_declarations )? '}'
                	{
                	    adaptor.AddChild(root_0, stream_OPEN_BRACE.NextNode());
                	    adaptor.AddChild(root_0, stream_magicDefaultConstructor.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1850:37: ( class_member_declarations )?
                	    if ( stream_class_member_declarations.HasNext )
                	    {
                	        adaptor.AddChild(root_0, stream_class_member_declarations.NextTree());

                	    }
                	    stream_class_member_declarations.Reset();
                	    adaptor.AddChild(root_0, stream_CLOSE_BRACE.NextNode());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "struct_body"

        public class indexer_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "indexer_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1854:1: indexer_declaration[CommonTree atts, CommonTree mods, CommonTree type, CommonTree iface] : 'this' '[' formal_parameter_list ']' '{' indexer_accessor_declarations[atts, mods, type, iface, $formal_parameter_list.tree] '}' -> indexer_accessor_declarations ;
        public JavaMaker.indexer_declaration_return indexer_declaration(CommonTree atts, CommonTree mods, CommonTree type, CommonTree iface) // throws RecognitionException [1]
        {   
            JavaMaker.indexer_declaration_return retval = new JavaMaker.indexer_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal624 = null;
            CommonTree char_literal625 = null;
            CommonTree char_literal627 = null;
            CommonTree char_literal628 = null;
            CommonTree char_literal630 = null;
            JavaMaker.formal_parameter_list_return formal_parameter_list626 = default(JavaMaker.formal_parameter_list_return);

            JavaMaker.indexer_accessor_declarations_return indexer_accessor_declarations629 = default(JavaMaker.indexer_accessor_declarations_return);


            CommonTree string_literal624_tree=null;
            CommonTree char_literal625_tree=null;
            CommonTree char_literal627_tree=null;
            CommonTree char_literal628_tree=null;
            CommonTree char_literal630_tree=null;
            RewriteRuleNodeStream stream_OPEN_BRACKET = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACKET");
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleNodeStream stream_THIS = new RewriteRuleNodeStream(adaptor,"token THIS");
            RewriteRuleNodeStream stream_CLOSE_BRACKET = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACKET");
            RewriteRuleSubtreeStream stream_indexer_accessor_declarations = new RewriteRuleSubtreeStream(adaptor,"rule indexer_accessor_declarations");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1854:90: ( 'this' '[' formal_parameter_list ']' '{' indexer_accessor_declarations[atts, mods, type, iface, $formal_parameter_list.tree] '}' -> indexer_accessor_declarations )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1855:2: 'this' '[' formal_parameter_list ']' '{' indexer_accessor_declarations[atts, mods, type, iface, $formal_parameter_list.tree] '}'
                {
                	_last = (CommonTree)input.LT(1);
                	string_literal624=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_indexer_declaration10319); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_THIS.Add(string_literal624);

                	_last = (CommonTree)input.LT(1);
                	char_literal625=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_indexer_declaration10323); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACKET.Add(char_literal625);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_formal_parameter_list_in_indexer_declaration10327);
                	formal_parameter_list626 = formal_parameter_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(formal_parameter_list626.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal627=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_indexer_declaration10331); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACKET.Add(char_literal627);

                	_last = (CommonTree)input.LT(1);
                	char_literal628=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_indexer_declaration10335); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(char_literal628);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_indexer_accessor_declarations_in_indexer_declaration10339);
                	indexer_accessor_declarations629 = indexer_accessor_declarations(atts, mods, type, iface, ((formal_parameter_list626 != null) ? ((CommonTree)formal_parameter_list626.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_indexer_accessor_declarations.Add(indexer_accessor_declarations629.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal630=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_indexer_declaration10344); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(char_literal630);



                	// AST REWRITE
                	// elements:          indexer_accessor_declarations
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1855:143: -> indexer_accessor_declarations
                	{
                	    adaptor.AddChild(root_0, stream_indexer_accessor_declarations.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "indexer_declaration"

        public class indexer_accessor_declarations_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "indexer_accessor_declarations"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1861:1: indexer_accessor_declarations[CommonTree atts, CommonTree mods, CommonTree type, CommonTree iface, CommonTree idxparams] : ( indexer_accessor_declaration[atts, mods, type, iface, idxparams] )+ ;
        public JavaMaker.indexer_accessor_declarations_return indexer_accessor_declarations(CommonTree atts, CommonTree mods, CommonTree type, CommonTree iface, CommonTree idxparams) // throws RecognitionException [1]
        {   
            JavaMaker.indexer_accessor_declarations_return retval = new JavaMaker.indexer_accessor_declarations_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.indexer_accessor_declaration_return indexer_accessor_declaration631 = default(JavaMaker.indexer_accessor_declaration_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1861:122: ( ( indexer_accessor_declaration[atts, mods, type, iface, idxparams] )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1862:5: ( indexer_accessor_declaration[atts, mods, type, iface, idxparams] )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1862:5: ( indexer_accessor_declaration[atts, mods, type, iface, idxparams] )+
                	int cnt249 = 0;
                	do 
                	{
                	    int alt249 = 2;
                	    int LA249_0 = input.LA(1);

                	    if ( ((LA249_0 >= PROTECTED && LA249_0 <= INTERNAL) || LA249_0 == OPEN_BRACKET || (LA249_0 >= 247 && LA249_0 <= 248)) )
                	    {
                	        alt249 = 1;
                	    }


                	    switch (alt249) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1862:5: indexer_accessor_declaration[atts, mods, type, iface, idxparams]
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_indexer_accessor_declaration_in_indexer_accessor_declarations10368);
                			    	indexer_accessor_declaration631 = indexer_accessor_declaration(atts, mods, type, iface, idxparams);
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, indexer_accessor_declaration631.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt249 >= 1 ) goto loop249;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee249 =
                		                new EarlyExitException(249, input);
                		            throw eee249;
                	    }
                	    cnt249++;
                	} while (true);

                	loop249:
                		;	// Stops C# compiler whining that label 'loop249' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "indexer_accessor_declarations"

        public class indexer_accessor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "indexer_accessor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1864:1: indexer_accessor_declaration[CommonTree atts, CommonTree mods, CommonTree type, CommonTree iface, CommonTree idxparams] : (la= attributes )? (lm= accessor_modifier )? (g= 'get' ( ( ';' )=>gbe= ';' | gb= block ) geti= magicIdxGetter[atts, $la.tree, mods, $lm.tree, type, iface, $g.token, idxBlock, idxparams] -> $geti | s= 'set' ( ( ';' )=>sbe= ';' | sb= block ) seti= magicIdxSetter[atts, $la.tree, mods, $lm.tree, type, iface, $s.token, idxBlock, idxparams] -> $seti) ;
        public JavaMaker.indexer_accessor_declaration_return indexer_accessor_declaration(CommonTree atts, CommonTree mods, CommonTree type, CommonTree iface, CommonTree idxparams) // throws RecognitionException [1]
        {   
            JavaMaker.indexer_accessor_declaration_return retval = new JavaMaker.indexer_accessor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree g = null;
            CommonTree gbe = null;
            CommonTree s = null;
            CommonTree sbe = null;
            JavaMaker.attributes_return la = default(JavaMaker.attributes_return);

            JavaMaker.accessor_modifier_return lm = default(JavaMaker.accessor_modifier_return);

            JavaMaker.block_return gb = default(JavaMaker.block_return);

            JavaMaker.magicIdxGetter_return geti = default(JavaMaker.magicIdxGetter_return);

            JavaMaker.block_return sb = default(JavaMaker.block_return);

            JavaMaker.magicIdxSetter_return seti = default(JavaMaker.magicIdxSetter_return);


            CommonTree g_tree=null;
            CommonTree gbe_tree=null;
            CommonTree s_tree=null;
            CommonTree sbe_tree=null;
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_248 = new RewriteRuleNodeStream(adaptor,"token 248");
            RewriteRuleNodeStream stream_247 = new RewriteRuleNodeStream(adaptor,"token 247");
            RewriteRuleSubtreeStream stream_magicIdxSetter = new RewriteRuleSubtreeStream(adaptor,"rule magicIdxSetter");
            RewriteRuleSubtreeStream stream_magicIdxGetter = new RewriteRuleSubtreeStream(adaptor,"rule magicIdxGetter");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
            RewriteRuleSubtreeStream stream_accessor_modifier = new RewriteRuleSubtreeStream(adaptor,"rule accessor_modifier");
            RewriteRuleSubtreeStream stream_attributes = new RewriteRuleSubtreeStream(adaptor,"rule attributes");

                 CommonTree idxBlock = null; 

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1867:2: ( (la= attributes )? (lm= accessor_modifier )? (g= 'get' ( ( ';' )=>gbe= ';' | gb= block ) geti= magicIdxGetter[atts, $la.tree, mods, $lm.tree, type, iface, $g.token, idxBlock, idxparams] -> $geti | s= 'set' ( ( ';' )=>sbe= ';' | sb= block ) seti= magicIdxSetter[atts, $la.tree, mods, $lm.tree, type, iface, $s.token, idxBlock, idxparams] -> $seti) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1868:2: (la= attributes )? (lm= accessor_modifier )? (g= 'get' ( ( ';' )=>gbe= ';' | gb= block ) geti= magicIdxGetter[atts, $la.tree, mods, $lm.tree, type, iface, $g.token, idxBlock, idxparams] -> $geti | s= 'set' ( ( ';' )=>sbe= ';' | sb= block ) seti= magicIdxSetter[atts, $la.tree, mods, $lm.tree, type, iface, $s.token, idxBlock, idxparams] -> $seti)
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1868:4: (la= attributes )?
                	int alt250 = 2;
                	int LA250_0 = input.LA(1);

                	if ( (LA250_0 == OPEN_BRACKET) )
                	{
                	    alt250 = 1;
                	}
                	switch (alt250) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1868:4: la= attributes
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_attributes_in_indexer_accessor_declaration10387);
                	        	la = attributes();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_attributes.Add(la.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1868:19: (lm= accessor_modifier )?
                	int alt251 = 2;
                	int LA251_0 = input.LA(1);

                	if ( ((LA251_0 >= PROTECTED && LA251_0 <= INTERNAL)) )
                	{
                	    alt251 = 1;
                	}
                	switch (alt251) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1868:19: lm= accessor_modifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_accessor_modifier_in_indexer_accessor_declaration10392);
                	        	lm = accessor_modifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_accessor_modifier.Add(lm.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1869:7: (g= 'get' ( ( ';' )=>gbe= ';' | gb= block ) geti= magicIdxGetter[atts, $la.tree, mods, $lm.tree, type, iface, $g.token, idxBlock, idxparams] -> $geti | s= 'set' ( ( ';' )=>sbe= ';' | sb= block ) seti= magicIdxSetter[atts, $la.tree, mods, $lm.tree, type, iface, $s.token, idxBlock, idxparams] -> $seti)
                	int alt254 = 2;
                	int LA254_0 = input.LA(1);

                	if ( (LA254_0 == 247) )
                	{
                	    alt254 = 1;
                	}
                	else if ( (LA254_0 == 248) )
                	{
                	    alt254 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d254s0 =
                	        new NoViableAltException("", 254, 0, input);

                	    throw nvae_d254s0;
                	}
                	switch (alt254) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1869:8: g= 'get' ( ( ';' )=>gbe= ';' | gb= block ) geti= magicIdxGetter[atts, $la.tree, mods, $lm.tree, type, iface, $g.token, idxBlock, idxparams]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	g=(CommonTree)Match(input,247,FOLLOW_247_in_indexer_accessor_declaration10405); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_247.Add(g);

                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1869:16: ( ( ';' )=>gbe= ';' | gb= block )
                	        	int alt252 = 2;
                	        	int LA252_0 = input.LA(1);

                	        	if ( (LA252_0 == SEMI) )
                	        	{
                	        	    int LA252_1 = input.LA(2);

                	        	    if ( (synpred33_JavaMaker()) )
                	        	    {
                	        	        alt252 = 1;
                	        	    }
                	        	    else if ( (true) )
                	        	    {
                	        	        alt252 = 2;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d252s1 =
                	        	            new NoViableAltException("", 252, 1, input);

                	        	        throw nvae_d252s1;
                	        	    }
                	        	}
                	        	else if ( (LA252_0 == OPEN_BRACE) )
                	        	{
                	        	    alt252 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d252s0 =
                	        	        new NoViableAltException("", 252, 0, input);

                	        	    throw nvae_d252s0;
                	        	}
                	        	switch (alt252) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1869:17: ( ';' )=>gbe= ';'
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	gbe=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_indexer_accessor_declaration10415); if (state.failed) return retval; 
                	        	        	if ( (state.backtracking==0) ) stream_SEMI.Add(gbe);

                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   idxBlock = gbe_tree; 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1870:19: gb= block
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_block_in_indexer_accessor_declaration10441);
                	        	        	gb = block();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_block.Add(gb.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   idxBlock = ((gb != null) ? ((CommonTree)gb.Tree) : null); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicIdxGetter_in_indexer_accessor_declaration10449);
                	        	geti = magicIdxGetter(atts, ((la != null) ? ((CommonTree)la.Tree) : null), mods, ((lm != null) ? ((CommonTree)lm.Tree) : null), type, iface, g.token, idxBlock, idxparams);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicIdxGetter.Add(geti.Tree);


                	        	// AST REWRITE
                	        	// elements:          geti
                	        	// token labels:      
                	        	// rule labels:       retval, geti
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_geti = new RewriteRuleSubtreeStream(adaptor, "rule geti", geti!=null ? geti.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1870:151: -> $geti
                	        	{
                	        	    adaptor.AddChild(root_0, stream_geti.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1871:10: s= 'set' ( ( ';' )=>sbe= ';' | sb= block ) seti= magicIdxSetter[atts, $la.tree, mods, $lm.tree, type, iface, $s.token, idxBlock, idxparams]
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	s=(CommonTree)Match(input,248,FOLLOW_248_in_indexer_accessor_declaration10468); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_248.Add(s);

                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1871:18: ( ( ';' )=>sbe= ';' | sb= block )
                	        	int alt253 = 2;
                	        	int LA253_0 = input.LA(1);

                	        	if ( (LA253_0 == SEMI) )
                	        	{
                	        	    int LA253_1 = input.LA(2);

                	        	    if ( (synpred34_JavaMaker()) )
                	        	    {
                	        	        alt253 = 1;
                	        	    }
                	        	    else if ( (true) )
                	        	    {
                	        	        alt253 = 2;
                	        	    }
                	        	    else 
                	        	    {
                	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	        NoViableAltException nvae_d253s1 =
                	        	            new NoViableAltException("", 253, 1, input);

                	        	        throw nvae_d253s1;
                	        	    }
                	        	}
                	        	else if ( (LA253_0 == OPEN_BRACE) )
                	        	{
                	        	    alt253 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d253s0 =
                	        	        new NoViableAltException("", 253, 0, input);

                	        	    throw nvae_d253s0;
                	        	}
                	        	switch (alt253) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1871:19: ( ';' )=>sbe= ';'
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	sbe=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_indexer_accessor_declaration10478); if (state.failed) return retval; 
                	        	        	if ( (state.backtracking==0) ) stream_SEMI.Add(sbe);

                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   idxBlock = sbe_tree; 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1872:21: sb= block
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_block_in_indexer_accessor_declaration10505);
                	        	        	sb = block();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_block.Add(sb.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   idxBlock = ((sb != null) ? ((CommonTree)sb.Tree) : null); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicIdxSetter_in_indexer_accessor_declaration10513);
                	        	seti = magicIdxSetter(atts, ((la != null) ? ((CommonTree)la.Tree) : null), mods, ((lm != null) ? ((CommonTree)lm.Tree) : null), type, iface, s.token, idxBlock, idxparams);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicIdxSetter.Add(seti.Tree);


                	        	// AST REWRITE
                	        	// elements:          seti
                	        	// token labels:      
                	        	// rule labels:       retval, seti
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	        	RewriteRuleSubtreeStream stream_seti = new RewriteRuleSubtreeStream(adaptor, "rule seti", seti!=null ? seti.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 1872:153: -> $seti
                	        	{
                	        	    adaptor.AddChild(root_0, stream_seti.NextTree());

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "indexer_accessor_declaration"

        public class operator_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "operator_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1876:1: operator_declaration : operator_declarator operator_body ;
        public JavaMaker.operator_declaration_return operator_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.operator_declaration_return retval = new JavaMaker.operator_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.operator_declarator_return operator_declarator632 = default(JavaMaker.operator_declarator_return);

            JavaMaker.operator_body_return operator_body633 = default(JavaMaker.operator_body_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1876:21: ( operator_declarator operator_body )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1877:2: operator_declarator operator_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_operator_declarator_in_operator_declaration10534);
                	operator_declarator632 = operator_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, operator_declarator632.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_operator_body_in_operator_declaration10538);
                	operator_body633 = operator_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, operator_body633.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "operator_declaration"

        public class operator_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1878:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) ;
        public JavaMaker.operator_declarator_return operator_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.operator_declarator_return retval = new JavaMaker.operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal634 = null;
            CommonTree set635 = null;
            CommonTree char_literal636 = null;
            CommonTree char_literal642 = null;
            CommonTree char_literal647 = null;
            JavaMaker.type_return type637 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier638 = default(JavaMaker.identifier_return);

            JavaMaker.binary_operator_declarator_return binary_operator_declarator639 = default(JavaMaker.binary_operator_declarator_return);

            JavaMaker.unary_operator_declarator_return unary_operator_declarator640 = default(JavaMaker.unary_operator_declarator_return);

            JavaMaker.overloadable_unary_operator_return overloadable_unary_operator641 = default(JavaMaker.overloadable_unary_operator_return);

            JavaMaker.type_return type643 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier644 = default(JavaMaker.identifier_return);

            JavaMaker.unary_operator_declarator_return unary_operator_declarator645 = default(JavaMaker.unary_operator_declarator_return);

            JavaMaker.overloadable_binary_operator_return overloadable_binary_operator646 = default(JavaMaker.overloadable_binary_operator_return);

            JavaMaker.type_return type648 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier649 = default(JavaMaker.identifier_return);

            JavaMaker.binary_operator_declarator_return binary_operator_declarator650 = default(JavaMaker.binary_operator_declarator_return);


            CommonTree string_literal634_tree=null;
            CommonTree set635_tree=null;
            CommonTree char_literal636_tree=null;
            CommonTree char_literal642_tree=null;
            CommonTree char_literal647_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1878:20: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1879:2: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal634=(CommonTree)Match(input,259,FOLLOW_259_in_operator_declarator10546); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal634_tree = (CommonTree)adaptor.DupNode(string_literal634);

                		adaptor.AddChild(root_0, string_literal634_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1880:2: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
                	int alt256 = 3;
                	switch ( input.LA(1) ) 
                	{
                	case PLUS:
                	case MINUS:
                		{
                	    alt256 = 1;
                	    }
                	    break;
                	case MONONOT:
                	case MONOTWIDDLE:
                	case TRUE:
                	case FALSE:
                	case 209:
                	case 210:
                		{
                	    alt256 = 2;
                	    }
                	    break;
                	case BIT_OR:
                	case BIT_XOR:
                	case BIT_AND:
                	case NOT_EQUAL:
                	case EQUAL:
                	case LTHAN:
                	case LTE:
                	case GTE:
                	case LEFT_SHIFT:
                	case DIV:
                	case MOD:
                	case STAR:
                	case GT:
                		{
                	    alt256 = 3;
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d256s0 =
                		        new NoViableAltException("", 256, 0, input);

                		    throw nvae_d256s0;
                	}

                	switch (alt256) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1880:3: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	set635 = (CommonTree)input.LT(1);
                	        	if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) 
                	        	{
                	        	    input.Consume();

                	        	    if ( (state.backtracking==0) ) {
                	        	    set635_tree = (CommonTree)adaptor.DupNode(set635);

                	        	    adaptor.AddChild(root_0, set635_tree);
                	        	    }
                	        	    state.errorRecovery = false;state.failed = false;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	        	    throw mse;
                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal636=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator10561); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal636_tree = (CommonTree)adaptor.DupNode(char_literal636);

                	        		adaptor.AddChild(root_0, char_literal636_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_operator_declarator10565);
                	        	type637 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type637.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_operator_declarator10569);
                	        	identifier638 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier638.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1880:43: ( binary_operator_declarator | unary_operator_declarator )
                	        	int alt255 = 2;
                	        	int LA255_0 = input.LA(1);

                	        	if ( (LA255_0 == COMMA) )
                	        	{
                	        	    alt255 = 1;
                	        	}
                	        	else if ( (LA255_0 == RPAREN) )
                	        	{
                	        	    alt255 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d255s0 =
                	        	        new NoViableAltException("", 255, 0, input);

                	        	    throw nvae_d255s0;
                	        	}
                	        	switch (alt255) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1880:44: binary_operator_declarator
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator10574);
                	        	        	binary_operator_declarator639 = binary_operator_declarator();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, binary_operator_declarator639.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1880:73: unary_operator_declarator
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator10578);
                	        	        	unary_operator_declarator640 = unary_operator_declarator();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) 
                	        	        	adaptor.AddChild(root_0, unary_operator_declarator640.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1881:5: overloadable_unary_operator '(' type identifier unary_operator_declarator
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_overloadable_unary_operator_in_operator_declarator10585);
                	        	overloadable_unary_operator641 = overloadable_unary_operator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, overloadable_unary_operator641.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal642=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator10589); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal642_tree = (CommonTree)adaptor.DupNode(char_literal642);

                	        		adaptor.AddChild(root_0, char_literal642_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_operator_declarator10593);
                	        	type643 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type643.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_operator_declarator10595);
                	        	identifier644 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier644.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator10599);
                	        	unary_operator_declarator645 = unary_operator_declarator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, unary_operator_declarator645.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1882:5: overloadable_binary_operator '(' type identifier binary_operator_declarator
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_overloadable_binary_operator_in_operator_declarator10605);
                	        	overloadable_binary_operator646 = overloadable_binary_operator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, overloadable_binary_operator646.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal647=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator10609); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal647_tree = (CommonTree)adaptor.DupNode(char_literal647);

                	        		adaptor.AddChild(root_0, char_literal647_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_type_in_operator_declarator10613);
                	        	type648 = type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, type648.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_operator_declarator10615);
                	        	identifier649 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier649.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator10619);
                	        	binary_operator_declarator650 = binary_operator_declarator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, binary_operator_declarator650.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "operator_declarator"

        public class unary_operator_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unary_operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1883:1: unary_operator_declarator : ')' ;
        public JavaMaker.unary_operator_declarator_return unary_operator_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.unary_operator_declarator_return retval = new JavaMaker.unary_operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal651 = null;

            CommonTree char_literal651_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1883:26: ( ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1884:5: ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal651=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_unary_operator_declarator10631); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal651_tree = (CommonTree)adaptor.DupNode(char_literal651);

                		adaptor.AddChild(root_0, char_literal651_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unary_operator_declarator"

        public class overloadable_unary_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "overloadable_unary_operator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1885:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
        public JavaMaker.overloadable_unary_operator_return overloadable_unary_operator() // throws RecognitionException [1]
        {   
            JavaMaker.overloadable_unary_operator_return retval = new JavaMaker.overloadable_unary_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set652 = null;

            CommonTree set652_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1885:28: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set652 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= MONONOT && input.LA(1) <= MONOTWIDDLE) || (input.LA(1) >= TRUE && input.LA(1) <= FALSE) || (input.LA(1) >= 209 && input.LA(1) <= 210) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set652_tree = (CommonTree)adaptor.DupNode(set652);

                	    adaptor.AddChild(root_0, set652_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "overloadable_unary_operator"

        public class binary_operator_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "binary_operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1887:1: binary_operator_declarator : ',' type identifier ')' ;
        public JavaMaker.binary_operator_declarator_return binary_operator_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.binary_operator_declarator_return retval = new JavaMaker.binary_operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal653 = null;
            CommonTree char_literal656 = null;
            JavaMaker.type_return type654 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier655 = default(JavaMaker.identifier_return);


            CommonTree char_literal653_tree=null;
            CommonTree char_literal656_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1887:27: ( ',' type identifier ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1888:2: ',' type identifier ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal653=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_binary_operator_declarator10674); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal653_tree = (CommonTree)adaptor.DupNode(char_literal653);

                		adaptor.AddChild(root_0, char_literal653_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_binary_operator_declarator10678);
                	type654 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type654.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_binary_operator_declarator10682);
                	identifier655 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier655.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal656=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_binary_operator_declarator10686); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal656_tree = (CommonTree)adaptor.DupNode(char_literal656);

                		adaptor.AddChild(root_0, char_literal656_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "binary_operator_declarator"

        public class overloadable_binary_operator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "overloadable_binary_operator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1890:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
        public JavaMaker.overloadable_binary_operator_return overloadable_binary_operator() // throws RecognitionException [1]
        {   
            JavaMaker.overloadable_binary_operator_return retval = new JavaMaker.overloadable_binary_operator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal657 = null;
            CommonTree char_literal658 = null;
            CommonTree char_literal659 = null;
            CommonTree char_literal660 = null;
            CommonTree char_literal661 = null;
            CommonTree char_literal662 = null;
            CommonTree string_literal663 = null;
            CommonTree char_literal664 = null;
            CommonTree char_literal665 = null;
            CommonTree string_literal666 = null;
            CommonTree string_literal667 = null;
            CommonTree char_literal668 = null;
            CommonTree char_literal669 = null;
            CommonTree string_literal670 = null;
            CommonTree string_literal671 = null;

            CommonTree char_literal657_tree=null;
            CommonTree char_literal658_tree=null;
            CommonTree char_literal659_tree=null;
            CommonTree char_literal660_tree=null;
            CommonTree char_literal661_tree=null;
            CommonTree char_literal662_tree=null;
            CommonTree string_literal663_tree=null;
            CommonTree char_literal664_tree=null;
            CommonTree char_literal665_tree=null;
            CommonTree string_literal666_tree=null;
            CommonTree string_literal667_tree=null;
            CommonTree char_literal668_tree=null;
            CommonTree char_literal669_tree=null;
            CommonTree string_literal670_tree=null;
            CommonTree string_literal671_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1890:29: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
                int alt257 = 14;
                alt257 = dfa257.Predict(input);
                switch (alt257) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:19: '*'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal657=(CommonTree)Match(input,STAR,FOLLOW_STAR_in_overloadable_binary_operator10697); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal657_tree = (CommonTree)adaptor.DupNode(char_literal657);

                        		adaptor.AddChild(root_0, char_literal657_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:25: '/'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal658=(CommonTree)Match(input,DIV,FOLLOW_DIV_in_overloadable_binary_operator10701); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal658_tree = (CommonTree)adaptor.DupNode(char_literal658);

                        		adaptor.AddChild(root_0, char_literal658_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:31: '%'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal659=(CommonTree)Match(input,MOD,FOLLOW_MOD_in_overloadable_binary_operator10705); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal659_tree = (CommonTree)adaptor.DupNode(char_literal659);

                        		adaptor.AddChild(root_0, char_literal659_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:37: '&'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal660=(CommonTree)Match(input,BIT_AND,FOLLOW_BIT_AND_in_overloadable_binary_operator10709); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal660_tree = (CommonTree)adaptor.DupNode(char_literal660);

                        		adaptor.AddChild(root_0, char_literal660_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:43: '|'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal661=(CommonTree)Match(input,BIT_OR,FOLLOW_BIT_OR_in_overloadable_binary_operator10713); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal661_tree = (CommonTree)adaptor.DupNode(char_literal661);

                        		adaptor.AddChild(root_0, char_literal661_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:49: '^'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal662=(CommonTree)Match(input,BIT_XOR,FOLLOW_BIT_XOR_in_overloadable_binary_operator10717); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal662_tree = (CommonTree)adaptor.DupNode(char_literal662);

                        		adaptor.AddChild(root_0, char_literal662_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:55: '<<'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal663=(CommonTree)Match(input,LEFT_SHIFT,FOLLOW_LEFT_SHIFT_in_overloadable_binary_operator10721); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal663_tree = (CommonTree)adaptor.DupNode(string_literal663);

                        		adaptor.AddChild(root_0, string_literal663_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:62: '>' '>'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal664=(CommonTree)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator10725); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal664_tree = (CommonTree)adaptor.DupNode(char_literal664);

                        		adaptor.AddChild(root_0, char_literal664_tree);
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	char_literal665=(CommonTree)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator10727); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal665_tree = (CommonTree)adaptor.DupNode(char_literal665);

                        		adaptor.AddChild(root_0, char_literal665_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:72: '=='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal666=(CommonTree)Match(input,EQUAL,FOLLOW_EQUAL_in_overloadable_binary_operator10731); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal666_tree = (CommonTree)adaptor.DupNode(string_literal666);

                        		adaptor.AddChild(root_0, string_literal666_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:79: '!='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal667=(CommonTree)Match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_overloadable_binary_operator10735); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal667_tree = (CommonTree)adaptor.DupNode(string_literal667);

                        		adaptor.AddChild(root_0, string_literal667_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:86: '>'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal668=(CommonTree)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator10739); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal668_tree = (CommonTree)adaptor.DupNode(char_literal668);

                        		adaptor.AddChild(root_0, char_literal668_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:92: '<'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	char_literal669=(CommonTree)Match(input,LTHAN,FOLLOW_LTHAN_in_overloadable_binary_operator10743); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{char_literal669_tree = (CommonTree)adaptor.DupNode(char_literal669);

                        		adaptor.AddChild(root_0, char_literal669_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:98: '>='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal670=(CommonTree)Match(input,GTE,FOLLOW_GTE_in_overloadable_binary_operator10747); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal670_tree = (CommonTree)adaptor.DupNode(string_literal670);

                        		adaptor.AddChild(root_0, string_literal670_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1891:105: '<='
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal671=(CommonTree)Match(input,LTE,FOLLOW_LTE_in_overloadable_binary_operator10751); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal671_tree = (CommonTree)adaptor.DupNode(string_literal671);

                        		adaptor.AddChild(root_0, string_literal671_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "overloadable_binary_operator"

        public class conversion_operator_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "conversion_operator_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1893:1: conversion_operator_declaration : conversion_operator_declarator operator_body ;
        public JavaMaker.conversion_operator_declaration_return conversion_operator_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.conversion_operator_declaration_return retval = new JavaMaker.conversion_operator_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.conversion_operator_declarator_return conversion_operator_declarator672 = default(JavaMaker.conversion_operator_declarator_return);

            JavaMaker.operator_body_return operator_body673 = default(JavaMaker.operator_body_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1893:32: ( conversion_operator_declarator operator_body )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1894:2: conversion_operator_declarator operator_body
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration10761);
                	conversion_operator_declarator672 = conversion_operator_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, conversion_operator_declarator672.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_operator_body_in_conversion_operator_declaration10765);
                	operator_body673 = operator_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, operator_body673.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "conversion_operator_declaration"

        public class conversion_operator_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "conversion_operator_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1895:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
        public JavaMaker.conversion_operator_declarator_return conversion_operator_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.conversion_operator_declarator_return retval = new JavaMaker.conversion_operator_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set674 = null;
            CommonTree string_literal675 = null;
            CommonTree char_literal677 = null;
            CommonTree char_literal680 = null;
            JavaMaker.type_return type676 = default(JavaMaker.type_return);

            JavaMaker.type_return type678 = default(JavaMaker.type_return);

            JavaMaker.identifier_return identifier679 = default(JavaMaker.identifier_return);


            CommonTree set674_tree=null;
            CommonTree string_literal675_tree=null;
            CommonTree char_literal677_tree=null;
            CommonTree char_literal680_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1895:31: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1896:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set674 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= 260 && input.LA(1) <= 261) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set674_tree = (CommonTree)adaptor.DupNode(set674);

                	    adaptor.AddChild(root_0, set674_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	_last = (CommonTree)input.LT(1);
                	string_literal675=(CommonTree)Match(input,259,FOLLOW_259_in_conversion_operator_declarator10782); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal675_tree = (CommonTree)adaptor.DupNode(string_literal675);

                		adaptor.AddChild(root_0, string_literal675_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_conversion_operator_declarator10786);
                	type676 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type676.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal677=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_conversion_operator_declarator10790); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal677_tree = (CommonTree)adaptor.DupNode(char_literal677);

                		adaptor.AddChild(root_0, char_literal677_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_conversion_operator_declarator10794);
                	type678 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type678.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_conversion_operator_declarator10798);
                	identifier679 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier679.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal680=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_conversion_operator_declarator10802); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal680_tree = (CommonTree)adaptor.DupNode(char_literal680);

                		adaptor.AddChild(root_0, char_literal680_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "conversion_operator_declarator"

        public class operator_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "operator_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1897:1: operator_body : block ;
        public JavaMaker.operator_body_return operator_body() // throws RecognitionException [1]
        {   
            JavaMaker.operator_body_return retval = new JavaMaker.operator_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.block_return block681 = default(JavaMaker.block_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1897:14: ( block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1898:2: block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_operator_body10810);
                	block681 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block681.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "operator_body"

        public class constructor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constructor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1901:1: constructor_declaration[CommonTree atts, CommonTree mods, List<string> modList] : i= identifier '(' (p= formal_parameter_list )? s= ')' (init= constructor_initializer )? b= constructor_body[$init.tree] magicThrowsException[Cfg.TranslatorBlanketThrow,$s.token] -> ^( CONSTRUCTOR[$i.tree.Token, \"CONSTRUCTOR\"] $i ( $p)? $b ( magicThrowsException )? ) ;
        public JavaMaker.constructor_declaration_return constructor_declaration(CommonTree atts, CommonTree mods, List<string> modList) // throws RecognitionException [1]
        {   
            JavaMaker.constructor_declaration_return retval = new JavaMaker.constructor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            CommonTree char_literal682 = null;
            JavaMaker.identifier_return i = default(JavaMaker.identifier_return);

            JavaMaker.formal_parameter_list_return p = default(JavaMaker.formal_parameter_list_return);

            JavaMaker.constructor_initializer_return init = default(JavaMaker.constructor_initializer_return);

            JavaMaker.constructor_body_return b = default(JavaMaker.constructor_body_return);

            JavaMaker.magicThrowsException_return magicThrowsException683 = default(JavaMaker.magicThrowsException_return);


            CommonTree s_tree=null;
            CommonTree char_literal682_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_constructor_initializer = new RewriteRuleSubtreeStream(adaptor,"rule constructor_initializer");
            RewriteRuleSubtreeStream stream_constructor_body = new RewriteRuleSubtreeStream(adaptor,"rule constructor_body");
            RewriteRuleSubtreeStream stream_formal_parameter_list = new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1901:80: (i= identifier '(' (p= formal_parameter_list )? s= ')' (init= constructor_initializer )? b= constructor_body[$init.tree] magicThrowsException[Cfg.TranslatorBlanketThrow,$s.token] -> ^( CONSTRUCTOR[$i.tree.Token, \"CONSTRUCTOR\"] $i ( $p)? $b ( magicThrowsException )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1902:3: i= identifier '(' (p= formal_parameter_list )? s= ')' (init= constructor_initializer )? b= constructor_body[$init.tree] magicThrowsException[Cfg.TranslatorBlanketThrow,$s.token]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_constructor_declaration10824);
                	i = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(i.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal682=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_declaration10828); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal682);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1902:25: (p= formal_parameter_list )?
                	int alt258 = 2;
                	int LA258_0 = input.LA(1);

                	if ( ((LA258_0 >= OBJECT && LA258_0 <= THIS) || LA258_0 == OPEN_BRACKET || (LA258_0 >= BOOL && LA258_0 <= IDENTIFIER) || (LA258_0 >= ELIF && LA258_0 <= UNDEF) || LA258_0 == 195 || LA258_0 == 206 || (LA258_0 >= 212 && LA258_0 <= 213) || LA258_0 == 221 || (LA258_0 >= 224 && LA258_0 <= 239) || (LA258_0 >= 241 && LA258_0 <= 244) || (LA258_0 >= 247 && LA258_0 <= 254) || (LA258_0 >= 256 && LA258_0 <= 257) || (LA258_0 >= 263 && LA258_0 <= 264) || (LA258_0 >= 274 && LA258_0 <= 277)) )
                	{
                	    alt258 = 1;
                	}
                	switch (alt258) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1902:25: p= formal_parameter_list
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_formal_parameter_list_in_constructor_declaration10834);
                	        	p = formal_parameter_list();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_formal_parameter_list.Add(p.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_declaration10841); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(s);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1902:63: (init= constructor_initializer )?
                	int alt259 = 2;
                	int LA259_0 = input.LA(1);

                	if ( (LA259_0 == 211) )
                	{
                	    alt259 = 1;
                	}
                	switch (alt259) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1902:63: init= constructor_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_constructor_initializer_in_constructor_declaration10847);
                	        	init = constructor_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_constructor_initializer.Add(init.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_constructor_body_in_constructor_declaration10852);
                	b = constructor_body(((init != null) ? ((CommonTree)init.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_constructor_body.Add(b.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_constructor_declaration10855);
                	magicThrowsException683 = magicThrowsException(Cfg.TranslatorBlanketThrow, s.token);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(magicThrowsException683.Tree);


                	// AST REWRITE
                	// elements:          magicThrowsException, i, b, p
                	// token labels:      
                	// rule labels:       retval, b, p, i
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_b = new RewriteRuleSubtreeStream(adaptor, "rule b", b!=null ? b.Tree : null);
                	RewriteRuleSubtreeStream stream_p = new RewriteRuleSubtreeStream(adaptor, "rule p", p!=null ? p.Tree : null);
                	RewriteRuleSubtreeStream stream_i = new RewriteRuleSubtreeStream(adaptor, "rule i", i!=null ? i.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1903:13: -> ^( CONSTRUCTOR[$i.tree.Token, \"CONSTRUCTOR\"] $i ( $p)? $b ( magicThrowsException )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1903:17: ^( CONSTRUCTOR[$i.tree.Token, \"CONSTRUCTOR\"] $i ( $p)? $b ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONSTRUCTOR, ((i != null) ? ((CommonTree)i.Tree) : null).Token, "CONSTRUCTOR"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1, stream_i.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1903:102: ( $p)?
                	    if ( stream_p.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_p.NextTree());

                	    }
                	    stream_p.Reset();
                	    adaptor.AddChild(root_1, stream_b.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1903:109: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constructor_declaration"

        public class constructor_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constructor_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1904:1: constructor_initializer : ( ':' tok= 'this' '(' ( argument_list )? ')' -> ^( APPLY[$tok.token, \"APPLY\"] $tok ( argument_list )? ) SEMI[$tok.token, \";\"] | ':' tok= 'base' '(' ( argument_list )? ')' -> ^( APPLY[$tok.token, \"APPLY\"] SUPER[$tok.token, \"super\"] ( argument_list )? ) SEMI[$tok.token, \";\"] );
        public JavaMaker.constructor_initializer_return constructor_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.constructor_initializer_return retval = new JavaMaker.constructor_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree tok = null;
            CommonTree char_literal684 = null;
            CommonTree char_literal685 = null;
            CommonTree char_literal687 = null;
            CommonTree char_literal688 = null;
            CommonTree char_literal689 = null;
            CommonTree char_literal691 = null;
            JavaMaker.argument_list_return argument_list686 = default(JavaMaker.argument_list_return);

            JavaMaker.argument_list_return argument_list690 = default(JavaMaker.argument_list_return);


            CommonTree tok_tree=null;
            CommonTree char_literal684_tree=null;
            CommonTree char_literal685_tree=null;
            CommonTree char_literal687_tree=null;
            CommonTree char_literal688_tree=null;
            CommonTree char_literal689_tree=null;
            CommonTree char_literal691_tree=null;
            RewriteRuleNodeStream stream_211 = new RewriteRuleNodeStream(adaptor,"token 211");
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_207 = new RewriteRuleNodeStream(adaptor,"token 207");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleNodeStream stream_THIS = new RewriteRuleNodeStream(adaptor,"token THIS");
            RewriteRuleSubtreeStream stream_argument_list = new RewriteRuleSubtreeStream(adaptor,"rule argument_list");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1904:24: ( ':' tok= 'this' '(' ( argument_list )? ')' -> ^( APPLY[$tok.token, \"APPLY\"] $tok ( argument_list )? ) SEMI[$tok.token, \";\"] | ':' tok= 'base' '(' ( argument_list )? ')' -> ^( APPLY[$tok.token, \"APPLY\"] SUPER[$tok.token, \"super\"] ( argument_list )? ) SEMI[$tok.token, \";\"] )
                int alt262 = 2;
                int LA262_0 = input.LA(1);

                if ( (LA262_0 == 211) )
                {
                    int LA262_1 = input.LA(2);

                    if ( (LA262_1 == THIS) )
                    {
                        alt262 = 1;
                    }
                    else if ( (LA262_1 == 207) )
                    {
                        alt262 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d262s1 =
                            new NoViableAltException("", 262, 1, input);

                        throw nvae_d262s1;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d262s0 =
                        new NoViableAltException("", 262, 0, input);

                    throw nvae_d262s0;
                }
                switch (alt262) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1905:2: ':' tok= 'this' '(' ( argument_list )? ')'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	char_literal684=(CommonTree)Match(input,211,FOLLOW_211_in_constructor_initializer10901); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_211.Add(char_literal684);

                        	_last = (CommonTree)input.LT(1);
                        	tok=(CommonTree)Match(input,THIS,FOLLOW_THIS_in_constructor_initializer10905); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_THIS.Add(tok);

                        	_last = (CommonTree)input.LT(1);
                        	char_literal685=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_initializer10907); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal685);

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1905:23: ( argument_list )?
                        	int alt260 = 2;
                        	int LA260_0 = input.LA(1);

                        	if ( ((LA260_0 >= MONONOT && LA260_0 <= MONOTWIDDLE) || LA260_0 == NEW_ARRAY || (LA260_0 >= OBJECT && LA260_0 <= THIS) || LA260_0 == LPAREN || LA260_0 == BIT_AND || (LA260_0 >= PLUS && LA260_0 <= MINUS) || LA260_0 == STAR || (LA260_0 >= BOOL && LA260_0 <= NULL) || (LA260_0 >= ELIF && LA260_0 <= UNDEF) || LA260_0 == 195 || LA260_0 == 197 || LA260_0 == 207 || (LA260_0 >= 209 && LA260_0 <= 210) || (LA260_0 >= 212 && LA260_0 <= 219) || LA260_0 == 221 || (LA260_0 >= 224 && LA260_0 <= 239) || (LA260_0 >= 241 && LA260_0 <= 244) || (LA260_0 >= 247 && LA260_0 <= 254) || LA260_0 == 256 || (LA260_0 >= 263 && LA260_0 <= 264) || (LA260_0 >= 274 && LA260_0 <= 277)) )
                        	{
                        	    alt260 = 1;
                        	}
                        	switch (alt260) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1905:23: argument_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_argument_list_in_constructor_initializer10911);
                        	        	argument_list686 = argument_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_argument_list.Add(argument_list686.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	char_literal687=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_initializer10916); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal687);



                        	// AST REWRITE
                        	// elements:          argument_list, tok
                        	// token labels:      tok
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_tok = new RewriteRuleNodeStream(adaptor, "token tok", tok);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1906:10: -> ^( APPLY[$tok.token, \"APPLY\"] $tok ( argument_list )? ) SEMI[$tok.token, \";\"]
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1906:13: ^( APPLY[$tok.token, \"APPLY\"] $tok ( argument_list )? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok.token, "APPLY"), root_1);

                        	    adaptor.AddChild(root_1, stream_tok.NextNode());
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1906:47: ( argument_list )?
                        	    if ( stream_argument_list.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_argument_list.NextTree());

                        	    }
                        	    stream_argument_list.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok.token, ";"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1907:4: ':' tok= 'base' '(' ( argument_list )? ')'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	char_literal688=(CommonTree)Match(input,211,FOLLOW_211_in_constructor_initializer10947); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_211.Add(char_literal688);

                        	_last = (CommonTree)input.LT(1);
                        	tok=(CommonTree)Match(input,207,FOLLOW_207_in_constructor_initializer10951); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_207.Add(tok);

                        	_last = (CommonTree)input.LT(1);
                        	char_literal689=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_initializer10953); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal689);

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1907:25: ( argument_list )?
                        	int alt261 = 2;
                        	int LA261_0 = input.LA(1);

                        	if ( ((LA261_0 >= MONONOT && LA261_0 <= MONOTWIDDLE) || LA261_0 == NEW_ARRAY || (LA261_0 >= OBJECT && LA261_0 <= THIS) || LA261_0 == LPAREN || LA261_0 == BIT_AND || (LA261_0 >= PLUS && LA261_0 <= MINUS) || LA261_0 == STAR || (LA261_0 >= BOOL && LA261_0 <= NULL) || (LA261_0 >= ELIF && LA261_0 <= UNDEF) || LA261_0 == 195 || LA261_0 == 197 || LA261_0 == 207 || (LA261_0 >= 209 && LA261_0 <= 210) || (LA261_0 >= 212 && LA261_0 <= 219) || LA261_0 == 221 || (LA261_0 >= 224 && LA261_0 <= 239) || (LA261_0 >= 241 && LA261_0 <= 244) || (LA261_0 >= 247 && LA261_0 <= 254) || LA261_0 == 256 || (LA261_0 >= 263 && LA261_0 <= 264) || (LA261_0 >= 274 && LA261_0 <= 277)) )
                        	{
                        	    alt261 = 1;
                        	}
                        	switch (alt261) 
                        	{
                        	    case 1 :
                        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1907:25: argument_list
                        	        {
                        	        	_last = (CommonTree)input.LT(1);
                        	        	PushFollow(FOLLOW_argument_list_in_constructor_initializer10957);
                        	        	argument_list690 = argument_list();
                        	        	state._fsp--;
                        	        	if (state.failed) return retval;
                        	        	if ( (state.backtracking==0) ) stream_argument_list.Add(argument_list690.Tree);

                        	        	if ( (state.backtracking==0) ) {
                        	        	}
                        	        }
                        	        break;

                        	}

                        	_last = (CommonTree)input.LT(1);
                        	char_literal691=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_initializer10962); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal691);



                        	// AST REWRITE
                        	// elements:          argument_list
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1908:10: -> ^( APPLY[$tok.token, \"APPLY\"] SUPER[$tok.token, \"super\"] ( argument_list )? ) SEMI[$tok.token, \";\"]
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1908:13: ^( APPLY[$tok.token, \"APPLY\"] SUPER[$tok.token, \"super\"] ( argument_list )? )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok.token, "APPLY"), root_1);

                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SUPER, tok.token, "super"));
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1908:69: ( argument_list )?
                        	    if ( stream_argument_list.HasNext )
                        	    {
                        	        adaptor.AddChild(root_1, stream_argument_list.NextTree());

                        	    }
                        	    stream_argument_list.Reset();

                        	    adaptor.AddChild(root_0, root_1);
                        	    }
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, tok.token, ";"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constructor_initializer"

        public class constructor_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "constructor_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1910:1: constructor_body[CommonTree init] : ({...}? =>s= ';' -> $s | s1= ';' -> OPEN_BRACE[$s1.token, \"{\"] CLOSE_BRACE[$s1.token, \"}\"] | a= '{' (ss+= statement[/* isStatementListCtxt */ true] )* b= '}' -> $a ( $ss)* $b);
        public JavaMaker.constructor_body_return constructor_body(CommonTree init) // throws RecognitionException [1]
        {   
            JavaMaker.constructor_body_return retval = new JavaMaker.constructor_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            CommonTree s1 = null;
            CommonTree a = null;
            CommonTree b = null;
            List list_ss = null;
            RuleReturnScope ss = null;
            CommonTree s_tree=null;
            CommonTree s1_tree=null;
            CommonTree a_tree=null;
            CommonTree b_tree=null;
            RewriteRuleNodeStream stream_CLOSE_BRACE = new RewriteRuleNodeStream(adaptor,"token CLOSE_BRACE");
            RewriteRuleNodeStream stream_OPEN_BRACE = new RewriteRuleNodeStream(adaptor,"token OPEN_BRACE");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor,"rule statement");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1910:34: ({...}? =>s= ';' -> $s | s1= ';' -> OPEN_BRACE[$s1.token, \"{\"] CLOSE_BRACE[$s1.token, \"}\"] | a= '{' (ss+= statement[/* isStatementListCtxt */ true] )* b= '}' -> $a ( $ss)* $b)
                int alt264 = 3;
                int LA264_0 = input.LA(1);

                if ( (LA264_0 == SEMI) )
                {
                    int LA264_1 = input.LA(2);

                    if ( ((init == null)) )
                    {
                        alt264 = 1;
                    }
                    else if ( (true) )
                    {
                        alt264 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d264s1 =
                            new NoViableAltException("", 264, 1, input);

                        throw nvae_d264s1;
                    }
                }
                else if ( (LA264_0 == OPEN_BRACE) )
                {
                    alt264 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d264s0 =
                        new NoViableAltException("", 264, 0, input);

                    throw nvae_d264s0;
                }
                switch (alt264) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1911:2: {...}? =>s= ';'
                        {
                        	if ( !((init == null)) ) 
                        	{
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    throw new FailedPredicateException(input, "constructor_body", "init == null");
                        	}
                        	_last = (CommonTree)input.LT(1);
                        	s=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_constructor_body11007); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_SEMI.Add(s);



                        	// AST REWRITE
                        	// elements:          s
                        	// token labels:      s
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_s = new RewriteRuleNodeStream(adaptor, "token s", s);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1911:26: -> $s
                        	{
                        	    adaptor.AddChild(root_0, stream_s.NextNode());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1912:4: s1= ';'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	s1=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_constructor_body11020); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_SEMI.Add(s1);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1912:11: -> OPEN_BRACE[$s1.token, \"{\"] CLOSE_BRACE[$s1.token, \"}\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, s1.token, "{"));
                        	    adaptor.AddChild(root_0,  dupTree(init) );
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, s1.token, "}"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1913:7: a= '{' (ss+= statement[/* isStatementListCtxt */ true] )* b= '}'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	a=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_constructor_body11040); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_OPEN_BRACE.Add(a);

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1913:15: (ss+= statement[/* isStatementListCtxt */ true] )*
                        	do 
                        	{
                        	    int alt263 = 2;
                        	    int LA263_0 = input.LA(1);

                        	    if ( ((LA263_0 >= MONONOT && LA263_0 <= MONOTWIDDLE) || LA263_0 == NEW_ARRAY || (LA263_0 >= RETURN && LA263_0 <= TRY) || LA263_0 == THROW || (LA263_0 >= BREAK && LA263_0 <= FOREACH) || LA263_0 == OPEN_BRACE || LA263_0 == LPAREN || LA263_0 == IF || LA263_0 == BIT_AND || (LA263_0 >= PLUS && LA263_0 <= MINUS) || LA263_0 == STAR || (LA263_0 >= BOOL && LA263_0 <= NULL) || (LA263_0 >= USING && LA263_0 <= SEMI) || LA263_0 == 195 || (LA263_0 >= 197 && LA263_0 <= 198) || (LA263_0 >= 205 && LA263_0 <= 207) || (LA263_0 >= 209 && LA263_0 <= 210) || (LA263_0 >= 214 && LA263_0 <= 219) || LA263_0 == 221 || (LA263_0 >= 224 && LA263_0 <= 239) || (LA263_0 >= 241 && LA263_0 <= 244) || (LA263_0 >= 247 && LA263_0 <= 254) || LA263_0 == 256 || (LA263_0 >= 262 && LA263_0 <= 264) || LA263_0 == 266 || (LA263_0 >= 268 && LA263_0 <= 277)) )
                        	    {
                        	        alt263 = 1;
                        	    }


                        	    switch (alt263) 
                        		{
                        			case 1 :
                        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1913:15: ss+= statement[/* isStatementListCtxt */ true]
                        			    {
                        			    	_last = (CommonTree)input.LT(1);
                        			    	_last = (CommonTree)input.LT(1);
                        			    	PushFollow(FOLLOW_statement_in_constructor_body11044);
                        			    	ss = statement(/* isStatementListCtxt */ true);
                        			    	state._fsp--;
                        			    	if (state.failed) return retval;
                        			    	if ( (state.backtracking==0) ) stream_statement.Add(ss.Tree);
                        			    	if (list_ss == null) list_ss = new ArrayList();
                        			    	list_ss.Add(ss.Tree);


                        			    	if ( (state.backtracking==0) ) {
                        			    	}
                        			    }
                        			    break;

                        			default:
                        			    goto loop263;
                        	    }
                        	} while (true);

                        	loop263:
                        		;	// Stops C# compiler whining that label 'loop263' has no statements

                        	_last = (CommonTree)input.LT(1);
                        	b=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_constructor_body11050); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_CLOSE_BRACE.Add(b);



                        	// AST REWRITE
                        	// elements:          b, ss, a
                        	// token labels:      b, a
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  ss
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_b = new RewriteRuleNodeStream(adaptor, "token b", b);
                        	RewriteRuleNodeStream stream_a = new RewriteRuleNodeStream(adaptor, "token a", a);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                        	RewriteRuleSubtreeStream stream_ss = new RewriteRuleSubtreeStream(adaptor, "token ss", list_ss);
                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1913:66: -> $a ( $ss)* $b
                        	{
                        	    adaptor.AddChild(root_0, stream_a.NextNode());
                        	    adaptor.AddChild(root_0,  dupTree(init) );
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1913:90: ( $ss)*
                        	    while ( stream_ss.HasNext )
                        	    {
                        	        adaptor.AddChild(root_0, stream_ss.NextTree());

                        	    }
                        	    stream_ss.Reset();
                        	    adaptor.AddChild(root_0, stream_b.NextNode());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "constructor_body"

        public class destructor_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "destructor_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1923:1: destructor_declaration : t= '~' identifier '(' ')' destructor_body f= magicFinalize[$t.token, $destructor_body.tree] -> $f;
        public JavaMaker.destructor_declaration_return destructor_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.destructor_declaration_return retval = new JavaMaker.destructor_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree t = null;
            CommonTree char_literal693 = null;
            CommonTree char_literal694 = null;
            JavaMaker.magicFinalize_return f = default(JavaMaker.magicFinalize_return);

            JavaMaker.identifier_return identifier692 = default(JavaMaker.identifier_return);

            JavaMaker.destructor_body_return destructor_body695 = default(JavaMaker.destructor_body_return);


            CommonTree t_tree=null;
            CommonTree char_literal693_tree=null;
            CommonTree char_literal694_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_MONOTWIDDLE = new RewriteRuleNodeStream(adaptor,"token MONOTWIDDLE");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_destructor_body = new RewriteRuleSubtreeStream(adaptor,"rule destructor_body");
            RewriteRuleSubtreeStream stream_magicFinalize = new RewriteRuleSubtreeStream(adaptor,"rule magicFinalize");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1923:23: (t= '~' identifier '(' ')' destructor_body f= magicFinalize[$t.token, $destructor_body.tree] -> $f)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1924:2: t= '~' identifier '(' ')' destructor_body f= magicFinalize[$t.token, $destructor_body.tree]
                {
                	_last = (CommonTree)input.LT(1);
                	t=(CommonTree)Match(input,MONOTWIDDLE,FOLLOW_MONOTWIDDLE_in_destructor_declaration11086); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_MONOTWIDDLE.Add(t);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_destructor_declaration11089);
                	identifier692 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier692.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal693=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_destructor_declaration11093); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal693);

                	_last = (CommonTree)input.LT(1);
                	char_literal694=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_destructor_declaration11097); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal694);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_destructor_body_in_destructor_declaration11102);
                	destructor_body695 = destructor_body();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_destructor_body.Add(destructor_body695.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicFinalize_in_destructor_declaration11106);
                	f = magicFinalize(t.token, ((destructor_body695 != null) ? ((CommonTree)destructor_body695.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicFinalize.Add(f.Tree);


                	// AST REWRITE
                	// elements:          f
                	// token labels:      
                	// rule labels:       f, retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_f = new RewriteRuleSubtreeStream(adaptor, "rule f", f!=null ? f.Tree : null);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 1924:100: -> $f
                	{
                	    adaptor.AddChild(root_0, stream_f.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "destructor_declaration"

        public class destructor_body_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "destructor_body"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1925:1: destructor_body : block ;
        public JavaMaker.destructor_body_return destructor_body() // throws RecognitionException [1]
        {   
            JavaMaker.destructor_body_return retval = new JavaMaker.destructor_body_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.block_return block696 = default(JavaMaker.block_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1925:16: ( block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1926:2: block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_destructor_body11119);
                	block696 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block696.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "destructor_body"

        public class invocation_part_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "invocation_part"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1940:1: invocation_part[CommonTree start] : ( access_identifier[ $start ] | brackets[ $start ] );
        public JavaMaker.invocation_part_return invocation_part(CommonTree start) // throws RecognitionException [1]
        {   
            JavaMaker.invocation_part_return retval = new JavaMaker.invocation_part_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.access_identifier_return access_identifier697 = default(JavaMaker.access_identifier_return);

            JavaMaker.brackets_return brackets698 = default(JavaMaker.brackets_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1940:35: ( access_identifier[ $start ] | brackets[ $start ] )
                int alt265 = 2;
                int LA265_0 = input.LA(1);

                if ( ((LA265_0 >= DOT && LA265_0 <= PTR)) )
                {
                    alt265 = 1;
                }
                else if ( (LA265_0 == OPEN_BRACKET) )
                {
                    alt265 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d265s0 =
                        new NoViableAltException("", 265, 0, input);

                    throw nvae_d265s0;
                }
                switch (alt265) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1941:3: access_identifier[ $start ]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_access_identifier_in_invocation_part11143);
                        	access_identifier697 = access_identifier(start);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, access_identifier697.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1942:4: brackets[ $start ]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_brackets_in_invocation_part11149);
                        	brackets698 = brackets(start);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, brackets698.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "invocation_part"

        public class statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1946:1: statement[bool isStatementListCtxt] : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement[isStatementListCtxt] | embedded_statement[isStatementListCtxt] );
        public JavaMaker.statement_return statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            JavaMaker.statement_return retval = new JavaMaker.statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.declaration_statement_return declaration_statement699 = default(JavaMaker.declaration_statement_return);

            JavaMaker.labeled_statement_return labeled_statement700 = default(JavaMaker.labeled_statement_return);

            JavaMaker.embedded_statement_return embedded_statement701 = default(JavaMaker.embedded_statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1946:36: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement[isStatementListCtxt] | embedded_statement[isStatementListCtxt] )
                int alt266 = 3;
                alt266 = dfa266.Predict(input);
                switch (alt266) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1947:2: ( declaration_statement )=> declaration_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_declaration_statement_in_statement11168);
                        	declaration_statement699 = declaration_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, declaration_statement699.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1948:4: ( identifier ':' )=> labeled_statement[isStatementListCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_labeled_statement_in_statement11183);
                        	labeled_statement700 = labeled_statement(isStatementListCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, labeled_statement700.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1949:4: embedded_statement[isStatementListCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_embedded_statement_in_statement11189);
                        	embedded_statement701 = embedded_statement(isStatementListCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, embedded_statement701.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement"

        public class embedded_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "embedded_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1951:1: embedded_statement[bool isStatementListCtxt] : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement[isStatementListCtxt] | yield_statement | unsafe_statement | fixed_statement | expression_statement );
        public JavaMaker.embedded_statement_return embedded_statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            JavaMaker.embedded_statement_return retval = new JavaMaker.embedded_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.block_return block702 = default(JavaMaker.block_return);

            JavaMaker.selection_statement_return selection_statement703 = default(JavaMaker.selection_statement_return);

            JavaMaker.iteration_statement_return iteration_statement704 = default(JavaMaker.iteration_statement_return);

            JavaMaker.jump_statement_return jump_statement705 = default(JavaMaker.jump_statement_return);

            JavaMaker.try_statement_return try_statement706 = default(JavaMaker.try_statement_return);

            JavaMaker.checked_statement_return checked_statement707 = default(JavaMaker.checked_statement_return);

            JavaMaker.unchecked_statement_return unchecked_statement708 = default(JavaMaker.unchecked_statement_return);

            JavaMaker.lock_statement_return lock_statement709 = default(JavaMaker.lock_statement_return);

            JavaMaker.using_statement_return using_statement710 = default(JavaMaker.using_statement_return);

            JavaMaker.yield_statement_return yield_statement711 = default(JavaMaker.yield_statement_return);

            JavaMaker.unsafe_statement_return unsafe_statement712 = default(JavaMaker.unsafe_statement_return);

            JavaMaker.fixed_statement_return fixed_statement713 = default(JavaMaker.fixed_statement_return);

            JavaMaker.expression_statement_return expression_statement714 = default(JavaMaker.expression_statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1951:45: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement[isStatementListCtxt] | yield_statement | unsafe_statement | fixed_statement | expression_statement )
                int alt267 = 13;
                alt267 = dfa267.Predict(input);
                switch (alt267) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1952:2: block
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_block_in_embedded_statement11201);
                        	block702 = block();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, block702.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1953:4: selection_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_selection_statement_in_embedded_statement11206);
                        	selection_statement703 = selection_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, selection_statement703.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1954:4: iteration_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_iteration_statement_in_embedded_statement11212);
                        	iteration_statement704 = iteration_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, iteration_statement704.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1955:4: jump_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_jump_statement_in_embedded_statement11218);
                        	jump_statement705 = jump_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, jump_statement705.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1956:4: try_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_try_statement_in_embedded_statement11225);
                        	try_statement706 = try_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, try_statement706.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1957:4: checked_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_checked_statement_in_embedded_statement11230);
                        	checked_statement707 = checked_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, checked_statement707.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1958:4: unchecked_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unchecked_statement_in_embedded_statement11235);
                        	unchecked_statement708 = unchecked_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, unchecked_statement708.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1959:4: lock_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_lock_statement_in_embedded_statement11240);
                        	lock_statement709 = lock_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, lock_statement709.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1960:4: using_statement[isStatementListCtxt]
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_using_statement_in_embedded_statement11245);
                        	using_statement710 = using_statement(isStatementListCtxt);
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, using_statement710.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1961:4: yield_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_yield_statement_in_embedded_statement11252);
                        	yield_statement711 = yield_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, yield_statement711.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1962:4: unsafe_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_unsafe_statement_in_embedded_statement11258);
                        	unsafe_statement712 = unsafe_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, unsafe_statement712.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1963:4: fixed_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_fixed_statement_in_embedded_statement11263);
                        	fixed_statement713 = fixed_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, fixed_statement713.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1964:4: expression_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_statement_in_embedded_statement11268);
                        	expression_statement714 = expression_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression_statement714.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "embedded_statement"

        public class fixed_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1966:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement[/* isStatementListCtxt */ false] ;
        public JavaMaker.fixed_statement_return fixed_statement() // throws RecognitionException [1]
        {   
            JavaMaker.fixed_statement_return retval = new JavaMaker.fixed_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal715 = null;
            CommonTree char_literal716 = null;
            CommonTree char_literal719 = null;
            JavaMaker.pointer_type_return pointer_type717 = default(JavaMaker.pointer_type_return);

            JavaMaker.fixed_pointer_declarators_return fixed_pointer_declarators718 = default(JavaMaker.fixed_pointer_declarators_return);

            JavaMaker.embedded_statement_return embedded_statement720 = default(JavaMaker.embedded_statement_return);


            CommonTree string_literal715_tree=null;
            CommonTree char_literal716_tree=null;
            CommonTree char_literal719_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1966:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement[/* isStatementListCtxt */ false] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1967:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement[/* isStatementListCtxt */ false]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal715=(CommonTree)Match(input,262,FOLLOW_262_in_fixed_statement11278); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal715_tree = (CommonTree)adaptor.DupNode(string_literal715);

                		adaptor.AddChild(root_0, string_literal715_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal716=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_fixed_statement11282); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal716_tree = (CommonTree)adaptor.DupNode(char_literal716);

                		adaptor.AddChild(root_0, char_literal716_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_pointer_type_in_fixed_statement11286);
                	pointer_type717 = pointer_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, pointer_type717.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement11288);
                	fixed_pointer_declarators718 = fixed_pointer_declarators();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, fixed_pointer_declarators718.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal719=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_fixed_statement11292); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal719_tree = (CommonTree)adaptor.DupNode(char_literal719);

                		adaptor.AddChild(root_0, char_literal719_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_fixed_statement11296);
                	embedded_statement720 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, embedded_statement720.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_statement"

        public class fixed_pointer_declarators_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_pointer_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1968:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
        public JavaMaker.fixed_pointer_declarators_return fixed_pointer_declarators() // throws RecognitionException [1]
        {   
            JavaMaker.fixed_pointer_declarators_return retval = new JavaMaker.fixed_pointer_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal722 = null;
            JavaMaker.fixed_pointer_declarator_return fixed_pointer_declarator721 = default(JavaMaker.fixed_pointer_declarator_return);

            JavaMaker.fixed_pointer_declarator_return fixed_pointer_declarator723 = default(JavaMaker.fixed_pointer_declarator_return);


            CommonTree char_literal722_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1968:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1969:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators11305);
                	fixed_pointer_declarator721 = fixed_pointer_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, fixed_pointer_declarator721.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1969:29: ( ',' fixed_pointer_declarator )*
                	do 
                	{
                	    int alt268 = 2;
                	    int LA268_0 = input.LA(1);

                	    if ( (LA268_0 == COMMA) )
                	    {
                	        alt268 = 1;
                	    }


                	    switch (alt268) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1969:30: ',' fixed_pointer_declarator
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal722=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_fixed_pointer_declarators11310); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal722_tree = (CommonTree)adaptor.DupNode(char_literal722);

                			    		adaptor.AddChild(root_0, char_literal722_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators11314);
                			    	fixed_pointer_declarator723 = fixed_pointer_declarator();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, fixed_pointer_declarator723.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop268;
                	    }
                	} while (true);

                	loop268:
                		;	// Stops C# compiler whining that label 'loop268' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_pointer_declarators"

        public class fixed_pointer_declarator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_pointer_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1970:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
        public JavaMaker.fixed_pointer_declarator_return fixed_pointer_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.fixed_pointer_declarator_return retval = new JavaMaker.fixed_pointer_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal725 = null;
            JavaMaker.identifier_return identifier724 = default(JavaMaker.identifier_return);

            JavaMaker.fixed_pointer_initializer_return fixed_pointer_initializer726 = default(JavaMaker.fixed_pointer_initializer_return);


            CommonTree char_literal725_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1970:25: ( identifier '=' fixed_pointer_initializer )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1971:2: identifier '=' fixed_pointer_initializer
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_fixed_pointer_declarator11324);
                	identifier724 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier724.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal725=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_fixed_pointer_declarator11328); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal725_tree = (CommonTree)adaptor.DupNode(char_literal725);

                		adaptor.AddChild(root_0, char_literal725_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator11332);
                	fixed_pointer_initializer726 = fixed_pointer_initializer();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, fixed_pointer_initializer726.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_pointer_declarator"

        public class fixed_pointer_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "fixed_pointer_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1972:1: fixed_pointer_initializer : expression ;
        public JavaMaker.fixed_pointer_initializer_return fixed_pointer_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.fixed_pointer_initializer_return retval = new JavaMaker.fixed_pointer_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression727 = default(JavaMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1972:26: ( expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1974:2: expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_fixed_pointer_initializer11342);
                	expression727 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression727.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "fixed_pointer_initializer"

        public class unsafe_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unsafe_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1975:1: unsafe_statement : 'unsafe' block ;
        public JavaMaker.unsafe_statement_return unsafe_statement() // throws RecognitionException [1]
        {   
            JavaMaker.unsafe_statement_return retval = new JavaMaker.unsafe_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal728 = null;
            JavaMaker.block_return block729 = default(JavaMaker.block_return);


            CommonTree string_literal728_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1975:17: ( 'unsafe' block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1976:2: 'unsafe' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal728=(CommonTree)Match(input,198,FOLLOW_198_in_unsafe_statement11349); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal728_tree = (CommonTree)adaptor.DupNode(string_literal728);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal728_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_unsafe_statement11354);
                	block729 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block729.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unsafe_statement"

        public class labeled_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "labeled_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1977:1: labeled_statement[bool isStatementListCtxt] : identifier ':' statement[isStatementListCtxt] ;
        public JavaMaker.labeled_statement_return labeled_statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            JavaMaker.labeled_statement_return retval = new JavaMaker.labeled_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal731 = null;
            JavaMaker.identifier_return identifier730 = default(JavaMaker.identifier_return);

            JavaMaker.statement_return statement732 = default(JavaMaker.statement_return);


            CommonTree char_literal731_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1977:44: ( identifier ':' statement[isStatementListCtxt] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1978:2: identifier ':' statement[isStatementListCtxt]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_labeled_statement11362);
                	identifier730 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier730.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal731=(CommonTree)Match(input,211,FOLLOW_211_in_labeled_statement11366); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal731_tree = (CommonTree)adaptor.DupNode(char_literal731);

                		adaptor.AddChild(root_0, char_literal731_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_in_labeled_statement11370);
                	statement732 = statement(isStatementListCtxt);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, statement732.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "labeled_statement"

        public class declaration_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "declaration_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1979:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
        public JavaMaker.declaration_statement_return declaration_statement() // throws RecognitionException [1]
        {   
            JavaMaker.declaration_statement_return retval = new JavaMaker.declaration_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal735 = null;
            JavaMaker.local_variable_declaration_return local_variable_declaration733 = default(JavaMaker.local_variable_declaration_return);

            JavaMaker.local_constant_declaration_return local_constant_declaration734 = default(JavaMaker.local_constant_declaration_return);


            CommonTree char_literal735_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1979:22: ( ( local_variable_declaration | local_constant_declaration ) ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1980:2: ( local_variable_declaration | local_constant_declaration ) ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1980:2: ( local_variable_declaration | local_constant_declaration )
                	int alt269 = 2;
                	int LA269_0 = input.LA(1);

                	if ( (LA269_0 == OBJECT || (LA269_0 >= BOOL && LA269_0 <= IDENTIFIER) || (LA269_0 >= ELIF && LA269_0 <= UNDEF) || LA269_0 == 195 || LA269_0 == 206 || LA269_0 == 221 || (LA269_0 >= 224 && LA269_0 <= 239) || (LA269_0 >= 241 && LA269_0 <= 244) || (LA269_0 >= 247 && LA269_0 <= 254) || LA269_0 == 256 || (LA269_0 >= 263 && LA269_0 <= 264) || (LA269_0 >= 274 && LA269_0 <= 277)) )
                	{
                	    alt269 = 1;
                	}
                	else if ( (LA269_0 == 205) )
                	{
                	    alt269 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d269s0 =
                	        new NoViableAltException("", 269, 0, input);

                	    throw nvae_d269s0;
                	}
                	switch (alt269) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1980:3: local_variable_declaration
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_local_variable_declaration_in_declaration_statement11380);
                	        	local_variable_declaration733 = local_variable_declaration();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, local_variable_declaration733.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1981:4: local_constant_declaration
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_local_constant_declaration_in_declaration_statement11386);
                	        	local_constant_declaration734 = local_constant_declaration();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, local_constant_declaration734.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal735=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_declaration_statement11389); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal735_tree = (CommonTree)adaptor.DupNode(char_literal735);

                		adaptor.AddChild(root_0, char_literal735_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "declaration_statement"

        public class local_variable_declaration_return : TreeRuleReturnScope
        {
            public List<string> variableNames;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1982:1: local_variable_declaration returns [List<string> variableNames] : local_variable_type local_variable_declarators ;
        public JavaMaker.local_variable_declaration_return local_variable_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.local_variable_declaration_return retval = new JavaMaker.local_variable_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.local_variable_type_return local_variable_type736 = default(JavaMaker.local_variable_type_return);

            JavaMaker.local_variable_declarators_return local_variable_declarators737 = default(JavaMaker.local_variable_declarators_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1982:64: ( local_variable_type local_variable_declarators )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1983:2: local_variable_type local_variable_declarators
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_local_variable_type_in_local_variable_declaration11401);
                	local_variable_type736 = local_variable_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, local_variable_type736.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration11405);
                	local_variable_declarators737 = local_variable_declarators();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, local_variable_declarators737.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.variableNames =  ((local_variable_declarators737 != null) ? local_variable_declarators737.variableNames : default(List<string>)); 
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_declaration"

        public class local_variable_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1984:1: local_variable_type : ( ( 'var' )=>v= 'var' -> TYPE_VAR[$v.token, \"var\"] | ( 'dynamic' )=>d= 'dynamic' -> TYPE_DYNAMIC[$d.token,\"dynamic\"] | type );
        public JavaMaker.local_variable_type_return local_variable_type() // throws RecognitionException [1]
        {   
            JavaMaker.local_variable_type_return retval = new JavaMaker.local_variable_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree v = null;
            CommonTree d = null;
            JavaMaker.type_return type738 = default(JavaMaker.type_return);


            CommonTree v_tree=null;
            CommonTree d_tree=null;
            RewriteRuleNodeStream stream_263 = new RewriteRuleNodeStream(adaptor,"token 263");
            RewriteRuleNodeStream stream_264 = new RewriteRuleNodeStream(adaptor,"token 264");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1984:20: ( ( 'var' )=>v= 'var' -> TYPE_VAR[$v.token, \"var\"] | ( 'dynamic' )=>d= 'dynamic' -> TYPE_DYNAMIC[$d.token,\"dynamic\"] | type )
                int alt270 = 3;
                switch ( input.LA(1) ) 
                {
                case 263:
                	{
                    int LA270_1 = input.LA(2);

                    if ( (synpred37_JavaMaker()) )
                    {
                        alt270 = 1;
                    }
                    else if ( (true) )
                    {
                        alt270 = 3;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d270s1 =
                            new NoViableAltException("", 270, 1, input);

                        throw nvae_d270s1;
                    }
                    }
                    break;
                case 264:
                	{
                    int LA270_2 = input.LA(2);

                    if ( (synpred38_JavaMaker()) )
                    {
                        alt270 = 2;
                    }
                    else if ( (true) )
                    {
                        alt270 = 3;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d270s2 =
                            new NoViableAltException("", 270, 2, input);

                        throw nvae_d270s2;
                    }
                    }
                    break;
                case OBJECT:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case IDENTIFIER:
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 206:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 251:
                case 252:
                case 253:
                case 254:
                case 256:
                case 274:
                case 275:
                case 276:
                case 277:
                	{
                    alt270 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d270s0 =
                	        new NoViableAltException("", 270, 0, input);

                	    throw nvae_d270s0;
                }

                switch (alt270) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1985:2: ( 'var' )=>v= 'var'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	v=(CommonTree)Match(input,263,FOLLOW_263_in_local_variable_type11422); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_263.Add(v);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1985:21: -> TYPE_VAR[$v.token, \"var\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(TYPE_VAR, v.token, "var"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1986:4: ( 'dynamic' )=>d= 'dynamic'
                        {
                        	_last = (CommonTree)input.LT(1);
                        	d=(CommonTree)Match(input,264,FOLLOW_264_in_local_variable_type11440); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_264.Add(d);



                        	// AST REWRITE
                        	// elements:          
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 1986:31: -> TYPE_DYNAMIC[$d.token,\"dynamic\"]
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(TYPE_DYNAMIC, d.token, "dynamic"));

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1987:4: type
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_type_in_local_variable_type11450);
                        	type738 = type();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, type738.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_type"

        public class local_variable_declarators_return : TreeRuleReturnScope
        {
            public List<string> variableNames;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_declarators"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1988:1: local_variable_declarators returns [List<string> variableNames] : i1= local_variable_declarator ( ',' ip= local_variable_declarator )* ;
        public JavaMaker.local_variable_declarators_return local_variable_declarators() // throws RecognitionException [1]
        {   
            JavaMaker.local_variable_declarators_return retval = new JavaMaker.local_variable_declarators_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal739 = null;
            JavaMaker.local_variable_declarator_return i1 = default(JavaMaker.local_variable_declarator_return);

            JavaMaker.local_variable_declarator_return ip = default(JavaMaker.local_variable_declarator_return);


            CommonTree char_literal739_tree=null;


                retval.variableNames =  new List<string>(); 

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1991:2: (i1= local_variable_declarator ( ',' ip= local_variable_declarator )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1992:2: i1= local_variable_declarator ( ',' ip= local_variable_declarator )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators11469);
                	i1 = local_variable_declarator();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, i1.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.variableNames.Add(((i1 != null) ? i1.variableName : default(string))); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1992:73: ( ',' ip= local_variable_declarator )*
                	do 
                	{
                	    int alt271 = 2;
                	    int LA271_0 = input.LA(1);

                	    if ( (LA271_0 == COMMA) )
                	    {
                	        alt271 = 1;
                	    }


                	    switch (alt271) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1992:74: ',' ip= local_variable_declarator
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal739=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_local_variable_declarators11474); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal739_tree = (CommonTree)adaptor.DupNode(char_literal739);

                			    		adaptor.AddChild(root_0, char_literal739_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators11478);
                			    	ip = local_variable_declarator();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, ip.Tree);
                			    	if ( (state.backtracking==0) )
                			    	{
                			    	   retval.variableNames.Add(((ip != null) ? ip.variableName : default(string))); 
                			    	}

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop271;
                	    }
                	} while (true);

                	loop271:
                		;	// Stops C# compiler whining that label 'loop271' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_declarators"

        public class local_variable_declarator_return : TreeRuleReturnScope
        {
            public string variableName;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_declarator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1993:1: local_variable_declarator returns [string variableName] : identifier ( '=' local_variable_initializer )? ;
        public JavaMaker.local_variable_declarator_return local_variable_declarator() // throws RecognitionException [1]
        {   
            JavaMaker.local_variable_declarator_return retval = new JavaMaker.local_variable_declarator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal741 = null;
            JavaMaker.identifier_return identifier740 = default(JavaMaker.identifier_return);

            JavaMaker.local_variable_initializer_return local_variable_initializer742 = default(JavaMaker.local_variable_initializer_return);


            CommonTree char_literal741_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1993:56: ( identifier ( '=' local_variable_initializer )? )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1994:2: identifier ( '=' local_variable_initializer )?
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_local_variable_declarator11494);
                	identifier740 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, identifier740.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   retval.variableName =  ((identifier740 != null) ? identifier740.thetext : default(string)); 
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1994:54: ( '=' local_variable_initializer )?
                	int alt272 = 2;
                	int LA272_0 = input.LA(1);

                	if ( (LA272_0 == ASSIGN) )
                	{
                	    alt272 = 1;
                	}
                	switch (alt272) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1994:55: '=' local_variable_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal741=(CommonTree)Match(input,ASSIGN,FOLLOW_ASSIGN_in_local_variable_declarator11499); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{char_literal741_tree = (CommonTree)adaptor.DupNode(char_literal741);

                	        		adaptor.AddChild(root_0, char_literal741_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator11503);
                	        	local_variable_initializer742 = local_variable_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, local_variable_initializer742.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_declarator"

        public class local_variable_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_variable_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1995:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
        public JavaMaker.local_variable_initializer_return local_variable_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.local_variable_initializer_return retval = new JavaMaker.local_variable_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression743 = default(JavaMaker.expression_return);

            JavaMaker.array_initializer_return array_initializer744 = default(JavaMaker.array_initializer_return);

            JavaMaker.stackalloc_initializer_return stackalloc_initializer745 = default(JavaMaker.stackalloc_initializer_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1995:27: ( expression | array_initializer | stackalloc_initializer )
                int alt273 = 3;
                switch ( input.LA(1) ) 
                {
                case MONONOT:
                case MONOTWIDDLE:
                case NEW_ARRAY:
                case OBJECT:
                case THIS:
                case LPAREN:
                case BIT_AND:
                case PLUS:
                case MINUS:
                case STAR:
                case BOOL:
                case BYTE:
                case CHAR:
                case SHORT:
                case INT:
                case LONG:
                case FLOAT:
                case DOUBLE:
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case ELIF:
                case ENDIF:
                case DEFINE:
                case UNDEF:
                case 195:
                case 197:
                case 207:
                case 209:
                case 210:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 221:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 241:
                case 242:
                case 243:
                case 244:
                case 247:
                case 248:
                case 249:
                case 250:
                case 251:
                case 252:
                case 253:
                case 254:
                case 256:
                case 263:
                case 264:
                case 274:
                case 275:
                case 276:
                case 277:
                	{
                    alt273 = 1;
                    }
                    break;
                case OPEN_BRACE:
                	{
                    alt273 = 2;
                    }
                    break;
                case 265:
                	{
                    alt273 = 3;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d273s0 =
                	        new NoViableAltException("", 273, 0, input);

                	    throw nvae_d273s0;
                }

                switch (alt273) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1996:2: expression
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_local_variable_initializer11514);
                        	expression743 = expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, expression743.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1997:4: array_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_array_initializer_in_local_variable_initializer11519);
                        	array_initializer744 = array_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, array_initializer744.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1998:4: stackalloc_initializer
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer11525);
                        	stackalloc_initializer745 = stackalloc_initializer();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, stackalloc_initializer745.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_variable_initializer"

        public class stackalloc_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "stackalloc_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1999:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
        public JavaMaker.stackalloc_initializer_return stackalloc_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.stackalloc_initializer_return retval = new JavaMaker.stackalloc_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal746 = null;
            CommonTree char_literal748 = null;
            CommonTree char_literal750 = null;
            JavaMaker.unmanaged_type_return unmanaged_type747 = default(JavaMaker.unmanaged_type_return);

            JavaMaker.expression_return expression749 = default(JavaMaker.expression_return);


            CommonTree string_literal746_tree=null;
            CommonTree char_literal748_tree=null;
            CommonTree char_literal750_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1999:23: ( 'stackalloc' unmanaged_type '[' expression ']' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2000:2: 'stackalloc' unmanaged_type '[' expression ']'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal746=(CommonTree)Match(input,265,FOLLOW_265_in_stackalloc_initializer11532); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal746_tree = (CommonTree)adaptor.DupNode(string_literal746);

                		adaptor.AddChild(root_0, string_literal746_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer11536);
                	unmanaged_type747 = unmanaged_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, unmanaged_type747.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal748=(CommonTree)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_stackalloc_initializer11540); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal748_tree = (CommonTree)adaptor.DupNode(char_literal748);

                		adaptor.AddChild(root_0, char_literal748_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_stackalloc_initializer11544);
                	expression749 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression749.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal750=(CommonTree)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer11548); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal750_tree = (CommonTree)adaptor.DupNode(char_literal750);

                		adaptor.AddChild(root_0, char_literal750_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "stackalloc_initializer"

        public class local_constant_declaration_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "local_constant_declaration"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2001:1: local_constant_declaration : 'const' type constant_declarators ;
        public JavaMaker.local_constant_declaration_return local_constant_declaration() // throws RecognitionException [1]
        {   
            JavaMaker.local_constant_declaration_return retval = new JavaMaker.local_constant_declaration_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal751 = null;
            JavaMaker.type_return type752 = default(JavaMaker.type_return);

            JavaMaker.constant_declarators_return constant_declarators753 = default(JavaMaker.constant_declarators_return);


            CommonTree string_literal751_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2001:27: ( 'const' type constant_declarators )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2002:2: 'const' type constant_declarators
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal751=(CommonTree)Match(input,205,FOLLOW_205_in_local_constant_declaration11556); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal751_tree = (CommonTree)adaptor.DupNode(string_literal751);

                		adaptor.AddChild(root_0, string_literal751_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_type_in_local_constant_declaration11560);
                	type752 = type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, type752.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_constant_declarators_in_local_constant_declaration11564);
                	constant_declarators753 = constant_declarators();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, constant_declarators753.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "local_constant_declaration"

        public class expression_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "expression_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2003:1: expression_statement : expression ';' ;
        public JavaMaker.expression_statement_return expression_statement() // throws RecognitionException [1]
        {   
            JavaMaker.expression_statement_return retval = new JavaMaker.expression_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal755 = null;
            JavaMaker.expression_return expression754 = default(JavaMaker.expression_return);


            CommonTree char_literal755_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2003:21: ( expression ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2004:2: expression ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_expression_statement11572);
                	expression754 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression754.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal755=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_expression_statement11576); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal755_tree = (CommonTree)adaptor.DupNode(char_literal755);

                		adaptor.AddChild(root_0, char_literal755_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "expression_statement"

        public class statement_expression_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement_expression"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2007:1: statement_expression : expression ;
        public JavaMaker.statement_expression_return statement_expression() // throws RecognitionException [1]
        {   
            JavaMaker.statement_expression_return retval = new JavaMaker.statement_expression_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.expression_return expression756 = default(JavaMaker.expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2007:21: ( expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2008:2: expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_statement_expression11586);
                	expression756 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, expression756.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement_expression"

        public class selection_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "selection_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2010:1: selection_statement : ( if_statement | switch_statement );
        public JavaMaker.selection_statement_return selection_statement() // throws RecognitionException [1]
        {   
            JavaMaker.selection_statement_return retval = new JavaMaker.selection_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.if_statement_return if_statement757 = default(JavaMaker.if_statement_return);

            JavaMaker.switch_statement_return switch_statement758 = default(JavaMaker.switch_statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2010:20: ( if_statement | switch_statement )
                int alt274 = 2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0 == IF) )
                {
                    alt274 = 1;
                }
                else if ( (LA274_0 == 266) )
                {
                    alt274 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d274s0 =
                        new NoViableAltException("", 274, 0, input);

                    throw nvae_d274s0;
                }
                switch (alt274) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2011:2: if_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_if_statement_in_selection_statement11595);
                        	if_statement757 = if_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, if_statement757.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2012:4: switch_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_switch_statement_in_selection_statement11600);
                        	switch_statement758 = switch_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, switch_statement758.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "selection_statement"

        public class if_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "if_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2013:1: if_statement : i= 'if' '(' boolean_expression ')' embedded_statement[/* isStatementListCtxt */ false] ( ( 'else' )=> else_statement )? -> ^( IF[$i.Token] boolean_expression SEP embedded_statement ( else_statement )? ) ;
        public JavaMaker.if_statement_return if_statement() // throws RecognitionException [1]
        {   
            JavaMaker.if_statement_return retval = new JavaMaker.if_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree i = null;
            CommonTree char_literal759 = null;
            CommonTree char_literal761 = null;
            JavaMaker.boolean_expression_return boolean_expression760 = default(JavaMaker.boolean_expression_return);

            JavaMaker.embedded_statement_return embedded_statement762 = default(JavaMaker.embedded_statement_return);

            JavaMaker.else_statement_return else_statement763 = default(JavaMaker.else_statement_return);


            CommonTree i_tree=null;
            CommonTree char_literal759_tree=null;
            CommonTree char_literal761_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleNodeStream stream_IF = new RewriteRuleNodeStream(adaptor,"token IF");
            RewriteRuleSubtreeStream stream_else_statement = new RewriteRuleSubtreeStream(adaptor,"rule else_statement");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");
            RewriteRuleSubtreeStream stream_boolean_expression = new RewriteRuleSubtreeStream(adaptor,"rule boolean_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2013:13: (i= 'if' '(' boolean_expression ')' embedded_statement[/* isStatementListCtxt */ false] ( ( 'else' )=> else_statement )? -> ^( IF[$i.Token] boolean_expression SEP embedded_statement ( else_statement )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2015:2: i= 'if' '(' boolean_expression ')' embedded_statement[/* isStatementListCtxt */ false] ( ( 'else' )=> else_statement )?
                {
                	_last = (CommonTree)input.LT(1);
                	i=(CommonTree)Match(input,IF,FOLLOW_IF_in_if_statement11612); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_IF.Add(i);

                	_last = (CommonTree)input.LT(1);
                	char_literal759=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_if_statement11616); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal759);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_if_statement11620);
                	boolean_expression760 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_boolean_expression.Add(boolean_expression760.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal761=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_if_statement11624); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal761);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_if_statement11628);
                	embedded_statement762 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement762.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2015:96: ( ( 'else' )=> else_statement )?
                	int alt275 = 2;
                	int LA275_0 = input.LA(1);

                	if ( (LA275_0 == ELSE) )
                	{
                	    int LA275_1 = input.LA(2);

                	    if ( (synpred39_JavaMaker()) )
                	    {
                	        alt275 = 1;
                	    }
                	}
                	switch (alt275) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2015:97: ( 'else' )=> else_statement
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_else_statement_in_if_statement11638);
                	        	else_statement763 = else_statement();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_else_statement.Add(else_statement763.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}



                	// AST REWRITE
                	// elements:          else_statement, embedded_statement, boolean_expression
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2015:126: -> ^( IF[$i.Token] boolean_expression SEP embedded_statement ( else_statement )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2015:129: ^( IF[$i.Token] boolean_expression SEP embedded_statement ( else_statement )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF, i.Token), root_1);

                	    adaptor.AddChild(root_1, stream_boolean_expression.NextTree());
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    adaptor.AddChild(root_1, stream_embedded_statement.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2015:186: ( else_statement )?
                	    if ( stream_else_statement.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_else_statement.NextTree());

                	    }
                	    stream_else_statement.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "if_statement"

        public class else_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "else_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2018:1: else_statement : 'else' embedded_statement[/* isStatementListCtxt */ false] ;
        public JavaMaker.else_statement_return else_statement() // throws RecognitionException [1]
        {   
            JavaMaker.else_statement_return retval = new JavaMaker.else_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal764 = null;
            JavaMaker.embedded_statement_return embedded_statement765 = default(JavaMaker.embedded_statement_return);


            CommonTree string_literal764_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2018:15: ( 'else' embedded_statement[/* isStatementListCtxt */ false] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2019:2: 'else' embedded_statement[/* isStatementListCtxt */ false]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal764=(CommonTree)Match(input,ELSE,FOLLOW_ELSE_in_else_statement11666); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal764_tree = (CommonTree)adaptor.DupNode(string_literal764);

                		adaptor.AddChild(root_0, string_literal764_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_else_statement11670);
                	embedded_statement765 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, embedded_statement765.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "else_statement"

        public class switch_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2020:1: switch_statement : s= 'switch' '(' expression ')' switch_block -> ^( $s expression switch_block ) ;
        public JavaMaker.switch_statement_return switch_statement() // throws RecognitionException [1]
        {   
            JavaMaker.switch_statement_return retval = new JavaMaker.switch_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree s = null;
            CommonTree char_literal766 = null;
            CommonTree char_literal768 = null;
            JavaMaker.expression_return expression767 = default(JavaMaker.expression_return);

            JavaMaker.switch_block_return switch_block769 = default(JavaMaker.switch_block_return);


            CommonTree s_tree=null;
            CommonTree char_literal766_tree=null;
            CommonTree char_literal768_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_266 = new RewriteRuleNodeStream(adaptor,"token 266");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_switch_block = new RewriteRuleSubtreeStream(adaptor,"rule switch_block");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2020:17: (s= 'switch' '(' expression ')' switch_block -> ^( $s expression switch_block ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2021:2: s= 'switch' '(' expression ')' switch_block
                {
                	_last = (CommonTree)input.LT(1);
                	s=(CommonTree)Match(input,266,FOLLOW_266_in_switch_statement11681); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_266.Add(s);

                	_last = (CommonTree)input.LT(1);
                	char_literal766=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_switch_statement11685); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal766);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_switch_statement11689);
                	expression767 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_expression.Add(expression767.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal768=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_switch_statement11693); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal768);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_switch_block_in_switch_statement11697);
                	switch_block769 = switch_block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_switch_block.Add(switch_block769.Tree);


                	// AST REWRITE
                	// elements:          switch_block, expression, s
                	// token labels:      s
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_s = new RewriteRuleNodeStream(adaptor, "token s", s);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2021:53: -> ^( $s expression switch_block )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2021:56: ^( $s expression switch_block )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_s.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_expression.NextTree());
                	    adaptor.AddChild(root_1, stream_switch_block.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "switch_statement"

        public class switch_block_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_block"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2022:1: switch_block : '{' ( switch_section )* '}' ;
        public JavaMaker.switch_block_return switch_block() // throws RecognitionException [1]
        {   
            JavaMaker.switch_block_return retval = new JavaMaker.switch_block_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal770 = null;
            CommonTree char_literal772 = null;
            JavaMaker.switch_section_return switch_section771 = default(JavaMaker.switch_section_return);


            CommonTree char_literal770_tree=null;
            CommonTree char_literal772_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2022:13: ( '{' ( switch_section )* '}' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2023:2: '{' ( switch_section )* '}'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	char_literal770=(CommonTree)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_switch_block11715); if (state.failed) return retval;
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2023:9: ( switch_section )*
                	do 
                	{
                	    int alt276 = 2;
                	    int LA276_0 = input.LA(1);

                	    if ( (LA276_0 == 217 || LA276_0 == 267) )
                	    {
                	        alt276 = 1;
                	    }


                	    switch (alt276) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2023:9: switch_section
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_switch_section_in_switch_block11720);
                			    	switch_section771 = switch_section();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, switch_section771.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop276;
                	    }
                	} while (true);

                	loop276:
                		;	// Stops C# compiler whining that label 'loop276' has no statements

                	_last = (CommonTree)input.LT(1);
                	char_literal772=(CommonTree)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_switch_block11725); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "switch_block"

        public class switch_section_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_section"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2026:1: switch_section : ( switch_label )+ statement_list -> ^( SWITCH_SECTION ( switch_label )+ statement_list ) ;
        public JavaMaker.switch_section_return switch_section() // throws RecognitionException [1]
        {   
            JavaMaker.switch_section_return retval = new JavaMaker.switch_section_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.switch_label_return switch_label773 = default(JavaMaker.switch_label_return);

            JavaMaker.statement_list_return statement_list774 = default(JavaMaker.statement_list_return);


            RewriteRuleSubtreeStream stream_statement_list = new RewriteRuleSubtreeStream(adaptor,"rule statement_list");
            RewriteRuleSubtreeStream stream_switch_label = new RewriteRuleSubtreeStream(adaptor,"rule switch_label");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2026:15: ( ( switch_label )+ statement_list -> ^( SWITCH_SECTION ( switch_label )+ statement_list ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2027:2: ( switch_label )+ statement_list
                {
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2027:2: ( switch_label )+
                	int cnt277 = 0;
                	do 
                	{
                	    int alt277 = 2;
                	    int LA277_0 = input.LA(1);

                	    if ( (LA277_0 == 217) )
                	    {
                	        int LA277_2 = input.LA(2);

                	        if ( (LA277_2 == 211) )
                	        {
                	            alt277 = 1;
                	        }


                	    }
                	    else if ( (LA277_0 == 267) )
                	    {
                	        alt277 = 1;
                	    }


                	    switch (alt277) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2027:2: switch_label
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_switch_label_in_switch_section11736);
                			    	switch_label773 = switch_label();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) stream_switch_label.Add(switch_label773.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt277 >= 1 ) goto loop277;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee277 =
                		                new EarlyExitException(277, input);
                		            throw eee277;
                	    }
                	    cnt277++;
                	} while (true);

                	loop277:
                		;	// Stops C# compiler whining that label 'loop277' has no statements

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_list_in_switch_section11741);
                	statement_list774 = statement_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_statement_list.Add(statement_list774.Tree);


                	// AST REWRITE
                	// elements:          statement_list, switch_label
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2027:33: -> ^( SWITCH_SECTION ( switch_label )+ statement_list )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2027:36: ^( SWITCH_SECTION ( switch_label )+ statement_list )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_SECTION, "SWITCH_SECTION"), root_1);

                	    if ( !(stream_switch_label.HasNext) ) {
                	        throw new RewriteEarlyExitException();
                	    }
                	    while ( stream_switch_label.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_switch_label.NextTree());

                	    }
                	    stream_switch_label.Reset();
                	    adaptor.AddChild(root_1, stream_statement_list.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "switch_section"

        public class switch_label_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "switch_label"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2030:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
        public JavaMaker.switch_label_return switch_label() // throws RecognitionException [1]
        {   
            JavaMaker.switch_label_return retval = new JavaMaker.switch_label_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal775 = null;
            CommonTree char_literal777 = null;
            CommonTree string_literal778 = null;
            CommonTree char_literal779 = null;
            JavaMaker.constant_expression_return constant_expression776 = default(JavaMaker.constant_expression_return);


            CommonTree string_literal775_tree=null;
            CommonTree char_literal777_tree=null;
            CommonTree string_literal778_tree=null;
            CommonTree char_literal779_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2030:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
                int alt278 = 2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0 == 267) )
                {
                    alt278 = 1;
                }
                else if ( (LA278_0 == 217) )
                {
                    alt278 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d278s0 =
                        new NoViableAltException("", 278, 0, input);

                    throw nvae_d278s0;
                }
                switch (alt278) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2031:2: ( 'case' constant_expression ':' )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2031:2: ( 'case' constant_expression ':' )
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2031:3: 'case' constant_expression ':'
                        	{
                        		_last = (CommonTree)input.LT(1);
                        		string_literal775=(CommonTree)Match(input,267,FOLLOW_267_in_switch_label11762); if (state.failed) return retval;
                        		if ( state.backtracking == 0 )
                        		{string_literal775_tree = (CommonTree)adaptor.DupNode(string_literal775);

                        			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal775_tree, root_0);
                        		}
                        		_last = (CommonTree)input.LT(1);
                        		PushFollow(FOLLOW_constant_expression_in_switch_label11767);
                        		constant_expression776 = constant_expression();
                        		state._fsp--;
                        		if (state.failed) return retval;
                        		if ( (state.backtracking==0) ) 
                        		adaptor.AddChild(root_0, constant_expression776.Tree);
                        		_last = (CommonTree)input.LT(1);
                        		char_literal777=(CommonTree)Match(input,211,FOLLOW_211_in_switch_label11771); if (state.failed) return retval;

                        		if ( (state.backtracking==0) ) {
                        		}
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2032:4: ( 'default' ':' )
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2032:4: ( 'default' ':' )
                        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2032:5: 'default' ':'
                        	{
                        		_last = (CommonTree)input.LT(1);
                        		string_literal778=(CommonTree)Match(input,217,FOLLOW_217_in_switch_label11779); if (state.failed) return retval;
                        		if ( state.backtracking == 0 )
                        		{string_literal778_tree = (CommonTree)adaptor.DupNode(string_literal778);

                        			adaptor.AddChild(root_0, string_literal778_tree);
                        		}
                        		_last = (CommonTree)input.LT(1);
                        		char_literal779=(CommonTree)Match(input,211,FOLLOW_211_in_switch_label11783); if (state.failed) return retval;

                        		if ( (state.backtracking==0) ) {
                        		}
                        	}


                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "switch_label"

        public class iteration_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "iteration_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2033:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
        public JavaMaker.iteration_statement_return iteration_statement() // throws RecognitionException [1]
        {   
            JavaMaker.iteration_statement_return retval = new JavaMaker.iteration_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.while_statement_return while_statement780 = default(JavaMaker.while_statement_return);

            JavaMaker.do_statement_return do_statement781 = default(JavaMaker.do_statement_return);

            JavaMaker.for_statement_return for_statement782 = default(JavaMaker.for_statement_return);

            JavaMaker.foreach_statement_return foreach_statement783 = default(JavaMaker.foreach_statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2033:20: ( while_statement | do_statement | for_statement | foreach_statement )
                int alt279 = 4;
                switch ( input.LA(1) ) 
                {
                case 268:
                	{
                    alt279 = 1;
                    }
                    break;
                case 269:
                	{
                    alt279 = 2;
                    }
                    break;
                case 270:
                	{
                    alt279 = 3;
                    }
                    break;
                case FOREACH:
                	{
                    alt279 = 4;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d279s0 =
                	        new NoViableAltException("", 279, 0, input);

                	    throw nvae_d279s0;
                }

                switch (alt279) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2034:2: while_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_while_statement_in_iteration_statement11792);
                        	while_statement780 = while_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, while_statement780.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2035:4: do_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_do_statement_in_iteration_statement11797);
                        	do_statement781 = do_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, do_statement781.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2036:4: for_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_for_statement_in_iteration_statement11802);
                        	for_statement782 = for_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, for_statement782.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2037:4: foreach_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_foreach_statement_in_iteration_statement11807);
                        	foreach_statement783 = foreach_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, foreach_statement783.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "iteration_statement"

        public class while_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "while_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2038:1: while_statement : w= 'while' '(' boolean_expression ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( $w boolean_expression SEP embedded_statement ) ;
        public JavaMaker.while_statement_return while_statement() // throws RecognitionException [1]
        {   
            JavaMaker.while_statement_return retval = new JavaMaker.while_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree w = null;
            CommonTree char_literal784 = null;
            CommonTree char_literal786 = null;
            JavaMaker.boolean_expression_return boolean_expression785 = default(JavaMaker.boolean_expression_return);

            JavaMaker.embedded_statement_return embedded_statement787 = default(JavaMaker.embedded_statement_return);


            CommonTree w_tree=null;
            CommonTree char_literal784_tree=null;
            CommonTree char_literal786_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_268 = new RewriteRuleNodeStream(adaptor,"token 268");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");
            RewriteRuleSubtreeStream stream_boolean_expression = new RewriteRuleSubtreeStream(adaptor,"rule boolean_expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2038:16: (w= 'while' '(' boolean_expression ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( $w boolean_expression SEP embedded_statement ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2039:2: w= 'while' '(' boolean_expression ')' embedded_statement[/* isStatementListCtxt */ false]
                {
                	_last = (CommonTree)input.LT(1);
                	w=(CommonTree)Match(input,268,FOLLOW_268_in_while_statement11817); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_268.Add(w);

                	_last = (CommonTree)input.LT(1);
                	char_literal784=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_while_statement11821); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal784);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_while_statement11825);
                	boolean_expression785 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_boolean_expression.Add(boolean_expression785.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal786=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_while_statement11829); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal786);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_while_statement11833);
                	embedded_statement787 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement787.Tree);


                	// AST REWRITE
                	// elements:          embedded_statement, w, boolean_expression
                	// token labels:      w
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_w = new RewriteRuleNodeStream(adaptor, "token w", w);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2039:99: -> ^( $w boolean_expression SEP embedded_statement )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2039:102: ^( $w boolean_expression SEP embedded_statement )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_w.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_boolean_expression.NextTree());
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    adaptor.AddChild(root_1, stream_embedded_statement.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "while_statement"

        public class do_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "do_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2040:1: do_statement : 'do' embedded_statement[/* isStatementListCtxt */ false] 'while' '(' boolean_expression ')' ';' ;
        public JavaMaker.do_statement_return do_statement() // throws RecognitionException [1]
        {   
            JavaMaker.do_statement_return retval = new JavaMaker.do_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal788 = null;
            CommonTree string_literal790 = null;
            CommonTree char_literal791 = null;
            CommonTree char_literal793 = null;
            CommonTree char_literal794 = null;
            JavaMaker.embedded_statement_return embedded_statement789 = default(JavaMaker.embedded_statement_return);

            JavaMaker.boolean_expression_return boolean_expression792 = default(JavaMaker.boolean_expression_return);


            CommonTree string_literal788_tree=null;
            CommonTree string_literal790_tree=null;
            CommonTree char_literal791_tree=null;
            CommonTree char_literal793_tree=null;
            CommonTree char_literal794_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2040:13: ( 'do' embedded_statement[/* isStatementListCtxt */ false] 'while' '(' boolean_expression ')' ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2041:2: 'do' embedded_statement[/* isStatementListCtxt */ false] 'while' '(' boolean_expression ')' ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal788=(CommonTree)Match(input,269,FOLLOW_269_in_do_statement11854); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal788_tree = (CommonTree)adaptor.DupNode(string_literal788);

                		adaptor.AddChild(root_0, string_literal788_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_do_statement11858);
                	embedded_statement789 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, embedded_statement789.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal790=(CommonTree)Match(input,268,FOLLOW_268_in_do_statement11863); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal790_tree = (CommonTree)adaptor.DupNode(string_literal790);

                		adaptor.AddChild(root_0, string_literal790_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal791=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_do_statement11867); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal791_tree = (CommonTree)adaptor.DupNode(char_literal791);

                		adaptor.AddChild(root_0, char_literal791_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_do_statement11871);
                	boolean_expression792 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, boolean_expression792.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal793=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_do_statement11875); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal793_tree = (CommonTree)adaptor.DupNode(char_literal793);

                		adaptor.AddChild(root_0, char_literal793_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal794=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_do_statement11879); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal794_tree = (CommonTree)adaptor.DupNode(char_literal794);

                		adaptor.AddChild(root_0, char_literal794_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "do_statement"

        public class for_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "for_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2042:1: for_statement : f= 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( $f ( for_initializer )? SEP ( for_condition )? SEP ( for_iterator )? SEP embedded_statement ) ;
        public JavaMaker.for_statement_return for_statement() // throws RecognitionException [1]
        {   
            JavaMaker.for_statement_return retval = new JavaMaker.for_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree f = null;
            CommonTree char_literal795 = null;
            CommonTree char_literal797 = null;
            CommonTree char_literal799 = null;
            CommonTree char_literal801 = null;
            JavaMaker.for_initializer_return for_initializer796 = default(JavaMaker.for_initializer_return);

            JavaMaker.for_condition_return for_condition798 = default(JavaMaker.for_condition_return);

            JavaMaker.for_iterator_return for_iterator800 = default(JavaMaker.for_iterator_return);

            JavaMaker.embedded_statement_return embedded_statement802 = default(JavaMaker.embedded_statement_return);


            CommonTree f_tree=null;
            CommonTree char_literal795_tree=null;
            CommonTree char_literal797_tree=null;
            CommonTree char_literal799_tree=null;
            CommonTree char_literal801_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_270 = new RewriteRuleNodeStream(adaptor,"token 270");
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_for_condition = new RewriteRuleSubtreeStream(adaptor,"rule for_condition");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");
            RewriteRuleSubtreeStream stream_for_iterator = new RewriteRuleSubtreeStream(adaptor,"rule for_iterator");
            RewriteRuleSubtreeStream stream_for_initializer = new RewriteRuleSubtreeStream(adaptor,"rule for_initializer");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2042:14: (f= 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( $f ( for_initializer )? SEP ( for_condition )? SEP ( for_iterator )? SEP embedded_statement ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2043:2: f= 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement[/* isStatementListCtxt */ false]
                {
                	_last = (CommonTree)input.LT(1);
                	f=(CommonTree)Match(input,270,FOLLOW_270_in_for_statement11889); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_270.Add(f);

                	_last = (CommonTree)input.LT(1);
                	char_literal795=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_for_statement11893); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal795);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2043:18: ( for_initializer )?
                	int alt280 = 2;
                	int LA280_0 = input.LA(1);

                	if ( ((LA280_0 >= MONONOT && LA280_0 <= MONOTWIDDLE) || LA280_0 == NEW_ARRAY || (LA280_0 >= OBJECT && LA280_0 <= THIS) || LA280_0 == LPAREN || LA280_0 == BIT_AND || (LA280_0 >= PLUS && LA280_0 <= MINUS) || LA280_0 == STAR || (LA280_0 >= BOOL && LA280_0 <= NULL) || (LA280_0 >= ELIF && LA280_0 <= UNDEF) || LA280_0 == 195 || LA280_0 == 197 || (LA280_0 >= 206 && LA280_0 <= 207) || (LA280_0 >= 209 && LA280_0 <= 210) || (LA280_0 >= 214 && LA280_0 <= 219) || LA280_0 == 221 || (LA280_0 >= 224 && LA280_0 <= 239) || (LA280_0 >= 241 && LA280_0 <= 244) || (LA280_0 >= 247 && LA280_0 <= 254) || LA280_0 == 256 || (LA280_0 >= 263 && LA280_0 <= 264) || (LA280_0 >= 274 && LA280_0 <= 277)) )
                	{
                	    alt280 = 1;
                	}
                	switch (alt280) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2043:18: for_initializer
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_for_initializer_in_for_statement11897);
                	        	for_initializer796 = for_initializer();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_for_initializer.Add(for_initializer796.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal797=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_for_statement11902); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal797);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2043:43: ( for_condition )?
                	int alt281 = 2;
                	int LA281_0 = input.LA(1);

                	if ( ((LA281_0 >= MONONOT && LA281_0 <= MONOTWIDDLE) || LA281_0 == NEW_ARRAY || (LA281_0 >= OBJECT && LA281_0 <= THIS) || LA281_0 == LPAREN || LA281_0 == BIT_AND || (LA281_0 >= PLUS && LA281_0 <= MINUS) || LA281_0 == STAR || (LA281_0 >= BOOL && LA281_0 <= NULL) || (LA281_0 >= ELIF && LA281_0 <= UNDEF) || LA281_0 == 195 || LA281_0 == 197 || LA281_0 == 207 || (LA281_0 >= 209 && LA281_0 <= 210) || (LA281_0 >= 214 && LA281_0 <= 219) || LA281_0 == 221 || (LA281_0 >= 224 && LA281_0 <= 239) || (LA281_0 >= 241 && LA281_0 <= 244) || (LA281_0 >= 247 && LA281_0 <= 254) || LA281_0 == 256 || (LA281_0 >= 263 && LA281_0 <= 264) || (LA281_0 >= 274 && LA281_0 <= 277)) )
                	{
                	    alt281 = 1;
                	}
                	switch (alt281) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2043:43: for_condition
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_for_condition_in_for_statement11906);
                	        	for_condition798 = for_condition();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_for_condition.Add(for_condition798.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal799=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_for_statement11911); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal799);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2043:66: ( for_iterator )?
                	int alt282 = 2;
                	int LA282_0 = input.LA(1);

                	if ( ((LA282_0 >= MONONOT && LA282_0 <= MONOTWIDDLE) || LA282_0 == NEW_ARRAY || (LA282_0 >= OBJECT && LA282_0 <= THIS) || LA282_0 == LPAREN || LA282_0 == BIT_AND || (LA282_0 >= PLUS && LA282_0 <= MINUS) || LA282_0 == STAR || (LA282_0 >= BOOL && LA282_0 <= NULL) || (LA282_0 >= ELIF && LA282_0 <= UNDEF) || LA282_0 == 195 || LA282_0 == 197 || LA282_0 == 207 || (LA282_0 >= 209 && LA282_0 <= 210) || (LA282_0 >= 214 && LA282_0 <= 219) || LA282_0 == 221 || (LA282_0 >= 224 && LA282_0 <= 239) || (LA282_0 >= 241 && LA282_0 <= 244) || (LA282_0 >= 247 && LA282_0 <= 254) || LA282_0 == 256 || (LA282_0 >= 263 && LA282_0 <= 264) || (LA282_0 >= 274 && LA282_0 <= 277)) )
                	{
                	    alt282 = 1;
                	}
                	switch (alt282) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2043:66: for_iterator
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_for_iterator_in_for_statement11915);
                	        	for_iterator800 = for_iterator();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_for_iterator.Add(for_iterator800.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal801=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_for_statement11920); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal801);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_for_statement11924);
                	embedded_statement802 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement802.Tree);


                	// AST REWRITE
                	// elements:          f, for_condition, embedded_statement, for_initializer, for_iterator
                	// token labels:      f
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_f = new RewriteRuleNodeStream(adaptor, "token f", f);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2044:10: -> ^( $f ( for_initializer )? SEP ( for_condition )? SEP ( for_iterator )? SEP embedded_statement )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2044:13: ^( $f ( for_initializer )? SEP ( for_condition )? SEP ( for_iterator )? SEP embedded_statement )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_f.NextNode(), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2044:18: ( for_initializer )?
                	    if ( stream_for_initializer.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_for_initializer.NextTree());

                	    }
                	    stream_for_initializer.Reset();
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2044:39: ( for_condition )?
                	    if ( stream_for_condition.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_for_condition.NextTree());

                	    }
                	    stream_for_condition.Reset();
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2044:58: ( for_iterator )?
                	    if ( stream_for_iterator.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_for_iterator.NextTree());

                	    }
                	    stream_for_iterator.Reset();
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    adaptor.AddChild(root_1, stream_embedded_statement.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "for_statement"

        public class for_initializer_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "for_initializer"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2045:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
        public JavaMaker.for_initializer_return for_initializer() // throws RecognitionException [1]
        {   
            JavaMaker.for_initializer_return retval = new JavaMaker.for_initializer_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.local_variable_declaration_return local_variable_declaration803 = default(JavaMaker.local_variable_declaration_return);

            JavaMaker.statement_expression_list_return statement_expression_list804 = default(JavaMaker.statement_expression_list_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2045:16: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
                int alt283 = 2;
                alt283 = dfa283.Predict(input);
                switch (alt283) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2046:2: ( local_variable_declaration )=> local_variable_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_local_variable_declaration_in_for_initializer11972);
                        	local_variable_declaration803 = local_variable_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, local_variable_declaration803.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2047:4: statement_expression_list
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_statement_expression_list_in_for_initializer11977);
                        	statement_expression_list804 = statement_expression_list();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, statement_expression_list804.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "for_initializer"

        public class for_condition_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "for_condition"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2049:1: for_condition : boolean_expression ;
        public JavaMaker.for_condition_return for_condition() // throws RecognitionException [1]
        {   
            JavaMaker.for_condition_return retval = new JavaMaker.for_condition_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.boolean_expression_return boolean_expression805 = default(JavaMaker.boolean_expression_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2049:14: ( boolean_expression )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2050:2: boolean_expression
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_boolean_expression_in_for_condition11987);
                	boolean_expression805 = boolean_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, boolean_expression805.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "for_condition"

        public class for_iterator_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "for_iterator"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2051:1: for_iterator : statement_expression_list ;
        public JavaMaker.for_iterator_return for_iterator() // throws RecognitionException [1]
        {   
            JavaMaker.for_iterator_return retval = new JavaMaker.for_iterator_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.statement_expression_list_return statement_expression_list806 = default(JavaMaker.statement_expression_list_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2051:13: ( statement_expression_list )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2052:2: statement_expression_list
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_expression_list_in_for_iterator11995);
                	statement_expression_list806 = statement_expression_list();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, statement_expression_list806.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "for_iterator"

        public class statement_expression_list_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "statement_expression_list"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2053:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
        public JavaMaker.statement_expression_list_return statement_expression_list() // throws RecognitionException [1]
        {   
            JavaMaker.statement_expression_list_return retval = new JavaMaker.statement_expression_list_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree char_literal808 = null;
            JavaMaker.statement_expression_return statement_expression807 = default(JavaMaker.statement_expression_return);

            JavaMaker.statement_expression_return statement_expression809 = default(JavaMaker.statement_expression_return);


            CommonTree char_literal808_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2053:26: ( statement_expression ( ',' statement_expression )* )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2054:2: statement_expression ( ',' statement_expression )*
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_statement_expression_in_statement_expression_list12003);
                	statement_expression807 = statement_expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, statement_expression807.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2054:23: ( ',' statement_expression )*
                	do 
                	{
                	    int alt284 = 2;
                	    int LA284_0 = input.LA(1);

                	    if ( (LA284_0 == COMMA) )
                	    {
                	        alt284 = 1;
                	    }


                	    switch (alt284) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2054:24: ',' statement_expression
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	char_literal808=(CommonTree)Match(input,COMMA,FOLLOW_COMMA_in_statement_expression_list12006); if (state.failed) return retval;
                			    	if ( state.backtracking == 0 )
                			    	{char_literal808_tree = (CommonTree)adaptor.DupNode(char_literal808);

                			    		adaptor.AddChild(root_0, char_literal808_tree);
                			    	}
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_statement_expression_in_statement_expression_list12008);
                			    	statement_expression809 = statement_expression();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, statement_expression809.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    goto loop284;
                	    }
                	} while (true);

                	loop284:
                		;	// Stops C# compiler whining that label 'loop284' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "statement_expression_list"

        public class foreach_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "foreach_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2055:1: foreach_statement : f= 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( $f local_variable_type identifier expression SEP embedded_statement ) ;
        public JavaMaker.foreach_statement_return foreach_statement() // throws RecognitionException [1]
        {   
            JavaMaker.foreach_statement_return retval = new JavaMaker.foreach_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree f = null;
            CommonTree char_literal810 = null;
            CommonTree string_literal813 = null;
            CommonTree char_literal815 = null;
            JavaMaker.local_variable_type_return local_variable_type811 = default(JavaMaker.local_variable_type_return);

            JavaMaker.identifier_return identifier812 = default(JavaMaker.identifier_return);

            JavaMaker.expression_return expression814 = default(JavaMaker.expression_return);

            JavaMaker.embedded_statement_return embedded_statement816 = default(JavaMaker.embedded_statement_return);


            CommonTree f_tree=null;
            CommonTree char_literal810_tree=null;
            CommonTree string_literal813_tree=null;
            CommonTree char_literal815_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_FOREACH = new RewriteRuleNodeStream(adaptor,"token FOREACH");
            RewriteRuleNodeStream stream_IN = new RewriteRuleNodeStream(adaptor,"token IN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_local_variable_type = new RewriteRuleSubtreeStream(adaptor,"rule local_variable_type");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2055:18: (f= 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( $f local_variable_type identifier expression SEP embedded_statement ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2056:2: f= 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement[/* isStatementListCtxt */ false]
                {
                	_last = (CommonTree)input.LT(1);
                	f=(CommonTree)Match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement12020); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_FOREACH.Add(f);

                	_last = (CommonTree)input.LT(1);
                	char_literal810=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_foreach_statement12024); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal810);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_local_variable_type_in_foreach_statement12028);
                	local_variable_type811 = local_variable_type();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_local_variable_type.Add(local_variable_type811.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_identifier_in_foreach_statement12032);
                	identifier812 = identifier();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_identifier.Add(identifier812.Tree);
                	_last = (CommonTree)input.LT(1);
                	string_literal813=(CommonTree)Match(input,IN,FOLLOW_IN_in_foreach_statement12036); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_IN.Add(string_literal813);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_foreach_statement12040);
                	expression814 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_expression.Add(expression814.Tree);
                	_last = (CommonTree)input.LT(1);
                	char_literal815=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_foreach_statement12044); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal815);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_foreach_statement12048);
                	embedded_statement816 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement816.Tree);


                	// AST REWRITE
                	// elements:          expression, local_variable_type, embedded_statement, f, identifier
                	// token labels:      f
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_f = new RewriteRuleNodeStream(adaptor, "token f", f);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2057:5: -> ^( $f local_variable_type identifier expression SEP embedded_statement )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2057:8: ^( $f local_variable_type identifier expression SEP embedded_statement )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_f.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_local_variable_type.NextTree());
                	    adaptor.AddChild(root_1, stream_identifier.NextTree());
                	    adaptor.AddChild(root_1, stream_expression.NextTree());
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    adaptor.AddChild(root_1, stream_embedded_statement.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "foreach_statement"

        public class jump_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "jump_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2058:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
        public JavaMaker.jump_statement_return jump_statement() // throws RecognitionException [1]
        {   
            JavaMaker.jump_statement_return retval = new JavaMaker.jump_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.break_statement_return break_statement817 = default(JavaMaker.break_statement_return);

            JavaMaker.continue_statement_return continue_statement818 = default(JavaMaker.continue_statement_return);

            JavaMaker.goto_statement_return goto_statement819 = default(JavaMaker.goto_statement_return);

            JavaMaker.return_statement_return return_statement820 = default(JavaMaker.return_statement_return);

            JavaMaker.throw_statement_return throw_statement821 = default(JavaMaker.throw_statement_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2058:15: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
                int alt285 = 5;
                switch ( input.LA(1) ) 
                {
                case BREAK:
                	{
                    alt285 = 1;
                    }
                    break;
                case 271:
                	{
                    alt285 = 2;
                    }
                    break;
                case 272:
                	{
                    alt285 = 3;
                    }
                    break;
                case RETURN:
                	{
                    alt285 = 4;
                    }
                    break;
                case THROW:
                	{
                    alt285 = 5;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d285s0 =
                	        new NoViableAltException("", 285, 0, input);

                	    throw nvae_d285s0;
                }

                switch (alt285) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2059:2: break_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_break_statement_in_jump_statement12082);
                        	break_statement817 = break_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, break_statement817.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2060:4: continue_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_continue_statement_in_jump_statement12087);
                        	continue_statement818 = continue_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, continue_statement818.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2061:4: goto_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_goto_statement_in_jump_statement12092);
                        	goto_statement819 = goto_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, goto_statement819.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2062:4: return_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_return_statement_in_jump_statement12097);
                        	return_statement820 = return_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, return_statement820.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2063:4: throw_statement
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_throw_statement_in_jump_statement12102);
                        	throw_statement821 = throw_statement();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, throw_statement821.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "jump_statement"

        public class break_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "break_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2064:1: break_statement : 'break' ';' ;
        public JavaMaker.break_statement_return break_statement() // throws RecognitionException [1]
        {   
            JavaMaker.break_statement_return retval = new JavaMaker.break_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal822 = null;
            CommonTree char_literal823 = null;

            CommonTree string_literal822_tree=null;
            CommonTree char_literal823_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2064:16: ( 'break' ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2065:2: 'break' ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal822=(CommonTree)Match(input,BREAK,FOLLOW_BREAK_in_break_statement12110); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal822_tree = (CommonTree)adaptor.DupNode(string_literal822);

                		adaptor.AddChild(root_0, string_literal822_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal823=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_break_statement12114); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal823_tree = (CommonTree)adaptor.DupNode(char_literal823);

                		adaptor.AddChild(root_0, char_literal823_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "break_statement"

        public class continue_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "continue_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2066:1: continue_statement : 'continue' ';' ;
        public JavaMaker.continue_statement_return continue_statement() // throws RecognitionException [1]
        {   
            JavaMaker.continue_statement_return retval = new JavaMaker.continue_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal824 = null;
            CommonTree char_literal825 = null;

            CommonTree string_literal824_tree=null;
            CommonTree char_literal825_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2066:19: ( 'continue' ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2067:2: 'continue' ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal824=(CommonTree)Match(input,271,FOLLOW_271_in_continue_statement12122); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal824_tree = (CommonTree)adaptor.DupNode(string_literal824);

                		adaptor.AddChild(root_0, string_literal824_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal825=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_continue_statement12126); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal825_tree = (CommonTree)adaptor.DupNode(char_literal825);

                		adaptor.AddChild(root_0, char_literal825_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "continue_statement"

        public class goto_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "goto_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2068:1: goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
        public JavaMaker.goto_statement_return goto_statement() // throws RecognitionException [1]
        {   
            JavaMaker.goto_statement_return retval = new JavaMaker.goto_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal826 = null;
            CommonTree string_literal828 = null;
            CommonTree string_literal830 = null;
            CommonTree char_literal831 = null;
            JavaMaker.identifier_return identifier827 = default(JavaMaker.identifier_return);

            JavaMaker.constant_expression_return constant_expression829 = default(JavaMaker.constant_expression_return);


            CommonTree string_literal826_tree=null;
            CommonTree string_literal828_tree=null;
            CommonTree string_literal830_tree=null;
            CommonTree char_literal831_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2068:15: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2069:2: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal826=(CommonTree)Match(input,272,FOLLOW_272_in_goto_statement12134); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal826_tree = (CommonTree)adaptor.DupNode(string_literal826);

                		adaptor.AddChild(root_0, string_literal826_tree);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2069:11: ( identifier | 'case' constant_expression | 'default' )
                	int alt286 = 3;
                	switch ( input.LA(1) ) 
                	{
                	case IDENTIFIER:
                	case ELIF:
                	case ENDIF:
                	case DEFINE:
                	case UNDEF:
                	case 195:
                	case 221:
                	case 224:
                	case 225:
                	case 226:
                	case 227:
                	case 228:
                	case 229:
                	case 230:
                	case 231:
                	case 232:
                	case 233:
                	case 234:
                	case 235:
                	case 236:
                	case 237:
                	case 238:
                	case 239:
                	case 241:
                	case 242:
                	case 243:
                	case 244:
                	case 247:
                	case 248:
                	case 249:
                	case 250:
                	case 256:
                	case 263:
                	case 264:
                	case 274:
                	case 277:
                		{
                	    alt286 = 1;
                	    }
                	    break;
                	case 267:
                		{
                	    alt286 = 2;
                	    }
                	    break;
                	case 217:
                		{
                	    alt286 = 3;
                	    }
                	    break;
                		default:
                		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		    NoViableAltException nvae_d286s0 =
                		        new NoViableAltException("", 286, 0, input);

                		    throw nvae_d286s0;
                	}

                	switch (alt286) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2069:13: identifier
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_identifier_in_goto_statement12140);
                	        	identifier827 = identifier();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, identifier827.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2070:7: 'case' constant_expression
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal828=(CommonTree)Match(input,267,FOLLOW_267_in_goto_statement12148); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal828_tree = (CommonTree)adaptor.DupNode(string_literal828);

                	        		adaptor.AddChild(root_0, string_literal828_tree);
                	        	}
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_constant_expression_in_goto_statement12152);
                	        	constant_expression829 = constant_expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, constant_expression829.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 3 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2071:7: 'default'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal830=(CommonTree)Match(input,217,FOLLOW_217_in_goto_statement12160); if (state.failed) return retval;
                	        	if ( state.backtracking == 0 )
                	        	{string_literal830_tree = (CommonTree)adaptor.DupNode(string_literal830);

                	        		adaptor.AddChild(root_0, string_literal830_tree);
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal831=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_goto_statement12165); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{char_literal831_tree = (CommonTree)adaptor.DupNode(char_literal831);

                		adaptor.AddChild(root_0, char_literal831_tree);
                	}

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "goto_statement"

        public class return_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "return_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2072:1: return_statement : 'return' ( expression )? ';' ;
        public JavaMaker.return_statement_return return_statement() // throws RecognitionException [1]
        {   
            JavaMaker.return_statement_return retval = new JavaMaker.return_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal832 = null;
            CommonTree char_literal834 = null;
            JavaMaker.expression_return expression833 = default(JavaMaker.expression_return);


            CommonTree string_literal832_tree=null;
            CommonTree char_literal834_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2072:17: ( 'return' ( expression )? ';' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2073:2: 'return' ( expression )? ';'
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal832=(CommonTree)Match(input,RETURN,FOLLOW_RETURN_in_return_statement12173); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal832_tree = (CommonTree)adaptor.DupNode(string_literal832);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal832_tree, root_0);
                	}
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2073:14: ( expression )?
                	int alt287 = 2;
                	int LA287_0 = input.LA(1);

                	if ( ((LA287_0 >= MONONOT && LA287_0 <= MONOTWIDDLE) || LA287_0 == NEW_ARRAY || (LA287_0 >= OBJECT && LA287_0 <= THIS) || LA287_0 == LPAREN || LA287_0 == BIT_AND || (LA287_0 >= PLUS && LA287_0 <= MINUS) || LA287_0 == STAR || (LA287_0 >= BOOL && LA287_0 <= NULL) || (LA287_0 >= ELIF && LA287_0 <= UNDEF) || LA287_0 == 195 || LA287_0 == 197 || LA287_0 == 207 || (LA287_0 >= 209 && LA287_0 <= 210) || (LA287_0 >= 214 && LA287_0 <= 219) || LA287_0 == 221 || (LA287_0 >= 224 && LA287_0 <= 239) || (LA287_0 >= 241 && LA287_0 <= 244) || (LA287_0 >= 247 && LA287_0 <= 254) || LA287_0 == 256 || (LA287_0 >= 263 && LA287_0 <= 264) || (LA287_0 >= 274 && LA287_0 <= 277)) )
                	{
                	    alt287 = 1;
                	}
                	switch (alt287) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2073:14: expression
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_return_statement12178);
                	        	expression833 = expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) 
                	        	adaptor.AddChild(root_0, expression833.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	_last = (CommonTree)input.LT(1);
                	char_literal834=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_return_statement12183); if (state.failed) return retval;

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "return_statement"

        public class throw_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "throw_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2074:1: throw_statement : t= 'throw' (e= expression )? ';' -> ^( $t) ;
        public JavaMaker.throw_statement_return throw_statement() // throws RecognitionException [1]
        {   
            JavaMaker.throw_statement_return retval = new JavaMaker.throw_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree t = null;
            CommonTree char_literal835 = null;
            JavaMaker.expression_return e = default(JavaMaker.expression_return);


            CommonTree t_tree=null;
            CommonTree char_literal835_tree=null;
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_THROW = new RewriteRuleNodeStream(adaptor,"token THROW");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");

                CommonTree var = null;
                bool missingThrowExp = true;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2079:2: (t= 'throw' (e= expression )? ';' -> ^( $t) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2080:2: t= 'throw' (e= expression )? ';'
                {
                	_last = (CommonTree)input.LT(1);
                	t=(CommonTree)Match(input,THROW,FOLLOW_THROW_in_throw_statement12200); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_THROW.Add(t);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2080:14: (e= expression )?
                	int alt288 = 2;
                	int LA288_0 = input.LA(1);

                	if ( ((LA288_0 >= MONONOT && LA288_0 <= MONOTWIDDLE) || LA288_0 == NEW_ARRAY || (LA288_0 >= OBJECT && LA288_0 <= THIS) || LA288_0 == LPAREN || LA288_0 == BIT_AND || (LA288_0 >= PLUS && LA288_0 <= MINUS) || LA288_0 == STAR || (LA288_0 >= BOOL && LA288_0 <= NULL) || (LA288_0 >= ELIF && LA288_0 <= UNDEF) || LA288_0 == 195 || LA288_0 == 197 || LA288_0 == 207 || (LA288_0 >= 209 && LA288_0 <= 210) || (LA288_0 >= 214 && LA288_0 <= 219) || LA288_0 == 221 || (LA288_0 >= 224 && LA288_0 <= 239) || (LA288_0 >= 241 && LA288_0 <= 244) || (LA288_0 >= 247 && LA288_0 <= 254) || LA288_0 == 256 || (LA288_0 >= 263 && LA288_0 <= 264) || (LA288_0 >= 274 && LA288_0 <= 277)) )
                	{
                	    alt288 = 1;
                	}
                	switch (alt288) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2080:15: e= expression
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_throw_statement12207);
                	        	e = expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_expression.Add(e.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   missingThrowExp = false;
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   var = missingThrowExp ? dupTree(((catch_clause_scope)catch_clause_stack.Peek()).throwVar) : ((e != null) ? ((CommonTree)e.Tree) : null); 
                	}
                	_last = (CommonTree)input.LT(1);
                	char_literal835=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_throw_statement12216); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal835);



                	// AST REWRITE
                	// elements:          t
                	// token labels:      t
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_t = new RewriteRuleNodeStream(adaptor, "token t", t);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2080:135: -> ^( $t)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2080:138: ^( $t)
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_t.NextNode(), root_1);

                	    adaptor.AddChild(root_1,  var );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "throw_statement"

        public class try_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "try_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2081:1: try_statement : t= 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) -> ^( $t block ( catch_clauses )? ( finally_clause )? ) ;
        public JavaMaker.try_statement_return try_statement() // throws RecognitionException [1]
        {   
            JavaMaker.try_statement_return retval = new JavaMaker.try_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree t = null;
            JavaMaker.block_return block836 = default(JavaMaker.block_return);

            JavaMaker.catch_clauses_return catch_clauses837 = default(JavaMaker.catch_clauses_return);

            JavaMaker.finally_clause_return finally_clause838 = default(JavaMaker.finally_clause_return);

            JavaMaker.finally_clause_return finally_clause839 = default(JavaMaker.finally_clause_return);


            CommonTree t_tree=null;
            RewriteRuleNodeStream stream_TRY = new RewriteRuleNodeStream(adaptor,"token TRY");
            RewriteRuleSubtreeStream stream_catch_clauses = new RewriteRuleSubtreeStream(adaptor,"rule catch_clauses");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
            RewriteRuleSubtreeStream stream_finally_clause = new RewriteRuleSubtreeStream(adaptor,"rule finally_clause");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2081:14: (t= 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) -> ^( $t block ( catch_clauses )? ( finally_clause )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2082:7: t= 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
                {
                	_last = (CommonTree)input.LT(1);
                	t=(CommonTree)Match(input,TRY,FOLLOW_TRY_in_try_statement12239); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_TRY.Add(t);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_try_statement12243);
                	block836 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_block.Add(block836.Tree);
                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2082:25: ( catch_clauses ( finally_clause )? | finally_clause )
                	int alt290 = 2;
                	int LA290_0 = input.LA(1);

                	if ( (LA290_0 == CATCH) )
                	{
                	    alt290 = 1;
                	}
                	else if ( (LA290_0 == FINALLY) )
                	{
                	    alt290 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d290s0 =
                	        new NoViableAltException("", 290, 0, input);

                	    throw nvae_d290s0;
                	}
                	switch (alt290) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2082:27: catch_clauses ( finally_clause )?
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_catch_clauses_in_try_statement12249);
                	        	catch_clauses837 = catch_clauses();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_catch_clauses.Add(catch_clauses837.Tree);
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2082:43: ( finally_clause )?
                	        	int alt289 = 2;
                	        	int LA289_0 = input.LA(1);

                	        	if ( (LA289_0 == FINALLY) )
                	        	{
                	        	    alt289 = 1;
                	        	}
                	        	switch (alt289) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2082:43: finally_clause
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_finally_clause_in_try_statement12253);
                	        	        	finally_clause838 = finally_clause();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_finally_clause.Add(finally_clause838.Tree);

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2083:10: finally_clause
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_finally_clause_in_try_statement12265);
                	        	finally_clause839 = finally_clause();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_finally_clause.Add(finally_clause839.Tree);

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}



                	// AST REWRITE
                	// elements:          catch_clauses, block, finally_clause, t
                	// token labels:      t
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_t = new RewriteRuleNodeStream(adaptor, "token t", t);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2083:26: -> ^( $t block ( catch_clauses )? ( finally_clause )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2083:29: ^( $t block ( catch_clauses )? ( finally_clause )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_t.NextNode(), root_1);

                	    adaptor.AddChild(root_1, stream_block.NextTree());
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2083:40: ( catch_clauses )?
                	    if ( stream_catch_clauses.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_catch_clauses.NextTree());

                	    }
                	    stream_catch_clauses.Reset();
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2083:55: ( finally_clause )?
                	    if ( stream_finally_clause.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_finally_clause.NextTree());

                	    }
                	    stream_finally_clause.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "try_statement"

        public class catch_clauses_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "catch_clauses"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2086:1: catch_clauses : ( catch_clause )+ ;
        public JavaMaker.catch_clauses_return catch_clauses() // throws RecognitionException [1]
        {   
            JavaMaker.catch_clauses_return retval = new JavaMaker.catch_clauses_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.catch_clause_return catch_clause840 = default(JavaMaker.catch_clause_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2086:14: ( ( catch_clause )+ )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2087:5: ( catch_clause )+
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2087:5: ( catch_clause )+
                	int cnt291 = 0;
                	do 
                	{
                	    int alt291 = 2;
                	    int LA291_0 = input.LA(1);

                	    if ( (LA291_0 == CATCH) )
                	    {
                	        alt291 = 1;
                	    }


                	    switch (alt291) 
                		{
                			case 1 :
                			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2087:5: catch_clause
                			    {
                			    	_last = (CommonTree)input.LT(1);
                			    	PushFollow(FOLLOW_catch_clause_in_catch_clauses12293);
                			    	catch_clause840 = catch_clause();
                			    	state._fsp--;
                			    	if (state.failed) return retval;
                			    	if ( (state.backtracking==0) ) 
                			    	adaptor.AddChild(root_0, catch_clause840.Tree);

                			    	if ( (state.backtracking==0) ) {
                			    	}
                			    }
                			    break;

                			default:
                			    if ( cnt291 >= 1 ) goto loop291;
                			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                		            EarlyExitException eee291 =
                		                new EarlyExitException(291, input);
                		            throw eee291;
                	    }
                	    cnt291++;
                	} while (true);

                	loop291:
                		;	// Stops C# compiler whining that label 'loop291' has no statements


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "catch_clauses"

        protected class catch_clause_scope 
        {
            protected internal CommonTree throwVar;
        }
        protected Stack catch_clause_stack = new Stack();

        public class catch_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "catch_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2088:1: catch_clause : c= 'catch' ( '(' given_t= class_type (given_v= identifier | magic_v= magicCatchVar ) ')' | magic_t= magicThrowableType[true,$c.token] magic_v= magicCatchVar ) block -> ^( $c block ) ;
        public JavaMaker.catch_clause_return catch_clause() // throws RecognitionException [1]
        {   
            catch_clause_stack.Push(new catch_clause_scope());
            JavaMaker.catch_clause_return retval = new JavaMaker.catch_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree c = null;
            CommonTree char_literal841 = null;
            CommonTree char_literal842 = null;
            JavaMaker.class_type_return given_t = default(JavaMaker.class_type_return);

            JavaMaker.identifier_return given_v = default(JavaMaker.identifier_return);

            JavaMaker.magicCatchVar_return magic_v = default(JavaMaker.magicCatchVar_return);

            JavaMaker.magicThrowableType_return magic_t = default(JavaMaker.magicThrowableType_return);

            JavaMaker.block_return block843 = default(JavaMaker.block_return);


            CommonTree c_tree=null;
            CommonTree char_literal841_tree=null;
            CommonTree char_literal842_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_CATCH = new RewriteRuleNodeStream(adaptor,"token CATCH");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_magicThrowableType = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowableType");
            RewriteRuleSubtreeStream stream_class_type = new RewriteRuleSubtreeStream(adaptor,"rule class_type");
            RewriteRuleSubtreeStream stream_magicCatchVar = new RewriteRuleSubtreeStream(adaptor,"rule magicCatchVar");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");

                CommonTree ty = null, var = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2092:2: (c= 'catch' ( '(' given_t= class_type (given_v= identifier | magic_v= magicCatchVar ) ')' | magic_t= magicThrowableType[true,$c.token] magic_v= magicCatchVar ) block -> ^( $c block ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2093:5: c= 'catch' ( '(' given_t= class_type (given_v= identifier | magic_v= magicCatchVar ) ')' | magic_t= magicThrowableType[true,$c.token] magic_v= magicCatchVar ) block
                {
                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,CATCH,FOLLOW_CATCH_in_catch_clause12315); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_CATCH.Add(c);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2093:15: ( '(' given_t= class_type (given_v= identifier | magic_v= magicCatchVar ) ')' | magic_t= magicThrowableType[true,$c.token] magic_v= magicCatchVar )
                	int alt293 = 2;
                	int LA293_0 = input.LA(1);

                	if ( (LA293_0 == LPAREN) )
                	{
                	    alt293 = 1;
                	}
                	else if ( (LA293_0 == EOF || LA293_0 == ENUM || LA293_0 == MONOTWIDDLE || (LA293_0 >= PUBLIC && LA293_0 <= STATIC) || LA293_0 == OBJECT || LA293_0 == OPEN_BRACKET || (LA293_0 >= OPEN_BRACE && LA293_0 <= CLOSE_BRACE) || (LA293_0 >= BOOL && LA293_0 <= IDENTIFIER) || (LA293_0 >= ELIF && LA293_0 <= RPAREN) || (LA293_0 >= 193 && LA293_0 <= 206) || LA293_0 == 218 || LA293_0 == 221 || (LA293_0 >= 224 && LA293_0 <= 245) || (LA293_0 >= 247 && LA293_0 <= 256) || LA293_0 == 258 || (LA293_0 >= 260 && LA293_0 <= 261) || (LA293_0 >= 263 && LA293_0 <= 264) || (LA293_0 >= 274 && LA293_0 <= 277)) )
                	{
                	    alt293 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d293s0 =
                	        new NoViableAltException("", 293, 0, input);

                	    throw nvae_d293s0;
                	}
                	switch (alt293) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2093:16: '(' given_t= class_type (given_v= identifier | magic_v= magicCatchVar ) ')'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal841=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_catch_clause12318); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal841);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_class_type_in_catch_clause12324);
                	        	given_t = class_type();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_class_type.Add(given_t.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   ty = ((given_t != null) ? ((CommonTree)given_t.Tree) : null); 
                	        	}
                	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2093:66: (given_v= identifier | magic_v= magicCatchVar )
                	        	int alt292 = 2;
                	        	int LA292_0 = input.LA(1);

                	        	if ( (LA292_0 == IDENTIFIER || (LA292_0 >= ELIF && LA292_0 <= UNDEF) || LA292_0 == 195 || LA292_0 == 221 || (LA292_0 >= 224 && LA292_0 <= 239) || (LA292_0 >= 241 && LA292_0 <= 244) || (LA292_0 >= 247 && LA292_0 <= 250) || LA292_0 == 256 || (LA292_0 >= 263 && LA292_0 <= 264) || LA292_0 == 274 || LA292_0 == 277) )
                	        	{
                	        	    alt292 = 1;
                	        	}
                	        	else if ( (LA292_0 == RPAREN) )
                	        	{
                	        	    alt292 = 2;
                	        	}
                	        	else 
                	        	{
                	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	        	    NoViableAltException nvae_d292s0 =
                	        	        new NoViableAltException("", 292, 0, input);

                	        	    throw nvae_d292s0;
                	        	}
                	        	switch (alt292) 
                	        	{
                	        	    case 1 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2093:67: given_v= identifier
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_identifier_in_catch_clause12332);
                	        	        	given_v = identifier();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_identifier.Add(given_v.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   var = ((given_v != null) ? ((CommonTree)given_v.Tree) : null); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;
                	        	    case 2 :
                	        	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2093:113: magic_v= magicCatchVar
                	        	        {
                	        	        	_last = (CommonTree)input.LT(1);
                	        	        	PushFollow(FOLLOW_magicCatchVar_in_catch_clause12340);
                	        	        	magic_v = magicCatchVar();
                	        	        	state._fsp--;
                	        	        	if (state.failed) return retval;
                	        	        	if ( (state.backtracking==0) ) stream_magicCatchVar.Add(magic_v.Tree);
                	        	        	if ( (state.backtracking==0) )
                	        	        	{
                	        	        	   var = ((magic_v != null) ? ((CommonTree)magic_v.Tree) : null); 
                	        	        	}

                	        	        	if ( (state.backtracking==0) ) {
                	        	        	}
                	        	        }
                	        	        break;

                	        	}

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal842=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_catch_clause12346); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal842);


                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2094:20: magic_t= magicThrowableType[true,$c.token] magic_v= magicCatchVar
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicThrowableType_in_catch_clause12369);
                	        	magic_t = magicThrowableType(true, c.token);
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicThrowableType.Add(magic_t.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_magicCatchVar_in_catch_clause12374);
                	        	magic_v = magicCatchVar();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_magicCatchVar.Add(magic_v.Tree);
                	        	if ( (state.backtracking==0) )
                	        	{
                	        	   ty = ((magic_t != null) ? ((CommonTree)magic_t.Tree) : null); var = ((magic_v != null) ? ((CommonTree)magic_v.Tree) : null); 
                	        	}

                	        	if ( (state.backtracking==0) ) {
                	        	}
                	        }
                	        break;

                	}

                	if ( (state.backtracking==0) )
                	{
                	   ((catch_clause_scope)catch_clause_stack.Peek()).throwVar =  var; 
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_catch_clause12383);
                	block843 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_block.Add(block843.Tree);


                	// AST REWRITE
                	// elements:          block, c
                	// token labels:      c
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_c = new RewriteRuleNodeStream(adaptor, "token c", c);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2095:8: -> ^( $c block )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2095:11: ^( $c block )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_c.NextNode(), root_1);

                	    adaptor.AddChild(root_1,  ty );
                	    adaptor.AddChild(root_1,  var );
                	    adaptor.AddChild(root_1, stream_block.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
                catch_clause_stack.Pop();
            }
            return retval;
        }
        // $ANTLR end "catch_clause"

        public class finally_clause_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "finally_clause"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2097:1: finally_clause : 'finally' block ;
        public JavaMaker.finally_clause_return finally_clause() // throws RecognitionException [1]
        {   
            JavaMaker.finally_clause_return retval = new JavaMaker.finally_clause_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal844 = null;
            JavaMaker.block_return block845 = default(JavaMaker.block_return);


            CommonTree string_literal844_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2097:15: ( 'finally' block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2098:2: 'finally' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal844=(CommonTree)Match(input,FINALLY,FOLLOW_FINALLY_in_finally_clause12415); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal844_tree = (CommonTree)adaptor.DupNode(string_literal844);

                		root_0 = (CommonTree)adaptor.BecomeRoot(string_literal844_tree, root_0);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_finally_clause12420);
                	block845 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block845.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "finally_clause"

        public class checked_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "checked_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2099:1: checked_statement : 'checked' block ;
        public JavaMaker.checked_statement_return checked_statement() // throws RecognitionException [1]
        {   
            JavaMaker.checked_statement_return retval = new JavaMaker.checked_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal846 = null;
            JavaMaker.block_return block847 = default(JavaMaker.block_return);


            CommonTree string_literal846_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2099:18: ( 'checked' block )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2100:2: 'checked' block
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	string_literal846=(CommonTree)Match(input,215,FOLLOW_215_in_checked_statement12428); if (state.failed) return retval;
                	if ( state.backtracking == 0 )
                	{string_literal846_tree = (CommonTree)adaptor.DupNode(string_literal846);

                		adaptor.AddChild(root_0, string_literal846_tree);
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_checked_statement12432);
                	block847 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, block847.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "checked_statement"

        public class unchecked_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "unchecked_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2101:1: unchecked_statement : 'unchecked' block -> ^( UNCHECKED block ) ;
        public JavaMaker.unchecked_statement_return unchecked_statement() // throws RecognitionException [1]
        {   
            JavaMaker.unchecked_statement_return retval = new JavaMaker.unchecked_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal848 = null;
            JavaMaker.block_return block849 = default(JavaMaker.block_return);


            CommonTree string_literal848_tree=null;
            RewriteRuleNodeStream stream_216 = new RewriteRuleNodeStream(adaptor,"token 216");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2101:20: ( 'unchecked' block -> ^( UNCHECKED block ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2102:2: 'unchecked' block
                {
                	_last = (CommonTree)input.LT(1);
                	string_literal848=(CommonTree)Match(input,216,FOLLOW_216_in_unchecked_statement12440); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_216.Add(string_literal848);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_block_in_unchecked_statement12444);
                	block849 = block();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_block.Add(block849.Tree);


                	// AST REWRITE
                	// elements:          block
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2102:22: -> ^( UNCHECKED block )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2102:25: ^( UNCHECKED block )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNCHECKED, "UNCHECKED"), root_1);

                	    adaptor.AddChild(root_1, stream_block.NextTree());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "unchecked_statement"

        public class lock_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "lock_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2103:1: lock_statement : l= 'lock' '(' expression p= ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( SYNCHRONIZED[$l.token, \"synchronized\"] expression ) ;
        public JavaMaker.lock_statement_return lock_statement() // throws RecognitionException [1]
        {   
            JavaMaker.lock_statement_return retval = new JavaMaker.lock_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree l = null;
            CommonTree p = null;
            CommonTree char_literal850 = null;
            JavaMaker.expression_return expression851 = default(JavaMaker.expression_return);

            JavaMaker.embedded_statement_return embedded_statement852 = default(JavaMaker.embedded_statement_return);


            CommonTree l_tree=null;
            CommonTree p_tree=null;
            CommonTree char_literal850_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleNodeStream stream_273 = new RewriteRuleNodeStream(adaptor,"token 273");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");

                CommonTree statAsBlock = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2106:2: (l= 'lock' '(' expression p= ')' embedded_statement[/* isStatementListCtxt */ false] -> ^( SYNCHRONIZED[$l.token, \"synchronized\"] expression ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2107:2: l= 'lock' '(' expression p= ')' embedded_statement[/* isStatementListCtxt */ false]
                {
                	_last = (CommonTree)input.LT(1);
                	l=(CommonTree)Match(input,273,FOLLOW_273_in_lock_statement12466); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_273.Add(l);

                	_last = (CommonTree)input.LT(1);
                	char_literal850=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_lock_statement12470); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal850);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_expression_in_lock_statement12473);
                	expression851 = expression();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_expression.Add(expression851.Tree);
                	_last = (CommonTree)input.LT(1);
                	p=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_lock_statement12479); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(p);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_lock_statement12483);
                	embedded_statement852 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement852.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   statAsBlock = dupTree(embeddedStatementToBlock(p.token, ((embedded_statement852 != null) ? ((CommonTree)embedded_statement852.Tree) : null))); 
                	}


                	// AST REWRITE
                	// elements:          expression
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2109:6: -> ^( SYNCHRONIZED[$l.token, \"synchronized\"] expression )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2109:9: ^( SYNCHRONIZED[$l.token, \"synchronized\"] expression )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SYNCHRONIZED, l.token, "synchronized"), root_1);

                	    adaptor.AddChild(root_1, stream_expression.NextTree());
                	    adaptor.AddChild(root_1,  statAsBlock );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "lock_statement"

        public class using_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "using_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2111:1: using_statement[bool isStatementListCtxt] : u= 'using' '(' resource_acquisition c= ')' embedded_statement[/* isStatementListCtxt */ false] f= magicFinally[$c.token, disposers] magicTry[$u.token, state.backtracking == 0 ? embeddedStatementToBlock($u.token, $embedded_statement.tree) : null, null, $f.tree] -> {!isStatementListCtxt}? OPEN_BRACE[$u.token, \"{\"] resource_acquisition SEMI[$c.token, \";\"] magicTry CLOSE_BRACE[$u.token, \"}\"] -> resource_acquisition SEMI[$c.token, \";\"] magicTry ;
        public JavaMaker.using_statement_return using_statement(bool isStatementListCtxt) // throws RecognitionException [1]
        {   
            JavaMaker.using_statement_return retval = new JavaMaker.using_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree u = null;
            CommonTree c = null;
            CommonTree char_literal853 = null;
            JavaMaker.magicFinally_return f = default(JavaMaker.magicFinally_return);

            JavaMaker.resource_acquisition_return resource_acquisition854 = default(JavaMaker.resource_acquisition_return);

            JavaMaker.embedded_statement_return embedded_statement855 = default(JavaMaker.embedded_statement_return);

            JavaMaker.magicTry_return magicTry856 = default(JavaMaker.magicTry_return);


            CommonTree u_tree=null;
            CommonTree c_tree=null;
            CommonTree char_literal853_tree=null;
            RewriteRuleNodeStream stream_RPAREN = new RewriteRuleNodeStream(adaptor,"token RPAREN");
            RewriteRuleNodeStream stream_USING = new RewriteRuleNodeStream(adaptor,"token USING");
            RewriteRuleNodeStream stream_LPAREN = new RewriteRuleNodeStream(adaptor,"token LPAREN");
            RewriteRuleSubtreeStream stream_magicFinally = new RewriteRuleSubtreeStream(adaptor,"rule magicFinally");
            RewriteRuleSubtreeStream stream_resource_acquisition = new RewriteRuleSubtreeStream(adaptor,"rule resource_acquisition");
            RewriteRuleSubtreeStream stream_magicTry = new RewriteRuleSubtreeStream(adaptor,"rule magicTry");
            RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");

                CommonTree disposers = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2114:2: (u= 'using' '(' resource_acquisition c= ')' embedded_statement[/* isStatementListCtxt */ false] f= magicFinally[$c.token, disposers] magicTry[$u.token, state.backtracking == 0 ? embeddedStatementToBlock($u.token, $embedded_statement.tree) : null, null, $f.tree] -> {!isStatementListCtxt}? OPEN_BRACE[$u.token, \"{\"] resource_acquisition SEMI[$c.token, \";\"] magicTry CLOSE_BRACE[$u.token, \"}\"] -> resource_acquisition SEMI[$c.token, \";\"] magicTry )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2116:2: u= 'using' '(' resource_acquisition c= ')' embedded_statement[/* isStatementListCtxt */ false] f= magicFinally[$c.token, disposers] magicTry[$u.token, state.backtracking == 0 ? embeddedStatementToBlock($u.token, $embedded_statement.tree) : null, null, $f.tree]
                {
                	_last = (CommonTree)input.LT(1);
                	u=(CommonTree)Match(input,USING,FOLLOW_USING_in_using_statement12531); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_USING.Add(u);

                	_last = (CommonTree)input.LT(1);
                	char_literal853=(CommonTree)Match(input,LPAREN,FOLLOW_LPAREN_in_using_statement12535); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal853);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_resource_acquisition_in_using_statement12540);
                	resource_acquisition854 = resource_acquisition();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_resource_acquisition.Add(resource_acquisition854.Tree);
                	_last = (CommonTree)input.LT(1);
                	c=(CommonTree)Match(input,RPAREN,FOLLOW_RPAREN_in_using_statement12546); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_RPAREN.Add(c);

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_embedded_statement_in_using_statement12551);
                	embedded_statement855 = embedded_statement(/* isStatementListCtxt */ false);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement855.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   
                	          disposers = addDisposeVars(c.token, ((resource_acquisition854 != null) ? resource_acquisition854.resourceNames : default(List<string>)), rewriteMethodName("Dispose"));
                	          AddToImports(rewriteImportLocation("CS2JNet.System.Disposable")); 
                	       
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicFinally_in_using_statement12569);
                	f = magicFinally(c.token, disposers);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicFinally.Add(f.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicTry_in_using_statement12577);
                	magicTry856 = magicTry(u.token, state.backtracking == 0 ? embeddedStatementToBlock(u.token, ((embedded_statement855 != null) ? ((CommonTree)embedded_statement855.Tree) : null)) : null, null, ((f != null) ? ((CommonTree)f.Tree) : null));
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicTry.Add(magicTry856.Tree);


                	// AST REWRITE
                	// elements:          magicTry, magicTry, resource_acquisition, resource_acquisition
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2123:6: -> {!isStatementListCtxt}? OPEN_BRACE[$u.token, \"{\"] resource_acquisition SEMI[$c.token, \";\"] magicTry CLOSE_BRACE[$u.token, \"}\"]
                	if (!isStatementListCtxt)
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, u.token, "{"));
                	    adaptor.AddChild(root_0, stream_resource_acquisition.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, c.token, ";"));
                	    adaptor.AddChild(root_0, stream_magicTry.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, u.token, "}"));

                	}
                	else // 2124:6: -> resource_acquisition SEMI[$c.token, \";\"] magicTry
                	{
                	    adaptor.AddChild(root_0, stream_resource_acquisition.NextTree());
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, c.token, ";"));
                	    adaptor.AddChild(root_0, stream_magicTry.NextTree());

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "using_statement"

        public class resource_acquisition_return : TreeRuleReturnScope
        {
            public List<string> resourceNames;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "resource_acquisition"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2126:1: resource_acquisition returns [List<string> resourceNames] : ( ( local_variable_declaration )=> local_variable_declaration | expression -> ^( TYPE[$expression.tree.Token, \"TYPE\"] IDENTIFIER[$expression.tree.Token, \"IDisposable\"] ) IDENTIFIER[$expression.tree.Token, \"__newVar\"+newVarCtr++] ASSIGN[$expression.tree.Token, \"=\"] expression );
        public JavaMaker.resource_acquisition_return resource_acquisition() // throws RecognitionException [1]
        {   
            JavaMaker.resource_acquisition_return retval = new JavaMaker.resource_acquisition_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.local_variable_declaration_return local_variable_declaration857 = default(JavaMaker.local_variable_declaration_return);

            JavaMaker.expression_return expression858 = default(JavaMaker.expression_return);


            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");

                retval.resourceNames =  new List<string>();

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2129:2: ( ( local_variable_declaration )=> local_variable_declaration | expression -> ^( TYPE[$expression.tree.Token, \"TYPE\"] IDENTIFIER[$expression.tree.Token, \"IDisposable\"] ) IDENTIFIER[$expression.tree.Token, \"__newVar\"+newVarCtr++] ASSIGN[$expression.tree.Token, \"=\"] expression )
                int alt294 = 2;
                alt294 = dfa294.Predict(input);
                switch (alt294) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2130:2: ( local_variable_declaration )=> local_variable_declaration
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition12645);
                        	local_variable_declaration857 = local_variable_declaration();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, local_variable_declaration857.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.resourceNames =  ((local_variable_declaration857 != null) ? local_variable_declaration857.variableNames : default(List<string>)); 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2131:4: expression
                        {
                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_expression_in_resource_acquisition12653);
                        	expression858 = expression();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) stream_expression.Add(expression858.Tree);
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.resourceNames.Add("__newVar"+newVarCtr); 
                        	}


                        	// AST REWRITE
                        	// elements:          expression
                        	// token labels:      
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2131:61: -> ^( TYPE[$expression.tree.Token, \"TYPE\"] IDENTIFIER[$expression.tree.Token, \"IDisposable\"] ) IDENTIFIER[$expression.tree.Token, \"__newVar\"+newVarCtr++] ASSIGN[$expression.tree.Token, \"=\"] expression
                        	{
                        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2131:64: ^( TYPE[$expression.tree.Token, \"TYPE\"] IDENTIFIER[$expression.tree.Token, \"IDisposable\"] )
                        	    {
                        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, ((expression858 != null) ? ((CommonTree)expression858.Tree) : null).Token, "TYPE"), root_1);

                        	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, ((expression858 != null) ? ((CommonTree)expression858.Tree) : null).Token, "IDisposable"));

                        	    adaptor.AddChild(root_0, root_1);
                        	    }
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, ((expression858 != null) ? ((CommonTree)expression858.Tree) : null).Token, "__newVar"+newVarCtr++));
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, ((expression858 != null) ? ((CommonTree)expression858.Tree) : null).Token, "="));
                        	    adaptor.AddChild(root_0, stream_expression.NextTree());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "resource_acquisition"

        public class yield_statement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "yield_statement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2134:1: yield_statement : 'yield' ( 'return' expression ';' -> ^( YIELD_RETURN expression ) | 'break' ';' -> YIELD_BREAK ) ;
        public JavaMaker.yield_statement_return yield_statement() // throws RecognitionException [1]
        {   
            JavaMaker.yield_statement_return retval = new JavaMaker.yield_statement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal859 = null;
            CommonTree string_literal860 = null;
            CommonTree char_literal862 = null;
            CommonTree string_literal863 = null;
            CommonTree char_literal864 = null;
            JavaMaker.expression_return expression861 = default(JavaMaker.expression_return);


            CommonTree string_literal859_tree=null;
            CommonTree string_literal860_tree=null;
            CommonTree char_literal862_tree=null;
            CommonTree string_literal863_tree=null;
            CommonTree char_literal864_tree=null;
            RewriteRuleNodeStream stream_SEMI = new RewriteRuleNodeStream(adaptor,"token SEMI");
            RewriteRuleNodeStream stream_BREAK = new RewriteRuleNodeStream(adaptor,"token BREAK");
            RewriteRuleNodeStream stream_274 = new RewriteRuleNodeStream(adaptor,"token 274");
            RewriteRuleNodeStream stream_RETURN = new RewriteRuleNodeStream(adaptor,"token RETURN");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2134:16: ( 'yield' ( 'return' expression ';' -> ^( YIELD_RETURN expression ) | 'break' ';' -> YIELD_BREAK ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2135:2: 'yield' ( 'return' expression ';' -> ^( YIELD_RETURN expression ) | 'break' ';' -> YIELD_BREAK )
                {
                	_last = (CommonTree)input.LT(1);
                	string_literal859=(CommonTree)Match(input,274,FOLLOW_274_in_yield_statement12712); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_274.Add(string_literal859);

                	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2135:12: ( 'return' expression ';' -> ^( YIELD_RETURN expression ) | 'break' ';' -> YIELD_BREAK )
                	int alt295 = 2;
                	int LA295_0 = input.LA(1);

                	if ( (LA295_0 == RETURN) )
                	{
                	    alt295 = 1;
                	}
                	else if ( (LA295_0 == BREAK) )
                	{
                	    alt295 = 2;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d295s0 =
                	        new NoViableAltException("", 295, 0, input);

                	    throw nvae_d295s0;
                	}
                	switch (alt295) 
                	{
                	    case 1 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2135:13: 'return' expression ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal860=(CommonTree)Match(input,RETURN,FOLLOW_RETURN_in_yield_statement12717); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_RETURN.Add(string_literal860);

                	        	_last = (CommonTree)input.LT(1);
                	        	PushFollow(FOLLOW_expression_in_yield_statement12721);
                	        	expression861 = expression();
                	        	state._fsp--;
                	        	if (state.failed) return retval;
                	        	if ( (state.backtracking==0) ) stream_expression.Add(expression861.Tree);
                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal862=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_yield_statement12725); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal862);



                	        	// AST REWRITE
                	        	// elements:          expression
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 2135:41: -> ^( YIELD_RETURN expression )
                	        	{
                	        	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2135:44: ^( YIELD_RETURN expression )
                	        	    {
                	        	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(YIELD_RETURN, "YIELD_RETURN"), root_1);

                	        	    adaptor.AddChild(root_1, stream_expression.NextTree());

                	        	    adaptor.AddChild(root_0, root_1);
                	        	    }

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;
                	    case 2 :
                	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2136:14: 'break' ';'
                	        {
                	        	_last = (CommonTree)input.LT(1);
                	        	string_literal863=(CommonTree)Match(input,BREAK,FOLLOW_BREAK_in_yield_statement12748); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_BREAK.Add(string_literal863);

                	        	_last = (CommonTree)input.LT(1);
                	        	char_literal864=(CommonTree)Match(input,SEMI,FOLLOW_SEMI_in_yield_statement12752); if (state.failed) return retval; 
                	        	if ( (state.backtracking==0) ) stream_SEMI.Add(char_literal864);



                	        	// AST REWRITE
                	        	// elements:          
                	        	// token labels:      
                	        	// rule labels:       retval
                	        	// token list labels: 
                	        	// rule list labels:  
                	        	// wildcard labels: 
                	        	if ( (state.backtracking==0) ) {
                	        	retval.tree = root_0;
                	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	        	root_0 = (CommonTree)adaptor.Nil;
                	        	// 2136:28: -> YIELD_BREAK
                	        	{
                	        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(YIELD_BREAK, "YIELD_BREAK"));

                	        	}

                	        	retval.tree = root_0;}
                	        }
                	        break;

                	}


                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "yield_statement"

        public class predefined_type_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "predefined_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2142:1: predefined_type returns [string thetext] : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
        public JavaMaker.predefined_type_return predefined_type() // throws RecognitionException [1]
        {   
            JavaMaker.predefined_type_return retval = new JavaMaker.predefined_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree string_literal865 = null;
            CommonTree string_literal866 = null;
            CommonTree string_literal867 = null;
            CommonTree string_literal868 = null;
            CommonTree string_literal869 = null;
            CommonTree string_literal870 = null;
            CommonTree string_literal871 = null;
            CommonTree string_literal872 = null;
            CommonTree string_literal873 = null;
            CommonTree string_literal874 = null;
            CommonTree string_literal875 = null;
            CommonTree string_literal876 = null;
            CommonTree string_literal877 = null;
            CommonTree string_literal878 = null;
            CommonTree string_literal879 = null;

            CommonTree string_literal865_tree=null;
            CommonTree string_literal866_tree=null;
            CommonTree string_literal867_tree=null;
            CommonTree string_literal868_tree=null;
            CommonTree string_literal869_tree=null;
            CommonTree string_literal870_tree=null;
            CommonTree string_literal871_tree=null;
            CommonTree string_literal872_tree=null;
            CommonTree string_literal873_tree=null;
            CommonTree string_literal874_tree=null;
            CommonTree string_literal875_tree=null;
            CommonTree string_literal876_tree=null;
            CommonTree string_literal877_tree=null;
            CommonTree string_literal878_tree=null;
            CommonTree string_literal879_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2154:2: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
                int alt296 = 15;
                switch ( input.LA(1) ) 
                {
                case BOOL:
                	{
                    alt296 = 1;
                    }
                    break;
                case BYTE:
                	{
                    alt296 = 2;
                    }
                    break;
                case CHAR:
                	{
                    alt296 = 3;
                    }
                    break;
                case 275:
                	{
                    alt296 = 4;
                    }
                    break;
                case DOUBLE:
                	{
                    alt296 = 5;
                    }
                    break;
                case FLOAT:
                	{
                    alt296 = 6;
                    }
                    break;
                case INT:
                	{
                    alt296 = 7;
                    }
                    break;
                case LONG:
                	{
                    alt296 = 8;
                    }
                    break;
                case OBJECT:
                	{
                    alt296 = 9;
                    }
                    break;
                case 251:
                	{
                    alt296 = 10;
                    }
                    break;
                case SHORT:
                	{
                    alt296 = 11;
                    }
                    break;
                case 276:
                	{
                    alt296 = 12;
                    }
                    break;
                case 253:
                	{
                    alt296 = 13;
                    }
                    break;
                case 254:
                	{
                    alt296 = 14;
                    }
                    break;
                case 252:
                	{
                    alt296 = 15;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d296s0 =
                	        new NoViableAltException("", 296, 0, input);

                	    throw nvae_d296s0;
                }

                switch (alt296) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2155:4: 'bool'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal865=(CommonTree)Match(input,BOOL,FOLLOW_BOOL_in_predefined_type12780); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal865_tree = (CommonTree)adaptor.DupNode(string_literal865);

                        		adaptor.AddChild(root_0, string_literal865_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Boolean"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2156:7: 'byte'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal866=(CommonTree)Match(input,BYTE,FOLLOW_BYTE_in_predefined_type12793); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal866_tree = (CommonTree)adaptor.DupNode(string_literal866);

                        		adaptor.AddChild(root_0, string_literal866_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  Cfg.UnsignedNumbersToSigned ? "System.SByte" : "System.Byte"; 
                        	                    if (Cfg.UnsignedNumbersToBiggerSignedNumbers)
                        	                       retval.thetext =  "System.Short"; 
                        	                  
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2160:7: 'char'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal867=(CommonTree)Match(input,CHAR,FOLLOW_CHAR_in_predefined_type12810); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal867_tree = (CommonTree)adaptor.DupNode(string_literal867);

                        		adaptor.AddChild(root_0, string_literal867_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Char"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2161:7: 'decimal'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal868=(CommonTree)Match(input,275,FOLLOW_275_in_predefined_type12824); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal868_tree = (CommonTree)adaptor.DupNode(string_literal868);

                        		adaptor.AddChild(root_0, string_literal868_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Decimal"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2162:7: 'double'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal869=(CommonTree)Match(input,DOUBLE,FOLLOW_DOUBLE_in_predefined_type12835); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal869_tree = (CommonTree)adaptor.DupNode(string_literal869);

                        		adaptor.AddChild(root_0, string_literal869_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Double"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2163:7: 'float'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal870=(CommonTree)Match(input,FLOAT,FOLLOW_FLOAT_in_predefined_type12847); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal870_tree = (CommonTree)adaptor.DupNode(string_literal870);

                        		adaptor.AddChild(root_0, string_literal870_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Single"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2164:7: 'int'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal871=(CommonTree)Match(input,INT,FOLLOW_INT_in_predefined_type12860); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal871_tree = (CommonTree)adaptor.DupNode(string_literal871);

                        		adaptor.AddChild(root_0, string_literal871_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Int32"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2165:7: 'long'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal872=(CommonTree)Match(input,LONG,FOLLOW_LONG_in_predefined_type12877); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal872_tree = (CommonTree)adaptor.DupNode(string_literal872);

                        		adaptor.AddChild(root_0, string_literal872_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Int64"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2166:7: 'object'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal873=(CommonTree)Match(input,OBJECT,FOLLOW_OBJECT_in_predefined_type12891); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal873_tree = (CommonTree)adaptor.DupNode(string_literal873);

                        		adaptor.AddChild(root_0, string_literal873_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Object"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 10 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2167:7: 'sbyte'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal874=(CommonTree)Match(input,251,FOLLOW_251_in_predefined_type12903); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal874_tree = (CommonTree)adaptor.DupNode(string_literal874);

                        		adaptor.AddChild(root_0, string_literal874_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.SByte"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 11 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2168:4: 'short'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal875=(CommonTree)Match(input,SHORT,FOLLOW_SHORT_in_predefined_type12913); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal875_tree = (CommonTree)adaptor.DupNode(string_literal875);

                        		adaptor.AddChild(root_0, string_literal875_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.Int16"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 12 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2169:7: 'string'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal876=(CommonTree)Match(input,276,FOLLOW_276_in_predefined_type12926); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal876_tree = (CommonTree)adaptor.DupNode(string_literal876);

                        		adaptor.AddChild(root_0, string_literal876_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  "System.String"; 
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 13 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2170:7: 'uint'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal877=(CommonTree)Match(input,253,FOLLOW_253_in_predefined_type12938); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal877_tree = (CommonTree)adaptor.DupNode(string_literal877);

                        		adaptor.AddChild(root_0, string_literal877_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  Cfg.UnsignedNumbersToSigned ? "System.Int32" : "System.UInt32";
                        	                    if (Cfg.UnsignedNumbersToBiggerSignedNumbers)
                        	                       retval.thetext =  "System.Int64"; 
                        	                  
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 14 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2174:7: 'ulong'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal878=(CommonTree)Match(input,254,FOLLOW_254_in_predefined_type12952); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal878_tree = (CommonTree)adaptor.DupNode(string_literal878);

                        		adaptor.AddChild(root_0, string_literal878_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  Cfg.UnsignedNumbersToSigned ? "System.Int64" : "System.UInt64"; 
                        	                    if (Cfg.UnsignedNumbersToBiggerSignedNumbers)
                        	                       retval.thetext =  "System.Int64"; 
                        	                  
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 15 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2178:7: 'ushort'
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	string_literal879=(CommonTree)Match(input,252,FOLLOW_252_in_predefined_type12965); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{string_literal879_tree = (CommonTree)adaptor.DupNode(string_literal879);

                        		adaptor.AddChild(root_0, string_literal879_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   retval.thetext =  Cfg.UnsignedNumbersToSigned ? "System.Int16" : "System.UInt16"; 
                        	                    if (Cfg.UnsignedNumbersToBiggerSignedNumbers)
                        	                       retval.thetext =  "System.Int32"; 
                        	                  
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      string newText;
                      if (predefined_type_map.TryGetValue(((CommonTree)retval.Tree).Token.Text, out newText)) {
                          ((CommonTree)retval.Tree).Token.Text = newText;
                      }
                      if (Cfg.UnsignedNumbersToSigned && predefined_unsigned_type_map.TryGetValue(((CommonTree)retval.Tree).Token.Text, out newText))    {
                          ((CommonTree)retval.Tree).Token.Text = newText;
                      }
                      if (Cfg.UnsignedNumbersToBiggerSignedNumbers && predefined_embiggen_unsigned_type_map.TryGetValue(((CommonTree)retval.Tree).Token.Text, out newText))    {
                          ((CommonTree)retval.Tree).Token.Text = newText;
                      }

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "predefined_type"

        public class identifier_return : TreeRuleReturnScope
        {
            public string thetext;
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "identifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2184:1: identifier returns [string thetext] : ( IDENTIFIER | also_keyword );
        public JavaMaker.identifier_return identifier() // throws RecognitionException [1]
        {   
            JavaMaker.identifier_return retval = new JavaMaker.identifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree IDENTIFIER880 = null;
            JavaMaker.also_keyword_return also_keyword881 = default(JavaMaker.also_keyword_return);


            CommonTree IDENTIFIER880_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2189:2: ( IDENTIFIER | also_keyword )
                int alt297 = 2;
                int LA297_0 = input.LA(1);

                if ( (LA297_0 == IDENTIFIER) )
                {
                    alt297 = 1;
                }
                else if ( ((LA297_0 >= ELIF && LA297_0 <= UNDEF) || LA297_0 == 195 || LA297_0 == 221 || (LA297_0 >= 224 && LA297_0 <= 239) || (LA297_0 >= 241 && LA297_0 <= 244) || (LA297_0 >= 247 && LA297_0 <= 250) || LA297_0 == 256 || (LA297_0 >= 263 && LA297_0 <= 264) || LA297_0 == 274 || LA297_0 == 277) )
                {
                    alt297 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d297s0 =
                        new NoViableAltException("", 297, 0, input);

                    throw nvae_d297s0;
                }
                switch (alt297) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2190:3: IDENTIFIER
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	IDENTIFIER880=(CommonTree)Match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier12992); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{IDENTIFIER880_tree = (CommonTree)adaptor.DupNode(IDENTIFIER880);

                        		adaptor.AddChild(root_0, IDENTIFIER880_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2190:16: also_keyword
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	PushFollow(FOLLOW_also_keyword_in_identifier12996);
                        	also_keyword881 = also_keyword();
                        	state._fsp--;
                        	if (state.failed) return retval;
                        	if ( (state.backtracking==0) ) 
                        	adaptor.AddChild(root_0, also_keyword881.Tree);

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                      string fixedId = fixBrokenId(((CommonTree)retval.Tree).Token.Text); 
                      ((CommonTree)retval.Tree).Token.Text = fixedId;
                      retval.thetext =  ((CommonTree)retval.Tree).Token.Text;

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "identifier"

        public class keyword_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "keyword"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2192:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
        public JavaMaker.keyword_return keyword() // throws RecognitionException [1]
        {   
            JavaMaker.keyword_return retval = new JavaMaker.keyword_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set882 = null;

            CommonTree set882_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2192:8: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set882 = (CommonTree)input.LT(1);
                	if ( input.LA(1) == ENUM || (input.LA(1) >= PUBLIC && input.LA(1) <= IN) || input.LA(1) == IF || (input.LA(1) >= BOOL && input.LA(1) <= DOUBLE) || (input.LA(1) >= TRUE && input.LA(1) <= NULL) || input.LA(1) == USING || (input.LA(1) >= 193 && input.LA(1) <= 194) || (input.LA(1) >= 197 && input.LA(1) <= 207) || (input.LA(1) >= 212 && input.LA(1) <= 219) || (input.LA(1) >= 222 && input.LA(1) <= 223) || input.LA(1) == 240 || input.LA(1) == 245 || (input.LA(1) >= 251 && input.LA(1) <= 255) || (input.LA(1) >= 257 && input.LA(1) <= 262) || (input.LA(1) >= 265 && input.LA(1) <= 267) || (input.LA(1) >= 269 && input.LA(1) <= 273) || (input.LA(1) >= 275 && input.LA(1) <= 276) ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set882_tree = (CommonTree)adaptor.DupNode(set882);

                	    adaptor.AddChild(root_0, set882_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "keyword"

        public class also_keyword_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "also_keyword"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2195:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' | 'extends' );
        public JavaMaker.also_keyword_return also_keyword() // throws RecognitionException [1]
        {   
            JavaMaker.also_keyword_return retval = new JavaMaker.also_keyword_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree set883 = null;

            CommonTree set883_tree=null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2195:13: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' | 'extends' )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	set883 = (CommonTree)input.LT(1);
                	if ( (input.LA(1) >= ELIF && input.LA(1) <= UNDEF) || input.LA(1) == 195 || input.LA(1) == 221 || (input.LA(1) >= 224 && input.LA(1) <= 239) || (input.LA(1) >= 241 && input.LA(1) <= 244) || (input.LA(1) >= 247 && input.LA(1) <= 250) || input.LA(1) == 256 || (input.LA(1) >= 263 && input.LA(1) <= 264) || input.LA(1) == 274 || input.LA(1) == 277 ) 
                	{
                	    input.Consume();

                	    if ( (state.backtracking==0) ) {
                	    set883_tree = (CommonTree)adaptor.DupNode(set883);

                	    adaptor.AddChild(root_0, set883_tree);
                	    }
                	    state.errorRecovery = false;state.failed = false;
                	}
                	else 
                	{
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    MismatchedSetException mse = new MismatchedSetException(null,input);
                	    throw mse;
                	}

                	if ( (state.backtracking==0) ) {
                	} 

                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "also_keyword"

        public class literal_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "literal"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2201:1: literal : ( Real_literal | n= NUMBER -> {UInt64.Parse($n.text.TrimEnd(new Char[] {'u','U','l','L'})) > Int32.MaxValue}? LONGNUMBER[$n.token, newText] -> $n | h= Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
        public JavaMaker.literal_return literal() // throws RecognitionException [1]
        {   
            JavaMaker.literal_return retval = new JavaMaker.literal_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree n = null;
            CommonTree h = null;
            CommonTree Real_literal884 = null;
            CommonTree Character_literal885 = null;
            CommonTree STRINGLITERAL886 = null;
            CommonTree Verbatim_string_literal887 = null;
            CommonTree TRUE888 = null;
            CommonTree FALSE889 = null;
            CommonTree NULL890 = null;

            CommonTree n_tree=null;
            CommonTree h_tree=null;
            CommonTree Real_literal884_tree=null;
            CommonTree Character_literal885_tree=null;
            CommonTree STRINGLITERAL886_tree=null;
            CommonTree Verbatim_string_literal887_tree=null;
            CommonTree TRUE888_tree=null;
            CommonTree FALSE889_tree=null;
            CommonTree NULL890_tree=null;
            RewriteRuleNodeStream stream_NUMBER = new RewriteRuleNodeStream(adaptor,"token NUMBER");


               string newText = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2209:2: ( Real_literal | n= NUMBER -> {UInt64.Parse($n.text.TrimEnd(new Char[] {'u','U','l','L'})) > Int32.MaxValue}? LONGNUMBER[$n.token, newText] -> $n | h= Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
                int alt298 = 9;
                switch ( input.LA(1) ) 
                {
                case Real_literal:
                	{
                    alt298 = 1;
                    }
                    break;
                case NUMBER:
                	{
                    alt298 = 2;
                    }
                    break;
                case Hex_number:
                	{
                    alt298 = 3;
                    }
                    break;
                case Character_literal:
                	{
                    alt298 = 4;
                    }
                    break;
                case STRINGLITERAL:
                	{
                    alt298 = 5;
                    }
                    break;
                case Verbatim_string_literal:
                	{
                    alt298 = 6;
                    }
                    break;
                case TRUE:
                	{
                    alt298 = 7;
                    }
                    break;
                case FALSE:
                	{
                    alt298 = 8;
                    }
                    break;
                case NULL:
                	{
                    alt298 = 9;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d298s0 =
                	        new NoViableAltException("", 298, 0, input);

                	    throw nvae_d298s0;
                }

                switch (alt298) 
                {
                    case 1 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2210:2: Real_literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	Real_literal884=(CommonTree)Match(input,Real_literal,FOLLOW_Real_literal_in_literal13475); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{Real_literal884_tree = (CommonTree)adaptor.DupNode(Real_literal884);

                        		adaptor.AddChild(root_0, Real_literal884_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 2 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2211:4: n= NUMBER
                        {
                        	_last = (CommonTree)input.LT(1);
                        	n=(CommonTree)Match(input,NUMBER,FOLLOW_NUMBER_in_literal13482); if (state.failed) return retval; 
                        	if ( (state.backtracking==0) ) stream_NUMBER.Add(n);

                        	if ( (state.backtracking==0) )
                        	{
                        	   
                        	           // Remove '[uU]' from any trailing integer suffix
                        	           newText = ((n != null) ? n.Text : null).Replace("u","").Replace("U","");
                        	           if (newText.Length < ((n != null) ? n.Text : null).Length) {
                        	              { Warning(((n != null) ? n.Line : 0), "[UNSUPPORTED] Unsigned number literal converted to signed number: " + ((n != null) ? n.Text : null) + " -> " + newText); } ;
                        	           }
                        	        
                        	}


                        	// AST REWRITE
                        	// elements:          n
                        	// token labels:      n
                        	// rule labels:       retval
                        	// token list labels: 
                        	// rule list labels:  
                        	// wildcard labels: 
                        	if ( (state.backtracking==0) ) {
                        	retval.tree = root_0;
                        	RewriteRuleNodeStream stream_n = new RewriteRuleNodeStream(adaptor, "token n", n);
                        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                        	root_0 = (CommonTree)adaptor.Nil;
                        	// 2219:7: -> {UInt64.Parse($n.text.TrimEnd(new Char[] {'u','U','l','L'})) > Int32.MaxValue}? LONGNUMBER[$n.token, newText]
                        	if (UInt64.Parse(((n != null) ? n.Text : null).TrimEnd(new Char[] {'u','U','l','L'})) > Int32.MaxValue)
                        	{
                        	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(LONGNUMBER, n.token, newText));

                        	}
                        	else // 2220:7: -> $n
                        	{
                        	    adaptor.AddChild(root_0, stream_n.NextNode());

                        	}

                        	retval.tree = root_0;}
                        }
                        break;
                    case 3 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2221:4: h= Hex_number
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	h=(CommonTree)Match(input,Hex_number,FOLLOW_Hex_number_in_literal13522); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{h_tree = (CommonTree)adaptor.DupNode(h);

                        		adaptor.AddChild(root_0, h_tree);
                        	}
                        	if ( (state.backtracking==0) )
                        	{
                        	   
                        	           // Remove '[uU]' from any trailing integer suffix
                        	           newText = ((h != null) ? h.Text : null).Replace("u","").Replace("U","");
                        	           if (newText.Length < ((h != null) ? h.Text : null).Length) {
                        	              { Warning(((h != null) ? h.Line : 0), "[UNSUPPORTED] Unsigned number literal converted to signed number: " + ((h != null) ? h.Text : null) + " -> " + newText); } ;
                        	           }
                        	        
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 4 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2229:4: Character_literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	Character_literal885=(CommonTree)Match(input,Character_literal,FOLLOW_Character_literal_in_literal13535); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{Character_literal885_tree = (CommonTree)adaptor.DupNode(Character_literal885);

                        		adaptor.AddChild(root_0, Character_literal885_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 5 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2230:4: STRINGLITERAL
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	STRINGLITERAL886=(CommonTree)Match(input,STRINGLITERAL,FOLLOW_STRINGLITERAL_in_literal13540); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{STRINGLITERAL886_tree = (CommonTree)adaptor.DupNode(STRINGLITERAL886);

                        		adaptor.AddChild(root_0, STRINGLITERAL886_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 6 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2231:4: Verbatim_string_literal
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	Verbatim_string_literal887=(CommonTree)Match(input,Verbatim_string_literal,FOLLOW_Verbatim_string_literal_in_literal13545); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{Verbatim_string_literal887_tree = (CommonTree)adaptor.DupNode(Verbatim_string_literal887);

                        		adaptor.AddChild(root_0, Verbatim_string_literal887_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 7 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2232:4: TRUE
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	TRUE888=(CommonTree)Match(input,TRUE,FOLLOW_TRUE_in_literal13550); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{TRUE888_tree = (CommonTree)adaptor.DupNode(TRUE888);

                        		adaptor.AddChild(root_0, TRUE888_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 8 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2233:4: FALSE
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	FALSE889=(CommonTree)Match(input,FALSE,FOLLOW_FALSE_in_literal13555); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{FALSE889_tree = (CommonTree)adaptor.DupNode(FALSE889);

                        		adaptor.AddChild(root_0, FALSE889_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;
                    case 9 :
                        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2234:4: NULL
                        {
                        	root_0 = (CommonTree)adaptor.Nil;

                        	_last = (CommonTree)input.LT(1);
                        	NULL890=(CommonTree)Match(input,NULL,FOLLOW_NULL_in_literal13560); if (state.failed) return retval;
                        	if ( state.backtracking == 0 )
                        	{NULL890_tree = (CommonTree)adaptor.DupNode(NULL890);

                        		adaptor.AddChild(root_0, NULL890_tree);
                        	}

                        	if ( (state.backtracking==0) ) {
                        	}
                        }
                        break;

                }
                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
                if ( (state.backtracking==0) )
                {

                     if (newText != null) {
                        ((CommonTree)retval.Tree).Token.Text = newText;
                     }

                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "literal"

        public class void_type_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "void_type"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2237:1: void_type : v= 'void' -> ^( TYPE[$v.token, \"TYPE\"] $v) ;
        public JavaMaker.void_type_return void_type() // throws RecognitionException [1]
        {   
            JavaMaker.void_type_return retval = new JavaMaker.void_type_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            CommonTree v = null;

            CommonTree v_tree=null;
            RewriteRuleNodeStream stream_206 = new RewriteRuleNodeStream(adaptor,"token 206");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2237:10: (v= 'void' -> ^( TYPE[$v.token, \"TYPE\"] $v) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2238:5: v= 'void'
                {
                	_last = (CommonTree)input.LT(1);
                	v=(CommonTree)Match(input,206,FOLLOW_206_in_void_type13576); if (state.failed) return retval; 
                	if ( (state.backtracking==0) ) stream_206.Add(v);



                	// AST REWRITE
                	// elements:          v
                	// token labels:      v
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleNodeStream stream_v = new RewriteRuleNodeStream(adaptor, "token v", v);
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2238:14: -> ^( TYPE[$v.token, \"TYPE\"] $v)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2238:17: ^( TYPE[$v.token, \"TYPE\"] $v)
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, v.token, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, stream_v.NextNode());

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "void_type"

        public class magicIdentifier_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicIdentifier"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2241:1: magicIdentifier[IToken tok, string text] : -> IDENTIFIER[tok, text] ;
        public JavaMaker.magicIdentifier_return magicIdentifier(IToken tok, string text) // throws RecognitionException [1]
        {   
            JavaMaker.magicIdentifier_return retval = new JavaMaker.magicIdentifier_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2241:41: ( -> IDENTIFIER[tok, text] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2242:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2242:2: -> IDENTIFIER[tok, text]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, tok, text));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicIdentifier"

        public class magicThrowableType_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicThrowableType"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2245:1: magicThrowableType[bool isOn, IToken tok] : -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ) ->;
        public JavaMaker.magicThrowableType_return magicThrowableType(bool isOn, IToken tok) // throws RecognitionException [1]
        {   
            JavaMaker.magicThrowableType_return retval = new JavaMaker.magicThrowableType_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2245:42: ( -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2246:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2246:2: -> {isOn}? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] )
                	if (isOn)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2246:13: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, Cfg.TranslatorExceptionIsThrowable ? "Throwable" : "Exception"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2247:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicThrowableType"

        public class magicCatchVar_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicCatchVar"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2250:1: magicCatchVar : -> IDENTIFIER[\"__dummyCatchVar\" + dummyCatchVarCtr++] ;
        public JavaMaker.magicCatchVar_return magicCatchVar() // throws RecognitionException [1]
        {   
            JavaMaker.magicCatchVar_return retval = new JavaMaker.magicCatchVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2250:14: ( -> IDENTIFIER[\"__dummyCatchVar\" + dummyCatchVarCtr++] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2251:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2251:3: -> IDENTIFIER[\"__dummyCatchVar\" + dummyCatchVarCtr++]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, "__dummyCatchVar" + dummyCatchVarCtr++));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicCatchVar"

        public class magicPropGetter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicPropGetter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2253:1: magicPropGetter[CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, IToken getTok, CommonTree body, string propName, bool mkBody, string varName] : b= magicGetterBody[mkBody,getTok,varName] e= magicThrowsException[!mkBody && Cfg.TranslatorBlanketThrow,getTok] -> ^( METHOD[$type.token, \"METHOD\"] IDENTIFIER[getTok, \"get\"+propName] ( magicThrowsException )? ) ;
        public JavaMaker.magicPropGetter_return magicPropGetter(CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, IToken getTok, CommonTree body, string propName, bool mkBody, string varName) // throws RecognitionException [1]
        {   
            JavaMaker.magicPropGetter_return retval = new JavaMaker.magicPropGetter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicGetterBody_return b = default(JavaMaker.magicGetterBody_return);

            JavaMaker.magicThrowsException_return e = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicGetterBody = new RewriteRuleSubtreeStream(adaptor,"rule magicGetterBody");
            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");

                CommonTree realBody = body;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2256:2: (b= magicGetterBody[mkBody,getTok,varName] e= magicThrowsException[!mkBody && Cfg.TranslatorBlanketThrow,getTok] -> ^( METHOD[$type.token, \"METHOD\"] IDENTIFIER[getTok, \"get\"+propName] ( magicThrowsException )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2257:5: b= magicGetterBody[mkBody,getTok,varName] e= magicThrowsException[!mkBody && Cfg.TranslatorBlanketThrow,getTok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicGetterBody_in_magicPropGetter13658);
                	b = magicGetterBody(mkBody, getTok, varName);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicGetterBody.Add(b.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   if (mkBody) realBody = ((b != null) ? ((CommonTree)b.Tree) : null); 
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicPropGetter13665);
                	e = magicThrowsException(!mkBody && Cfg.TranslatorBlanketThrow, getTok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(e.Tree);


                	// AST REWRITE
                	// elements:          magicThrowsException
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2258:5: -> ^( METHOD[$type.token, \"METHOD\"] IDENTIFIER[getTok, \"get\"+propName] ( magicThrowsException )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2258:8: ^( METHOD[$type.token, \"METHOD\"] IDENTIFIER[getTok, \"get\"+propName] ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, type.token, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1,  dupTree(type));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, getTok, "get"+propName));
                	    adaptor.AddChild(root_1,  dupTree(realBody) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2258:132: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicPropGetter"

        public class magicPropSetter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicPropSetter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2260:1: magicPropSetter[CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, IToken setTok, CommonTree body, string propName, bool mkBody, string varName] : b= magicSetterBody[mkBody,setTok,varName] e= magicThrowsException[!mkBody && Cfg.TranslatorBlanketThrow,setTok] -> ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) IDENTIFIER[setTok, \"set\"+propName] ^( PARAMS[setTok, \"PARAMS\"] IDENTIFIER[setTok, \"value\"] ) ( magicThrowsException )? ) ;
        public JavaMaker.magicPropSetter_return magicPropSetter(CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, IToken setTok, CommonTree body, string propName, bool mkBody, string varName) // throws RecognitionException [1]
        {   
            JavaMaker.magicPropSetter_return retval = new JavaMaker.magicPropSetter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicSetterBody_return b = default(JavaMaker.magicSetterBody_return);

            JavaMaker.magicThrowsException_return e = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicSetterBody = new RewriteRuleSubtreeStream(adaptor,"rule magicSetterBody");
            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");

                CommonTree realBody = body;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2263:2: (b= magicSetterBody[mkBody,setTok,varName] e= magicThrowsException[!mkBody && Cfg.TranslatorBlanketThrow,setTok] -> ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) IDENTIFIER[setTok, \"set\"+propName] ^( PARAMS[setTok, \"PARAMS\"] IDENTIFIER[setTok, \"value\"] ) ( magicThrowsException )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2264:5: b= magicSetterBody[mkBody,setTok,varName] e= magicThrowsException[!mkBody && Cfg.TranslatorBlanketThrow,setTok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicSetterBody_in_magicPropSetter13715);
                	b = magicSetterBody(mkBody, setTok, varName);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicSetterBody.Add(b.Tree);
                	if ( (state.backtracking==0) )
                	{
                	   if (mkBody) realBody = ((b != null) ? ((CommonTree)b.Tree) : null); 
                	}
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicPropSetter13722);
                	e = magicThrowsException(!mkBody  && Cfg.TranslatorBlanketThrow, setTok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(e.Tree);


                	// AST REWRITE
                	// elements:          magicThrowsException
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2265:5: -> ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) IDENTIFIER[setTok, \"set\"+propName] ^( PARAMS[setTok, \"PARAMS\"] IDENTIFIER[setTok, \"value\"] ) ( magicThrowsException )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2265:8: ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) IDENTIFIER[setTok, \"set\"+propName] ^( PARAMS[setTok, \"PARAMS\"] IDENTIFIER[setTok, \"value\"] ) ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, type.token, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2265:58: ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, setTok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, setTok, "void"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, setTok, "set"+propName));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2265:145: ^( PARAMS[setTok, \"PARAMS\"] IDENTIFIER[setTok, \"value\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, setTok, "PARAMS"), root_2);

                	    adaptor.AddChild(root_2,  dupTree(type));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, setTok, "value"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1,  dupTree(realBody) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2265:240: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicPropSetter"

        public class magicSemi_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicSemi"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2268:1: magicSemi : -> SEMI ;
        public JavaMaker.magicSemi_return magicSemi() // throws RecognitionException [1]
        {   
            JavaMaker.magicSemi_return retval = new JavaMaker.magicSemi_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2268:10: ( -> SEMI )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2269:4: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2269:4: -> SEMI
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, "SEMI"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicSemi"

        public class magicMkPropertyVar_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMkPropertyVar"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2271:1: magicMkPropertyVar[CommonTree mods, CommonTree type, string varText] : -> ^( FIELD[$type.token, \"FIELD\"] IDENTIFIER[$type.token, varText] ) ;
        public JavaMaker.magicMkPropertyVar_return magicMkPropertyVar(CommonTree mods, CommonTree type, string varText) // throws RecognitionException [1]
        {   
            JavaMaker.magicMkPropertyVar_return retval = new JavaMaker.magicMkPropertyVar_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2271:70: ( -> ^( FIELD[$type.token, \"FIELD\"] IDENTIFIER[$type.token, varText] ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2272:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2272:2: -> ^( FIELD[$type.token, \"FIELD\"] IDENTIFIER[$type.token, varText] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2272:5: ^( FIELD[$type.token, \"FIELD\"] IDENTIFIER[$type.token, varText] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FIELD, type.token, "FIELD"), root_1);

                	    adaptor.AddChild(root_1, dupTree(mods));
                	    adaptor.AddChild(root_1,  dupTree(type) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, type.token, varText));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMkPropertyVar"

        public class magicGetterBody_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicGetterBody"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2275:1: magicGetterBody[bool isOn, IToken getTok, string varName] : -> { isOn }? OPEN_BRACE[getTok,\"{\"] ^( RETURN[getTok, \"return\"] IDENTIFIER[getTok, varName] ) CLOSE_BRACE[getTok,\"}\"] ->;
        public JavaMaker.magicGetterBody_return magicGetterBody(bool isOn, IToken getTok, string varName) // throws RecognitionException [1]
        {   
            JavaMaker.magicGetterBody_return retval = new JavaMaker.magicGetterBody_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2275:58: ( -> { isOn }? OPEN_BRACE[getTok,\"{\"] ^( RETURN[getTok, \"return\"] IDENTIFIER[getTok, varName] ) CLOSE_BRACE[getTok,\"}\"] ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2276:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2276:2: -> { isOn }? OPEN_BRACE[getTok,\"{\"] ^( RETURN[getTok, \"return\"] IDENTIFIER[getTok, varName] ) CLOSE_BRACE[getTok,\"}\"]
                	if ( isOn )
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, getTok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2276:38: ^( RETURN[getTok, \"return\"] IDENTIFIER[getTok, varName] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, getTok, "return"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, getTok, varName));

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, getTok, "}"));

                	}
                	else // 2277:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicGetterBody"

        public class magicSetterBody_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicSetterBody"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2279:1: magicSetterBody[bool isOn, IToken setTok, string varName] : -> { isOn }? OPEN_BRACE[setTok,\"{\"] IDENTIFIER[setTok, varName] ASSIGN[setTok,\"=\"] IDENTIFIER[setTok, \"value\"] SEMI[setTok, \";\"] CLOSE_BRACE[setTok,\"}\"] ->;
        public JavaMaker.magicSetterBody_return magicSetterBody(bool isOn, IToken setTok, string varName) // throws RecognitionException [1]
        {   
            JavaMaker.magicSetterBody_return retval = new JavaMaker.magicSetterBody_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2279:58: ( -> { isOn }? OPEN_BRACE[setTok,\"{\"] IDENTIFIER[setTok, varName] ASSIGN[setTok,\"=\"] IDENTIFIER[setTok, \"value\"] SEMI[setTok, \";\"] CLOSE_BRACE[setTok,\"}\"] ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2280:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2280:2: -> { isOn }? OPEN_BRACE[setTok,\"{\"] IDENTIFIER[setTok, varName] ASSIGN[setTok,\"=\"] IDENTIFIER[setTok, \"value\"] SEMI[setTok, \";\"] CLOSE_BRACE[setTok,\"}\"]
                	if ( isOn )
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, setTok, "{"));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, setTok, varName));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ASSIGN, setTok, "="));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENTIFIER, setTok, "value"));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SEMI, setTok, ";"));
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, setTok, "}"));

                	}
                	else // 2281:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicSetterBody"

        public class magicIdxGetter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicIdxGetter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2284:1: magicIdxGetter[CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, CommonTree iface, IToken getTok, CommonTree body, CommonTree idxparams] : magicThrowsException[Cfg.TranslatorBlanketThrow,getTok] -> ^( METHOD[$type.token, \"METHOD\"] ( magicThrowsException )? ) ;
        public JavaMaker.magicIdxGetter_return magicIdxGetter(CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, CommonTree iface, IToken getTok, CommonTree body, CommonTree idxparams) // throws RecognitionException [1]
        {   
            JavaMaker.magicIdxGetter_return retval = new JavaMaker.magicIdxGetter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicThrowsException_return magicThrowsException891 = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");

                CommonTree name = (CommonTree)adaptor.Nil;
                if (iface == null) {
                    name = (CommonTree)adaptor.Create(IDENTIFIER, getTok, "get___idx");
                } else {
                    adaptor.AddChild(name, dupTree(iface));
                    adaptor.AddChild(name, (CommonTree)adaptor.Create(DOT, getTok, "."));
                    adaptor.AddChild(name, (CommonTree)adaptor.Create(IDENTIFIER, getTok, "get___idx"));
                }

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2294:2: ( magicThrowsException[Cfg.TranslatorBlanketThrow,getTok] -> ^( METHOD[$type.token, \"METHOD\"] ( magicThrowsException )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2295:5: magicThrowsException[Cfg.TranslatorBlanketThrow,getTok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicIdxGetter13905);
                	magicThrowsException891 = magicThrowsException(Cfg.TranslatorBlanketThrow, getTok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(magicThrowsException891.Tree);


                	// AST REWRITE
                	// elements:          magicThrowsException
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2296:5: -> ^( METHOD[$type.token, \"METHOD\"] ( magicThrowsException )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2296:8: ^( METHOD[$type.token, \"METHOD\"] ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, type.token, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1,  dupTree(type));
                	    adaptor.AddChild(root_1,  name );
                	    adaptor.AddChild(root_1,  dupTree(idxparams) );
                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2296:125: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicIdxGetter"

        public class magicIdxSetter_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicIdxSetter"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2298:1: magicIdxSetter[CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, CommonTree iface, IToken setTok, CommonTree body, CommonTree idxparams] : magicThrowsException[Cfg.TranslatorBlanketThrow,setTok] -> ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) ( magicThrowsException )? ) ;
        public JavaMaker.magicIdxSetter_return magicIdxSetter(CommonTree atts, CommonTree localatts, CommonTree mods, CommonTree localmods, CommonTree type, CommonTree iface, IToken setTok, CommonTree body, CommonTree idxparams) // throws RecognitionException [1]
        {   
            JavaMaker.magicIdxSetter_return retval = new JavaMaker.magicIdxSetter_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicThrowsException_return magicThrowsException892 = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");

                CommonTree name = (CommonTree)adaptor.Nil;
                if (iface == null) {
                    name = (CommonTree)adaptor.Create(IDENTIFIER, setTok, "set___idx");
                } else {
                    adaptor.AddChild(name, dupTree(iface));
                    adaptor.AddChild(name, (CommonTree)adaptor.Create(DOT, setTok, "."));
                    adaptor.AddChild(name, (CommonTree)adaptor.Create(IDENTIFIER, setTok, "set___idx"));
                }
                CommonTree augParams = dupTree(idxparams);
                adaptor.AddChild(augParams, dupTree(type));
                adaptor.AddChild(augParams, (CommonTree)adaptor.Create(IDENTIFIER, setTok, "value"));

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2312:1: ( magicThrowsException[Cfg.TranslatorBlanketThrow,setTok] -> ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) ( magicThrowsException )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2313:5: magicThrowsException[Cfg.TranslatorBlanketThrow,setTok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicIdxSetter13953);
                	magicThrowsException892 = magicThrowsException(Cfg.TranslatorBlanketThrow, setTok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(magicThrowsException892.Tree);


                	// AST REWRITE
                	// elements:          magicThrowsException
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2314:5: -> ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) ( magicThrowsException )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2314:8: ^( METHOD[$type.token, \"METHOD\"] ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] ) ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, type.token, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2314:58: ^( TYPE[setTok, \"TYPE\"] IDENTIFIER[setTok, \"void\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, setTok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, setTok, "void"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1,  name );
                	    adaptor.AddChild(root_1,  augParams );
                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2314:151: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicIdxSetter"

        public class magicSmotherExceptions_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicSmotherExceptions"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2322:1: magicSmotherExceptions[CommonTree body] : magicSmotherExceptionsThrow[body, \"RuntimeException\"] ;
        public JavaMaker.magicSmotherExceptions_return magicSmotherExceptions(CommonTree body) // throws RecognitionException [1]
        {   
            JavaMaker.magicSmotherExceptions_return retval = new JavaMaker.magicSmotherExceptions_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicSmotherExceptionsThrow_return magicSmotherExceptionsThrow893 = default(JavaMaker.magicSmotherExceptionsThrow_return);



            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2322:40: ( magicSmotherExceptionsThrow[body, \"RuntimeException\"] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2323:4: magicSmotherExceptionsThrow[body, \"RuntimeException\"]
                {
                	root_0 = (CommonTree)adaptor.Nil;

                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicSmotherExceptionsThrow_in_magicSmotherExceptions14009);
                	magicSmotherExceptionsThrow893 = magicSmotherExceptionsThrow(body, "RuntimeException");
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) 
                	adaptor.AddChild(root_0, magicSmotherExceptionsThrow893.Tree);

                	if ( (state.backtracking==0) ) {
                	}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicSmotherExceptions"

        public class magicSmotherExceptionsThrow_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicSmotherExceptionsThrow"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2326:1: magicSmotherExceptionsThrow[CommonTree body, string exception] : v= magicCatchVar magicThrowableType[true, body.Token] -> OPEN_BRACE[\"{\"] ^( TRY[\"try\"] ^( CATCH[\"catch\"] ^( TYPE[body.Token, \"TYPE\"] IDENTIFIER[body.Token, \"RuntimeException\"] ) OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ) CLOSE_BRACE[\"}\"] ) ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) ) CLOSE_BRACE[\"}\"] ;
        public JavaMaker.magicSmotherExceptionsThrow_return magicSmotherExceptionsThrow(CommonTree body, string exception) // throws RecognitionException [1]
        {   
            JavaMaker.magicSmotherExceptionsThrow_return retval = new JavaMaker.magicSmotherExceptionsThrow_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicCatchVar_return v = default(JavaMaker.magicCatchVar_return);

            JavaMaker.magicThrowableType_return magicThrowableType894 = default(JavaMaker.magicThrowableType_return);


            RewriteRuleSubtreeStream stream_magicThrowableType = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowableType");
            RewriteRuleSubtreeStream stream_magicCatchVar = new RewriteRuleSubtreeStream(adaptor,"rule magicCatchVar");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2326:63: (v= magicCatchVar magicThrowableType[true, body.Token] -> OPEN_BRACE[\"{\"] ^( TRY[\"try\"] ^( CATCH[\"catch\"] ^( TYPE[body.Token, \"TYPE\"] IDENTIFIER[body.Token, \"RuntimeException\"] ) OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ) CLOSE_BRACE[\"}\"] ) ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) ) CLOSE_BRACE[\"}\"] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2327:3: v= magicCatchVar magicThrowableType[true, body.Token]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicCatchVar_in_magicSmotherExceptionsThrow14024);
                	v = magicCatchVar();
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicCatchVar.Add(v.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowableType_in_magicSmotherExceptionsThrow14026);
                	magicThrowableType894 = magicThrowableType(true, body.Token);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowableType.Add(magicThrowableType894.Tree);


                	// AST REWRITE
                	// elements:          magicThrowableType
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2328:2: -> OPEN_BRACE[\"{\"] ^( TRY[\"try\"] ^( CATCH[\"catch\"] ^( TYPE[body.Token, \"TYPE\"] IDENTIFIER[body.Token, \"RuntimeException\"] ) OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ) CLOSE_BRACE[\"}\"] ) ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) ) CLOSE_BRACE[\"}\"]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2329:8: ^( TRY[\"try\"] ^( CATCH[\"catch\"] ^( TYPE[body.Token, \"TYPE\"] IDENTIFIER[body.Token, \"RuntimeException\"] ) OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ) CLOSE_BRACE[\"}\"] ) ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY, "try"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2331:10: ^( CATCH[\"catch\"] ^( TYPE[body.Token, \"TYPE\"] IDENTIFIER[body.Token, \"RuntimeException\"] ) OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ) CLOSE_BRACE[\"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH, "catch"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2331:27: ^( TYPE[body.Token, \"TYPE\"] IDENTIFIER[body.Token, \"RuntimeException\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, body.Token, "TYPE"), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, body.Token, "RuntimeException"));

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2,  dupTree(((v != null) ? ((CommonTree)v.Tree) : null)) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2332:28: ^( THROW[\"throw\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THROW, "throw"), root_3);

                	    adaptor.AddChild(root_3,  dupTree(((v != null) ? ((CommonTree)v.Tree) : null)) );

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2333:10: ^( CATCH[\"catch\"] magicThrowableType OPEN_BRACE[\"{\"] ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) ) CLOSE_BRACE[\"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH, "catch"), root_2);

                	    adaptor.AddChild(root_2, stream_magicThrowableType.NextTree());
                	    adaptor.AddChild(root_2,  dupTree(((v != null) ? ((CommonTree)v.Tree) : null)) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2334:28: ^( THROW[\"throw\"] ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THROW, "throw"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2334:45: ^( NEW[\"new\"] ^( TYPE[\"TYPE\"] IDENTIFIER[exception] ) ^( ARGS[\"ARGS\"] ) )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, "new"), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2334:58: ^( TYPE[\"TYPE\"] IDENTIFIER[exception] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, exception));

                	    adaptor.AddChild(root_4, root_5);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2334:96: ^( ARGS[\"ARGS\"] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, "ARGS"), root_5);

                	    adaptor.AddChild(root_5,  dupTree(((v != null) ? ((CommonTree)v.Tree) : null)) );

                	    adaptor.AddChild(root_4, root_5);
                	    }

                	    adaptor.AddChild(root_3, root_4);
                	    }

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, "}"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicSmotherExceptionsThrow"

        public class magicMainArgs_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMainArgs"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2340:1: magicMainArgs[bool isOn, IToken tok] : -> { isOn }? ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"args\"] ) ->;
        public JavaMaker.magicMainArgs_return magicMainArgs(bool isOn, IToken tok) // throws RecognitionException [1]
        {   
            JavaMaker.magicMainArgs_return retval = new JavaMaker.magicMainArgs_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2340:37: ( -> { isOn }? ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"args\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2341:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2341:2: -> { isOn }? ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"args\"] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2342:7: ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"args\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "args"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2343:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMainArgs"

        public class magicMainApply_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMainApply"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2346:1: magicMainApply[bool isOn, IToken tok, string klass, CommonTree args] : -> { isOn }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,klass] IDENTIFIER[tok,\"Main\"] ) ) ->;
        public JavaMaker.magicMainApply_return magicMainApply(bool isOn, IToken tok, string klass, CommonTree args) // throws RecognitionException [1]
        {   
            JavaMaker.magicMainApply_return retval = new JavaMaker.magicMainApply_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2346:69: ( -> { isOn }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,klass] IDENTIFIER[tok,\"Main\"] ) ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2347:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2347:2: -> { isOn }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,klass] IDENTIFIER[tok,\"Main\"] ) )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2348:6: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,klass] IDENTIFIER[tok,\"Main\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2348:28: ^( DOT[tok,\".\"] IDENTIFIER[tok,klass] IDENTIFIER[tok,\"Main\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, klass));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Main"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1,  dupTree(args) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2349:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMainApply"

        public class magicMainExit_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMainExit"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2352:1: magicMainExit[bool isOn, bool retInt, IToken tok, CommonTree body] : -> { isOn && retInt }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"System\"] IDENTIFIER[tok,\"exit\"] ) ^( ARGS[tok, \"ARGS\"] ) ) -> { isOn }? ->;
        public JavaMaker.magicMainExit_return magicMainExit(bool isOn, bool retInt, IToken tok, CommonTree body) // throws RecognitionException [1]
        {   
            JavaMaker.magicMainExit_return retval = new JavaMaker.magicMainExit_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2352:67: ( -> { isOn && retInt }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"System\"] IDENTIFIER[tok,\"exit\"] ) ^( ARGS[tok, \"ARGS\"] ) ) -> { isOn }? ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2353:2: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2353:2: -> { isOn && retInt }? ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"System\"] IDENTIFIER[tok,\"exit\"] ) ^( ARGS[tok, \"ARGS\"] ) )
                	if ( isOn && retInt )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2354:6: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"System\"] IDENTIFIER[tok,\"exit\"] ) ^( ARGS[tok, \"ARGS\"] ) )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2354:28: ^( DOT[tok,\".\"] IDENTIFIER[tok,\"System\"] IDENTIFIER[tok,\"exit\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "System"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "exit"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2354:92: ^( ARGS[tok, \"ARGS\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_2);

                	    adaptor.AddChild(root_2,  dupTree(body) );

                	    adaptor.AddChild(root_1, root_2);
                	    }

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2355:2: -> { isOn }?
                	if ( isOn )
                	{
                	    adaptor.AddChild(root_0,  dupTree(body) );

                	}
                	else // 2357:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMainExit"

        public class magicMainWrapper_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMainWrapper"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2361:1: magicMainWrapper[bool isOn, IToken tok, CommonTree body] : magicThrowsException[isOn,tok] -> { isOn }? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] STATIC[tok,\"static\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"main\"] ^( PARAMS[tok, \"PARAMS\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok,\"String\"] OPEN_BRACKET[tok, \"[\"] CLOSE_BRACKET[tok, \"]\"] ) IDENTIFIER[tok, \"args\"] ) OPEN_BRACE[tok, \"{\"] SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? ) ->;
        public JavaMaker.magicMainWrapper_return magicMainWrapper(bool isOn, IToken tok, CommonTree body) // throws RecognitionException [1]
        {   
            JavaMaker.magicMainWrapper_return retval = new JavaMaker.magicMainWrapper_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicThrowsException_return magicThrowsException895 = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2361:57: ( magicThrowsException[isOn,tok] -> { isOn }? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] STATIC[tok,\"static\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"main\"] ^( PARAMS[tok, \"PARAMS\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok,\"String\"] OPEN_BRACKET[tok, \"[\"] CLOSE_BRACKET[tok, \"]\"] ) IDENTIFIER[tok, \"args\"] ) OPEN_BRACE[tok, \"{\"] SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2362:2: magicThrowsException[isOn,tok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicMainWrapper14326);
                	magicThrowsException895 = magicThrowsException(isOn, tok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(magicThrowsException895.Tree);


                	// AST REWRITE
                	// elements:          magicThrowsException
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2363:2: -> { isOn }? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] STATIC[tok,\"static\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"main\"] ^( PARAMS[tok, \"PARAMS\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok,\"String\"] OPEN_BRACKET[tok, \"[\"] CLOSE_BRACKET[tok, \"]\"] ) IDENTIFIER[tok, \"args\"] ) OPEN_BRACE[tok, \"{\"] SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2364:5: ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] STATIC[tok,\"static\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"main\"] ^( PARAMS[tok, \"PARAMS\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok,\"String\"] OPEN_BRACKET[tok, \"[\"] CLOSE_BRACKET[tok, \"]\"] ) IDENTIFIER[tok, \"args\"] ) OPEN_BRACE[tok, \"{\"] SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(STATIC, tok, "static"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2366:10: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "void"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "main"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2367:38: ^( PARAMS[tok, \"PARAMS\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok,\"String\"] OPEN_BRACKET[tok, \"[\"] CLOSE_BRACKET[tok, \"]\"] ) IDENTIFIER[tok, \"args\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, tok, "PARAMS"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2367:62: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok,\"String\"] OPEN_BRACKET[tok, \"[\"] CLOSE_BRACKET[tok, \"]\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, "String"));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(OPEN_BRACKET, tok, "["));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(CLOSE_BRACKET, tok, "]"));

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "args"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2369:7: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2370:2: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMainWrapper"

        public class magicTry_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicTry"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2373:1: magicTry[IToken tok, CommonTree body, CommonTree catches, CommonTree fin] : -> ^( TRY[tok, \"try\"] ) ;
        public JavaMaker.magicTry_return magicTry(IToken tok, CommonTree body, CommonTree catches, CommonTree fin) // throws RecognitionException [1]
        {   
            JavaMaker.magicTry_return retval = new JavaMaker.magicTry_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2373:74: ( -> ^( TRY[tok, \"try\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2374:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2374:1: -> ^( TRY[tok, \"try\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2375:4: ^( TRY[tok, \"try\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY, tok, "try"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(body) );
                	    adaptor.AddChild(root_1,  dupTree(catches) );
                	    adaptor.AddChild(root_1,  dupTree(fin) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicTry"

        public class magicDispose_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicDispose"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2378:1: magicDispose[IToken tok, string var, string disposeMethod] : -> ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok, var] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] ) ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] ) ) IDENTIFIER[tok, disposeMethod] ) ) SEMI[tok, \";\"] ) ;
        public JavaMaker.magicDispose_return magicDispose(IToken tok, string var, string disposeMethod) // throws RecognitionException [1]
        {   
            JavaMaker.magicDispose_return retval = new JavaMaker.magicDispose_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2378:59: ( -> ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok, var] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] ) ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] ) ) IDENTIFIER[tok, disposeMethod] ) ) SEMI[tok, \";\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2379:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2379:1: -> ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok, var] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] ) ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] ) ) IDENTIFIER[tok, disposeMethod] ) ) SEMI[tok, \";\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2379:4: ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok, var] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] ) ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] ) ) IDENTIFIER[tok, disposeMethod] ) ) SEMI[tok, \";\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF, tok, "if"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2379:20: ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok, var] NULL[tok, \"null\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_EQUAL, tok, "!="), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, var));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(NULL, tok, "null"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2380:10: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] ) ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] ) ) IDENTIFIER[tok, disposeMethod] ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2380:32: ^( DOT[tok,\".\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] ) ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] ) ) IDENTIFIER[tok, disposeMethod] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2380:47: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] ) ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] ) )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2380:69: ^( DOT[tok, \".\"] IDENTIFIER[tok, \"Disposable\"] IDENTIFIER[tok, \"mkDisposable\"] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Disposable"));
                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "mkDisposable"));

                	    adaptor.AddChild(root_4, root_5);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2380:148: ^( ARGS[tok,\"ARGS\"] IDENTIFIER[tok, var] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, var));

                	    adaptor.AddChild(root_4, root_5);
                	    }

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, disposeMethod));

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicDispose"

        public class magicFinally_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicFinally"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2383:1: magicFinally[IToken tok, CommonTree statement_list] : -> ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) ;
        public JavaMaker.magicFinally_return magicFinally(IToken tok, CommonTree statement_list) // throws RecognitionException [1]
        {   
            JavaMaker.magicFinally_return retval = new JavaMaker.magicFinally_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2383:52: ( -> ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2384:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2384:1: -> ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2385:4: ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FINALLY, tok, "finally"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_1,  dupTree(statement_list) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicFinally"

        public class magicFinalize_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicFinalize"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2388:1: magicFinalize[IToken tok, CommonTree body] : magicThrowsException[Cfg.TranslatorBlanketThrow,tok] -> ^( METHOD[tok, \"METHOD\"] PROTECTED[tok, \"protected\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"finalize\"] OPEN_BRACE[tok, \"{\"] ^( TRY[tok, \"try\"] ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ) CLOSE_BRACE[tok, \"}\"] EXCEPTION[tok, \"Throwable\"] ) ;
        public JavaMaker.magicFinalize_return magicFinalize(IToken tok, CommonTree body) // throws RecognitionException [1]
        {   
            JavaMaker.magicFinalize_return retval = new JavaMaker.magicFinalize_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicThrowsException_return magicThrowsException896 = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2388:43: ( magicThrowsException[Cfg.TranslatorBlanketThrow,tok] -> ^( METHOD[tok, \"METHOD\"] PROTECTED[tok, \"protected\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"finalize\"] OPEN_BRACE[tok, \"{\"] ^( TRY[tok, \"try\"] ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ) CLOSE_BRACE[tok, \"}\"] EXCEPTION[tok, \"Throwable\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2389:2: magicThrowsException[Cfg.TranslatorBlanketThrow,tok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicFinalize14588);
                	magicThrowsException896 = magicThrowsException(Cfg.TranslatorBlanketThrow, tok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(magicThrowsException896.Tree);


                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2390:1: -> ^( METHOD[tok, \"METHOD\"] PROTECTED[tok, \"protected\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"finalize\"] OPEN_BRACE[tok, \"{\"] ^( TRY[tok, \"try\"] ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ) CLOSE_BRACE[tok, \"}\"] EXCEPTION[tok, \"Throwable\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2391:5: ^( METHOD[tok, \"METHOD\"] PROTECTED[tok, \"protected\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] ) IDENTIFIER[tok, \"finalize\"] OPEN_BRACE[tok, \"{\"] ^( TRY[tok, \"try\"] ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ) CLOSE_BRACE[tok, \"}\"] EXCEPTION[tok, \"Throwable\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PROTECTED, tok, "protected"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2393:10: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"void\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "void"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "finalize"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2395:21: ^( TRY[tok, \"try\"] ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY, tok, "try"), root_2);

                	    adaptor.AddChild(root_2,  dupTree(body) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2396:26: ^( FINALLY[tok, \"finally\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FINALLY, tok, "finally"), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2396:73: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] ) )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2396:95: ^( DOT[tok,\".\"] SUPER[tok,\"super\"] IDENTIFIER[tok,\"finalize\"] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(SUPER, tok, "super"));
                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "finalize"));

                	    adaptor.AddChild(root_4, root_5);
                	    }

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(EXCEPTION, tok, "Throwable"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicFinalize"

        public class magicDefaultConstructor_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicDefaultConstructor"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2402:1: magicDefaultConstructor[IToken tok, string name] : -> ^( CONSTRUCTOR[tok, \"CONSTRUCTOR\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) ;
        public JavaMaker.magicDefaultConstructor_return magicDefaultConstructor(IToken tok, string name) // throws RecognitionException [1]
        {   
            JavaMaker.magicDefaultConstructor_return retval = new JavaMaker.magicDefaultConstructor_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2402:49: ( -> ^( CONSTRUCTOR[tok, \"CONSTRUCTOR\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2403:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2403:1: -> ^( CONSTRUCTOR[tok, \"CONSTRUCTOR\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2404:5: ^( CONSTRUCTOR[tok, \"CONSTRUCTOR\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok, name] OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONSTRUCTOR, tok, "CONSTRUCTOR"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, name));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicDefaultConstructor"

        public class magicThrowsException_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicThrowsException"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2412:1: magicThrowsException[bool isOn, IToken tok] : -> {isOn}? EXCEPTION[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ->;
        public JavaMaker.magicThrowsException_return magicThrowsException(bool isOn, IToken tok) // throws RecognitionException [1]
        {   
            JavaMaker.magicThrowsException_return retval = new JavaMaker.magicThrowsException_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2412:44: ( -> {isOn}? EXCEPTION[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"] ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2413:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2413:1: -> {isOn}? EXCEPTION[tok, Cfg.TranslatorExceptionIsThrowable ? \"Throwable\" : \"Exception\"]
                	if (isOn)
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(EXCEPTION, tok, Cfg.TranslatorExceptionIsThrowable ? "Throwable" : "Exception"));

                	}
                	else // 2414:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicThrowsException"

        public class magicDelegateInterface_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicDelegateInterface"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2417:1: magicDelegateInterface[IToken tok, CommonTree return_type, CommonTree identifier, CommonTree formal_parameter_list, List<String> tyArgs] : e1= magicThrowsException[Cfg.TranslatorBlanketThrow, tok] e2= magicThrowsException[Cfg.TranslatorBlanketThrow, tok] -> OPEN_BRACE[tok, \"{\"] ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok,\"Invoke\"] ( $e1)? ) ^( METHOD[tok, \"METHOD\"] ^( TYPE ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] ) IDENTIFIER[tok, \"Generic\"] ) IDENTIFIER[tok, \"IList\"] LTHAN[tok,\"<\"] ^( TYPE ) GT[tok,\">\"] ) ) IDENTIFIER[tok,\"GetInvocationList\"] ( $e2)? ) CLOSE_BRACE[tok, \"}\"] ;
        public JavaMaker.magicDelegateInterface_return magicDelegateInterface(IToken tok, CommonTree return_type, CommonTree identifier, CommonTree formal_parameter_list, List<String> tyArgs) // throws RecognitionException [1]
        {   
            JavaMaker.magicDelegateInterface_return retval = new JavaMaker.magicDelegateInterface_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicThrowsException_return e1 = default(JavaMaker.magicThrowsException_return);

            JavaMaker.magicThrowsException_return e2 = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");

                AddToImports("java.util.List");

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2420:2: (e1= magicThrowsException[Cfg.TranslatorBlanketThrow, tok] e2= magicThrowsException[Cfg.TranslatorBlanketThrow, tok] -> OPEN_BRACE[tok, \"{\"] ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok,\"Invoke\"] ( $e1)? ) ^( METHOD[tok, \"METHOD\"] ^( TYPE ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] ) IDENTIFIER[tok, \"Generic\"] ) IDENTIFIER[tok, \"IList\"] LTHAN[tok,\"<\"] ^( TYPE ) GT[tok,\">\"] ) ) IDENTIFIER[tok,\"GetInvocationList\"] ( $e2)? ) CLOSE_BRACE[tok, \"}\"] )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2421:2: e1= magicThrowsException[Cfg.TranslatorBlanketThrow, tok] e2= magicThrowsException[Cfg.TranslatorBlanketThrow, tok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicDelegateInterface14887);
                	e1 = magicThrowsException(Cfg.TranslatorBlanketThrow, tok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(e1.Tree);
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicDelegateInterface14894);
                	e2 = magicThrowsException(Cfg.TranslatorBlanketThrow, tok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(e2.Tree);


                	// AST REWRITE
                	// elements:          e1, e2
                	// token labels:      
                	// rule labels:       retval, e1, e2
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);
                	RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(adaptor, "rule e1", e1!=null ? e1.Tree : null);
                	RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(adaptor, "rule e2", e2!=null ? e2.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2423:1: -> OPEN_BRACE[tok, \"{\"] ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok,\"Invoke\"] ( $e1)? ) ^( METHOD[tok, \"METHOD\"] ^( TYPE ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] ) IDENTIFIER[tok, \"Generic\"] ) IDENTIFIER[tok, \"IList\"] LTHAN[tok,\"<\"] ^( TYPE ) GT[tok,\">\"] ) ) IDENTIFIER[tok,\"GetInvocationList\"] ( $e2)? ) CLOSE_BRACE[tok, \"}\"]
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2424:10: ^( METHOD[tok, \"METHOD\"] IDENTIFIER[tok,\"Invoke\"] ( $e1)? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(return_type) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Invoke"));
                	    adaptor.AddChild(root_1,  dupTree(formal_parameter_list) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2424:119: ( $e1)?
                	    if ( stream_e1.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_e1.NextTree());

                	    }
                	    stream_e1.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2425:10: ^( METHOD[tok, \"METHOD\"] ^( TYPE ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] ) IDENTIFIER[tok, \"Generic\"] ) IDENTIFIER[tok, \"IList\"] LTHAN[tok,\"<\"] ^( TYPE ) GT[tok,\">\"] ) ) IDENTIFIER[tok,\"GetInvocationList\"] ( $e2)? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2425:34: ^( TYPE ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] ) IDENTIFIER[tok, \"Generic\"] ) IDENTIFIER[tok, \"IList\"] LTHAN[tok,\"<\"] ^( TYPE ) GT[tok,\">\"] ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2425:41: ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] ) IDENTIFIER[tok, \"Generic\"] ) IDENTIFIER[tok, \"IList\"] LTHAN[tok,\"<\"] ^( TYPE ) GT[tok,\">\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2425:57: ^( DOT[tok, \".\"] ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] ) IDENTIFIER[tok, \"Generic\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2425:73: ^( DOT[tok, \".\"] IDENTIFIER[tok, \"System\"] IDENTIFIER[tok, \"Collections\"] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "System"));
                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Collections"));

                	    adaptor.AddChild(root_4, root_5);
                	    }
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Generic"));

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, "IList"));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2425:217: ^( TYPE )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_4);

                	    adaptor.AddChild(root_4,  dupTree( identifier) );
                	    adaptor.AddChild(root_4,  mkGenericArgs(tok, tyArgs) );

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "GetInvocationList"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2425:331: ( $e2)?
                	    if ( stream_e2.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_e2.NextTree());

                	    }
                	    stream_e2.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicDelegateInterface"

        public class magicMultiInvokerMethod_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMultiInvokerMethod"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2439:1: magicMultiInvokerMethod[IToken tok, CommonTree return_type, bool retIsVoid, CommonTree type, CommonTree formal_parameter_list, CommonTree argument_list, List<String> tyArgs] : e1= magicThrowsException[Cfg.TranslatorBlanketThrow, tok] -> {retIsVoid}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"d\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? ) -> ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] NULL[tok, \"null\"] SEMI[tok,\";\"] ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok,\"prev\"] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] IDENTIFIER[tok, \"d\"] SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ^( RETURN[tok, \"return\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? ) ;
        public JavaMaker.magicMultiInvokerMethod_return magicMultiInvokerMethod(IToken tok, CommonTree return_type, bool retIsVoid, CommonTree type, CommonTree formal_parameter_list, CommonTree argument_list, List<String> tyArgs) // throws RecognitionException [1]
        {   
            JavaMaker.magicMultiInvokerMethod_return retval = new JavaMaker.magicMultiInvokerMethod_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            JavaMaker.magicThrowsException_return e1 = default(JavaMaker.magicThrowsException_return);


            RewriteRuleSubtreeStream stream_magicThrowsException = new RewriteRuleSubtreeStream(adaptor,"rule magicThrowsException");
            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2440:1: (e1= magicThrowsException[Cfg.TranslatorBlanketThrow, tok] -> {retIsVoid}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"d\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? ) -> ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] NULL[tok, \"null\"] SEMI[tok,\";\"] ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok,\"prev\"] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] IDENTIFIER[tok, \"d\"] SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ^( RETURN[tok, \"return\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2441:2: e1= magicThrowsException[Cfg.TranslatorBlanketThrow, tok]
                {
                	_last = (CommonTree)input.LT(1);
                	PushFollow(FOLLOW_magicThrowsException_in_magicMultiInvokerMethod15024);
                	e1 = magicThrowsException(Cfg.TranslatorBlanketThrow, tok);
                	state._fsp--;
                	if (state.failed) return retval;
                	if ( (state.backtracking==0) ) stream_magicThrowsException.Add(e1.Tree);


                	// AST REWRITE
                	// elements:          magicThrowsException, magicThrowsException
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2442:1: -> {retIsVoid}? ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"d\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? )
                	if (retIsVoid)
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2443:4: ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"d\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));
                	    adaptor.AddChild(root_1,  dupTree(return_type) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Invoke"));
                	    adaptor.AddChild(root_1,  dupTree(formal_parameter_list) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2445:12: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "IList"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_2,  dupTree(type) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "copy"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(COMMA, tok, ","));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "members"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2445:191: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2445:213: ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(THIS, tok, "this"));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("GetInvocationList")));

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2446:12: ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SYNCHRONIZED, tok, "synchronized"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "members"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "copy"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2447:58: ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "new"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2447:76: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "LinkedList"));
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_4,  dupTree(type) );
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2447:175: ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "members"));

                	    adaptor.AddChild(root_3, root_4);
                	    }

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2450:12: ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"d\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOREACH, tok, "foreach"), root_2);

                	    adaptor.AddChild(root_2,  type );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "d"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "copy"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEP, tok, "SEP"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2454:19: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"d\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2454:41: ^( DOT[tok,\".\"] IDENTIFIER[tok,\"d\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "d"));
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("Invoke")));

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3,  argument_list );

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2458:7: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2460:1: -> ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] NULL[tok, \"null\"] SEMI[tok,\";\"] ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok,\"prev\"] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] IDENTIFIER[tok, \"d\"] SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ^( RETURN[tok, \"return\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2460:4: ^( METHOD[tok, \"METHOD\"] PUBLIC[tok, \"public\"] IDENTIFIER[tok,\"Invoke\"] OPEN_BRACE[tok, \"{\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) IDENTIFIER[tok, \"copy\"] COMMA[tok, \",\"] IDENTIFIER[tok, \"members\"] ASSIGN[tok, \"=\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) ) SEMI[tok, \";\"] ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] NULL[tok, \"null\"] SEMI[tok,\";\"] ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok,\"prev\"] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] IDENTIFIER[tok, \"d\"] SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] ) ^( RETURN[tok, \"return\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) ) CLOSE_BRACE[tok, \"}\"] ( magicThrowsException )? )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD, tok, "METHOD"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PUBLIC, tok, "public"));
                	    adaptor.AddChild(root_1,  dupTree(return_type) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "Invoke"));
                	    adaptor.AddChild(root_1,  dupTree(formal_parameter_list) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2462:12: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"IList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "IList"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_2,  dupTree(type) );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "copy"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(COMMA, tok, ","));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "members"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2462:191: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2462:213: ^( DOT[tok,\".\"] THIS[tok,\"this\"] IDENTIFIER[tok,rewriteMethodName(\"GetInvocationList\")] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_3);

                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(THIS, tok, "this"));
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("GetInvocationList")));

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2463:12: ^( SYNCHRONIZED[tok, \"synchronized\"] IDENTIFIER[tok, \"members\"] OPEN_BRACE[tok, \"{\"] IDENTIFIER[tok, \"copy\"] ASSIGN[tok, \"=\"] ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) ) SEMI[tok, \";\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SYNCHRONIZED, tok, "synchronized"), root_2);

                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "members"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "copy"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2464:58: ^( NEW[tok, \"new\"] ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] ) ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NEW, tok, "new"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2464:76: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, \"LinkedList\"] LTHAN[tok, \"<\"] GT[tok, \">\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "LinkedList"));
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(LTHAN, tok, "<"));
                	    adaptor.AddChild(root_4,  dupTree(type) );
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(GT, tok, ">"));

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2464:175: ^( ARGS[tok, \"ARGS\"] IDENTIFIER[tok, \"members\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, tok, "ARGS"), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "members"));

                	    adaptor.AddChild(root_3, root_4);
                	    }

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1,  type );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, "prev"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(NULL, tok, "null"));
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2468:12: ^( FOREACH[tok, \"foreach\"] IDENTIFIER[tok, \"d\"] IDENTIFIER[tok, \"copy\"] SEP[tok, \"SEP\"] OPEN_BRACE[tok, \"{\"] ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok,\"prev\"] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] ) IDENTIFIER[tok, \"prev\"] ASSIGN[tok, \"=\"] IDENTIFIER[tok, \"d\"] SEMI[tok,\";\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOREACH, tok, "foreach"), root_2);

                	    adaptor.AddChild(root_2,  type );
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "d"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "copy"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEP, tok, "SEP"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2472:19: ^( IF[tok, \"if\"] ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok,\"prev\"] NULL[tok, \"null\"] ) SEP ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) SEMI[tok, \";\"] )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF, tok, "if"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2472:35: ^( NOT_EQUAL[tok, \"!=\"] IDENTIFIER[tok,\"prev\"] NULL[tok, \"null\"] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_EQUAL, tok, "!="), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "prev"));
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(NULL, tok, "null"));

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(SEP, "SEP"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2472:104: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_4);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2472:126: ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] )
                	    {
                	    CommonTree root_5 = (CommonTree)adaptor.Nil;
                	    root_5 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_5);

                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, "prev"));
                	    adaptor.AddChild(root_5, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("Invoke")));

                	    adaptor.AddChild(root_4, root_5);
                	    }
                	    adaptor.AddChild(root_4,  argument_list );

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3, (CommonTree)adaptor.Create(SEMI, tok, ";"));

                	    adaptor.AddChild(root_2, root_3);
                	    }
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "prev"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(ASSIGN, tok, "="));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(IDENTIFIER, tok, "d"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SEMI, tok, ";"));
                	    adaptor.AddChild(root_2, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2476:10: ^( RETURN[tok, \"return\"] ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) ) )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, tok, "return"), root_2);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2476:34: ^( APPLY[tok, \"APPLY\"] ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] ) )
                	    {
                	    CommonTree root_3 = (CommonTree)adaptor.Nil;
                	    root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPLY, tok, "APPLY"), root_3);

                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2476:56: ^( DOT[tok,\".\"] IDENTIFIER[tok,\"prev\"] IDENTIFIER[tok,rewriteMethodName(\"Invoke\")] )
                	    {
                	    CommonTree root_4 = (CommonTree)adaptor.Nil;
                	    root_4 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DOT, tok, "."), root_4);

                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, "prev"));
                	    adaptor.AddChild(root_4, (CommonTree)adaptor.Create(IDENTIFIER, tok, rewriteMethodName("Invoke")));

                	    adaptor.AddChild(root_3, root_4);
                	    }
                	    adaptor.AddChild(root_3,  argument_list );

                	    adaptor.AddChild(root_2, root_3);
                	    }

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2478:7: ( magicThrowsException )?
                	    if ( stream_magicThrowsException.HasNext )
                	    {
                	        adaptor.AddChild(root_1, stream_magicThrowsException.NextTree());

                	    }
                	    stream_magicThrowsException.Reset();

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMultiInvokerMethod"

        public class magicPackage_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicPackage"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2482:1: magicPackage[IToken tok, CommonTree cu, String ns] : -> { $cu != null }? ^( PACKAGE[tok, \"package\"] PAYLOAD[tok, ns] ) ->;
        public JavaMaker.magicPackage_return magicPackage(IToken tok, CommonTree cu, String ns) // throws RecognitionException [1]
        {   
            JavaMaker.magicPackage_return retval = new JavaMaker.magicPackage_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2482:51: ( -> { $cu != null }? ^( PACKAGE[tok, \"package\"] PAYLOAD[tok, ns] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2483:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2483:1: -> { $cu != null }? ^( PACKAGE[tok, \"package\"] PAYLOAD[tok, ns] )
                	if ( cu != null )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2483:21: ^( PACKAGE[tok, \"package\"] PAYLOAD[tok, ns] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PACKAGE, tok, "package"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(PAYLOAD, tok, ns));
                	    adaptor.AddChild(root_1,  dupTree(cu) );

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2484:1: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicPackage"

        public class magicMultiDelClass_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicMultiDelClass"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2487:1: magicMultiDelClass[IToken tok, CommonTree atts, CommonTree mods, string className, CommonTree delIface, CommonTree paramConstraints, CommonTree tyParamList, CommonTree invokeMethod, CommonTree members] : -> ^( CLASS[tok, \"class\"] IDENTIFIER[tok, className] ^( IMPLEMENTS[tok, \"implements\"] ) OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) ;
        public JavaMaker.magicMultiDelClass_return magicMultiDelClass(IToken tok, CommonTree atts, CommonTree mods, string className, CommonTree delIface, CommonTree paramConstraints, CommonTree tyParamList, CommonTree invokeMethod, CommonTree members) // throws RecognitionException [1]
        {   
            JavaMaker.magicMultiDelClass_return retval = new JavaMaker.magicMultiDelClass_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2487:202: ( -> ^( CLASS[tok, \"class\"] IDENTIFIER[tok, className] ^( IMPLEMENTS[tok, \"implements\"] ) OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] ) )
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2488:1: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2488:1: -> ^( CLASS[tok, \"class\"] IDENTIFIER[tok, className] ^( IMPLEMENTS[tok, \"implements\"] ) OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2488:7: ^( CLASS[tok, \"class\"] IDENTIFIER[tok, className] ^( IMPLEMENTS[tok, \"implements\"] ) OPEN_BRACE[tok, \"{\"] CLOSE_BRACE[tok, \"}\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS, tok, "class"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(atts) );
                	    adaptor.AddChild(root_1,  dupTree(mods) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, className));
                	    adaptor.AddChild(root_1,  dupTree(paramConstraints) );
                	    adaptor.AddChild(root_1,  dupTree(tyParamList) );
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2488:151: ^( IMPLEMENTS[tok, \"implements\"] )
                	    {
                	    CommonTree root_2 = (CommonTree)adaptor.Nil;
                	    root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPLEMENTS, tok, "implements"), root_2);

                	    adaptor.AddChild(root_2,  dupTree(delIface) );

                	    adaptor.AddChild(root_1, root_2);
                	    }
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(OPEN_BRACE, tok, "{"));
                	    adaptor.AddChild(root_1, dupTree(invokeMethod));
                	    adaptor.AddChild(root_1,  dupTree(members) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CLOSE_BRACE, tok, "}"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicMultiDelClass"

        public class magicBoxedType_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicBoxedType"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2495:1: magicBoxedType[bool isOn, IToken tok, String boxedName] : -> { isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] ) ->;
        public JavaMaker.magicBoxedType_return magicBoxedType(bool isOn, IToken tok, String boxedName) // throws RecognitionException [1]
        {   
            JavaMaker.magicBoxedType_return retval = new JavaMaker.magicBoxedType_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2495:56: ( -> { isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2496:5: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2496:5: -> { isOn }? ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2496:18: ^( TYPE[tok, \"TYPE\"] IDENTIFIER[tok, boxedName] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, tok, "TYPE"), root_1);

                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENTIFIER, tok, boxedName));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2497:5: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicBoxedType"

        public class magicNumber_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicNumber"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2500:1: magicNumber[bool isOn, IToken tok, string number] : -> { isOn }? NUMBER[tok, number] ->;
        public JavaMaker.magicNumber_return magicNumber(bool isOn, IToken tok, string number) // throws RecognitionException [1]
        {   
            JavaMaker.magicNumber_return retval = new JavaMaker.magicNumber_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2500:50: ( -> { isOn }? NUMBER[tok, number] ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2501:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2501:3: -> { isOn }? NUMBER[tok, number]
                	if ( isOn )
                	{
                	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(NUMBER, tok, number));

                	}
                	else // 2502:3: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicNumber"

        public class magicIncrement_return : TreeRuleReturnScope
        {
            internal CommonTree tree;
            public override object Tree { get { return tree; } }
        };

        // $ANTLR start "magicIncrement"
        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2505:1: magicIncrement[bool isOn, IToken tok, CommonTree prevExpr] : -> { isOn }? ^( PLUS[tok, \"+\"] NUMBER[tok, \"1\"] ) ->;
        public JavaMaker.magicIncrement_return magicIncrement(bool isOn, IToken tok, CommonTree prevExpr) // throws RecognitionException [1]
        {   
            JavaMaker.magicIncrement_return retval = new JavaMaker.magicIncrement_return();
            retval.start = input.LT(1);

            CommonTree root_0 = null;

            CommonTree _first_0 = null;
            CommonTree _last = null;

            try 
        	{
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2505:59: ( -> { isOn }? ^( PLUS[tok, \"+\"] NUMBER[tok, \"1\"] ) ->)
                // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2506:3: 
                {

                	// AST REWRITE
                	// elements:          
                	// token labels:      
                	// rule labels:       retval
                	// token list labels: 
                	// rule list labels:  
                	// wildcard labels: 
                	if ( (state.backtracking==0) ) {
                	retval.tree = root_0;
                	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                	root_0 = (CommonTree)adaptor.Nil;
                	// 2506:3: -> { isOn }? ^( PLUS[tok, \"+\"] NUMBER[tok, \"1\"] )
                	if ( isOn )
                	{
                	    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2506:16: ^( PLUS[tok, \"+\"] NUMBER[tok, \"1\"] )
                	    {
                	    CommonTree root_1 = (CommonTree)adaptor.Nil;
                	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PLUS, tok, "+"), root_1);

                	    adaptor.AddChild(root_1,  dupTree(prevExpr) );
                	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(NUMBER, tok, "1"));

                	    adaptor.AddChild(root_0, root_1);
                	    }

                	}
                	else // 2507:3: ->
                	{
                	    root_0 = null;
                	}

                	retval.tree = root_0;}
                }

                if ( (state.backtracking==0) )
                {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                }
            }
            catch (RecognitionException re) 
        	{
                ReportError(re);
                Recover(input,re);
            }
            finally 
        	{
            }
            return retval;
        }
        // $ANTLR end "magicIncrement"

        // $ANTLR start "synpred1_JavaMaker"
        public void synpred1_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:751:5: ( 'partial' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:751:6: 'partial'
            {
            	Match(input,196,FOLLOW_196_in_synpred1_JavaMaker400); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred1_JavaMaker"

        // $ANTLR start "synpred2_JavaMaker"
        public void synpred2_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:791:13: ( member_name ( type_parameter_list )? '(' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:791:14: member_name ( type_parameter_list )? '('
            {
            	PushFollow(FOLLOW_member_name_in_synpred2_JavaMaker1166);
            	member_name();
            	state._fsp--;
            	if (state.failed) return ;
            	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:791:27: ( type_parameter_list )?
            	int alt299 = 2;
            	int LA299_0 = input.LA(1);

            	if ( (LA299_0 == LTHAN) )
            	{
            	    alt299 = 1;
            	}
            	switch (alt299) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:791:27: type_parameter_list
            	        {
            	        	PushFollow(FOLLOW_type_parameter_list_in_synpred2_JavaMaker1169);
            	        	type_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}

            	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred2_JavaMaker1172); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred2_JavaMaker"

        // $ANTLR start "synpred3_JavaMaker"
        public void synpred3_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:792:8: ( member_name '{' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:792:9: member_name '{'
            {
            	PushFollow(FOLLOW_member_name_in_synpred3_JavaMaker1195);
            	member_name();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred3_JavaMaker1199); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred3_JavaMaker"

        // $ANTLR start "synpred4_JavaMaker"
        public void synpred4_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:793:8: ( type_name '.' 'this' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:793:9: type_name '.' 'this'
            {
            	PushFollow(FOLLOW_type_name_in_synpred4_JavaMaker1222);
            	type_name();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,DOT,FOLLOW_DOT_in_synpred4_JavaMaker1226); if (state.failed) return ;
            	Match(input,THIS,FOLLOW_THIS_in_synpred4_JavaMaker1230); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred4_JavaMaker"

        // $ANTLR start "synpred5_JavaMaker"
        public void synpred5_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:2: ( 'this' brackets[null] )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:811:3: 'this' brackets[null]
            {
            	Match(input,THIS,FOLLOW_THIS_in_synpred5_JavaMaker1466); if (state.failed) return ;
            	PushFollow(FOLLOW_brackets_in_synpred5_JavaMaker1471);
            	brackets(null);
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred5_JavaMaker"

        // $ANTLR start "synpred6_JavaMaker"
        public void synpred6_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:4: ( 'base' brackets[null] )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:812:5: 'base' brackets[null]
            {
            	Match(input,207,FOLLOW_207_in_synpred6_JavaMaker1519); if (state.failed) return ;
            	PushFollow(FOLLOW_brackets_in_synpred6_JavaMaker1523);
            	brackets(null);
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred6_JavaMaker"

        // $ANTLR start "synpred7_JavaMaker"
        public void synpred7_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:815:14: ( object_creation_expression ( '.' | '->' | '[' ) )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:815:15: object_creation_expression ( '.' | '->' | '[' )
            {
            	PushFollow(FOLLOW_object_creation_expression_in_synpred7_JavaMaker1605);
            	object_creation_expression();
            	state._fsp--;
            	if (state.failed) return ;
            	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }
        }
        // $ANTLR end "synpred7_JavaMaker"

        // $ANTLR start "synpred8_JavaMaker"
        public void synpred8_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:817:7: ( object_creation_expression )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:817:8: object_creation_expression
            {
            	PushFollow(FOLLOW_object_creation_expression_in_synpred8_JavaMaker1663);
            	object_creation_expression();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred8_JavaMaker"

        // $ANTLR start "synpred9_JavaMaker"
        public void synpred9_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:829:4: ( identifier generic_argument_list )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:829:5: identifier generic_argument_list
            {
            	PushFollow(FOLLOW_identifier_in_synpred9_JavaMaker1793);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	PushFollow(FOLLOW_generic_argument_list_in_synpred9_JavaMaker1798);
            	generic_argument_list();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred9_JavaMaker"

        // $ANTLR start "synpred10_JavaMaker"
        public void synpred10_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:870:4: ( '(' type ')' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:870:5: '(' type ')'
            {
            	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred10_JavaMaker2172); if (state.failed) return ;
            	PushFollow(FOLLOW_type_in_synpred10_JavaMaker2176);
            	type();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred10_JavaMaker2180); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred10_JavaMaker"

        // $ANTLR start "synpred11_JavaMaker"
        public void synpred11_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:903:2: ( array_creation_expression )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:903:3: array_creation_expression
            {
            	PushFollow(FOLLOW_array_creation_expression_in_synpred11_JavaMaker2477);
            	array_creation_expression();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred11_JavaMaker"

        // $ANTLR start "synpred12_JavaMaker"
        public void synpred12_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:939:11: ( arguments[null] ( '[' | '.' | '->' ) )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:939:12: arguments[null] ( '[' | '.' | '->' )
            {
            	PushFollow(FOLLOW_arguments_in_synpred12_JavaMaker2630);
            	arguments(null);
            	state._fsp--;
            	if (state.failed) return ;
            	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }
        }
        // $ANTLR end "synpred12_JavaMaker"

        // $ANTLR start "synpred13_JavaMaker"
        public void synpred13_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:948:18: ( arguments[null] ( '[' | '.' | '->' ) )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:948:19: arguments[null] ( '[' | '.' | '->' )
            {
            	PushFollow(FOLLOW_arguments_in_synpred13_JavaMaker2800);
            	arguments(null);
            	state._fsp--;
            	if (state.failed) return ;
            	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }
        }
        // $ANTLR end "synpred13_JavaMaker"

        // $ANTLR start "synpred14_JavaMaker"
        public void synpred14_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1017:22: ( unbound_type_name )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1017:23: unbound_type_name
            {
            	PushFollow(FOLLOW_unbound_type_name_in_synpred14_JavaMaker3370);
            	unbound_type_name();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred14_JavaMaker"

        // $ANTLR start "synpred15_JavaMaker"
        public void synpred15_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1027:5: ( generic_dimension_specifier '.' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1027:6: generic_dimension_specifier '.'
            {
            	PushFollow(FOLLOW_generic_dimension_specifier_in_synpred15_JavaMaker3429);
            	generic_dimension_specifier();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,DOT,FOLLOW_DOT_in_synpred15_JavaMaker3433); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred15_JavaMaker"

        // $ANTLR start "synpred16_JavaMaker"
        public void synpred16_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1056:2: ( identifier generic_argument_list )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1056:3: identifier generic_argument_list
            {
            	PushFollow(FOLLOW_identifier_in_synpred16_JavaMaker3602);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	PushFollow(FOLLOW_generic_argument_list_in_synpred16_JavaMaker3606);
            	generic_argument_list();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred16_JavaMaker"

        // $ANTLR start "synpred17_JavaMaker"
        public void synpred17_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1065:4: ( identifier generic_argument_list )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1065:5: identifier generic_argument_list
            {
            	PushFollow(FOLLOW_identifier_in_synpred17_JavaMaker3690);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	PushFollow(FOLLOW_generic_argument_list_in_synpred17_JavaMaker3695);
            	generic_argument_list();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred17_JavaMaker"

        // $ANTLR start "synpred18_JavaMaker"
        public void synpred18_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1094:7: ( '?' 'extends' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1094:8: '?' 'extends'
            {
            	Match(input,220,FOLLOW_220_in_synpred18_JavaMaker3870); if (state.failed) return ;
            	Match(input,221,FOLLOW_221_in_synpred18_JavaMaker3872); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred18_JavaMaker"

        // $ANTLR start "synpred19_JavaMaker"
        public void synpred19_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:10: ( ( predefined_type | type_name ) rank_specifiers )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:11: ( predefined_type | type_name ) rank_specifiers
            {
            	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:11: ( predefined_type | type_name )
            	int alt300 = 2;
            	int LA300_0 = input.LA(1);

            	if ( (LA300_0 == OBJECT || (LA300_0 >= BOOL && LA300_0 <= DOUBLE) || (LA300_0 >= 251 && LA300_0 <= 254) || (LA300_0 >= 275 && LA300_0 <= 276)) )
            	{
            	    alt300 = 1;
            	}
            	else if ( (LA300_0 == IDENTIFIER || (LA300_0 >= ELIF && LA300_0 <= UNDEF) || LA300_0 == 195 || LA300_0 == 221 || (LA300_0 >= 224 && LA300_0 <= 239) || (LA300_0 >= 241 && LA300_0 <= 244) || (LA300_0 >= 247 && LA300_0 <= 250) || LA300_0 == 256 || (LA300_0 >= 263 && LA300_0 <= 264) || LA300_0 == 274 || LA300_0 == 277) )
            	{
            	    alt300 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    NoViableAltException nvae_d300s0 =
            	        new NoViableAltException("", 300, 0, input);

            	    throw nvae_d300s0;
            	}
            	switch (alt300) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:12: predefined_type
            	        {
            	        	PushFollow(FOLLOW_predefined_type_in_synpred19_JavaMaker3925);
            	        	predefined_type();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;
            	    case 2 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1100:30: type_name
            	        {
            	        	PushFollow(FOLLOW_type_name_in_synpred19_JavaMaker3929);
            	        	type_name();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_rank_specifiers_in_synpred19_JavaMaker3933);
            	rank_specifiers();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred19_JavaMaker"

        // $ANTLR start "synpred20_JavaMaker"
        public void synpred20_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:10: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:11: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
            {
            	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:11: ( predefined_type | type_name )
            	int alt301 = 2;
            	int LA301_0 = input.LA(1);

            	if ( (LA301_0 == OBJECT || (LA301_0 >= BOOL && LA301_0 <= DOUBLE) || (LA301_0 >= 251 && LA301_0 <= 254) || (LA301_0 >= 275 && LA301_0 <= 276)) )
            	{
            	    alt301 = 1;
            	}
            	else if ( (LA301_0 == IDENTIFIER || (LA301_0 >= ELIF && LA301_0 <= UNDEF) || LA301_0 == 195 || LA301_0 == 221 || (LA301_0 >= 224 && LA301_0 <= 239) || (LA301_0 >= 241 && LA301_0 <= 244) || (LA301_0 >= 247 && LA301_0 <= 250) || LA301_0 == 256 || (LA301_0 >= 263 && LA301_0 <= 264) || LA301_0 == 274 || LA301_0 == 277) )
            	{
            	    alt301 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    NoViableAltException nvae_d301s0 =
            	        new NoViableAltException("", 301, 0, input);

            	    throw nvae_d301s0;
            	}
            	switch (alt301) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:12: predefined_type
            	        {
            	        	PushFollow(FOLLOW_predefined_type_in_synpred20_JavaMaker4001);
            	        	predefined_type();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;
            	    case 2 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:30: type_name
            	        {
            	        	PushFollow(FOLLOW_type_name_in_synpred20_JavaMaker4005);
            	        	type_name();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}

            	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:42: ( ( '*' )+ | '?' )
            	int alt303 = 2;
            	int LA303_0 = input.LA(1);

            	if ( (LA303_0 == STAR) )
            	{
            	    alt303 = 1;
            	}
            	else if ( (LA303_0 == 220) )
            	{
            	    alt303 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    NoViableAltException nvae_d303s0 =
            	        new NoViableAltException("", 303, 0, input);

            	    throw nvae_d303s0;
            	}
            	switch (alt303) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:43: ( '*' )+
            	        {
            	        	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:43: ( '*' )+
            	        	int cnt302 = 0;
            	        	do 
            	        	{
            	        	    int alt302 = 2;
            	        	    int LA302_0 = input.LA(1);

            	        	    if ( (LA302_0 == STAR) )
            	        	    {
            	        	        alt302 = 1;
            	        	    }


            	        	    switch (alt302) 
            	        		{
            	        			case 1 :
            	        			    // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:43: '*'
            	        			    {
            	        			    	Match(input,STAR,FOLLOW_STAR_in_synpred20_JavaMaker4010); if (state.failed) return ;

            	        			    }
            	        			    break;

            	        			default:
            	        			    if ( cnt302 >= 1 ) goto loop302;
            	        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	        		            EarlyExitException eee302 =
            	        		                new EarlyExitException(302, input);
            	        		            throw eee302;
            	        	    }
            	        	    cnt302++;
            	        	} while (true);

            	        	loop302:
            	        		;	// Stops C# compiler whining that label 'loop302' has no statements


            	        }
            	        break;
            	    case 2 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1101:50: '?'
            	        {
            	        	Match(input,220,FOLLOW_220_in_synpred20_JavaMaker4015); if (state.failed) return ;

            	        }
            	        break;

            	}


            }
        }
        // $ANTLR end "synpred20_JavaMaker"

        // $ANTLR start "synpred21_JavaMaker"
        public void synpred21_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1134:2: ( unary_expression assignment_operator )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1134:3: unary_expression assignment_operator
            {
            	PushFollow(FOLLOW_unary_expression_in_synpred21_JavaMaker4337);
            	unary_expression();
            	state._fsp--;
            	if (state.failed) return ;
            	PushFollow(FOLLOW_assignment_operator_in_synpred21_JavaMaker4341);
            	assignment_operator();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred21_JavaMaker"

        // $ANTLR start "synpred22_JavaMaker"
        public void synpred22_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1143:5: ( cast_expression )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1143:6: cast_expression
            {
            	PushFollow(FOLLOW_cast_expression_in_synpred22_JavaMaker4402);
            	cast_expression();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred22_JavaMaker"

        // $ANTLR start "synpred23_JavaMaker"
        public void synpred23_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1170:2: ( anonymous_function_signature '=>' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1170:3: anonymous_function_signature '=>'
            {
            	PushFollow(FOLLOW_anonymous_function_signature_in_synpred23_JavaMaker4731);
            	anonymous_function_signature();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,LAMBDA,FOLLOW_LAMBDA_in_synpred23_JavaMaker4735); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred23_JavaMaker"

        // $ANTLR start "synpred24_JavaMaker"
        public void synpred24_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1171:4: ( query_expression )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1171:5: query_expression
            {
            	PushFollow(FOLLOW_query_expression_in_synpred24_JavaMaker4746);
            	query_expression();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred24_JavaMaker"

        // $ANTLR start "synpred25_JavaMaker"
        public void synpred25_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1247:50: ( 'into' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1247:51: 'into'
            {
            	Match(input,224,FOLLOW_224_in_synpred25_JavaMaker6024); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred25_JavaMaker"

        // $ANTLR start "synpred26_JavaMaker"
        public void synpred26_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1314:32: ( ',' identifier '=' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1314:33: ',' identifier '='
            {
            	Match(input,COMMA,FOLLOW_COMMA_in_synpred26_JavaMaker6558); if (state.failed) return ;
            	PushFollow(FOLLOW_identifier_in_synpred26_JavaMaker6562);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred26_JavaMaker6566); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred26_JavaMaker"

        // $ANTLR start "synpred27_JavaMaker"
        public void synpred27_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1523:17: ( ';' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1523:18: ';'
            {
            	Match(input,SEMI,FOLLOW_SEMI_in_synpred27_JavaMaker7728); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred27_JavaMaker"

        // $ANTLR start "synpred28_JavaMaker"
        public void synpred28_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1525:19: ( ';' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1525:20: ';'
            {
            	Match(input,SEMI,FOLLOW_SEMI_in_synpred28_JavaMaker7791); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred28_JavaMaker"

        // $ANTLR start "synpred29_JavaMaker"
        public void synpred29_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1537:4: ( member_name '{' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1537:5: member_name '{'
            {
            	PushFollow(FOLLOW_member_name_in_synpred29_JavaMaker7900);
            	member_name();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred29_JavaMaker7904); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred29_JavaMaker"

        // $ANTLR start "synpred30_JavaMaker"
        public void synpred30_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:22: ( ( NUMBER | Hex_number ) ( ',' | '}' ) )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1610:23: ( NUMBER | Hex_number ) ( ',' | '}' )
            {
            	if ( (input.LA(1) >= NUMBER && input.LA(1) <= Hex_number) ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}

            	if ( input.LA(1) == CLOSE_BRACE || input.LA(1) == COMMA ) 
            	{
            	    input.Consume();
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }
        }
        // $ANTLR end "synpred30_JavaMaker"

        // $ANTLR start "synpred31_JavaMaker"
        public void synpred31_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1797:16: ( identifier ( type_parameter_list )? '(' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1797:17: identifier ( type_parameter_list )? '('
            {
            	PushFollow(FOLLOW_identifier_in_synpred31_JavaMaker9746);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	// /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1797:28: ( type_parameter_list )?
            	int alt304 = 2;
            	int LA304_0 = input.LA(1);

            	if ( (LA304_0 == LTHAN) )
            	{
            	    alt304 = 1;
            	}
            	switch (alt304) 
            	{
            	    case 1 :
            	        // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1797:28: type_parameter_list
            	        {
            	        	PushFollow(FOLLOW_type_parameter_list_in_synpred31_JavaMaker9748);
            	        	type_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return ;

            	        }
            	        break;

            	}

            	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred31_JavaMaker9752); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred31_JavaMaker"

        // $ANTLR start "synpred32_JavaMaker"
        public void synpred32_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1799:14: ( member_name '{' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1799:15: member_name '{'
            {
            	PushFollow(FOLLOW_member_name_in_synpred32_JavaMaker9801);
            	member_name();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred32_JavaMaker9805); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred32_JavaMaker"

        // $ANTLR start "synpred33_JavaMaker"
        public void synpred33_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1869:17: ( ';' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1869:18: ';'
            {
            	Match(input,SEMI,FOLLOW_SEMI_in_synpred33_JavaMaker10409); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred33_JavaMaker"

        // $ANTLR start "synpred34_JavaMaker"
        public void synpred34_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1871:19: ( ';' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1871:20: ';'
            {
            	Match(input,SEMI,FOLLOW_SEMI_in_synpred34_JavaMaker10472); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred34_JavaMaker"

        // $ANTLR start "synpred35_JavaMaker"
        public void synpred35_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1947:2: ( declaration_statement )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1947:3: declaration_statement
            {
            	PushFollow(FOLLOW_declaration_statement_in_synpred35_JavaMaker11163);
            	declaration_statement();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred35_JavaMaker"

        // $ANTLR start "synpred36_JavaMaker"
        public void synpred36_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1948:4: ( identifier ':' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1948:5: identifier ':'
            {
            	PushFollow(FOLLOW_identifier_in_synpred36_JavaMaker11174);
            	identifier();
            	state._fsp--;
            	if (state.failed) return ;
            	Match(input,211,FOLLOW_211_in_synpred36_JavaMaker11178); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred36_JavaMaker"

        // $ANTLR start "synpred37_JavaMaker"
        public void synpred37_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1985:2: ( 'var' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1985:3: 'var'
            {
            	Match(input,263,FOLLOW_263_in_synpred37_JavaMaker11415); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred37_JavaMaker"

        // $ANTLR start "synpred38_JavaMaker"
        public void synpred38_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1986:4: ( 'dynamic' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:1986:5: 'dynamic'
            {
            	Match(input,264,FOLLOW_264_in_synpred38_JavaMaker11433); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred38_JavaMaker"

        // $ANTLR start "synpred39_JavaMaker"
        public void synpred39_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2015:97: ( 'else' )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2015:98: 'else'
            {
            	Match(input,ELSE,FOLLOW_ELSE_in_synpred39_JavaMaker11633); if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred39_JavaMaker"

        // $ANTLR start "synpred40_JavaMaker"
        public void synpred40_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2046:2: ( local_variable_declaration )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2046:3: local_variable_declaration
            {
            	PushFollow(FOLLOW_local_variable_declaration_in_synpred40_JavaMaker11967);
            	local_variable_declaration();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred40_JavaMaker"

        // $ANTLR start "synpred41_JavaMaker"
        public void synpred41_JavaMaker_fragment() {
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2130:2: ( local_variable_declaration )
            // /project/src/CS2JTranslator/CS2JTransform/JavaMaker.g:2130:3: local_variable_declaration
            {
            	PushFollow(FOLLOW_local_variable_declaration_in_synpred41_JavaMaker12640);
            	local_variable_declaration();
            	state._fsp--;
            	if (state.failed) return ;

            }
        }
        // $ANTLR end "synpred41_JavaMaker"

        // Delegated rules

       	public bool synpred7_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred7_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred17_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred17_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred30_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred30_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred13_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred13_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred15_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred15_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred11_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred11_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred5_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred5_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred2_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred2_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred1_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred1_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred16_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred16_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred23_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred23_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred39_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred39_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred3_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred3_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred21_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred21_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred41_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred41_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred26_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred26_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred22_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred22_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred32_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred32_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred12_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred12_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred37_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred37_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred20_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred20_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred33_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred33_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred10_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred10_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred19_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred19_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred40_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred40_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred18_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred18_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred36_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred36_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred34_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred34_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred9_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred9_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred8_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred8_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred35_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred35_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred25_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred25_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred6_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred6_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred27_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred27_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred14_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred14_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred38_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred38_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred4_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred4_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred31_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred31_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred28_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred28_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred24_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred24_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}
       	public bool synpred29_JavaMaker() 
       	{
       	    state.backtracking++;
       	    int start = input.Mark();
       	    try 
       	    {
       	        synpred29_JavaMaker_fragment(); // can never throw exception
       	    }
       	    catch (RecognitionException re) 
       	    {
       	        Console.Error.WriteLine("impossible: "+re);
       	    }
       	    bool success = !state.failed;
       	    input.Rewind(start);
       	    state.backtracking--;
       	    state.failed = false;
       	    return success;
       	}


       	protected DFA22 dfa22;
       	protected DFA28 dfa28;
       	protected DFA27 dfa27;
       	protected DFA30 dfa30;
       	protected DFA39 dfa39;
       	protected DFA51 dfa51;
       	protected DFA75 dfa75;
       	protected DFA76 dfa76;
       	protected DFA87 dfa87;
       	protected DFA96 dfa96;
       	protected DFA105 dfa105;
       	protected DFA107 dfa107;
       	protected DFA109 dfa109;
       	protected DFA170 dfa170;
       	protected DFA257 dfa257;
       	protected DFA266 dfa266;
       	protected DFA267 dfa267;
       	protected DFA283 dfa283;
       	protected DFA294 dfa294;
    	private void InitializeCyclicDFAs()
    	{
        	this.dfa22 = new DFA22(this);
        	this.dfa28 = new DFA28(this);
        	this.dfa27 = new DFA27(this);
        	this.dfa30 = new DFA30(this);
        	this.dfa39 = new DFA39(this);
        	this.dfa51 = new DFA51(this);
        	this.dfa75 = new DFA75(this);
        	this.dfa76 = new DFA76(this);
        	this.dfa87 = new DFA87(this);
        	this.dfa96 = new DFA96(this);
        	this.dfa105 = new DFA105(this);
        	this.dfa107 = new DFA107(this);
        	this.dfa109 = new DFA109(this);
        	this.dfa170 = new DFA170(this);
        	this.dfa257 = new DFA257(this);
        	this.dfa266 = new DFA266(this);
        	this.dfa267 = new DFA267(this);
        	this.dfa283 = new DFA283(this);
        	this.dfa294 = new DFA294(this);
    	    this.dfa28.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA28_SpecialStateTransition);
    	    this.dfa27.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA27_SpecialStateTransition);
    	    this.dfa30.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA30_SpecialStateTransition);
    	    this.dfa39.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA39_SpecialStateTransition);
    	    this.dfa75.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA75_SpecialStateTransition);
    	    this.dfa76.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA76_SpecialStateTransition);
    	    this.dfa87.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA87_SpecialStateTransition);
    	    this.dfa96.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA96_SpecialStateTransition);
    	    this.dfa105.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA105_SpecialStateTransition);
    	    this.dfa107.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA107_SpecialStateTransition);
    	    this.dfa109.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA109_SpecialStateTransition);
    	    this.dfa266.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA266_SpecialStateTransition);
    	    this.dfa283.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA283_SpecialStateTransition);
    	    this.dfa294.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA294_SpecialStateTransition);
    	}

        const string DFA22_eotS =
            "\x11\uffff";
        const string DFA22_eofS =
            "\x11\uffff";
        const string DFA22_minS =
            "\x01\x14\x04\uffff\x01\x6d\x01\uffff\x02\x42\x08\uffff";
        const string DFA22_maxS =
            "\x01\u0115\x04\uffff\x01\u0115\x01\uffff\x02\u0115\x08\uffff";
        const string DFA22_acceptS =
            "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\uffff\x01\x06"+
            "\x02\uffff\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0d\x01"+
            "\x05\x01\x0c";
        const string DFA22_specialS =
            "\x11\uffff}>";
        static readonly string[] DFA22_transitionS = {
                "\x01\x0b\x10\uffff\x01\x0e\x1b\uffff\x01\x06\x40\uffff\x08"+
                "\x06\x01\x07\x0d\uffff\x04\x08\x27\uffff\x01\x08\x01\x03"+
                "\x08\uffff\x01\x01\x01\x05\x0b\uffff\x01\x0c\x02\uffff\x01"+
                "\x08\x02\uffff\x10\x08\x01\x02\x04\x08\x01\x09\x01\uffff"+
                "\x04\x08\x04\x06\x01\x0a\x01\x08\x01\uffff\x01\x04\x01\uffff"+
                "\x02\x0d\x01\uffff\x02\x08\x09\uffff\x01\x08\x02\x06\x01"+
                "\x08",
                "",
                "",
                "",
                "",
                "\x01\x06\x1c\uffff\x01\x0f\x0d\uffff\x04\x0f\x27\uffff"+
                "\x01\x0f\x19\uffff\x01\x0f\x02\uffff\x10\x0f\x01\uffff\x04"+
                "\x0f\x02\uffff\x04\x0f\x05\uffff\x01\x0f\x06\uffff\x02\x0f"+
                "\x09\uffff\x01\x0f\x02\uffff\x01\x0f",
                "",
                "\x01\x06\x02\uffff\x01\x06\x03\uffff\x01\x10\x18\uffff"+
                "\x01\x06\x0a\uffff\x01\x06\x1c\uffff\x01\x06\x09\uffff\x01"+
                "\x06\x03\uffff\x04\x06\x27\uffff\x01\x06\x0c\uffff\x01\x06"+
                "\x0b\uffff\x02\x06\x02\uffff\x10\x06\x01\uffff\x04\x06\x02"+
                "\uffff\x04\x06\x05\uffff\x01\x06\x02\uffff\x01\x06\x03\uffff"+
                "\x02\x06\x09\uffff\x01\x06\x02\uffff\x01\x06",
                "\x01\x06\x02\uffff\x01\x06\x03\uffff\x01\x10\x18\uffff"+
                "\x01\x06\x0a\uffff\x01\x06\x1c\uffff\x01\x06\x09\uffff\x01"+
                "\x06\x03\uffff\x04\x06\x27\uffff\x01\x06\x0c\uffff\x01\x06"+
                "\x0b\uffff\x02\x06\x02\uffff\x10\x06\x01\uffff\x04\x06\x02"+
                "\uffff\x04\x06\x05\uffff\x01\x06\x02\uffff\x01\x06\x03\uffff"+
                "\x02\x06\x09\uffff\x01\x06\x02\uffff\x01\x06",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
        static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
        static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
        static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
        static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
        static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
        static readonly short[][] DFA22_transition = DFA.UnpackEncodedStringArray(DFA22_transitionS);

        protected class DFA22 : DFA
        {
            public DFA22(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 22;
                this.eot = DFA22_eot;
                this.eof = DFA22_eof;
                this.min = DFA22_min;
                this.max = DFA22_max;
                this.accept = DFA22_accept;
                this.special = DFA22_special;
                this.transition = DFA22_transition;

            }

            override public string Description
            {
                get { return "782:2: (c= 'const' ct= type constant_declarators ';' -> ^( FIELD[$c.token, \"FIELD\"] ( $a)? ( $m)? $ct constant_declarators ) | ev= event_declaration[$a.tree, $m.tree] -> $ev | p= 'partial' (v1= void_type m3= method_declaration[$a.tree, $m.tree, modifierList, $v1.tree, $v1.text, true /* isPartial */] -> { $m3.tree != null}? $m3 -> | pi= interface_declaration[$a.tree, $m.tree, $p] -> $pi | pc= class_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $pc | ps= struct_declaration[$a.tree, $m.tree, $p, false /* toplevel */] -> $ps) | i= interface_declaration[$a.tree, $m.tree, null] -> $i | v2= void_type m1= method_declaration[$a.tree, $m.tree, modifierList, $v2.tree, $v2.text, false /* isPartial */] -> $m1 | t= type ( ( member_name ( type_parameter_list )? '(' )=>m2= method_declaration[$a.tree, $m.tree, modifierList, $t.tree, $t.text, false /* isPartial */] -> $m2 | ( member_name '{' )=>pd= property_declaration[$a.tree, $m.tree, modifierList.Contains(\"abstract\"), $t.tree] -> $pd | ( type_name '.' 'this' )=>tn= type_name '.' ix1= indexer_declaration[$a.tree, $m.tree, $t.tree, $tn.tree] -> $ix1 | ix2= indexer_declaration[$a.tree, $m.tree, $t.tree, null] -> $ix2 | field_declaration -> ^( FIELD[$t.start.Token, \"FIELD\"] ( $a)? ( $m)? $t field_declaration ) | operator_declaration -> ^( OPERATOR[$t.start.Token, \"OPERATOR\"] ( $a)? ( $m)? $t operator_declaration ) ) | cd= class_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $cd | sd= struct_declaration[$a.tree, $m.tree, null, false /* toplevel */] -> $sd | ed= enum_declaration[$a.tree, $m.tree] -> $ed | dd= delegate_declaration[$a.tree, $m.tree, false /* toplevel */] -> | co3= conversion_operator_declaration -> ^( CONVERSION_OPERATOR[$co3.start.Token, \"CONVERSION\"] ( $a)? ( $m)? $co3) | con3= constructor_declaration[$a.tree, $m.tree, modifierList] -> $con3 | de3= destructor_declaration -> $de3)"; }
            }

        }

        const string DFA28_eotS =
            "\x27\uffff";
        const string DFA28_eofS =
            "\x27\uffff";
        const string DFA28_minS =
            "\x01\x41\x02\x00\x24\uffff";
        const string DFA28_maxS =
            "\x01\u0115\x02\x00\x24\uffff";
        const string DFA28_acceptS =
            "\x03\uffff\x01\x03\x1b\uffff\x01\x04\x01\x05\x01\x06\x01\x07"+
            "\x01\x08\x01\x09\x01\x01\x01\x02";
        const string DFA28_specialS =
            "\x01\uffff\x01\x00\x01\x01\x24\uffff}>";
        static readonly string[] DFA28_transitionS = {
                "\x01\x03\x01\x01\x06\uffff\x01\x03\x38\uffff\x12\x03\x04"+
                "\uffff\x04\x03\x27\uffff\x01\x03\x01\uffff\x01\x1f\x09\uffff"+
                "\x01\x02\x06\uffff\x01\x20\x01\x21\x01\x22\x01\x23\x01\x24"+
                "\x01\x03\x01\uffff\x01\x03\x02\uffff\x10\x03\x01\uffff\x04"+
                "\x03\x02\uffff\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03"+
                "\x09\uffff\x04\x03",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
        static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
        static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
        static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
        static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
        static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
        static readonly short[][] DFA28_transition = DFA.UnpackEncodedStringArray(DFA28_transitionS);

        protected class DFA28 : DFA
        {
            public DFA28(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 28;
                this.eot = DFA28_eot;
                this.eof = DFA28_eof;
                this.min = DFA28_min;
                this.max = DFA28_max;
                this.accept = DFA28_accept;
                this.special = DFA28_special;
                this.transition = DFA28_transition;

            }

            override public string Description
            {
                get { return "810:1: primary_expression : ( ( 'this' brackets[null] )=> (t= 'this' -> $t) (b1= brackets[$primary_expression.tree] -> $b1) (pp1= primary_expression_part[$primary_expression.tree] -> $pp1)* | ( 'base' brackets[null] )=> (b= 'base' -> SUPER[$b.token, \"super\"] ) (b2= brackets[$primary_expression.tree] -> $b2) (pp2= primary_expression_part[$primary_expression.tree] -> $pp2)* | ( primary_expression_start -> primary_expression_start ) (pp3= primary_expression_part[$primary_expression.tree] -> $pp3)* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> (oc1= object_creation_expression -> $oc1) (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+ | ( object_creation_expression )=>oc2= object_creation_expression -> $oc2 | anonymous_object_creation_expression -> anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );"; }
            }

        }


        protected internal int DFA28_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA28_1 = input.LA(1);

                       	 
                       	int index28_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred5_JavaMaker()) ) { s = 37; }

                       	else if ( (true) ) { s = 3; }

                       	 
                       	input.Seek(index28_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA28_2 = input.LA(1);

                       	 
                       	int index28_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred6_JavaMaker()) ) { s = 38; }

                       	else if ( (true) ) { s = 3; }

                       	 
                       	input.Seek(index28_2);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae28 =
                new NoViableAltException(dfa.Description, 28, _s, input);
            dfa.Error(nvae28);
            throw nvae28;
        }
        const string DFA27_eotS =
            "\x16\uffff";
        const string DFA27_eofS =
            "\x16\uffff";
        const string DFA27_minS =
            "\x01\x41\x12\x00\x03\uffff";
        const string DFA27_maxS =
            "\x01\u0115\x12\x00\x03\uffff";
        const string DFA27_acceptS =
            "\x13\uffff\x01\x03\x01\x01\x01\x02";
        const string DFA27_specialS =
            "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
            "\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d"+
            "\x01\x0e\x01\x0f\x01\x10\x01\x11\x03\uffff}>";
        static readonly string[] DFA27_transitionS = {
                "\x01\x09\x05\uffff\x01\x13\x3a\uffff\x01\x01\x01\x02\x01"+
                "\x03\x01\x0b\x01\x07\x01\x08\x01\x06\x01\x05\x01\x10\x0d"+
                "\uffff\x04\x11\x27\uffff\x01\x11\x0a\uffff\x01\x12\x0e\uffff"+
                "\x01\x11\x02\uffff\x10\x11\x01\uffff\x04\x11\x02\uffff\x04"+
                "\x11\x01\x0a\x01\x0f\x01\x0d\x01\x0e\x01\uffff\x01\x11\x06"+
                "\uffff\x02\x11\x09\uffff\x01\x11\x01\x04\x01\x0c\x01\x11",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                ""
        };

        static readonly short[] DFA27_eot = DFA.UnpackEncodedString(DFA27_eotS);
        static readonly short[] DFA27_eof = DFA.UnpackEncodedString(DFA27_eofS);
        static readonly char[] DFA27_min = DFA.UnpackEncodedStringToUnsignedChars(DFA27_minS);
        static readonly char[] DFA27_max = DFA.UnpackEncodedStringToUnsignedChars(DFA27_maxS);
        static readonly short[] DFA27_accept = DFA.UnpackEncodedString(DFA27_acceptS);
        static readonly short[] DFA27_special = DFA.UnpackEncodedString(DFA27_specialS);
        static readonly short[][] DFA27_transition = DFA.UnpackEncodedStringArray(DFA27_transitionS);

        protected class DFA27 : DFA
        {
            public DFA27(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 27;
                this.eot = DFA27_eot;
                this.eof = DFA27_eof;
                this.min = DFA27_min;
                this.max = DFA27_max;
                this.accept = DFA27_accept;
                this.special = DFA27_special;
                this.transition = DFA27_transition;

            }

            override public string Description
            {
                get { return "815:10: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> (oc1= object_creation_expression -> $oc1) (pp4= primary_expression_part[ $primary_expression.tree ] -> $pp4)+ | ( object_creation_expression )=>oc2= object_creation_expression -> $oc2 | anonymous_object_creation_expression -> anonymous_object_creation_expression )"; }
            }

        }


        protected internal int DFA27_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA27_1 = input.LA(1);

                       	 
                       	int index27_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA27_2 = input.LA(1);

                       	 
                       	int index27_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA27_3 = input.LA(1);

                       	 
                       	int index27_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA27_4 = input.LA(1);

                       	 
                       	int index27_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA27_5 = input.LA(1);

                       	 
                       	int index27_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA27_6 = input.LA(1);

                       	 
                       	int index27_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA27_7 = input.LA(1);

                       	 
                       	int index27_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA27_8 = input.LA(1);

                       	 
                       	int index27_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA27_9 = input.LA(1);

                       	 
                       	int index27_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA27_10 = input.LA(1);

                       	 
                       	int index27_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_10);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA27_11 = input.LA(1);

                       	 
                       	int index27_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA27_12 = input.LA(1);

                       	 
                       	int index27_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA27_13 = input.LA(1);

                       	 
                       	int index27_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA27_14 = input.LA(1);

                       	 
                       	int index27_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA27_15 = input.LA(1);

                       	 
                       	int index27_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA27_16 = input.LA(1);

                       	 
                       	int index27_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA27_17 = input.LA(1);

                       	 
                       	int index27_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_17);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 17 : 
                       	int LA27_18 = input.LA(1);

                       	 
                       	int index27_18 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred7_JavaMaker()) ) { s = 20; }

                       	else if ( (synpred8_JavaMaker()) ) { s = 21; }

                       	 
                       	input.Seek(index27_18);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae27 =
                new NoViableAltException(dfa.Description, 27, _s, input);
            dfa.Error(nvae27);
            throw nvae27;
        }
        const string DFA30_eotS =
            "\x21\uffff";
        const string DFA30_eofS =
            "\x21\uffff";
        const string DFA30_minS =
            "\x01\x41\x0f\uffff\x02\x00\x0f\uffff";
        const string DFA30_maxS =
            "\x01\u0115\x0f\uffff\x02\x00\x0f\uffff";
        const string DFA30_acceptS =
            "\x01\uffff\x01\x01\x10\uffff\x01\x04\x01\x05\x01\x06\x01\x07"+
            "\x01\x08\x08\uffff\x01\x02\x01\x03";
        const string DFA30_specialS =
            "\x10\uffff\x01\x00\x01\x01\x0f\uffff}>";
        static readonly string[] DFA30_transitionS = {
                "\x01\x01\x01\x12\x06\uffff\x01\x14\x38\uffff\x08\x01\x01"+
                "\x10\x09\x16\x04\uffff\x04\x11\x27\uffff\x01\x11\x0b\uffff"+
                "\x01\x13\x0b\uffff\x01\x15\x01\uffff\x01\x11\x02\uffff\x10"+
                "\x11\x01\uffff\x04\x11\x02\uffff\x04\x11\x04\x01\x01\uffff"+
                "\x01\x11\x06\uffff\x02\x11\x09\uffff\x01\x11\x02\x01\x01"+
                "\x11",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
        static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
        static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
        static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
        static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
        static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
        static readonly short[][] DFA30_transition = DFA.UnpackEncodedStringArray(DFA30_transitionS);

        protected class DFA30 : DFA
        {
            public DFA30(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 30;
                this.eot = DFA30_eot;
                this.eof = DFA30_eof;
                this.min = DFA30_min;
                this.max = DFA30_max;
                this.accept = DFA30_accept;
                this.special = DFA30_special;
                this.transition = DFA30_transition;

            }

            override public string Description
            {
                get { return "827:1: primary_expression_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( (c= '::' identifier )? ) | 'this' | b= 'base' -> SUPER[$b.token, \"super\"] | paren_expression | typeof_expression | literal );"; }
            }

        }


        protected internal int DFA30_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA30_16 = input.LA(1);

                       	 
                       	int index30_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred9_JavaMaker()) ) { s = 31; }

                       	else if ( (true) ) { s = 32; }

                       	 
                       	input.Seek(index30_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA30_17 = input.LA(1);

                       	 
                       	int index30_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred9_JavaMaker()) ) { s = 31; }

                       	else if ( (true) ) { s = 32; }

                       	 
                       	input.Seek(index30_17);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae30 =
                new NoViableAltException(dfa.Description, 30, _s, input);
            dfa.Error(nvae30);
            throw nvae30;
        }
        const string DFA39_eotS =
            "\x30\uffff";
        const string DFA39_eofS =
            "\x30\uffff";
        const string DFA39_minS =
            "\x01\x24\x01\x00\x2e\uffff";
        const string DFA39_maxS =
            "\x01\u0115\x01\x00\x2e\uffff";
        const string DFA39_acceptS =
            "\x02\uffff\x01\x02\x2c\uffff\x01\x01";
        const string DFA39_specialS =
            "\x01\uffff\x01\x00\x2e\uffff}>";
        static readonly string[] DFA39_transitionS = {
                "\x02\x02\x0b\uffff\x01\x02\x0f\uffff\x02\x02\x06\uffff\x01"+
                "\x01\x15\uffff\x01\x02\x09\uffff\x02\x02\x02\uffff\x01\x02"+
                "\x14\uffff\x12\x02\x04\uffff\x04\x02\x27\uffff\x01\x02\x01"+
                "\uffff\x01\x02\x09\uffff\x01\x02\x01\uffff\x02\x02\x03\uffff"+
                "\x06\x02\x01\uffff\x01\x02\x02\uffff\x10\x02\x01\uffff\x04"+
                "\x02\x02\uffff\x08\x02\x01\uffff\x01\x02\x06\uffff\x02\x02"+
                "\x09\uffff\x04\x02",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
        static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
        static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
        static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
        static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
        static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
        static readonly short[][] DFA39_transition = DFA.UnpackEncodedStringArray(DFA39_transitionS);

        protected class DFA39 : DFA
        {
            public DFA39(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 39;
                this.eot = DFA39_eot;
                this.eof = DFA39_eof;
                this.min = DFA39_min;
                this.max = DFA39_max;
                this.accept = DFA39_accept;
                this.special = DFA39_special;
                this.transition = DFA39_transition;

            }

            override public string Description
            {
                get { return "870:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )"; }
            }

        }


        protected internal int DFA39_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA39_1 = input.LA(1);

                       	 
                       	int index39_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred10_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 2; }

                       	 
                       	input.Seek(index39_1);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae39 =
                new NoViableAltException(dfa.Description, 39, _s, input);
            dfa.Error(nvae39);
            throw nvae39;
        }
        const string DFA51_eotS =
            "\x05\uffff";
        const string DFA51_eofS =
            "\x01\x02\x03\uffff\x01\x02";
        const string DFA51_minS =
            "\x01\x45\x01\x24\x02\uffff\x01\x45";
        const string DFA51_maxS =
            "\x02\u0115\x02\uffff\x01\u0115";
        const string DFA51_acceptS =
            "\x02\uffff\x01\x01\x01\x02\x01\uffff";
        const string DFA51_specialS =
            "\x05\uffff}>";
        static readonly string[] DFA51_transitionS = {
                "\x01\x01\x03\x02\x01\x03\x01\x02\x01\uffff\x0a\x02\x05\uffff"+
                "\x0b\x02\x03\uffff\x05\x02\x01\uffff\x01\x02\x1a\uffff\x01"+
                "\x02\x09\uffff\x02\x03\x01\x02\x01\uffff\x06\x02\x25\uffff"+
                "\x01\x02\x0f\uffff\x01\x02\x08\uffff\x14\x02\x01\uffff\x04"+
                "\x02\x02\uffff\x04\x02\x05\uffff\x01\x02\x06\uffff\x02\x02"+
                "\x09\uffff\x01\x02\x02\uffff\x01\x02",
                "\x02\x03\x0b\uffff\x01\x03\x0f\uffff\x02\x03\x03\uffff"+
                "\x01\x04\x02\uffff\x01\x03\x15\uffff\x01\x03\x09\uffff\x02"+
                "\x03\x02\uffff\x01\x03\x01\uffff\x01\x02\x12\uffff\x12\x03"+
                "\x04\uffff\x04\x03\x27\uffff\x01\x03\x01\uffff\x01\x03\x09"+
                "\uffff\x01\x03\x01\uffff\x02\x03\x03\uffff\x06\x03\x01\uffff"+
                "\x01\x03\x02\uffff\x10\x03\x01\uffff\x04\x03\x02\uffff\x08"+
                "\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09\uffff\x04\x03",
                "",
                "",
                "\x01\x01\x03\x02\x01\x03\x01\x02\x01\uffff\x0a\x02\x05"+
                "\uffff\x0b\x02\x03\uffff\x05\x02\x01\uffff\x01\x02\x1a\uffff"+
                "\x01\x02\x09\uffff\x02\x03\x01\x02\x01\uffff\x06\x02\x25"+
                "\uffff\x01\x02\x0f\uffff\x01\x02\x08\uffff\x14\x02\x01\uffff"+
                "\x04\x02\x02\uffff\x04\x02\x05\uffff\x01\x02\x06\uffff\x02"+
                "\x02\x09\uffff\x01\x02\x02\uffff\x01\x02"
        };

        static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
        static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
        static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
        static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
        static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
        static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
        static readonly short[][] DFA51_transition = DFA.UnpackEncodedStringArray(DFA51_transitionS);

        protected class DFA51 : DFA
        {
            public DFA51(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 51;
                this.eot = DFA51_eot;
                this.eof = DFA51_eof;
                this.min = DFA51_min;
                this.max = DFA51_max;
                this.accept = DFA51_accept;
                this.special = DFA51_special;
                this.transition = DFA51_transition;

            }

            override public string Description
            {
                get { return "935:6: ( ( rank_specifiers )? (ai1= array_initializer )? | ( ( ( arguments[null] ( '[' | '.' | '->' ) )=>as1= arguments[ ret ] ip= invocation_part[ $as1.tree ] ) | ip2= invocation_part[ret] )* as2= arguments[ ret ] )"; }
            }

        }

        const string DFA75_eotS =
            "\x11\uffff";
        const string DFA75_eofS =
            "\x11\uffff";
        const string DFA75_minS =
            "\x01\x41\x02\x45\x01\uffff\x01\x6d\x02\u008a\x01\x41\x01\uffff"+
            "\x04\x45\x02\uffff\x02\x41";
        const string DFA75_maxS =
            "\x01\u0115\x02\u00dc\x01\uffff\x01\u009d\x03\u0115\x01\uffff"+
            "\x04\u00dc\x02\uffff\x02\u0115";
        const string DFA75_acceptS =
            "\x03\uffff\x01\x02\x04\uffff\x01\x03\x04\uffff\x02\x01\x02\uffff";
        const string DFA75_specialS =
            "\x07\uffff\x01\x02\x07\uffff\x01\x01\x01\x00}>";
        static readonly string[] DFA75_transitionS = {
                "\x01\x03\x40\uffff\x08\x03\x01\x01\x0d\uffff\x04\x02\x27"+
                "\uffff\x01\x02\x0a\uffff\x01\x04\x0e\uffff\x01\x02\x02\uffff"+
                "\x10\x02\x01\uffff\x04\x02\x02\uffff\x04\x02\x04\x03\x01"+
                "\uffff\x01\x02\x06\uffff\x02\x02\x09\uffff\x01\x02\x02\x03"+
                "\x01\x02",
                "\x01\x03\x1c\uffff\x01\x07\x0a\uffff\x01\x03\x26\uffff"+
                "\x01\x06\x08\uffff\x01\x03\x32\uffff\x01\x05\x0b\uffff\x01"+
                "\x03",
                "\x01\x03\x1c\uffff\x01\x07\x0a\uffff\x01\x03\x26\uffff"+
                "\x01\x06\x08\uffff\x01\x03\x32\uffff\x01\x05\x0b\uffff\x01"+
                "\x03",
                "",
                "\x01\x03\x2f\uffff\x01\x08",
                "\x01\x09\x0d\uffff\x04\x0a\x27\uffff\x01\x0a\x19\uffff"+
                "\x01\x0a\x02\uffff\x10\x0a\x01\uffff\x04\x0a\x02\uffff\x04"+
                "\x0a\x05\uffff\x01\x0a\x06\uffff\x02\x0a\x09\uffff\x01\x0a"+
                "\x02\uffff\x01\x0a",
                "\x01\x0b\x0d\uffff\x04\x0c\x27\uffff\x01\x0c\x19\uffff"+
                "\x01\x0c\x02\uffff\x10\x0c\x01\uffff\x04\x0c\x02\uffff\x04"+
                "\x0c\x05\uffff\x01\x0c\x06\uffff\x02\x0c\x09\uffff\x01\x0c"+
                "\x02\uffff\x01\x0c",
                "\x01\x03\x2d\uffff\x01\x0d\x12\uffff\x09\x03\x0b\uffff"+
                "\x01\x0e\x01\uffff\x04\x03\x27\uffff\x01\x03\x0a\uffff\x01"+
                "\x03\x0d\uffff\x02\x03\x02\uffff\x10\x03\x01\uffff\x04\x03"+
                "\x02\uffff\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09"+
                "\uffff\x04\x03",
                "",
                "\x01\x03\x1c\uffff\x01\x0f\x0a\uffff\x01\x03\x26\uffff"+
                "\x01\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
                "\x01\x03\x1c\uffff\x01\x0f\x0a\uffff\x01\x03\x26\uffff"+
                "\x01\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
                "\x01\x03\x1c\uffff\x01\x10\x0a\uffff\x01\x03\x26\uffff"+
                "\x01\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
                "\x01\x03\x1c\uffff\x01\x10\x0a\uffff\x01\x03\x26\uffff"+
                "\x01\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
                "",
                "",
                "\x01\x03\x2d\uffff\x01\x0d\x12\uffff\x09\x03\x0b\uffff"+
                "\x01\x0e\x01\uffff\x04\x03\x27\uffff\x01\x03\x0a\uffff\x01"+
                "\x03\x0d\uffff\x02\x03\x02\uffff\x10\x03\x01\uffff\x04\x03"+
                "\x02\uffff\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09"+
                "\uffff\x04\x03",
                "\x01\x03\x2d\uffff\x01\x0d\x12\uffff\x09\x03\x0b\uffff"+
                "\x01\x0e\x01\uffff\x04\x03\x27\uffff\x01\x03\x0a\uffff\x01"+
                "\x03\x0d\uffff\x02\x03\x02\uffff\x10\x03\x01\uffff\x04\x03"+
                "\x02\uffff\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09"+
                "\uffff\x04\x03"
        };

        static readonly short[] DFA75_eot = DFA.UnpackEncodedString(DFA75_eotS);
        static readonly short[] DFA75_eof = DFA.UnpackEncodedString(DFA75_eofS);
        static readonly char[] DFA75_min = DFA.UnpackEncodedStringToUnsignedChars(DFA75_minS);
        static readonly char[] DFA75_max = DFA.UnpackEncodedStringToUnsignedChars(DFA75_maxS);
        static readonly short[] DFA75_accept = DFA.UnpackEncodedString(DFA75_acceptS);
        static readonly short[] DFA75_special = DFA.UnpackEncodedString(DFA75_specialS);
        static readonly short[][] DFA75_transition = DFA.UnpackEncodedStringArray(DFA75_transitionS);

        protected class DFA75 : DFA
        {
            public DFA75(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 75;
                this.eot = DFA75_eot;
                this.eof = DFA75_eof;
                this.min = DFA75_min;
                this.max = DFA75_max;
                this.accept = DFA75_accept;
                this.special = DFA75_special;
                this.transition = DFA75_transition;

            }

            override public string Description
            {
                get { return "1017:21: ( ( unbound_type_name )=> unbound_type_name | type | void_type )"; }
            }

        }


        protected internal int DFA75_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA75_16 = input.LA(1);

                       	 
                       	int index75_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA75_16 == OBJECT || (LA75_16 >= BOOL && LA75_16 <= IDENTIFIER) || (LA75_16 >= ELIF && LA75_16 <= UNDEF) || LA75_16 == 195 || LA75_16 == 206 || (LA75_16 >= 220 && LA75_16 <= 221) || (LA75_16 >= 224 && LA75_16 <= 239) || (LA75_16 >= 241 && LA75_16 <= 244) || (LA75_16 >= 247 && LA75_16 <= 254) || LA75_16 == 256 || (LA75_16 >= 263 && LA75_16 <= 264) || (LA75_16 >= 274 && LA75_16 <= 277)) ) { s = 3; }

                       	else if ( (LA75_16 == COMMA) && (synpred14_JavaMaker()) ) { s = 13; }

                       	else if ( (LA75_16 == GT) && (synpred14_JavaMaker()) ) { s = 14; }

                       	 
                       	input.Seek(index75_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA75_15 = input.LA(1);

                       	 
                       	int index75_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA75_15 == OBJECT || (LA75_15 >= BOOL && LA75_15 <= IDENTIFIER) || (LA75_15 >= ELIF && LA75_15 <= UNDEF) || LA75_15 == 195 || LA75_15 == 206 || (LA75_15 >= 220 && LA75_15 <= 221) || (LA75_15 >= 224 && LA75_15 <= 239) || (LA75_15 >= 241 && LA75_15 <= 244) || (LA75_15 >= 247 && LA75_15 <= 254) || LA75_15 == 256 || (LA75_15 >= 263 && LA75_15 <= 264) || (LA75_15 >= 274 && LA75_15 <= 277)) ) { s = 3; }

                       	else if ( (LA75_15 == COMMA) && (synpred14_JavaMaker()) ) { s = 13; }

                       	else if ( (LA75_15 == GT) && (synpred14_JavaMaker()) ) { s = 14; }

                       	 
                       	input.Seek(index75_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA75_7 = input.LA(1);

                       	 
                       	int index75_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA75_7 == OBJECT || (LA75_7 >= BOOL && LA75_7 <= IDENTIFIER) || (LA75_7 >= ELIF && LA75_7 <= UNDEF) || LA75_7 == 195 || LA75_7 == 206 || (LA75_7 >= 220 && LA75_7 <= 221) || (LA75_7 >= 224 && LA75_7 <= 239) || (LA75_7 >= 241 && LA75_7 <= 244) || (LA75_7 >= 247 && LA75_7 <= 254) || LA75_7 == 256 || (LA75_7 >= 263 && LA75_7 <= 264) || (LA75_7 >= 274 && LA75_7 <= 277)) ) { s = 3; }

                       	else if ( (LA75_7 == COMMA) && (synpred14_JavaMaker()) ) { s = 13; }

                       	else if ( (LA75_7 == GT) && (synpred14_JavaMaker()) ) { s = 14; }

                       	 
                       	input.Seek(index75_7);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae75 =
                new NoViableAltException(dfa.Description, 75, _s, input);
            dfa.Error(nvae75);
            throw nvae75;
        }
        const string DFA76_eotS =
            "\x07\uffff";
        const string DFA76_eofS =
            "\x04\uffff\x01\x06\x02\uffff";
        const string DFA76_minS =
            "\x01\x62\x01\x6f\x01\uffff\x01\x6f\x01\u0094\x02\uffff";
        const string DFA76_maxS =
            "\x01\u0094\x01\u0096\x01\uffff\x01\u0096\x01\u009d\x02\uffff";
        const string DFA76_acceptS =
            "\x02\uffff\x01\x02\x02\uffff\x01\x01\x01\x03";
        const string DFA76_specialS =
            "\x04\uffff\x01\x00\x02\uffff}>";
        static readonly string[] DFA76_transitionS = {
                "\x01\x01\x31\uffff\x01\x02",
                "\x01\x03\x26\uffff\x01\x04",
                "",
                "\x01\x03\x26\uffff\x01\x04",
                "\x01\x05\x08\uffff\x01\x06",
                "",
                ""
        };

        static readonly short[] DFA76_eot = DFA.UnpackEncodedString(DFA76_eotS);
        static readonly short[] DFA76_eof = DFA.UnpackEncodedString(DFA76_eofS);
        static readonly char[] DFA76_min = DFA.UnpackEncodedStringToUnsignedChars(DFA76_minS);
        static readonly char[] DFA76_max = DFA.UnpackEncodedStringToUnsignedChars(DFA76_maxS);
        static readonly short[] DFA76_accept = DFA.UnpackEncodedString(DFA76_acceptS);
        static readonly short[] DFA76_special = DFA.UnpackEncodedString(DFA76_specialS);
        static readonly short[][] DFA76_transition = DFA.UnpackEncodedStringArray(DFA76_transitionS);

        protected class DFA76 : DFA
        {
            public DFA76(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 76;
                this.eot = DFA76_eot;
                this.eof = DFA76_eof;
                this.min = DFA76_min;
                this.max = DFA76_max;
                this.accept = DFA76_accept;
                this.special = DFA76_special;
                this.transition = DFA76_transition;

            }

            override public string Description
            {
                get { return "()* loopback of 1027:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*"; }
            }

        }


        protected internal int DFA76_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA76_4 = input.LA(1);

                       	 
                       	int index76_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA76_4 == DOT) && (synpred15_JavaMaker()) ) { s = 5; }

                       	else if ( (LA76_4 == EOF || LA76_4 == RPAREN) ) { s = 6; }

                       	 
                       	input.Seek(index76_4);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae76 =
                new NoViableAltException(dfa.Description, 76, _s, input);
            dfa.Error(nvae76);
            throw nvae76;
        }
        const string DFA87_eotS =
            "\x16\uffff";
        const string DFA87_eofS =
            "\x16\uffff";
        const string DFA87_minS =
            "\x01\x41\x01\uffff\x11\x00\x01\x6d\x01\uffff\x01\x00";
        const string DFA87_maxS =
            "\x01\u0115\x01\uffff\x11\x00\x01\x6d\x01\uffff\x01\x00";
        const string DFA87_acceptS =
            "\x01\uffff\x01\x01\x12\uffff\x01\x02\x01\uffff";
        const string DFA87_specialS =
            "\x01\x0f\x01\uffff\x01\x02\x01\x0a\x01\x03\x01\x0e\x01\x08\x01"+
            "\x11\x01\x0b\x01\x00\x01\x12\x01\x06\x01\x10\x01\x0c\x01\x01"+
            "\x01\x09\x01\x05\x01\x07\x01\x04\x02\uffff\x01\x0d}>";
        static readonly string[] DFA87_transitionS = {
                "\x01\x0a\x40\uffff\x01\x02\x01\x03\x01\x04\x01\x0c\x01\x08"+
                "\x01\x09\x01\x07\x01\x06\x01\x11\x0d\uffff\x04\x12\x27\uffff"+
                "\x01\x12\x0a\uffff\x01\x13\x0d\uffff\x01\x01\x01\x12\x02"+
                "\uffff\x10\x12\x01\uffff\x04\x12\x02\uffff\x04\x12\x01\x0b"+
                "\x01\x10\x01\x0e\x01\x0f\x01\uffff\x01\x12\x06\uffff\x02"+
                "\x12\x09\uffff\x01\x12\x01\x05\x01\x0d\x01\x12",
                "",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\x15",
                "",
                "\x01\uffff"
        };

        static readonly short[] DFA87_eot = DFA.UnpackEncodedString(DFA87_eotS);
        static readonly short[] DFA87_eof = DFA.UnpackEncodedString(DFA87_eofS);
        static readonly char[] DFA87_min = DFA.UnpackEncodedStringToUnsignedChars(DFA87_minS);
        static readonly char[] DFA87_max = DFA.UnpackEncodedStringToUnsignedChars(DFA87_maxS);
        static readonly short[] DFA87_accept = DFA.UnpackEncodedString(DFA87_acceptS);
        static readonly short[] DFA87_special = DFA.UnpackEncodedString(DFA87_specialS);
        static readonly short[][] DFA87_transition = DFA.UnpackEncodedStringArray(DFA87_transitionS);

        protected class DFA87 : DFA
        {
            public DFA87(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 87;
                this.eot = DFA87_eot;
                this.eof = DFA87_eof;
                this.min = DFA87_min;
                this.max = DFA87_max;
                this.accept = DFA87_accept;
                this.special = DFA87_special;
                this.transition = DFA87_transition;

            }

            override public string Description
            {
                get { return "1089:8: public type_argument returns [string thetext] : ({...}? => javaish_type_argument | type );"; }
            }

        }


        protected internal int DFA87_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA87_9 = input.LA(1);

                       	 
                       	int index87_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA87_14 = input.LA(1);

                       	 
                       	int index87_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA87_2 = input.LA(1);

                       	 
                       	int index87_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA87_4 = input.LA(1);

                       	 
                       	int index87_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA87_18 = input.LA(1);

                       	 
                       	int index87_18 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_18);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA87_16 = input.LA(1);

                       	 
                       	int index87_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA87_11 = input.LA(1);

                       	 
                       	int index87_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA87_17 = input.LA(1);

                       	 
                       	int index87_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_17);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA87_6 = input.LA(1);

                       	 
                       	int index87_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA87_15 = input.LA(1);

                       	 
                       	int index87_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA87_3 = input.LA(1);

                       	 
                       	int index87_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA87_8 = input.LA(1);

                       	 
                       	int index87_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA87_13 = input.LA(1);

                       	 
                       	int index87_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA87_21 = input.LA(1);

                       	 
                       	int index87_21 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_21);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA87_5 = input.LA(1);

                       	 
                       	int index87_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA87_0 = input.LA(1);

                       	 
                       	int index87_0 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA87_0 == 220) && ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (LA87_0 == BOOL) ) { s = 2; }

                       	else if ( (LA87_0 == BYTE) ) { s = 3; }

                       	else if ( (LA87_0 == CHAR) ) { s = 4; }

                       	else if ( (LA87_0 == 275) ) { s = 5; }

                       	else if ( (LA87_0 == DOUBLE) ) { s = 6; }

                       	else if ( (LA87_0 == FLOAT) ) { s = 7; }

                       	else if ( (LA87_0 == INT) ) { s = 8; }

                       	else if ( (LA87_0 == LONG) ) { s = 9; }

                       	else if ( (LA87_0 == OBJECT) ) { s = 10; }

                       	else if ( (LA87_0 == 251) ) { s = 11; }

                       	else if ( (LA87_0 == SHORT) ) { s = 12; }

                       	else if ( (LA87_0 == 276) ) { s = 13; }

                       	else if ( (LA87_0 == 253) ) { s = 14; }

                       	else if ( (LA87_0 == 254) ) { s = 15; }

                       	else if ( (LA87_0 == 252) ) { s = 16; }

                       	else if ( (LA87_0 == IDENTIFIER) ) { s = 17; }

                       	else if ( ((LA87_0 >= ELIF && LA87_0 <= UNDEF) || LA87_0 == 195 || LA87_0 == 221 || (LA87_0 >= 224 && LA87_0 <= 239) || (LA87_0 >= 241 && LA87_0 <= 244) || (LA87_0 >= 247 && LA87_0 <= 250) || LA87_0 == 256 || (LA87_0 >= 263 && LA87_0 <= 264) || LA87_0 == 274 || LA87_0 == 277) ) { s = 18; }

                       	else if ( (LA87_0 == 206) ) { s = 19; }

                       	 
                       	input.Seek(index87_0);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA87_12 = input.LA(1);

                       	 
                       	int index87_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 17 : 
                       	int LA87_7 = input.LA(1);

                       	 
                       	int index87_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 18 : 
                       	int LA87_10 = input.LA(1);

                       	 
                       	int index87_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( ((this.IsJavaish)) ) { s = 1; }

                       	else if ( (true) ) { s = 20; }

                       	 
                       	input.Seek(index87_10);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae87 =
                new NoViableAltException(dfa.Description, 87, _s, input);
            dfa.Error(nvae87);
            throw nvae87;
        }
        const string DFA96_eotS =
            "\x16\uffff";
        const string DFA96_eofS =
            "\x16\uffff";
        const string DFA96_minS =
            "\x01\x41\x11\x00\x04\uffff";
        const string DFA96_maxS =
            "\x01\u0115\x11\x00\x04\uffff";
        const string DFA96_acceptS =
            "\x12\uffff\x01\x04\x01\x01\x01\x02\x01\x03";
        const string DFA96_specialS =
            "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
            "\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d"+
            "\x01\x0e\x01\x0f\x01\x10\x04\uffff}>";
        static readonly string[] DFA96_transitionS = {
                "\x01\x09\x40\uffff\x01\x01\x01\x02\x01\x03\x01\x0b\x01\x07"+
                "\x01\x08\x01\x06\x01\x05\x01\x10\x0d\uffff\x04\x11\x27\uffff"+
                "\x01\x11\x0a\uffff\x01\x12\x0e\uffff\x01\x11\x02\uffff\x10"+
                "\x11\x01\uffff\x04\x11\x02\uffff\x04\x11\x01\x0a\x01\x0f"+
                "\x01\x0d\x01\x0e\x01\uffff\x01\x11\x06\uffff\x02\x11\x09"+
                "\uffff\x01\x11\x01\x04\x01\x0c\x01\x11",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
        static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
        static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
        static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
        static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
        static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
        static readonly short[][] DFA96_transition = DFA.UnpackEncodedStringArray(DFA96_transitionS);

        protected class DFA96 : DFA
        {
            public DFA96(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 96;
                this.eot = DFA96_eot;
                this.eof = DFA96_eof;
                this.min = DFA96_min;
                this.max = DFA96_max;
                this.accept = DFA96_accept;
                this.special = DFA96_special;
                this.transition = DFA96_transition;

            }

            override public string Description
            {
                get { return "1099:1: type returns [string thetext] : ( ( ( predefined_type | type_name ) rank_specifiers )=> (p1= predefined_type | tn1= type_name ) rs= rank_specifiers ( '*' )* -> ^( TYPE ( $p1)? ( $tn1)? $rs ( '*' )* ) | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> (p2= predefined_type | tn2= type_name ) ( ( '*' )+ | o2= '?' ) -> ^( TYPE ( $p2)? ( $tn2)? ( '*' )* ( $o2)? ) | (p3= predefined_type | tn3= type_name ) -> ^( TYPE ( $p3)? ( $tn3)? ) | v= 'void' ( '*' )+ -> ^( TYPE[$v.token, \"TYPE\"] $v ( '*' )+ ) );"; }
            }

        }


        protected internal int DFA96_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA96_1 = input.LA(1);

                       	 
                       	int index96_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA96_2 = input.LA(1);

                       	 
                       	int index96_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA96_3 = input.LA(1);

                       	 
                       	int index96_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA96_4 = input.LA(1);

                       	 
                       	int index96_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA96_5 = input.LA(1);

                       	 
                       	int index96_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA96_6 = input.LA(1);

                       	 
                       	int index96_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA96_7 = input.LA(1);

                       	 
                       	int index96_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA96_8 = input.LA(1);

                       	 
                       	int index96_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA96_9 = input.LA(1);

                       	 
                       	int index96_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA96_10 = input.LA(1);

                       	 
                       	int index96_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_10);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA96_11 = input.LA(1);

                       	 
                       	int index96_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA96_12 = input.LA(1);

                       	 
                       	int index96_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA96_13 = input.LA(1);

                       	 
                       	int index96_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA96_14 = input.LA(1);

                       	 
                       	int index96_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA96_15 = input.LA(1);

                       	 
                       	int index96_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA96_16 = input.LA(1);

                       	 
                       	int index96_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA96_17 = input.LA(1);

                       	 
                       	int index96_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred19_JavaMaker()) ) { s = 19; }

                       	else if ( (synpred20_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index96_17);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae96 =
                new NoViableAltException(dfa.Description, 96, _s, input);
            dfa.Error(nvae96);
            throw nvae96;
        }
        const string DFA105_eotS =
            "\x31\uffff";
        const string DFA105_eofS =
            "\x31\uffff";
        const string DFA105_minS =
            "\x01\x24\x2e\x00\x02\uffff";
        const string DFA105_maxS =
            "\x01\u0115\x2e\x00\x02\uffff";
        const string DFA105_acceptS =
            "\x2f\uffff\x01\x01\x01\x02";
        const string DFA105_specialS =
            "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
            "\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d"+
            "\x01\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01"+
            "\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c"+
            "\x01\x1d\x01\x1e\x01\x1f\x01\x20\x01\x21\x01\x22\x01\x23\x01"+
            "\x24\x01\x25\x01\x26\x01\x27\x01\x28\x01\x29\x01\x2a\x01\x2b"+
            "\x01\x2c\x01\x2d\x02\uffff}>";
        static readonly string[] DFA105_transitionS = {
                "\x01\x28\x01\x29\x0b\uffff\x01\x02\x0f\uffff\x01\x0d\x01"+
                "\x03\x06\uffff\x01\x01\x15\uffff\x01\x2d\x09\uffff\x01\x26"+
                "\x01\x27\x02\uffff\x01\x2c\x14\uffff\x01\x05\x01\x06\x01"+
                "\x07\x01\x0f\x01\x0b\x01\x0c\x01\x0a\x01\x09\x01\x14\x01"+
                "\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01"+
                "\x1e\x01\x1f\x04\uffff\x04\x2e\x27\uffff\x01\x2e\x01\uffff"+
                "\x01\x20\x09\uffff\x01\x04\x01\uffff\x01\x2a\x01\x2b\x03"+
                "\uffff\x01\x21\x01\x22\x01\x23\x01\x24\x01\x25\x01\x16\x01"+
                "\uffff\x01\x2e\x02\uffff\x01\x2e\x01\x15\x0e\x2e\x01\uffff"+
                "\x04\x2e\x02\uffff\x04\x2e\x01\x0e\x01\x13\x01\x11\x01\x12"+
                "\x01\uffff\x01\x2e\x06\uffff\x02\x2e\x09\uffff\x01\x2e\x01"+
                "\x08\x01\x10\x01\x2e",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                ""
        };

        static readonly short[] DFA105_eot = DFA.UnpackEncodedString(DFA105_eotS);
        static readonly short[] DFA105_eof = DFA.UnpackEncodedString(DFA105_eofS);
        static readonly char[] DFA105_min = DFA.UnpackEncodedStringToUnsignedChars(DFA105_minS);
        static readonly char[] DFA105_max = DFA.UnpackEncodedStringToUnsignedChars(DFA105_maxS);
        static readonly short[] DFA105_accept = DFA.UnpackEncodedString(DFA105_acceptS);
        static readonly short[] DFA105_special = DFA.UnpackEncodedString(DFA105_specialS);
        static readonly short[][] DFA105_transition = DFA.UnpackEncodedStringArray(DFA105_transitionS);

        protected class DFA105 : DFA
        {
            public DFA105(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 105;
                this.eot = DFA105_eot;
                this.eof = DFA105_eof;
                this.min = DFA105_min;
                this.max = DFA105_max;
                this.accept = DFA105_accept;
                this.special = DFA105_special;
                this.transition = DFA105_transition;

            }

            override public string Description
            {
                get { return "1133:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );"; }
            }

        }


        protected internal int DFA105_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA105_1 = input.LA(1);

                       	 
                       	int index105_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA105_2 = input.LA(1);

                       	 
                       	int index105_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA105_3 = input.LA(1);

                       	 
                       	int index105_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA105_4 = input.LA(1);

                       	 
                       	int index105_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA105_5 = input.LA(1);

                       	 
                       	int index105_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA105_6 = input.LA(1);

                       	 
                       	int index105_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA105_7 = input.LA(1);

                       	 
                       	int index105_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA105_8 = input.LA(1);

                       	 
                       	int index105_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA105_9 = input.LA(1);

                       	 
                       	int index105_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA105_10 = input.LA(1);

                       	 
                       	int index105_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_10);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA105_11 = input.LA(1);

                       	 
                       	int index105_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA105_12 = input.LA(1);

                       	 
                       	int index105_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA105_13 = input.LA(1);

                       	 
                       	int index105_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA105_14 = input.LA(1);

                       	 
                       	int index105_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA105_15 = input.LA(1);

                       	 
                       	int index105_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA105_16 = input.LA(1);

                       	 
                       	int index105_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA105_17 = input.LA(1);

                       	 
                       	int index105_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_17);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 17 : 
                       	int LA105_18 = input.LA(1);

                       	 
                       	int index105_18 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_18);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 18 : 
                       	int LA105_19 = input.LA(1);

                       	 
                       	int index105_19 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_19);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 19 : 
                       	int LA105_20 = input.LA(1);

                       	 
                       	int index105_20 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_20);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 20 : 
                       	int LA105_21 = input.LA(1);

                       	 
                       	int index105_21 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_21);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 21 : 
                       	int LA105_22 = input.LA(1);

                       	 
                       	int index105_22 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_22);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 22 : 
                       	int LA105_23 = input.LA(1);

                       	 
                       	int index105_23 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_23);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 23 : 
                       	int LA105_24 = input.LA(1);

                       	 
                       	int index105_24 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_24);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 24 : 
                       	int LA105_25 = input.LA(1);

                       	 
                       	int index105_25 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_25);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 25 : 
                       	int LA105_26 = input.LA(1);

                       	 
                       	int index105_26 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_26);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 26 : 
                       	int LA105_27 = input.LA(1);

                       	 
                       	int index105_27 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_27);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 27 : 
                       	int LA105_28 = input.LA(1);

                       	 
                       	int index105_28 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_28);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 28 : 
                       	int LA105_29 = input.LA(1);

                       	 
                       	int index105_29 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_29);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 29 : 
                       	int LA105_30 = input.LA(1);

                       	 
                       	int index105_30 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_30);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 30 : 
                       	int LA105_31 = input.LA(1);

                       	 
                       	int index105_31 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_31);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 31 : 
                       	int LA105_32 = input.LA(1);

                       	 
                       	int index105_32 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_32);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 32 : 
                       	int LA105_33 = input.LA(1);

                       	 
                       	int index105_33 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_33);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 33 : 
                       	int LA105_34 = input.LA(1);

                       	 
                       	int index105_34 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_34);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 34 : 
                       	int LA105_35 = input.LA(1);

                       	 
                       	int index105_35 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_35);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 35 : 
                       	int LA105_36 = input.LA(1);

                       	 
                       	int index105_36 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_36);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 36 : 
                       	int LA105_37 = input.LA(1);

                       	 
                       	int index105_37 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_37);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 37 : 
                       	int LA105_38 = input.LA(1);

                       	 
                       	int index105_38 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_38);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 38 : 
                       	int LA105_39 = input.LA(1);

                       	 
                       	int index105_39 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_39);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 39 : 
                       	int LA105_40 = input.LA(1);

                       	 
                       	int index105_40 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_40);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 40 : 
                       	int LA105_41 = input.LA(1);

                       	 
                       	int index105_41 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_41);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 41 : 
                       	int LA105_42 = input.LA(1);

                       	 
                       	int index105_42 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_42);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 42 : 
                       	int LA105_43 = input.LA(1);

                       	 
                       	int index105_43 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_43);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 43 : 
                       	int LA105_44 = input.LA(1);

                       	 
                       	int index105_44 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_44);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 44 : 
                       	int LA105_45 = input.LA(1);

                       	 
                       	int index105_45 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_45);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 45 : 
                       	int LA105_46 = input.LA(1);

                       	 
                       	int index105_46 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred21_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 48; }

                       	 
                       	input.Seek(index105_46);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae105 =
                new NoViableAltException(dfa.Description, 105, _s, input);
            dfa.Error(nvae105);
            throw nvae105;
        }
        const string DFA107_eotS =
            "\x2f\uffff";
        const string DFA107_eofS =
            "\x2f\uffff";
        const string DFA107_minS =
            "\x01\x24\x01\x00\x2d\uffff";
        const string DFA107_maxS =
            "\x01\u0115\x01\x00\x2d\uffff";
        const string DFA107_acceptS =
            "\x02\uffff\x01\x02\x23\uffff\x01\x03\x01\x04\x01\x05\x01\x06"+
            "\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x01";
        const string DFA107_specialS =
            "\x01\uffff\x01\x00\x2d\uffff}>";
        static readonly string[] DFA107_transitionS = {
                "\x01\x28\x01\x29\x0b\uffff\x01\x02\x0f\uffff\x02\x02\x06"+
                "\uffff\x01\x01\x15\uffff\x01\x2d\x09\uffff\x01\x26\x01\x27"+
                "\x02\uffff\x01\x2c\x14\uffff\x12\x02\x04\uffff\x04\x02\x27"+
                "\uffff\x01\x02\x01\uffff\x01\x02\x09\uffff\x01\x02\x01\uffff"+
                "\x01\x2a\x01\x2b\x03\uffff\x06\x02\x01\uffff\x01\x02\x02"+
                "\uffff\x10\x02\x01\uffff\x04\x02\x02\uffff\x08\x02\x01\uffff"+
                "\x01\x02\x06\uffff\x02\x02\x09\uffff\x04\x02",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA107_eot = DFA.UnpackEncodedString(DFA107_eotS);
        static readonly short[] DFA107_eof = DFA.UnpackEncodedString(DFA107_eofS);
        static readonly char[] DFA107_min = DFA.UnpackEncodedStringToUnsignedChars(DFA107_minS);
        static readonly char[] DFA107_max = DFA.UnpackEncodedStringToUnsignedChars(DFA107_maxS);
        static readonly short[] DFA107_accept = DFA.UnpackEncodedString(DFA107_acceptS);
        static readonly short[] DFA107_special = DFA.UnpackEncodedString(DFA107_specialS);
        static readonly short[][] DFA107_transition = DFA.UnpackEncodedStringArray(DFA107_transitionS);

        protected class DFA107 : DFA
        {
            public DFA107(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 107;
                this.eot = DFA107_eot;
                this.eof = DFA107_eof;
                this.min = DFA107_min;
                this.max = DFA107_max;
                this.accept = DFA107_accept;
                this.special = DFA107_special;
                this.transition = DFA107_transition;

            }

            override public string Description
            {
                get { return "1141:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression -> primary_or_array_creation_expression | p= '+' unary_expression -> ^( MONOPLUS[$p.token,\"+\"] unary_expression ) | m= '-' unary_expression -> ^( MONOMINUS[$m.token, \"-\"] unary_expression ) | n= '!' unary_expression -> ^( MONONOT[$n.token, \"!\"] unary_expression ) | t= '~' unary_expression -> ^( MONOTWIDDLE[$t.token, \"~\"] unary_expression ) | pre_increment_expression -> pre_increment_expression | pre_decrement_expression -> pre_decrement_expression | pointer_indirection_expression -> pointer_indirection_expression | addressof_expression -> addressof_expression );"; }
            }

        }


        protected internal int DFA107_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA107_1 = input.LA(1);

                       	 
                       	int index107_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred22_JavaMaker()) ) { s = 46; }

                       	else if ( (true) ) { s = 2; }

                       	 
                       	input.Seek(index107_1);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae107 =
                new NoViableAltException(dfa.Description, 107, _s, input);
            dfa.Error(nvae107);
            throw nvae107;
        }
        const string DFA109_eotS =
            "\x31\uffff";
        const string DFA109_eofS =
            "\x31\uffff";
        const string DFA109_minS =
            "\x01\x24\x04\x00\x2c\uffff";
        const string DFA109_maxS =
            "\x01\u0115\x04\x00\x2c\uffff";
        const string DFA109_acceptS =
            "\x05\uffff\x01\x03\x29\uffff\x01\x01\x01\x02";
        const string DFA109_specialS =
            "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x2c\uffff}>";
        static readonly string[] DFA109_transitionS = {
                "\x02\x05\x0b\uffff\x01\x05\x0f\uffff\x02\x05\x06\uffff\x01"+
                "\x01\x15\uffff\x01\x05\x09\uffff\x02\x05\x02\uffff\x01\x05"+
                "\x14\uffff\x08\x05\x01\x02\x09\x05\x04\uffff\x04\x04\x27"+
                "\uffff\x01\x04\x01\uffff\x01\x05\x09\uffff\x01\x05\x01\uffff"+
                "\x02\x05\x03\uffff\x06\x05\x01\uffff\x01\x04\x02\uffff\x01"+
                "\x04\x01\x03\x0e\x04\x01\uffff\x04\x04\x02\uffff\x04\x04"+
                "\x04\x05\x01\uffff\x01\x04\x06\uffff\x02\x04\x09\uffff\x01"+
                "\x04\x02\x05\x01\x04",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA109_eot = DFA.UnpackEncodedString(DFA109_eotS);
        static readonly short[] DFA109_eof = DFA.UnpackEncodedString(DFA109_eofS);
        static readonly char[] DFA109_min = DFA.UnpackEncodedStringToUnsignedChars(DFA109_minS);
        static readonly char[] DFA109_max = DFA.UnpackEncodedStringToUnsignedChars(DFA109_maxS);
        static readonly short[] DFA109_accept = DFA.UnpackEncodedString(DFA109_acceptS);
        static readonly short[] DFA109_special = DFA.UnpackEncodedString(DFA109_specialS);
        static readonly short[][] DFA109_transition = DFA.UnpackEncodedStringArray(DFA109_transitionS);

        protected class DFA109 : DFA
        {
            public DFA109(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 109;
                this.eot = DFA109_eot;
                this.eof = DFA109_eof;
                this.min = DFA109_min;
                this.max = DFA109_max;
                this.accept = DFA109_accept;
                this.special = DFA109_special;
                this.transition = DFA109_transition;

            }

            override public string Description
            {
                get { return "1168:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );"; }
            }

        }


        protected internal int DFA109_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA109_1 = input.LA(1);

                       	 
                       	int index109_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred23_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index109_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA109_2 = input.LA(1);

                       	 
                       	int index109_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred23_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index109_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA109_3 = input.LA(1);

                       	 
                       	int index109_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred23_JavaMaker()) ) { s = 47; }

                       	else if ( (synpred24_JavaMaker()) ) { s = 48; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index109_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA109_4 = input.LA(1);

                       	 
                       	int index109_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred23_JavaMaker()) ) { s = 47; }

                       	else if ( (true) ) { s = 5; }

                       	 
                       	input.Seek(index109_4);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae109 =
                new NoViableAltException(dfa.Description, 109, _s, input);
            dfa.Error(nvae109);
            throw nvae109;
        }
        const string DFA170_eotS =
            "\x0c\uffff";
        const string DFA170_eofS =
            "\x0c\uffff";
        const string DFA170_minS =
            "\x01\u008a\x02\x47\x01\uffff\x01\x41\x01\uffff\x02\x45\x01\x41"+
            "\x01\x49\x02\x45";
        const string DFA170_maxS =
            "\x01\u0115\x02\u0094\x01\uffff\x01\u0115\x01\uffff\x02\u00dc"+
            "\x01\u0115\x01\u0094\x02\u00dc";
        const string DFA170_acceptS =
            "\x03\uffff\x01\x01\x01\uffff\x01\x02\x06\uffff";
        const string DFA170_specialS =
            "\x0c\uffff}>";
        static readonly string[] DFA170_transitionS = {
                "\x01\x01\x0d\uffff\x04\x02\x27\uffff\x01\x02\x19\uffff\x01"+
                "\x02\x02\uffff\x10\x02\x01\uffff\x04\x02\x02\uffff\x04\x02"+
                "\x05\uffff\x01\x02\x06\uffff\x02\x02\x09\uffff\x01\x02\x02"+
                "\uffff\x01\x02",
                "\x01\x05\x01\uffff\x01\x05\x18\uffff\x01\x04\x31\uffff"+
                "\x01\x03",
                "\x01\x05\x01\uffff\x01\x05\x18\uffff\x01\x04\x31\uffff"+
                "\x01\x03",
                "",
                "\x01\x03\x03\uffff\x01\x05\x3c\uffff\x08\x03\x01\x06\x0d"+
                "\uffff\x04\x07\x27\uffff\x01\x07\x0a\uffff\x01\x03\x0d\uffff"+
                "\x01\x03\x01\x07\x02\uffff\x10\x07\x01\uffff\x04\x07\x02"+
                "\uffff\x04\x07\x04\x03\x01\uffff\x01\x07\x06\uffff\x02\x07"+
                "\x09\uffff\x01\x07\x02\x03\x01\x07",
                "",
                "\x01\x03\x1c\uffff\x01\x03\x0a\uffff\x01\x03\x01\uffff"+
                "\x01\x08\x24\uffff\x01\x03\x01\uffff\x01\x09\x39\uffff\x01"+
                "\x03\x0b\uffff\x01\x03",
                "\x01\x03\x1c\uffff\x01\x03\x0a\uffff\x01\x03\x01\uffff"+
                "\x01\x08\x24\uffff\x01\x03\x01\uffff\x01\x09\x39\uffff\x01"+
                "\x03\x0b\uffff\x01\x03",
                "\x01\x03\x03\uffff\x01\x05\x3c\uffff\x08\x03\x01\x0a\x0d"+
                "\uffff\x04\x0b\x27\uffff\x01\x0b\x0a\uffff\x01\x03\x0d\uffff"+
                "\x01\x03\x01\x0b\x02\uffff\x10\x0b\x01\uffff\x04\x0b\x02"+
                "\uffff\x04\x0b\x04\x03\x01\uffff\x01\x0b\x06\uffff\x02\x0b"+
                "\x09\uffff\x01\x0b\x02\x03\x01\x0b",
                "\x01\x05\x4a\uffff\x01\x03",
                "\x01\x03\x1c\uffff\x01\x03\x0a\uffff\x01\x03\x01\uffff"+
                "\x01\x08\x24\uffff\x01\x03\x01\uffff\x01\x09\x39\uffff\x01"+
                "\x03\x0b\uffff\x01\x03",
                "\x01\x03\x1c\uffff\x01\x03\x0a\uffff\x01\x03\x01\uffff"+
                "\x01\x08\x24\uffff\x01\x03\x01\uffff\x01\x09\x39\uffff\x01"+
                "\x03\x0b\uffff\x01\x03"
        };

        static readonly short[] DFA170_eot = DFA.UnpackEncodedString(DFA170_eotS);
        static readonly short[] DFA170_eof = DFA.UnpackEncodedString(DFA170_eofS);
        static readonly char[] DFA170_min = DFA.UnpackEncodedStringToUnsignedChars(DFA170_minS);
        static readonly char[] DFA170_max = DFA.UnpackEncodedStringToUnsignedChars(DFA170_maxS);
        static readonly short[] DFA170_accept = DFA.UnpackEncodedString(DFA170_acceptS);
        static readonly short[] DFA170_special = DFA.UnpackEncodedString(DFA170_specialS);
        static readonly short[][] DFA170_transition = DFA.UnpackEncodedStringArray(DFA170_transitionS);

        protected class DFA170 : DFA
        {
            public DFA170(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 170;
                this.eot = DFA170_eot;
                this.eof = DFA170_eof;
                this.min = DFA170_min;
                this.max = DFA170_max;
                this.accept = DFA170_accept;
                this.special = DFA170_special;
                this.transition = DFA170_transition;

            }

            override public string Description
            {
                get { return "()* loopback of 1495:5: ( type_or_generic '.' )*"; }
            }

        }

        const string DFA257_eotS =
            "\x10\uffff";
        const string DFA257_eofS =
            "\x10\uffff";
        const string DFA257_minS =
            "\x01\x5d\x07\uffff\x01\x49\x07\uffff";
        const string DFA257_maxS =
            "\x01\u0096\x07\uffff\x01\u0096\x07\uffff";
        const string DFA257_acceptS =
            "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
            "\x07\x01\uffff\x01\x09\x01\x0a\x01\x0c\x01\x0d\x01\x0e\x01\x08"+
            "\x01\x0b";
        const string DFA257_specialS =
            "\x10\uffff}>";
        static readonly string[] DFA257_transitionS = {
                "\x01\x05\x01\x06\x01\x04\x01\x0a\x01\x09\x01\x0b\x01\x0d"+
                "\x01\x0c\x01\x07\x05\uffff\x01\x02\x01\x03\x01\x01\x28\uffff"+
                "\x01\x08",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\x0f\x4c\uffff\x01\x0e",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA257_eot = DFA.UnpackEncodedString(DFA257_eotS);
        static readonly short[] DFA257_eof = DFA.UnpackEncodedString(DFA257_eofS);
        static readonly char[] DFA257_min = DFA.UnpackEncodedStringToUnsignedChars(DFA257_minS);
        static readonly char[] DFA257_max = DFA.UnpackEncodedStringToUnsignedChars(DFA257_maxS);
        static readonly short[] DFA257_accept = DFA.UnpackEncodedString(DFA257_acceptS);
        static readonly short[] DFA257_special = DFA.UnpackEncodedString(DFA257_specialS);
        static readonly short[][] DFA257_transition = DFA.UnpackEncodedStringArray(DFA257_transitionS);

        protected class DFA257 : DFA
        {
            public DFA257(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 257;
                this.eot = DFA257_eot;
                this.eof = DFA257_eof;
                this.min = DFA257_min;
                this.max = DFA257_max;
                this.accept = DFA257_accept;
                this.special = DFA257_special;
                this.transition = DFA257_transition;

            }

            override public string Description
            {
                get { return "1890:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );"; }
            }

        }

        const string DFA266_eotS =
            "\x47\uffff";
        const string DFA266_eofS =
            "\x47\uffff";
        const string DFA266_minS =
            "\x01\x24\x13\x00\x14\uffff\x01\x00\x1c\uffff\x01\x00\x01\uffff";
        const string DFA266_maxS =
            "\x01\u0115\x13\x00\x14\uffff\x01\x00\x1c\uffff\x01\x00\x01\uffff";
        const string DFA266_acceptS =
            "\x14\uffff\x02\x01\x01\x03\x2f\uffff\x01\x02";
        const string DFA266_specialS =
            "\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
            "\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e"+
            "\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x14\uffff\x01\x14\x1c"+
            "\uffff\x01\x15\x01\uffff}>";
        static readonly string[] DFA266_transitionS = {
                "\x02\x16\x0b\uffff\x01\x16\x08\uffff\x02\x16\x02\uffff\x01"+
                "\x16\x01\uffff\x01\x16\x01\x0b\x02\x16\x03\uffff\x01\x16"+
                "\x01\uffff\x01\x16\x01\uffff\x01\x16\x13\uffff\x01\x16\x09"+
                "\uffff\x02\x16\x02\uffff\x01\x16\x14\uffff\x01\x03\x01\x04"+
                "\x01\x05\x01\x0d\x01\x09\x01\x0a\x01\x08\x01\x07\x01\x12"+
                "\x09\x16\x03\uffff\x01\x16\x04\x45\x01\x16\x26\uffff\x01"+
                "\x45\x01\uffff\x02\x16\x06\uffff\x01\x15\x01\x14\x01\x16"+
                "\x01\uffff\x02\x16\x03\uffff\x06\x16\x01\uffff\x01\x45\x02"+
                "\uffff\x01\x45\x01\x28\x0e\x45\x01\uffff\x04\x45\x02\uffff"+
                "\x04\x45\x01\x0c\x01\x11\x01\x0f\x01\x10\x01\uffff\x01\x45"+
                "\x05\uffff\x01\x16\x01\x01\x01\x02\x01\uffff\x01\x16\x01"+
                "\uffff\x06\x16\x01\x13\x01\x06\x01\x0e\x01\x45",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\uffff",
                ""
        };

        static readonly short[] DFA266_eot = DFA.UnpackEncodedString(DFA266_eotS);
        static readonly short[] DFA266_eof = DFA.UnpackEncodedString(DFA266_eofS);
        static readonly char[] DFA266_min = DFA.UnpackEncodedStringToUnsignedChars(DFA266_minS);
        static readonly char[] DFA266_max = DFA.UnpackEncodedStringToUnsignedChars(DFA266_maxS);
        static readonly short[] DFA266_accept = DFA.UnpackEncodedString(DFA266_acceptS);
        static readonly short[] DFA266_special = DFA.UnpackEncodedString(DFA266_specialS);
        static readonly short[][] DFA266_transition = DFA.UnpackEncodedStringArray(DFA266_transitionS);

        protected class DFA266 : DFA
        {
            public DFA266(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 266;
                this.eot = DFA266_eot;
                this.eof = DFA266_eof;
                this.min = DFA266_min;
                this.max = DFA266_max;
                this.accept = DFA266_accept;
                this.special = DFA266_special;
                this.transition = DFA266_transition;

            }

            override public string Description
            {
                get { return "1946:1: statement[bool isStatementListCtxt] : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement[isStatementListCtxt] | embedded_statement[isStatementListCtxt] );"; }
            }

        }


        protected internal int DFA266_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA266_0 = input.LA(1);

                       	 
                       	int index266_0 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA266_0 == 263) ) { s = 1; }

                       	else if ( (LA266_0 == 264) ) { s = 2; }

                       	else if ( (LA266_0 == BOOL) ) { s = 3; }

                       	else if ( (LA266_0 == BYTE) ) { s = 4; }

                       	else if ( (LA266_0 == CHAR) ) { s = 5; }

                       	else if ( (LA266_0 == 275) ) { s = 6; }

                       	else if ( (LA266_0 == DOUBLE) ) { s = 7; }

                       	else if ( (LA266_0 == FLOAT) ) { s = 8; }

                       	else if ( (LA266_0 == INT) ) { s = 9; }

                       	else if ( (LA266_0 == LONG) ) { s = 10; }

                       	else if ( (LA266_0 == OBJECT) ) { s = 11; }

                       	else if ( (LA266_0 == 251) ) { s = 12; }

                       	else if ( (LA266_0 == SHORT) ) { s = 13; }

                       	else if ( (LA266_0 == 276) ) { s = 14; }

                       	else if ( (LA266_0 == 253) ) { s = 15; }

                       	else if ( (LA266_0 == 254) ) { s = 16; }

                       	else if ( (LA266_0 == 252) ) { s = 17; }

                       	else if ( (LA266_0 == IDENTIFIER) ) { s = 18; }

                       	else if ( (LA266_0 == 274) ) { s = 19; }

                       	else if ( (LA266_0 == 206) && (synpred35_JavaMaker()) ) { s = 20; }

                       	else if ( (LA266_0 == 205) && (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( ((LA266_0 >= MONONOT && LA266_0 <= MONOTWIDDLE) || LA266_0 == NEW_ARRAY || (LA266_0 >= RETURN && LA266_0 <= TRY) || LA266_0 == THROW || LA266_0 == BREAK || (LA266_0 >= THIS && LA266_0 <= FOREACH) || LA266_0 == OPEN_BRACE || LA266_0 == LPAREN || LA266_0 == IF || LA266_0 == BIT_AND || (LA266_0 >= PLUS && LA266_0 <= MINUS) || LA266_0 == STAR || (LA266_0 >= Real_literal && LA266_0 <= NULL) || LA266_0 == USING || LA266_0 == SEMI || (LA266_0 >= 197 && LA266_0 <= 198) || LA266_0 == 207 || (LA266_0 >= 209 && LA266_0 <= 210) || (LA266_0 >= 214 && LA266_0 <= 219) || LA266_0 == 262 || LA266_0 == 266 || (LA266_0 >= 268 && LA266_0 <= 273)) ) { s = 22; }

                       	else if ( (LA266_0 == 225) ) { s = 40; }

                       	else if ( ((LA266_0 >= ELIF && LA266_0 <= UNDEF) || LA266_0 == 195 || LA266_0 == 221 || LA266_0 == 224 || (LA266_0 >= 226 && LA266_0 <= 239) || (LA266_0 >= 241 && LA266_0 <= 244) || (LA266_0 >= 247 && LA266_0 <= 250) || LA266_0 == 256 || LA266_0 == 277) ) { s = 69; }

                       	 
                       	input.Seek(index266_0);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA266_1 = input.LA(1);

                       	 
                       	int index266_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (synpred36_JavaMaker()) ) { s = 70; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA266_2 = input.LA(1);

                       	 
                       	int index266_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (synpred36_JavaMaker()) ) { s = 70; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA266_3 = input.LA(1);

                       	 
                       	int index266_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA266_4 = input.LA(1);

                       	 
                       	int index266_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA266_5 = input.LA(1);

                       	 
                       	int index266_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA266_6 = input.LA(1);

                       	 
                       	int index266_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA266_7 = input.LA(1);

                       	 
                       	int index266_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA266_8 = input.LA(1);

                       	 
                       	int index266_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA266_9 = input.LA(1);

                       	 
                       	int index266_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA266_10 = input.LA(1);

                       	 
                       	int index266_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_10);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA266_11 = input.LA(1);

                       	 
                       	int index266_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA266_12 = input.LA(1);

                       	 
                       	int index266_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA266_13 = input.LA(1);

                       	 
                       	int index266_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA266_14 = input.LA(1);

                       	 
                       	int index266_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA266_15 = input.LA(1);

                       	 
                       	int index266_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA266_16 = input.LA(1);

                       	 
                       	int index266_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 17 : 
                       	int LA266_17 = input.LA(1);

                       	 
                       	int index266_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_17);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 18 : 
                       	int LA266_18 = input.LA(1);

                       	 
                       	int index266_18 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (synpred36_JavaMaker()) ) { s = 70; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_18);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 19 : 
                       	int LA266_19 = input.LA(1);

                       	 
                       	int index266_19 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (synpred36_JavaMaker()) ) { s = 70; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_19);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 20 : 
                       	int LA266_40 = input.LA(1);

                       	 
                       	int index266_40 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (synpred36_JavaMaker()) ) { s = 70; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_40);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 21 : 
                       	int LA266_69 = input.LA(1);

                       	 
                       	int index266_69 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred35_JavaMaker()) ) { s = 21; }

                       	else if ( (synpred36_JavaMaker()) ) { s = 70; }

                       	else if ( (true) ) { s = 22; }

                       	 
                       	input.Seek(index266_69);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae266 =
                new NoViableAltException(dfa.Description, 266, _s, input);
            dfa.Error(nvae266);
            throw nvae266;
        }
        const string DFA267_eotS =
            "\x11\uffff";
        const string DFA267_eofS =
            "\x11\uffff";
        const string DFA267_minS =
            "\x01\x24\x05\uffff\x02\x47\x02\uffff\x01\x3a\x06\uffff";
        const string DFA267_maxS =
            "\x01\u0115\x05\uffff\x02\u009c\x02\uffff\x01\u00df\x06\uffff";
        const string DFA267_acceptS =
            "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x02\uffff"+
            "\x01\x08\x01\x09\x01\uffff\x01\x0b\x01\x0c\x01\x0d\x01\x06\x01"+
            "\x07\x01\x0a";
        const string DFA267_specialS =
            "\x11\uffff}>";
        static readonly string[] DFA267_transitionS = {
                "\x02\x0d\x0b\uffff\x01\x0d\x08\uffff\x01\x04\x01\x05\x02"+
                "\uffff\x01\x04\x01\uffff\x01\x04\x02\x0d\x01\x03\x03\uffff"+
                "\x01\x01\x01\uffff\x01\x0d\x01\uffff\x01\x02\x13\uffff\x01"+
                "\x0d\x09\uffff\x02\x0d\x02\uffff\x01\x0d\x14\uffff\x12\x0d"+
                "\x03\uffff\x01\x09\x04\x0d\x01\x01\x26\uffff\x01\x0d\x01"+
                "\uffff\x01\x0d\x01\x0b\x08\uffff\x01\x0d\x01\uffff\x02\x0d"+
                "\x03\uffff\x01\x0d\x01\x06\x01\x07\x03\x0d\x01\uffff\x01"+
                "\x0d\x02\uffff\x10\x0d\x01\uffff\x04\x0d\x02\uffff\x08\x0d"+
                "\x01\uffff\x01\x0d\x05\uffff\x01\x0c\x02\x0d\x01\uffff\x01"+
                "\x02\x01\uffff\x03\x03\x02\x04\x01\x08\x01\x0a\x03\x0d",
                "",
                "",
                "",
                "",
                "",
                "\x01\x0e\x01\uffff\x01\x0d\x52\uffff\x01\x0e",
                "\x01\x0f\x01\uffff\x01\x0d\x52\uffff\x01\x0f",
                "",
                "",
                "\x01\x10\x05\uffff\x01\x10\x04\uffff\x01\x0d\x03\uffff"+
                "\x02\x0d\x01\uffff\x0a\x0d\x05\uffff\x0b\x0d\x03\uffff\x07"+
                "\x0d\x24\uffff\x03\x0d\x05\uffff\x01\x0d\x33\uffff\x03\x0d"+
                "\x09\uffff\x01\x0d\x01\uffff\x02\x0d",
                "",
                "",
                "",
                "",
                "",
                ""
        };

        static readonly short[] DFA267_eot = DFA.UnpackEncodedString(DFA267_eotS);
        static readonly short[] DFA267_eof = DFA.UnpackEncodedString(DFA267_eofS);
        static readonly char[] DFA267_min = DFA.UnpackEncodedStringToUnsignedChars(DFA267_minS);
        static readonly char[] DFA267_max = DFA.UnpackEncodedStringToUnsignedChars(DFA267_maxS);
        static readonly short[] DFA267_accept = DFA.UnpackEncodedString(DFA267_acceptS);
        static readonly short[] DFA267_special = DFA.UnpackEncodedString(DFA267_specialS);
        static readonly short[][] DFA267_transition = DFA.UnpackEncodedStringArray(DFA267_transitionS);

        protected class DFA267 : DFA
        {
            public DFA267(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 267;
                this.eot = DFA267_eot;
                this.eof = DFA267_eof;
                this.min = DFA267_min;
                this.max = DFA267_max;
                this.accept = DFA267_accept;
                this.special = DFA267_special;
                this.transition = DFA267_transition;

            }

            override public string Description
            {
                get { return "1951:1: embedded_statement[bool isStatementListCtxt] : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement[isStatementListCtxt] | yield_statement | unsafe_statement | fixed_statement | expression_statement );"; }
            }

        }

        const string DFA283_eotS =
            "\x32\uffff";
        const string DFA283_eofS =
            "\x32\uffff";
        const string DFA283_minS =
            "\x01\x24\x13\x00\x1d\uffff\x01\x00";
        const string DFA283_maxS =
            "\x01\u0115\x13\x00\x1d\uffff\x01\x00";
        const string DFA283_acceptS =
            "\x14\uffff\x01\x01\x01\x02\x1c\uffff";
        const string DFA283_specialS =
            "\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
            "\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e"+
            "\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x1d\uffff\x01\x14}>";
        static readonly string[] DFA283_transitionS = {
                "\x02\x15\x0b\uffff\x01\x15\x0f\uffff\x01\x0b\x01\x15\x06"+
                "\uffff\x01\x15\x15\uffff\x01\x15\x09\uffff\x02\x15\x02\uffff"+
                "\x01\x15\x14\uffff\x01\x03\x01\x04\x01\x05\x01\x0d\x01\x09"+
                "\x01\x0a\x01\x08\x01\x07\x01\x12\x09\x15\x04\uffff\x04\x31"+
                "\x27\uffff\x01\x31\x01\uffff\x01\x15\x08\uffff\x01\x14\x01"+
                "\x15\x01\uffff\x02\x15\x03\uffff\x06\x15\x01\uffff\x01\x31"+
                "\x02\uffff\x01\x31\x01\x13\x0e\x31\x01\uffff\x04\x31\x02"+
                "\uffff\x04\x31\x01\x0c\x01\x11\x01\x0f\x01\x10\x01\uffff"+
                "\x01\x31\x06\uffff\x01\x01\x01\x02\x09\uffff\x01\x31\x01"+
                "\x06\x01\x0e\x01\x31",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\uffff"
        };

        static readonly short[] DFA283_eot = DFA.UnpackEncodedString(DFA283_eotS);
        static readonly short[] DFA283_eof = DFA.UnpackEncodedString(DFA283_eofS);
        static readonly char[] DFA283_min = DFA.UnpackEncodedStringToUnsignedChars(DFA283_minS);
        static readonly char[] DFA283_max = DFA.UnpackEncodedStringToUnsignedChars(DFA283_maxS);
        static readonly short[] DFA283_accept = DFA.UnpackEncodedString(DFA283_acceptS);
        static readonly short[] DFA283_special = DFA.UnpackEncodedString(DFA283_specialS);
        static readonly short[][] DFA283_transition = DFA.UnpackEncodedStringArray(DFA283_transitionS);

        protected class DFA283 : DFA
        {
            public DFA283(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 283;
                this.eot = DFA283_eot;
                this.eof = DFA283_eof;
                this.min = DFA283_min;
                this.max = DFA283_max;
                this.accept = DFA283_accept;
                this.special = DFA283_special;
                this.transition = DFA283_transition;

            }

            override public string Description
            {
                get { return "2045:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );"; }
            }

        }


        protected internal int DFA283_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA283_0 = input.LA(1);

                       	 
                       	int index283_0 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA283_0 == 263) ) { s = 1; }

                       	else if ( (LA283_0 == 264) ) { s = 2; }

                       	else if ( (LA283_0 == BOOL) ) { s = 3; }

                       	else if ( (LA283_0 == BYTE) ) { s = 4; }

                       	else if ( (LA283_0 == CHAR) ) { s = 5; }

                       	else if ( (LA283_0 == 275) ) { s = 6; }

                       	else if ( (LA283_0 == DOUBLE) ) { s = 7; }

                       	else if ( (LA283_0 == FLOAT) ) { s = 8; }

                       	else if ( (LA283_0 == INT) ) { s = 9; }

                       	else if ( (LA283_0 == LONG) ) { s = 10; }

                       	else if ( (LA283_0 == OBJECT) ) { s = 11; }

                       	else if ( (LA283_0 == 251) ) { s = 12; }

                       	else if ( (LA283_0 == SHORT) ) { s = 13; }

                       	else if ( (LA283_0 == 276) ) { s = 14; }

                       	else if ( (LA283_0 == 253) ) { s = 15; }

                       	else if ( (LA283_0 == 254) ) { s = 16; }

                       	else if ( (LA283_0 == 252) ) { s = 17; }

                       	else if ( (LA283_0 == IDENTIFIER) ) { s = 18; }

                       	else if ( (LA283_0 == 225) ) { s = 19; }

                       	else if ( (LA283_0 == 206) && (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( ((LA283_0 >= MONONOT && LA283_0 <= MONOTWIDDLE) || LA283_0 == NEW_ARRAY || LA283_0 == THIS || LA283_0 == LPAREN || LA283_0 == BIT_AND || (LA283_0 >= PLUS && LA283_0 <= MINUS) || LA283_0 == STAR || (LA283_0 >= Real_literal && LA283_0 <= NULL) || LA283_0 == 197 || LA283_0 == 207 || (LA283_0 >= 209 && LA283_0 <= 210) || (LA283_0 >= 214 && LA283_0 <= 219)) ) { s = 21; }

                       	else if ( ((LA283_0 >= ELIF && LA283_0 <= UNDEF) || LA283_0 == 195 || LA283_0 == 221 || LA283_0 == 224 || (LA283_0 >= 226 && LA283_0 <= 239) || (LA283_0 >= 241 && LA283_0 <= 244) || (LA283_0 >= 247 && LA283_0 <= 250) || LA283_0 == 256 || LA283_0 == 274 || LA283_0 == 277) ) { s = 49; }

                       	 
                       	input.Seek(index283_0);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA283_1 = input.LA(1);

                       	 
                       	int index283_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA283_2 = input.LA(1);

                       	 
                       	int index283_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA283_3 = input.LA(1);

                       	 
                       	int index283_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA283_4 = input.LA(1);

                       	 
                       	int index283_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA283_5 = input.LA(1);

                       	 
                       	int index283_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA283_6 = input.LA(1);

                       	 
                       	int index283_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA283_7 = input.LA(1);

                       	 
                       	int index283_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA283_8 = input.LA(1);

                       	 
                       	int index283_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA283_9 = input.LA(1);

                       	 
                       	int index283_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA283_10 = input.LA(1);

                       	 
                       	int index283_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_10);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA283_11 = input.LA(1);

                       	 
                       	int index283_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA283_12 = input.LA(1);

                       	 
                       	int index283_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA283_13 = input.LA(1);

                       	 
                       	int index283_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA283_14 = input.LA(1);

                       	 
                       	int index283_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA283_15 = input.LA(1);

                       	 
                       	int index283_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA283_16 = input.LA(1);

                       	 
                       	int index283_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 17 : 
                       	int LA283_17 = input.LA(1);

                       	 
                       	int index283_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_17);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 18 : 
                       	int LA283_18 = input.LA(1);

                       	 
                       	int index283_18 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_18);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 19 : 
                       	int LA283_19 = input.LA(1);

                       	 
                       	int index283_19 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_19);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 20 : 
                       	int LA283_49 = input.LA(1);

                       	 
                       	int index283_49 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred40_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index283_49);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae283 =
                new NoViableAltException(dfa.Description, 283, _s, input);
            dfa.Error(nvae283);
            throw nvae283;
        }
        const string DFA294_eotS =
            "\x32\uffff";
        const string DFA294_eofS =
            "\x32\uffff";
        const string DFA294_minS =
            "\x01\x24\x13\x00\x1d\uffff\x01\x00";
        const string DFA294_maxS =
            "\x01\u0115\x13\x00\x1d\uffff\x01\x00";
        const string DFA294_acceptS =
            "\x14\uffff\x01\x01\x01\x02\x1c\uffff";
        const string DFA294_specialS =
            "\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
            "\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e"+
            "\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x1d\uffff\x01\x14}>";
        static readonly string[] DFA294_transitionS = {
                "\x02\x15\x0b\uffff\x01\x15\x0f\uffff\x01\x0b\x01\x15\x06"+
                "\uffff\x01\x15\x15\uffff\x01\x15\x09\uffff\x02\x15\x02\uffff"+
                "\x01\x15\x14\uffff\x01\x03\x01\x04\x01\x05\x01\x0d\x01\x09"+
                "\x01\x0a\x01\x08\x01\x07\x01\x12\x09\x15\x04\uffff\x04\x31"+
                "\x27\uffff\x01\x31\x01\uffff\x01\x15\x08\uffff\x01\x14\x01"+
                "\x15\x01\uffff\x02\x15\x03\uffff\x06\x15\x01\uffff\x01\x31"+
                "\x02\uffff\x01\x31\x01\x13\x0e\x31\x01\uffff\x04\x31\x02"+
                "\uffff\x04\x31\x01\x0c\x01\x11\x01\x0f\x01\x10\x01\uffff"+
                "\x01\x31\x06\uffff\x01\x01\x01\x02\x09\uffff\x01\x31\x01"+
                "\x06\x01\x0e\x01\x31",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "\x01\uffff",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x01\uffff"
        };

        static readonly short[] DFA294_eot = DFA.UnpackEncodedString(DFA294_eotS);
        static readonly short[] DFA294_eof = DFA.UnpackEncodedString(DFA294_eofS);
        static readonly char[] DFA294_min = DFA.UnpackEncodedStringToUnsignedChars(DFA294_minS);
        static readonly char[] DFA294_max = DFA.UnpackEncodedStringToUnsignedChars(DFA294_maxS);
        static readonly short[] DFA294_accept = DFA.UnpackEncodedString(DFA294_acceptS);
        static readonly short[] DFA294_special = DFA.UnpackEncodedString(DFA294_specialS);
        static readonly short[][] DFA294_transition = DFA.UnpackEncodedStringArray(DFA294_transitionS);

        protected class DFA294 : DFA
        {
            public DFA294(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 294;
                this.eot = DFA294_eot;
                this.eof = DFA294_eof;
                this.min = DFA294_min;
                this.max = DFA294_max;
                this.accept = DFA294_accept;
                this.special = DFA294_special;
                this.transition = DFA294_transition;

            }

            override public string Description
            {
                get { return "2126:1: resource_acquisition returns [List<string> resourceNames] : ( ( local_variable_declaration )=> local_variable_declaration | expression -> ^( TYPE[$expression.tree.Token, \"TYPE\"] IDENTIFIER[$expression.tree.Token, \"IDisposable\"] ) IDENTIFIER[$expression.tree.Token, \"__newVar\"+newVarCtr++] ASSIGN[$expression.tree.Token, \"=\"] expression );"; }
            }

        }


        protected internal int DFA294_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
        {
                ITreeNodeStream input = (ITreeNodeStream)_input;
        	int _s = s;
            switch ( s )
            {
                   	case 0 : 
                       	int LA294_0 = input.LA(1);

                       	 
                       	int index294_0 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (LA294_0 == 263) ) { s = 1; }

                       	else if ( (LA294_0 == 264) ) { s = 2; }

                       	else if ( (LA294_0 == BOOL) ) { s = 3; }

                       	else if ( (LA294_0 == BYTE) ) { s = 4; }

                       	else if ( (LA294_0 == CHAR) ) { s = 5; }

                       	else if ( (LA294_0 == 275) ) { s = 6; }

                       	else if ( (LA294_0 == DOUBLE) ) { s = 7; }

                       	else if ( (LA294_0 == FLOAT) ) { s = 8; }

                       	else if ( (LA294_0 == INT) ) { s = 9; }

                       	else if ( (LA294_0 == LONG) ) { s = 10; }

                       	else if ( (LA294_0 == OBJECT) ) { s = 11; }

                       	else if ( (LA294_0 == 251) ) { s = 12; }

                       	else if ( (LA294_0 == SHORT) ) { s = 13; }

                       	else if ( (LA294_0 == 276) ) { s = 14; }

                       	else if ( (LA294_0 == 253) ) { s = 15; }

                       	else if ( (LA294_0 == 254) ) { s = 16; }

                       	else if ( (LA294_0 == 252) ) { s = 17; }

                       	else if ( (LA294_0 == IDENTIFIER) ) { s = 18; }

                       	else if ( (LA294_0 == 225) ) { s = 19; }

                       	else if ( (LA294_0 == 206) && (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( ((LA294_0 >= MONONOT && LA294_0 <= MONOTWIDDLE) || LA294_0 == NEW_ARRAY || LA294_0 == THIS || LA294_0 == LPAREN || LA294_0 == BIT_AND || (LA294_0 >= PLUS && LA294_0 <= MINUS) || LA294_0 == STAR || (LA294_0 >= Real_literal && LA294_0 <= NULL) || LA294_0 == 197 || LA294_0 == 207 || (LA294_0 >= 209 && LA294_0 <= 210) || (LA294_0 >= 214 && LA294_0 <= 219)) ) { s = 21; }

                       	else if ( ((LA294_0 >= ELIF && LA294_0 <= UNDEF) || LA294_0 == 195 || LA294_0 == 221 || LA294_0 == 224 || (LA294_0 >= 226 && LA294_0 <= 239) || (LA294_0 >= 241 && LA294_0 <= 244) || (LA294_0 >= 247 && LA294_0 <= 250) || LA294_0 == 256 || LA294_0 == 274 || LA294_0 == 277) ) { s = 49; }

                       	 
                       	input.Seek(index294_0);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 1 : 
                       	int LA294_1 = input.LA(1);

                       	 
                       	int index294_1 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_1);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 2 : 
                       	int LA294_2 = input.LA(1);

                       	 
                       	int index294_2 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_2);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 3 : 
                       	int LA294_3 = input.LA(1);

                       	 
                       	int index294_3 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_3);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 4 : 
                       	int LA294_4 = input.LA(1);

                       	 
                       	int index294_4 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_4);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 5 : 
                       	int LA294_5 = input.LA(1);

                       	 
                       	int index294_5 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_5);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 6 : 
                       	int LA294_6 = input.LA(1);

                       	 
                       	int index294_6 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_6);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 7 : 
                       	int LA294_7 = input.LA(1);

                       	 
                       	int index294_7 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_7);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 8 : 
                       	int LA294_8 = input.LA(1);

                       	 
                       	int index294_8 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_8);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 9 : 
                       	int LA294_9 = input.LA(1);

                       	 
                       	int index294_9 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_9);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 10 : 
                       	int LA294_10 = input.LA(1);

                       	 
                       	int index294_10 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_10);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 11 : 
                       	int LA294_11 = input.LA(1);

                       	 
                       	int index294_11 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_11);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 12 : 
                       	int LA294_12 = input.LA(1);

                       	 
                       	int index294_12 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_12);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 13 : 
                       	int LA294_13 = input.LA(1);

                       	 
                       	int index294_13 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_13);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 14 : 
                       	int LA294_14 = input.LA(1);

                       	 
                       	int index294_14 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_14);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 15 : 
                       	int LA294_15 = input.LA(1);

                       	 
                       	int index294_15 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_15);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 16 : 
                       	int LA294_16 = input.LA(1);

                       	 
                       	int index294_16 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_16);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 17 : 
                       	int LA294_17 = input.LA(1);

                       	 
                       	int index294_17 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_17);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 18 : 
                       	int LA294_18 = input.LA(1);

                       	 
                       	int index294_18 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_18);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 19 : 
                       	int LA294_19 = input.LA(1);

                       	 
                       	int index294_19 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_19);
                       	if ( s >= 0 ) return s;
                       	break;
                   	case 20 : 
                       	int LA294_49 = input.LA(1);

                       	 
                       	int index294_49 = input.Index;
                       	input.Rewind();
                       	s = -1;
                       	if ( (synpred41_JavaMaker()) ) { s = 20; }

                       	else if ( (true) ) { s = 21; }

                       	 
                       	input.Seek(index294_49);
                       	if ( s >= 0 ) return s;
                       	break;
            }
            if (state.backtracking > 0) {state.failed = true; return -1;}
            NoViableAltException nvae294 =
                new NoViableAltException(dfa.Description, 294, _s, input);
            dfa.Error(nvae294);
            throw nvae294;
        }
     

        public static readonly BitSet FOLLOW_namespace_body_in_compilation_unit124 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_193_in_namespace_declaration142 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_qualified_identifier_in_namespace_declaration148 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_namespace_block_in_namespace_declaration160 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_namespace_declaration164 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_namespace_block173 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000120UL,0x0000000000800000UL,0x8020000004001FF6UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_namespace_body_in_namespace_block177 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_namespace_block181 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_extern_alias_directives_in_namespace_body189 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000800000UL,0x8020000004001FF6UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_using_directives_in_namespace_body194 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_global_attributes_in_namespace_body199 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_namespace_member_declarations_in_namespace_body204 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives213 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_194_in_extern_alias_directive224 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
        public static readonly BitSet FOLLOW_195_in_extern_alias_directive228 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_extern_alias_directive234 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_extern_alias_directive237 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_using_directive_in_using_directives247 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000800000UL});
        public static readonly BitSet FOLLOW_using_alias_directive_in_using_directive257 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_using_namespace_directive_in_using_directive262 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_USING_in_using_alias_directive271 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_using_alias_directive275 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_using_alias_directive279 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive283 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_using_alias_directive287 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_USING_in_using_namespace_directive306 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_namespace_name_in_using_namespace_directive310 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_using_namespace_directive314 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations323 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration347 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attributes_in_namespace_member_declaration352 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_modifiers_in_namespace_member_declaration358 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_type_declaration_in_namespace_member_declaration366 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_196_in_type_declaration407 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x8020000000000000UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_class_declaration_in_type_declaration447 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_struct_declaration_in_type_declaration474 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_declaration_in_type_declaration499 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_class_declaration_in_type_declaration537 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_struct_declaration_in_type_declaration554 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_declaration_in_type_declaration570 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_enum_declaration_in_type_declaration604 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_delegate_declaration_in_type_declaration643 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_qualified_identifier669 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_qualified_identifier674 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_qualified_identifier678 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_namespace_or_type_name_in_namespace_name695 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_modifier_in_modifiers716 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
        public static readonly BitSet FOLLOW_197_in_modifier729 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PUBLIC_in_modifier737 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PROTECTED_in_modifier741 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PRIVATE_in_modifier745 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_INTERNAL_in_modifier751 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_198_in_modifier762 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_199_in_modifier769 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_200_in_modifier775 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_STATIC_in_modifier784 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_201_in_modifier791 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_202_in_modifier800 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_194_in_modifier806 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_203_in_modifier814 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_204_in_modifier820 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attributes_in_class_member_declaration842 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
        public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration852 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
        public static readonly BitSet FOLLOW_205_in_class_member_declaration863 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_class_member_declaration869 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarators_in_class_member_declaration873 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_class_member_declaration877 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_event_declaration_in_class_member_declaration906 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_196_in_class_member_declaration920 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x8020000000004000UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_void_type_in_class_member_declaration925 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_method_declaration_in_class_member_declaration929 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_declaration_in_class_member_declaration1078 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_class_declaration_in_class_member_declaration1096 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_struct_declaration_in_class_member_declaration1114 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_declaration_in_class_member_declaration1128 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_void_type_in_class_member_declaration1141 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_method_declaration_in_class_member_declaration1147 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_class_member_declaration1161 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000006UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0189UL});
        public static readonly BitSet FOLLOW_method_declaration_in_class_member_declaration1179 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_property_declaration_in_class_member_declaration1206 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_name_in_class_member_declaration1237 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_class_member_declaration1239 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_indexer_declaration_in_class_member_declaration1243 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_indexer_declaration_in_class_member_declaration1260 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_field_declaration_in_class_member_declaration1279 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_operator_declaration_in_class_member_declaration1316 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_class_declaration_in_class_member_declaration1356 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_struct_declaration_in_class_member_declaration1369 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_enum_declaration_in_class_member_declaration1382 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_delegate_declaration_in_class_member_declaration1395 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_conversion_operator_declaration_in_class_member_declaration1407 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_constructor_declaration_in_class_member_declaration1432 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_destructor_declaration_in_class_member_declaration1445 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_primary_expression1480 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_brackets_in_primary_expression1492 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression1504 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_207_in_primary_expression1532 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_brackets_in_primary_expression1544 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression1556 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_primary_expression_start_in_primary_expression1571 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression1583 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_197_in_primary_expression1598 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000082UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_object_creation_expression_in_primary_expression1629 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression1642 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_object_creation_expression_in_primary_expression1670 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_object_creation_expression_in_primary_expression1685 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_sizeof_expression_in_primary_expression1702 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_checked_expression_in_primary_expression1713 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unchecked_expression_in_primary_expression1732 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_default_value_expression_in_primary_expression1749 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_method_expression_in_primary_expression1762 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_predefined_type_in_primary_expression_start1775 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression_start1803 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression_start1807 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression_start1812 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
        public static readonly BitSet FOLLOW_208_in_primary_expression_start1818 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_primary_expression_start1823 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_primary_expression_start1834 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_207_in_primary_expression_start1842 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_paren_expression_in_primary_expression_start1852 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_typeof_expression_in_primary_expression_start1857 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_literal_in_primary_expression_start1875 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_access_identifier_in_primary_expression_part1888 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_brackets_or_arguments_in_primary_expression_part1894 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_209_in_primary_expression_part1903 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_210_in_primary_expression_part1920 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_access_operator_in_access_identifier1944 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_access_identifier1948 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_access_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_brackets_in_brackets_or_arguments1981 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_arguments_in_brackets_or_arguments1986 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_brackets1997 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000246UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_brackets2001 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_brackets2006 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_paren_expression2026 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_paren_expression2030 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_paren_expression2034 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_arguments2052 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_list_in_arguments2056 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_arguments2061 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_argument_in_argument_list2082 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_argument_list2085 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_in_argument_list2089 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_argument_name_in_argument2113 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_value_in_argument2117 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_argument_value_in_argument2122 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_argument_name2129 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_argument_name2133 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_argument_value2141 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ref_variable_reference_in_argument_value2147 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_212_in_argument_value2153 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_reference_in_argument_value2157 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_213_in_ref_variable_reference2165 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_LPAREN_in_ref_variable_reference2187 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_ref_variable_reference2191 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_ref_variable_reference2195 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FE68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_ref_variable_reference_in_ref_variable_reference2200 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_reference_in_ref_variable_reference2204 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_reference_in_ref_variable_reference2240 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_variable_reference2250 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_rank_specifier_in_rank_specifiers2258 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_rank_specifier2279 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000040UL});
        public static readonly BitSet FOLLOW_dim_separators_in_rank_specifier2283 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_rank_specifier2290 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COMMA_in_dim_separators2329 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_type_name_in_delegate_creation_expression2349 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_delegate_creation_expression2353 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_name_in_delegate_creation_expression2359 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_delegate_creation_expression2363 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2398 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2415 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000306UL,0x000000000F0FFFFCUL,0x7F9EFFFF28008008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer2420 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_anonymous_object_initializer2424 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2431 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list2439 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_member_declarator_list2443 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF28008008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list2445 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_qid_in_member_declarator2457 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_member_declarator2462 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_member_declarator2466 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2482 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_primary_expression_in_primary_or_array_creation_expression2487 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NEW_ARRAY_in_array_creation_expression2510 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_array_creation_expression2518 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_array_creation_expression2526 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_array_creation_expression2530 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_array_creation_expression2536 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000000000002A2UL,0x000000000F3007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_rank_specifiers_in_array_creation_expression2569 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression2605 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_arguments_in_array_creation_expression2648 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression2655 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression2672 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_arguments_in_array_creation_expression2683 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression2708 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_rank_specifier_in_array_creation_expression2733 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression2742 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_arguments_in_array_creation_expression2818 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression2825 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression2842 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_arguments_in_array_creation_expression2853 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_array_initializer2883 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000A600800003A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_initializer_list_in_array_initializer2887 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_array_initializer2892 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_array_initializer2897 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list2905 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_variable_initializer_list2908 = new BitSet(new ulong[]{0x0002003000000000UL,0x00002600800002A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list2910 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_expression_in_variable_initializer2920 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_initializer_in_variable_initializer2924 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_214_in_sizeof_expression2932 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_sizeof_expression2937 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unmanaged_type_in_sizeof_expression2942 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_sizeof_expression2946 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_215_in_checked_expression2955 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_checked_expression2960 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_checked_expression2965 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_checked_expression2969 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_216_in_unchecked_expression2979 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_unchecked_expression2984 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_unchecked_expression2989 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_unchecked_expression2993 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_217_in_default_value_expression3003 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_default_value_expression3008 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_default_value_expression3013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_default_value_expression3017 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_218_in_anonymous_method_expression3026 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression3030 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_anonymous_method_expression3034 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_explicit_anonymous_function_signature3041 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature3045 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_explicit_anonymous_function_signature3050 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3072 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list3077 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3082 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter3093 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_explicit_anonymous_function_parameter3098 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_explicit_anonymous_function_parameter3102 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_anonymous_function_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_object_creation_expression3126 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL});
        public static readonly BitSet FOLLOW_LPAREN_in_object_creation_expression3135 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_list_in_object_creation_expression3139 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_object_creation_expression3144 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000280UL});
        public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression3150 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression3178 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_object_or_collection_initializer3202 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000A60080000386UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_object_initializer_in_object_or_collection_initializer3206 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer3213 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_element_initializer_list_in_collection_initializer3223 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_collection_initializer3227 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_collection_initializer3232 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list3241 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_element_initializer_list3245 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000A60080000386UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list3247 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_element_initializer3258 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_element_initializer3264 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_list_in_element_initializer3268 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_element_initializer3272 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_initializer_list_in_object_initializer3287 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_object_initializer3292 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_object_initializer3297 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list3306 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_member_initializer_list3310 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list3312 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_member_initializer3323 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_member_initializer3327 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000286UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_initializer_value_in_member_initializer3331 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_initializer_value3340 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_object_or_collection_initializer_in_initializer_value3346 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_219_in_typeof_expression3358 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_typeof_expression3363 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unbound_type_name_in_typeof_expression3375 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_type_in_typeof_expression3386 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_void_type_in_typeof_expression3398 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_typeof_expression3403 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unbound_type_name_start_in_unbound_type_name3419 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3438 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name3442 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name3449 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3459 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start3469 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
        public static readonly BitSet FOLLOW_208_in_unbound_type_name_start3472 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start3474 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DOT_in_unbound_type_name_part3483 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_part3487 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTHAN_in_generic_dimension_specifier3495 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_commas_in_generic_dimension_specifier3499 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_generic_dimension_specifier3504 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COMMA_in_commas3513 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_namespace_or_type_name_in_type_name3533 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_namespace_or_type_name3550 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL,0x0000000000010000UL});
        public static readonly BitSet FOLLOW_208_in_namespace_or_type_name3556 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_namespace_or_type_name3561 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_namespace_or_type_name3568 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_namespace_or_type_name3575 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_identifier_in_type_or_generic3613 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_type_or_generic3619 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_type_or_generic3628 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_qid_start_in_qid3647 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_qid_part_in_qid3659 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_predefined_type_in_qid_start3682 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_qid_start3700 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_qid_start3704 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_qid_start3716 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
        public static readonly BitSet FOLLOW_208_in_qid_start3722 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_qid_start3728 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_literal_in_qid_start3737 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_access_identifier_in_qid_part3753 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTHAN_in_generic_argument_list3774 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF30004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_arguments_in_generic_argument_list3780 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_generic_argument_list3784 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_argument_in_type_arguments3805 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_type_arguments3810 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF30004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_argument_in_type_arguments3814 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_javaish_type_argument_in_type_argument3839 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_type_argument3848 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_220_in_javaish_type_argument3876 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_221_in_javaish_type_argument3878 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_javaish_type_argument3880 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_220_in_javaish_type_argument3890 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_javaish_type_argument3900 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_predefined_type_in_type3941 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_type_name_in_type3949 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_rank_specifiers_in_type3958 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_STAR_in_type3964 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_predefined_type_in_type4024 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_type_name_in_type4032 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_STAR_in_type4041 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_220_in_type4051 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_predefined_type_in_type4089 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_name_in_type4097 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_206_in_type4127 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_STAR_in_type4132 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_predefined_type_in_non_nullable_type4168 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000020UL});
        public static readonly BitSet FOLLOW_type_name_in_non_nullable_type4174 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000020UL});
        public static readonly BitSet FOLLOW_rank_specifiers_in_non_nullable_type4179 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_STAR_in_non_nullable_type4182 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_206_in_non_nullable_type4219 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_STAR_in_non_nullable_type4221 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_type_in_non_array_type4251 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_array_type4258 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_unmanaged_type4265 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_class_type4272 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_pointer_type4279 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_block4295 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_block4302 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000B8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_statement_list_in_block4306 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_block4311 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_in_statement_list4320 = new BitSet(new ulong[]{0x4C02003000000002UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_assignment_in_expression4346 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_non_assignment_expression_in_expression4352 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_expression_list4361 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_expression_list4365 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_expression_list4369 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_unary_expression_in_assignment4379 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000003FF000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_assignment4383 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_assignment4387 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_cast_expression_in_unary_expression4407 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_primary_or_array_creation_expression_in_unary_expression4412 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PLUS_in_unary_expression4423 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4427 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MINUS_in_unary_expression4444 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4448 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MONONOT_in_unary_expression4465 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4469 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MONOTWIDDLE_in_unary_expression4486 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_unary_expression4490 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_pre_increment_expression_in_unary_expression4505 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_pre_decrement_expression_in_unary_expression4514 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_pointer_indirection_expression_in_unary_expression4523 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_addressof_expression_in_unary_expression4532 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_cast_expression4549 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_cast_expression4553 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_cast_expression4557 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_cast_expression4561 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_assignment_operator4579 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PLUS_ASSIGN_in_assignment_operator4583 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MINUS_ASSIGN_in_assignment_operator4587 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_STAR_ASSIGN_in_assignment_operator4591 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DIV_ASSIGN_in_assignment_operator4595 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MOD_ASSIGN_in_assignment_operator4599 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_AND_ASSIGN_in_assignment_operator4603 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_OR_ASSIGN_in_assignment_operator4607 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_XOR_ASSIGN_in_assignment_operator4611 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LEFT_SHIFT_ASSIGN_in_assignment_operator4615 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_GT_in_assignment_operator4621 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
        public static readonly BitSet FOLLOW_GTE_in_assignment_operator4623 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_209_in_pre_increment_expression4639 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_pre_increment_expression4643 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_210_in_pre_decrement_expression4663 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_pre_decrement_expression4667 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_STAR_in_pointer_indirection_expression4685 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_pointer_indirection_expression4689 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_AND_in_addressof_expression4707 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_addressof_expression4711 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_lambda_expression_in_non_assignment_expression4740 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_expression_in_non_assignment_expression4751 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_conditional_expression_in_non_assignment_expression4757 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unary_expression_in_multiplicative_expression4774 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000380000000000UL});
        public static readonly BitSet FOLLOW_STAR_in_multiplicative_expression4786 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_DIV_in_multiplicative_expression4790 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_MOD_in_multiplicative_expression4794 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unary_expression_in_multiplicative_expression4800 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000380000000000UL});
        public static readonly BitSet FOLLOW_multiplicative_expression_in_additive_expression4824 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000060000000000UL});
        public static readonly BitSet FOLLOW_set_in_additive_expression4827 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_multiplicative_expression_in_additive_expression4836 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000060000000000UL});
        public static readonly BitSet FOLLOW_additive_expression_in_shift_expression4853 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000002000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_LEFT_SHIFT_in_shift_expression4865 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_additive_expression_in_shift_expression4869 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000002000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_shift_expression4918 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_shift_expression4920 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_additive_expression_in_shift_expression4924 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000002000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_shift_expression_in_relational_expression4980 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001C00000000UL,0x0000000000400000UL,0x00000000C0000000UL});
        public static readonly BitSet FOLLOW_LTHAN_in_relational_expression4997 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_GT_in_relational_expression5001 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_GTE_in_relational_expression5005 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_LTE_in_relational_expression5009 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_shift_expression_in_relational_expression5014 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001C00000000UL,0x0000000000400000UL,0x00000000C0000000UL});
        public static readonly BitSet FOLLOW_222_in_relational_expression5038 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_nullable_type_in_relational_expression5043 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001C00000000UL,0x0000000000400000UL,0x00000000C0000000UL});
        public static readonly BitSet FOLLOW_223_in_relational_expression5079 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_non_nullable_type_in_relational_expression5083 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001C00000000UL,0x0000000000400000UL,0x00000000C0000000UL});
        public static readonly BitSet FOLLOW_relational_expression_in_equality_expression5304 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000300000000UL});
        public static readonly BitSet FOLLOW_set_in_equality_expression5311 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_relational_expression_in_equality_expression5320 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000300000000UL});
        public static readonly BitSet FOLLOW_equality_expression_in_and_expression5330 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000080000000UL});
        public static readonly BitSet FOLLOW_BIT_AND_in_and_expression5333 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_equality_expression_in_and_expression5338 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000080000000UL});
        public static readonly BitSet FOLLOW_and_expression_in_exclusive_or_expression5348 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
        public static readonly BitSet FOLLOW_BIT_XOR_in_exclusive_or_expression5351 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_and_expression_in_exclusive_or_expression5356 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
        public static readonly BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression5366 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_BIT_OR_in_inclusive_or_expression5371 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression5376 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression5386 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_LOG_AND_in_conditional_and_expression5391 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression5396 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression5406 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000008000000UL});
        public static readonly BitSet FOLLOW_LOG_OR_in_conditional_or_expression5410 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression5415 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000008000000UL});
        public static readonly BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression5429 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000400UL});
        public static readonly BitSet FOLLOW_NULL_COALESCE_in_null_coalescing_expression5441 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression5447 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000400UL});
        public static readonly BitSet FOLLOW_null_coalescing_expression_in_conditional_expression5799 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_220_in_conditional_expression5811 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_conditional_expression5817 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_conditional_expression5821 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_conditional_expression5827 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_function_signature_in_lambda_expression5866 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
        public static readonly BitSet FOLLOW_LAMBDA_in_lambda_expression5870 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000286UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_anonymous_function_body_in_lambda_expression5874 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_anonymous_function_signature5886 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000202UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature5893 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5919 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_anonymous_function_signature5932 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5937 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5954 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list5959 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5964 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_implicit_anonymous_function_parameter5974 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_anonymous_function_body5981 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_anonymous_function_body5987 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_from_clause_in_query_expression5999 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
        public static readonly BitSet FOLLOW_query_body_in_query_expression6003 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_body_clauses_in_query_body6013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
        public static readonly BitSet FOLLOW_select_or_group_clause_in_query_body6018 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000100000000UL});
        public static readonly BitSet FOLLOW_query_continuation_in_query_body6029 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_224_in_query_continuation6039 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_query_continuation6043 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
        public static readonly BitSet FOLLOW_query_body_in_query_continuation6047 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_body_clause_in_query_body_clauses6054 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000106600000000UL});
        public static readonly BitSet FOLLOW_from_clause_in_query_body_clause6063 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_let_clause_in_query_body_clause6068 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_where_clause_in_query_body_clause6073 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_join_clause_in_query_body_clause6078 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_orderby_clause_in_query_body_clause6083 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_225_in_from_clause6090 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_from_clause6094 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_from_clause6099 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
        public static readonly BitSet FOLLOW_IN_in_from_clause6103 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_from_clause6107 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_226_in_join_clause6115 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_join_clause6119 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_join_clause6124 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
        public static readonly BitSet FOLLOW_IN_in_join_clause6128 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_join_clause6132 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000800000000UL});
        public static readonly BitSet FOLLOW_227_in_join_clause6136 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_join_clause6140 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000001000000000UL});
        public static readonly BitSet FOLLOW_228_in_join_clause6144 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_join_clause6148 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000100000000UL});
        public static readonly BitSet FOLLOW_224_in_join_clause6151 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_join_clause6153 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_229_in_let_clause6163 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_let_clause6167 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_let_clause6171 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_let_clause6175 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_230_in_orderby_clause6182 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_ordering_list_in_orderby_clause6186 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ordering_in_ordering_list6194 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_ordering_list6199 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_ordering_in_ordering_list6203 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_expression_in_ordering6213 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000018000000000UL});
        public static readonly BitSet FOLLOW_ordering_direction_in_ordering6218 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_ordering_direction0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_select_clause_in_select_or_group_clause6241 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_group_clause_in_select_or_group_clause6246 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_233_in_select_clause6254 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_select_clause6258 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_234_in_group_clause6266 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_group_clause6270 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000080000000000UL});
        public static readonly BitSet FOLLOW_235_in_group_clause6274 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_group_clause6278 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_236_in_where_clause6286 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_where_clause6290 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_boolean_expression6298 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_global_attribute_in_global_attributes6310 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_global_attribute6322 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000600000000000UL});
        public static readonly BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute6326 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attribute_list_in_global_attribute6330 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000040UL});
        public static readonly BitSet FOLLOW_COMMA_in_global_attribute6334 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_global_attribute6339 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier6362 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_global_attribute_target_specifier6366 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_global_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attribute_sections_in_attributes6388 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attribute_section_in_attribute_sections6397 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_attribute_section6409 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9FFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attribute_target_specifier_in_attribute_section6413 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attribute_list_in_attribute_section6418 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000040UL});
        public static readonly BitSet FOLLOW_COMMA_in_attribute_section6422 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_attribute_section6427 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attribute_target_in_attribute_target_specifier6449 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_attribute_target_specifier6453 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_attribute_in_attribute_list6495 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_attribute_list6498 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attribute_in_attribute_list6500 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_type_name_in_attribute6512 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_attribute_arguments_in_attribute6516 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_attribute_arguments6527 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments6532 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_positional_argument_in_attribute_arguments6552 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_named_argument_in_attribute_arguments6571 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_COMMA_in_attribute_arguments6587 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_positional_argument_in_attribute_arguments6589 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments6600 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_positional_argument_in_positional_argument_list6616 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_positional_argument_list6619 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_positional_argument_in_positional_argument_list6623 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_attribute_argument_expression_in_positional_argument6647 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_named_argument_in_named_argument_list6658 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_named_argument_list6661 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_named_argument_in_named_argument_list6665 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_named_argument6689 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_named_argument6693 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attribute_argument_expression_in_named_argument6697 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_attribute_argument_expression6706 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_245_in_class_declaration6737 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_class_declaration6739 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_class_declaration6744 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_class_base_in_class_declaration6750 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration6755 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_class_body_in_class_declaration6760 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_class_declaration6762 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTHAN_in_type_parameter_list6816 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attributes_in_type_parameter_list6819 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_in_type_parameter_list6824 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_COMMA_in_type_parameter_list6830 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_attributes_in_type_parameter_list6834 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_parameter_in_type_parameter_list6839 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_type_parameter_list6845 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_type_parameter6862 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_211_in_class_base6875 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_class_base6881 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_class_base6884 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_class_base6890 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_class_body6914 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000122UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
        public static readonly BitSet FOLLOW_class_member_declarations_in_class_body6918 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_class_body6922 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_class_member_declaration_in_class_member_declarations6931 = new BitSet(new ulong[]{0x03E0002000100002UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
        public static readonly BitSet FOLLOW_205_in_constant_declaration6942 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_constant_declaration6946 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarators_in_constant_declaration6950 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_constant_declaration6954 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators6962 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_constant_declarators6965 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators6967 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_constant_declarator6977 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_constant_declarator6982 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_constant_expression_in_constant_declarator6986 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_constant_expression6996 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_declarators_in_field_declaration7005 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_field_declaration7009 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7018 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_variable_declarators7021 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7025 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_type_name_in_variable_declarator7035 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_variable_declarator7038 = new BitSet(new ulong[]{0x0002003000000000UL,0x00002600800002A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_variable_initializer_in_variable_declarator7042 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_name_in_method_declaration7082 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000200UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_method_declaration7095 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_method_declaration7110 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_method_declaration7139 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_method_declaration7184 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL,0x0040100000000000UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_method_declaration7198 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL,0x0040100000000000UL});
        public static readonly BitSet FOLLOW_throw_exceptions_in_method_declaration7224 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL,0x0040100000000000UL});
        public static readonly BitSet FOLLOW_method_body_in_method_declaration7238 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMainArgs_in_method_declaration7262 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMainApply_in_method_declaration7275 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMainExit_in_method_declaration7288 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMainWrapper_in_method_declaration7301 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicIdentifier_in_method_declaration7329 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_method_body7443 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicSmotherExceptions_in_method_body7447 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_method_body7470 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_method_body7474 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_246_in_throw_exceptions7516 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_javaException_in_throw_exceptions7519 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_throw_exceptions7522 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_javaException_in_throw_exceptions7525 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_javaException7543 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_or_generic_in_member_name7570 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_member_name7572 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_member_name7585 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_qid_in_member_name_orig7608 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_name_in_property_declaration7636 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_property_declaration7640 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_accessor_declarations_in_property_declaration7646 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_property_declaration7651 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMkPropertyVar_in_property_declaration7664 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_accessor_declaration_in_accessor_declarations7687 = new BitSet(new ulong[]{0x01C0000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_accessor_declaration7706 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_accessor_modifier_in_accessor_declaration7711 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_247_in_accessor_declaration7724 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_semi_in_accessor_declaration7734 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_block_in_accessor_declaration7760 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicPropGetter_in_accessor_declaration7768 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_248_in_accessor_declaration7787 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_semi_in_accessor_declaration7797 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_block_in_accessor_declaration7825 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicPropSetter_in_accessor_declaration7833 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PROTECTED_in_accessor_modifier7852 = new BitSet(new ulong[]{0x0100000000000002UL});
        public static readonly BitSet FOLLOW_INTERNAL_in_accessor_modifier7854 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_PRIVATE_in_accessor_modifier7859 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_INTERNAL_in_accessor_modifier7863 = new BitSet(new ulong[]{0x0040000000000002UL});
        public static readonly BitSet FOLLOW_PROTECTED_in_accessor_modifier7865 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_semi7877 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_240_in_event_declaration7890 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_event_declaration7894 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_member_name_in_event_declaration7909 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_event_declaration7913 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_event_accessor_declarations_in_event_declaration7917 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_event_declaration7921 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variable_declarators_in_event_declaration7954 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_event_declaration7958 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_modifier_in_event_modifiers7985 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
        public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations7994 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations8001 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations8005 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
        public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8010 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8031 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0200000000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations8035 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
        public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations8040 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_249_in_add_accessor_declaration8050 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_add_accessor_declaration8054 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_250_in_remove_accessor_declaration8062 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_remove_accessor_declaration8066 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ENUM_in_enum_declaration8116 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_enum_declaration8120 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_magicBoxedType_in_enum_declaration8125 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_enum_base_in_enum_declaration8131 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_enum_body_asnumber_in_enum_declaration8140 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_enum_declaration8145 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ENUM_in_enum_declaration8184 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_enum_declaration8188 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_enum_base_in_enum_declaration8193 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_enum_body_in_enum_declaration8198 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_enum_declaration8202 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_211_in_enum_base8245 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00000000000000F8UL,0x7800000000000000UL});
        public static readonly BitSet FOLLOW_integral_type_in_enum_base8249 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_enum_body8269 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000120UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_enum_member_declarations_in_enum_body8272 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_enum_body8274 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_enum_body8281 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations8311 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_enum_member_declarations8315 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations8317 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_enum_member_declaration8355 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_enum_member_declaration8360 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_enum_member_declaration8378 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_NUMBER_in_enum_member_declaration8460 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Hex_number_in_enum_member_declaration8497 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_enum_member_declaration8552 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_integral_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_enum_body_asnumber8621 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000120UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_enum_member_declarations_asnumber_in_enum_body_asnumber8624 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_COMMA_in_enum_body_asnumber8628 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_enum_body_asnumber8637 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_enum_member_declaration_asnumber_in_enum_member_declarations_asnumber8654 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_enum_member_declarations_asnumber8670 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_enum_member_declaration_asnumber_in_enum_member_declarations_asnumber8675 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_enum_member_declaration_asnumber8705 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_enum_member_declaration_asnumber8710 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_enum_member_declaration_asnumber8728 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_enum_member_declaration_asnumber8732 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicNumber_in_enum_member_declaration_asnumber8776 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicIncrement_in_enum_member_declaration_asnumber8779 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_218_in_delegate_declaration8862 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_return_type_in_delegate_declaration8866 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_delegate_declaration8870 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000200UL});
        public static readonly BitSet FOLLOW_variant_generic_parameter_list_in_delegate_declaration8875 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_delegate_declaration8884 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_delegate_declaration8888 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_delegate_declaration8893 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL,0x0000100000000000UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration8897 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_delegate_declaration8902 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicDelegateInterface_in_delegate_declaration8917 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMultiInvokerMethod_in_delegate_declaration8933 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicMultiDelClass_in_delegate_declaration8951 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_modifier_in_delegate_modifiers9008 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
        public static readonly BitSet FOLLOW_LTHAN_in_variant_generic_parameter_list9027 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_variant_type_parameters_in_variant_generic_parameter_list9032 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_variant_generic_parameter_list9037 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters9050 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_variant_type_parameters9055 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters9059 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_variant_type_variable_name9077 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_variance_annotation_in_variant_type_variable_name9082 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_variable_name_in_variant_type_variable_name9087 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_IN_in_variance_annotation9095 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_212_in_variance_annotation9103 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses9115 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000100000000000UL});
        public static readonly BitSet FOLLOW_236_in_type_parameter_constraints_clause9124 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause9128 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_type_parameter_constraints_clause9132 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0xFFBEFFFF20000028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause9136 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_245_in_type_parameter_constraint_list9211 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_255_in_type_parameter_constraint_list9215 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_type_parameter_constraint_list9221 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list9225 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_type_parameter_constraint_list9232 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0xFFBEFFFF20000028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list9236 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list9248 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_type_parameter_constraint_list9253 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0xFFBEFFFF20000028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list9257 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list9268 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list9282 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_secondary_constraint_list9285 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list9287 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_type_name_in_secondary_constraint9302 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_type_variable_name9312 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_197_in_constructor_constraint9321 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_constructor_constraint9325 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_constructor_constraint9329 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_return_type9341 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_void_type_in_return_type9349 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_formal_parameter_in_formal_parameter_list9367 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_formal_parameter_list9372 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_formal_parameter_in_formal_parameter_list9374 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_formal_parameter9394 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_fixed_parameter_in_formal_parameter9400 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_parameter_array_in_formal_parameter9404 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_256_in_formal_parameter9411 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_fixed_parameter_in_fixed_parameters9419 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_fixed_parameters9424 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000006UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_fixed_parameter_in_fixed_parameters9428 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_parameter_modifier_in_fixed_parameter9439 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_fixed_parameter9444 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_fixed_parameter9448 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_default_argument_in_fixed_parameter9452 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_default_argument9462 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_default_argument9464 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_257_in_parameter_array9489 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_parameter_array9496 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_parameter_array9500 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_258_in_interface_declaration9539 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_interface_declaration9543 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_variant_generic_parameter_list_in_interface_declaration9548 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_interface_base_in_interface_declaration9557 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration9562 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_interface_body_in_interface_declaration9567 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_interface_declaration9571 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_211_in_interface_base9615 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_interface_base9621 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_interface_base9624 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_interface_base9630 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_modifier_in_interface_modifiers9652 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_interface_body9661 = new BitSet(new ulong[]{0x03E0000000000000UL,0x0000000000000122UL,0x000000000F0007FCUL,0x7F9FFFFF20005FECUL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_interface_member_declarations_in_interface_body9665 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_interface_body9670 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations9678 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000022UL,0x000000000F0007FCUL,0x7F9FFFFF20005FECUL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_attributes_in_interface_member_declaration9689 = new BitSet(new ulong[]{0x03E0000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9FFFFF20005FECUL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_modifiers_in_interface_member_declaration9697 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9FFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_void_type_in_interface_member_declaration9705 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration9711 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_event_declaration_in_interface_member_declaration9725 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_interface_member_declaration9739 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration9759 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_property_declaration_in_interface_member_declaration9812 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_indexer_declaration_in_interface_member_declaration9830 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_interface_property_declaration9856 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_interface_property_declaration9860 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_interface_accessor_declarations_in_interface_property_declaration9866 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_interface_property_declaration9871 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_interface_method_declaration9891 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000200UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_interface_method_declaration9895 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_interface_method_declaration9903 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration9907 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_interface_method_declaration9912 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL,0x0000100000000000UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration9916 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_interface_method_declaration9924 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_interface_method_declaration9926 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicIdentifier_in_interface_method_declaration9949 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_240_in_interface_event_declaration10010 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_interface_event_declaration10014 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_interface_event_declaration10018 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_interface_event_declaration10022 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_interface_indexer_declaration10054 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration10058 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration10062 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration10066 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_interface_indexer_declaration10070 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_indexer_accessor_declarations_in_interface_indexer_declaration10074 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration10079 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_interface_accessor_declaration_in_interface_accessor_declarations10096 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_interface_accessor_declaration10114 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_247_in_interface_accessor_declaration10120 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_semi_in_interface_accessor_declaration10124 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicPropGetter_in_interface_accessor_declaration10126 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_248_in_interface_accessor_declaration10157 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_semi_in_interface_accessor_declaration10161 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicPropSetter_in_interface_accessor_declaration10164 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_255_in_struct_declaration10203 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_struct_declaration10206 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_struct_declaration10211 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_class_base_in_struct_declaration10217 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration10222 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
        public static readonly BitSet FOLLOW_struct_body_in_struct_declaration10227 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_struct_declaration10231 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_struct_body10277 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000122UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
        public static readonly BitSet FOLLOW_magicDefaultConstructor_in_struct_body10280 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000122UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
        public static readonly BitSet FOLLOW_class_member_declarations_in_struct_body10283 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_struct_body10288 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_indexer_declaration10319 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_indexer_declaration10323 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_indexer_declaration10327 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_indexer_declaration10331 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_indexer_declaration10335 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_indexer_accessor_declarations_in_indexer_declaration10339 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_indexer_declaration10344 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_indexer_accessor_declaration_in_indexer_accessor_declarations10368 = new BitSet(new ulong[]{0x01C0000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_attributes_in_indexer_accessor_declaration10387 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_accessor_modifier_in_indexer_accessor_declaration10392 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0180000000000000UL});
        public static readonly BitSet FOLLOW_247_in_indexer_accessor_declaration10405 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_indexer_accessor_declaration10415 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_block_in_indexer_accessor_declaration10441 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicIdxGetter_in_indexer_accessor_declaration10449 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_248_in_indexer_accessor_declaration10468 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_indexer_accessor_declaration10478 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_block_in_indexer_accessor_declaration10505 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicIdxSetter_in_indexer_accessor_declaration10513 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_operator_declarator_in_operator_declaration10534 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_operator_body_in_operator_declaration10538 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_259_in_operator_declarator10546 = new BitSet(new ulong[]{0x0000003000000000UL,0x00003E3FE0000000UL,0x0000000000460000UL,0x0000000000060000UL});
        public static readonly BitSet FOLLOW_set_in_operator_declarator10551 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator10561 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_operator_declarator10565 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_operator_declarator10569 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_binary_operator_declarator_in_operator_declarator10574 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unary_operator_declarator_in_operator_declarator10578 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_overloadable_unary_operator_in_operator_declarator10585 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator10589 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_operator_declarator10593 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_operator_declarator10595 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_unary_operator_declarator_in_operator_declarator10599 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_overloadable_binary_operator_in_operator_declarator10605 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator10609 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_operator_declarator10613 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_operator_declarator10615 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_binary_operator_declarator_in_operator_declarator10619 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_RPAREN_in_unary_operator_declarator10631 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_overloadable_unary_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COMMA_in_binary_operator_declarator10674 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_binary_operator_declarator10678 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_binary_operator_declarator10682 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_binary_operator_declarator10686 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_STAR_in_overloadable_binary_operator10697 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DIV_in_overloadable_binary_operator10701 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MOD_in_overloadable_binary_operator10705 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_AND_in_overloadable_binary_operator10709 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_OR_in_overloadable_binary_operator10713 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BIT_XOR_in_overloadable_binary_operator10717 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LEFT_SHIFT_in_overloadable_binary_operator10721 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator10725 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator10727 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_EQUAL_in_overloadable_binary_operator10731 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NOT_EQUAL_in_overloadable_binary_operator10735 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator10739 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTHAN_in_overloadable_binary_operator10743 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_GTE_in_overloadable_binary_operator10747 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LTE_in_overloadable_binary_operator10751 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration10761 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_operator_body_in_conversion_operator_declaration10765 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_conversion_operator_declarator10773 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
        public static readonly BitSet FOLLOW_259_in_conversion_operator_declarator10782 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator10786 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_conversion_operator_declarator10790 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator10794 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_conversion_operator_declarator10798 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_conversion_operator_declarator10802 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_operator_body10810 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_constructor_declaration10824 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_constructor_declaration10828 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
        public static readonly BitSet FOLLOW_formal_parameter_list_in_constructor_declaration10834 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_constructor_declaration10841 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000010000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_constructor_initializer_in_constructor_declaration10847 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000010000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_constructor_body_in_constructor_declaration10852 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_constructor_declaration10855 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_211_in_constructor_initializer10901 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_THIS_in_constructor_initializer10905 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_constructor_initializer10907 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_list_in_constructor_initializer10911 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_constructor_initializer10916 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_211_in_constructor_initializer10947 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000008000UL});
        public static readonly BitSet FOLLOW_207_in_constructor_initializer10951 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_constructor_initializer10953 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_argument_list_in_constructor_initializer10957 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_constructor_initializer10962 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_constructor_body11007 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_constructor_body11020 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_constructor_body11040 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000B8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_statement_in_constructor_body11044 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000B8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_constructor_body11050 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_MONOTWIDDLE_in_destructor_declaration11086 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_destructor_declaration11089 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_destructor_declaration11093 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_destructor_declaration11097 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_destructor_body_in_destructor_declaration11102 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicFinalize_in_destructor_declaration11106 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_destructor_body11119 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_access_identifier_in_invocation_part11143 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_brackets_in_invocation_part11149 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_declaration_statement_in_statement11168 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_labeled_statement_in_statement11183 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_statement11189 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_block_in_embedded_statement11201 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_selection_statement_in_embedded_statement11206 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_iteration_statement_in_embedded_statement11212 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_jump_statement_in_embedded_statement11218 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_try_statement_in_embedded_statement11225 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_checked_statement_in_embedded_statement11230 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unchecked_statement_in_embedded_statement11235 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_lock_statement_in_embedded_statement11240 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_using_statement_in_embedded_statement11245 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_yield_statement_in_embedded_statement11252 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unsafe_statement_in_embedded_statement11258 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_fixed_statement_in_embedded_statement11263 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_statement_in_embedded_statement11268 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_262_in_fixed_statement11278 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_fixed_statement11282 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_pointer_type_in_fixed_statement11286 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement11288 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_fixed_statement11292 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_fixed_statement11296 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators11305 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_fixed_pointer_declarators11310 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators11314 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_fixed_pointer_declarator11324 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_fixed_pointer_declarator11328 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator11332 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_fixed_pointer_initializer11342 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_198_in_unsafe_statement11349 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_unsafe_statement11354 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_labeled_statement11362 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_labeled_statement11366 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_statement_in_labeled_statement11370 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_declaration_statement11380 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_local_constant_declaration_in_declaration_statement11386 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_declaration_statement11389 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_type_in_local_variable_declaration11401 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration11405 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_263_in_local_variable_type11422 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_264_in_local_variable_type11440 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_in_local_variable_type11450 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators11469 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_local_variable_declarators11474 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators11478 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_identifier_in_local_variable_declarator11494 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_local_variable_declarator11499 = new BitSet(new ulong[]{0x0002003000000000UL,0x00002600800002A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0381UL});
        public static readonly BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator11503 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_local_variable_initializer11514 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_initializer_in_local_variable_initializer11519 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer11525 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_265_in_stackalloc_initializer11532 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer11536 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_OPEN_BRACKET_in_stackalloc_initializer11540 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_stackalloc_initializer11544 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer11548 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_205_in_local_constant_declaration11556 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_local_constant_declaration11560 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_constant_declarators_in_local_constant_declaration11564 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_expression_statement11572 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_expression_statement11576 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_statement_expression11586 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_if_statement_in_selection_statement11595 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_switch_statement_in_selection_statement11600 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_IF_in_if_statement11612 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_if_statement11616 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_if_statement11620 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_if_statement11624 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_if_statement11628 = new BitSet(new ulong[]{0x8000000000000002UL});
        public static readonly BitSet FOLLOW_else_statement_in_if_statement11638 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ELSE_in_else_statement11666 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_else_statement11670 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_266_in_switch_statement11681 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_switch_statement11685 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_switch_statement11689 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_switch_statement11693 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_switch_block_in_switch_statement11697 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_switch_block11715 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
        public static readonly BitSet FOLLOW_switch_section_in_switch_block11720 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
        public static readonly BitSet FOLLOW_CLOSE_BRACE_in_switch_block11725 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_switch_label_in_switch_section11736 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FFDC1UL});
        public static readonly BitSet FOLLOW_statement_list_in_switch_section11741 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_267_in_switch_label11762 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_constant_expression_in_switch_label11767 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_switch_label11771 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_217_in_switch_label11779 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_switch_label11783 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_while_statement_in_iteration_statement11792 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_do_statement_in_iteration_statement11797 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_for_statement_in_iteration_statement11802 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_foreach_statement_in_iteration_statement11807 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_268_in_while_statement11817 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_while_statement11821 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_while_statement11825 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_while_statement11829 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_while_statement11833 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_269_in_do_statement11854 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_do_statement11858 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_268_in_do_statement11863 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_do_statement11867 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_do_statement11871 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_do_statement11875 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_do_statement11879 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_270_in_for_statement11889 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_for_statement11893 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_for_initializer_in_for_statement11897 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_for_statement11902 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_for_condition_in_for_statement11906 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_for_statement11911 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_for_iterator_in_for_statement11915 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_for_statement11920 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_for_statement11924 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_for_initializer11972 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_expression_list_in_for_initializer11977 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_boolean_expression_in_for_condition11987 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_expression_list_in_for_iterator11995 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list12003 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_COMMA_in_statement_expression_list12006 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list12008 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
        public static readonly BitSet FOLLOW_FOREACH_in_foreach_statement12020 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_foreach_statement12024 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_local_variable_type_in_foreach_statement12028 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_foreach_statement12032 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
        public static readonly BitSet FOLLOW_IN_in_foreach_statement12036 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_foreach_statement12040 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_foreach_statement12044 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_foreach_statement12048 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_break_statement_in_jump_statement12082 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_continue_statement_in_jump_statement12087 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_goto_statement_in_jump_statement12092 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_return_statement_in_jump_statement12097 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_throw_statement_in_jump_statement12102 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BREAK_in_break_statement12110 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_break_statement12114 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_271_in_continue_statement12122 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_continue_statement12126 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_272_in_goto_statement12134 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF22000008UL,0x0000000000240981UL});
        public static readonly BitSet FOLLOW_identifier_in_goto_statement12140 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_267_in_goto_statement12148 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_constant_expression_in_goto_statement12152 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_217_in_goto_statement12160 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_goto_statement12165 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_RETURN_in_return_statement12173 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_return_statement12178 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_return_statement12183 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THROW_in_throw_statement12200 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_throw_statement12207 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_throw_statement12216 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_TRY_in_try_statement12239 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_try_statement12243 = new BitSet(new ulong[]{0x3000000000000000UL});
        public static readonly BitSet FOLLOW_catch_clauses_in_try_statement12249 = new BitSet(new ulong[]{0x3000000000000002UL});
        public static readonly BitSet FOLLOW_finally_clause_in_try_statement12253 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_finally_clause_in_try_statement12265 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_catch_clause_in_catch_clauses12293 = new BitSet(new ulong[]{0x1000000000000002UL});
        public static readonly BitSet FOLLOW_CATCH_in_catch_clause12315 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_LPAREN_in_catch_clause12318 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_class_type_in_catch_clause12324 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_catch_clause12332 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_magicCatchVar_in_catch_clause12340 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_catch_clause12346 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_magicThrowableType_in_catch_clause12369 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_magicCatchVar_in_catch_clause12374 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_catch_clause12383 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_FINALLY_in_finally_clause12415 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_finally_clause12420 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_215_in_checked_statement12428 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_checked_statement12432 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_216_in_unchecked_statement12440 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_block_in_unchecked_statement12444 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_273_in_lock_statement12466 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_lock_statement12470 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_lock_statement12473 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_lock_statement12479 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_lock_statement12483 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_USING_in_using_statement12531 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_using_statement12535 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_resource_acquisition_in_using_statement12540 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_using_statement12546 = new BitSet(new ulong[]{0x4C02003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
        public static readonly BitSet FOLLOW_embedded_statement_in_using_statement12551 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicFinally_in_using_statement12569 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicTry_in_using_statement12577 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_resource_acquisition12645 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_expression_in_resource_acquisition12653 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_274_in_yield_statement12712 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000000000000001UL});
        public static readonly BitSet FOLLOW_RETURN_in_yield_statement12717 = new BitSet(new ulong[]{0x0002003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_expression_in_yield_statement12721 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_yield_statement12725 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BREAK_in_yield_statement12748 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_SEMI_in_yield_statement12752 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BOOL_in_predefined_type12780 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_BYTE_in_predefined_type12793 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_CHAR_in_predefined_type12810 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_275_in_predefined_type12824 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_DOUBLE_in_predefined_type12835 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_FLOAT_in_predefined_type12847 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_INT_in_predefined_type12860 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LONG_in_predefined_type12877 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_OBJECT_in_predefined_type12891 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_251_in_predefined_type12903 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SHORT_in_predefined_type12913 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_276_in_predefined_type12926 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_253_in_predefined_type12938 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_254_in_predefined_type12952 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_252_in_predefined_type12965 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_IDENTIFIER_in_identifier12992 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_also_keyword_in_identifier12996 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_also_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Real_literal_in_literal13475 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NUMBER_in_literal13482 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Hex_number_in_literal13522 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Character_literal_in_literal13535 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_STRINGLITERAL_in_literal13540 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_Verbatim_string_literal_in_literal13545 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_TRUE_in_literal13550 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_FALSE_in_literal13555 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_NULL_in_literal13560 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_206_in_void_type13576 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicGetterBody_in_magicPropGetter13658 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicPropGetter13665 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicSetterBody_in_magicPropSetter13715 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicPropSetter13722 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicIdxGetter13905 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicIdxSetter13953 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicSmotherExceptionsThrow_in_magicSmotherExceptions14009 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicCatchVar_in_magicSmotherExceptionsThrow14024 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowableType_in_magicSmotherExceptionsThrow14026 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicMainWrapper14326 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicFinalize14588 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicDelegateInterface14887 = new BitSet(new ulong[]{0x0000000000000000UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicDelegateInterface14894 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_magicThrowsException_in_magicMultiInvokerMethod15024 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_196_in_synpred1_JavaMaker400 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_name_in_synpred2_JavaMaker1166 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000200UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_synpred2_JavaMaker1169 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_synpred2_JavaMaker1172 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_name_in_synpred3_JavaMaker1195 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_synpred3_JavaMaker1199 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_type_name_in_synpred4_JavaMaker1222 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_synpred4_JavaMaker1226 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
        public static readonly BitSet FOLLOW_THIS_in_synpred4_JavaMaker1230 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_THIS_in_synpred5_JavaMaker1466 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_brackets_in_synpred5_JavaMaker1471 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_207_in_synpred6_JavaMaker1519 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_brackets_in_synpred6_JavaMaker1523 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_object_creation_expression_in_synpred7_JavaMaker1605 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_set_in_synpred7_JavaMaker1609 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_object_creation_expression_in_synpred8_JavaMaker1663 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred9_JavaMaker1793 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred9_JavaMaker1798 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_LPAREN_in_synpred10_JavaMaker2172 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
        public static readonly BitSet FOLLOW_type_in_synpred10_JavaMaker2176 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_RPAREN_in_synpred10_JavaMaker2180 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_array_creation_expression_in_synpred11_JavaMaker2477 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_arguments_in_synpred12_JavaMaker2630 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_set_in_synpred12_JavaMaker2635 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_arguments_in_synpred13_JavaMaker2800 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
        public static readonly BitSet FOLLOW_set_in_synpred13_JavaMaker2805 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unbound_type_name_in_synpred14_JavaMaker3370 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_generic_dimension_specifier_in_synpred15_JavaMaker3429 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
        public static readonly BitSet FOLLOW_DOT_in_synpred15_JavaMaker3433 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred16_JavaMaker3602 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred16_JavaMaker3606 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred17_JavaMaker3690 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
        public static readonly BitSet FOLLOW_generic_argument_list_in_synpred17_JavaMaker3695 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_220_in_synpred18_JavaMaker3870 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
        public static readonly BitSet FOLLOW_221_in_synpred18_JavaMaker3872 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_predefined_type_in_synpred19_JavaMaker3925 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_type_name_in_synpred19_JavaMaker3929 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
        public static readonly BitSet FOLLOW_rank_specifiers_in_synpred19_JavaMaker3933 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_predefined_type_in_synpred20_JavaMaker4001 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_type_name_in_synpred20_JavaMaker4005 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
        public static readonly BitSet FOLLOW_STAR_in_synpred20_JavaMaker4010 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
        public static readonly BitSet FOLLOW_220_in_synpred20_JavaMaker4015 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_unary_expression_in_synpred21_JavaMaker4337 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000003FF000UL,0x0000000000400000UL});
        public static readonly BitSet FOLLOW_assignment_operator_in_synpred21_JavaMaker4341 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_cast_expression_in_synpred22_JavaMaker4402 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_anonymous_function_signature_in_synpred23_JavaMaker4731 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
        public static readonly BitSet FOLLOW_LAMBDA_in_synpred23_JavaMaker4735 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_query_expression_in_synpred24_JavaMaker4746 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_224_in_synpred25_JavaMaker6024 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_COMMA_in_synpred26_JavaMaker6558 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred26_JavaMaker6562 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
        public static readonly BitSet FOLLOW_ASSIGN_in_synpred26_JavaMaker6566 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_synpred27_JavaMaker7728 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_synpred28_JavaMaker7791 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_name_in_synpred29_JavaMaker7900 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_synpred29_JavaMaker7904 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_set_in_synpred30_JavaMaker8385 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
        public static readonly BitSet FOLLOW_set_in_synpred30_JavaMaker8393 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred31_JavaMaker9746 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000200UL});
        public static readonly BitSet FOLLOW_type_parameter_list_in_synpred31_JavaMaker9748 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
        public static readonly BitSet FOLLOW_LPAREN_in_synpred31_JavaMaker9752 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_member_name_in_synpred32_JavaMaker9801 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
        public static readonly BitSet FOLLOW_OPEN_BRACE_in_synpred32_JavaMaker9805 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_synpred33_JavaMaker10409 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_SEMI_in_synpred34_JavaMaker10472 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_declaration_statement_in_synpred35_JavaMaker11163 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_identifier_in_synpred36_JavaMaker11174 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
        public static readonly BitSet FOLLOW_211_in_synpred36_JavaMaker11178 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_263_in_synpred37_JavaMaker11415 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_264_in_synpred38_JavaMaker11433 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_ELSE_in_synpred39_JavaMaker11633 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_synpred40_JavaMaker11967 = new BitSet(new ulong[]{0x0000000000000002UL});
        public static readonly BitSet FOLLOW_local_variable_declaration_in_synpred41_JavaMaker12640 = new BitSet(new ulong[]{0x0000000000000002UL});

    }
}