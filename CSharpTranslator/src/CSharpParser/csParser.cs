// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g 2021-03-09 12:24:37

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162


using System;
using System.Collections.Generic;
using Antlr.Runtime;
using Stack = System.Collections.Generic.Stack<object>;
using List = System.Collections.IList;
using ArrayList = System.Collections.Generic.List<object>;
using Map = System.Collections.IDictionary;
using HashMap = System.Collections.Generic.Dictionary<object, object>;

using Antlr.Runtime.Tree;

namespace  AntlrCSharp 
{
public partial class csParser : Parser
{
    public static readonly string[] tokenNames = new string[] 
	{
        "<invalid>", 
		"<EOR>", 
		"<DOWN>", 
		"<UP>", 
		"PACKAGE", 
		"CLASS", 
		"EXTENDS", 
		"IMPLEMENTS", 
		"IMPORT", 
		"INTERFACE", 
		"FINAL", 
		"ANNOTATION", 
		"OUT", 
		"CONST", 
		"EVENT", 
		"METHOD", 
		"PROPERTY", 
		"INDEXER", 
		"FIELD", 
		"OPERATOR", 
		"ENUM", 
		"DELEGATE", 
		"CONVERSION_OPERATOR", 
		"CONSTRUCTOR", 
		"DESTRUCTOR", 
		"METHOD_HEADER", 
		"PARAMS", 
		"PARAMS_TYPELESS", 
		"SWITCH_SECTION", 
		"YIELD_RETURN", 
		"YIELD_BREAK", 
		"UNCHECKED", 
		"GLOBAL_ATTRIBUTE", 
		"ATTRIBUTE", 
		"MONOPLUS", 
		"MONOMINUS", 
		"MONONOT", 
		"MONOTWIDDLE", 
		"MONOSTAR", 
		"ADDRESSOF", 
		"PREINC", 
		"PREDEC", 
		"POSTINC", 
		"POSTDEC", 
		"PARENS", 
		"INDEX", 
		"APPLY", 
		"ARGS", 
		"NEW", 
		"NEW_ARRAY", 
		"NEW_DELEGATE", 
		"NEW_ANON_OBJECT", 
		"STATIC_CONSTRUCTOR", 
		"PUBLIC", 
		"PROTECTED", 
		"PRIVATE", 
		"INTERNAL", 
		"STATIC", 
		"RETURN", 
		"TRY", 
		"CATCH", 
		"FINALLY", 
		"THROW", 
		"ELSE", 
		"BREAK", 
		"OBJECT", 
		"THIS", 
		"FOREACH", 
		"IN", 
		"OPEN_BRACKET", 
		"CLOSE_BRACKET", 
		"OPEN_BRACE", 
		"CLOSE_BRACE", 
		"LPAREN", 
		"NULL_COALESCE", 
		"IF", 
		"ASSIGN", 
		"PLUS_ASSIGN", 
		"MINUS_ASSIGN", 
		"STAR_ASSIGN", 
		"DIV_ASSIGN", 
		"MOD_ASSIGN", 
		"BIT_AND_ASSIGN", 
		"BIT_OR_ASSIGN", 
		"BIT_XOR_ASSIGN", 
		"LEFT_SHIFT_ASSIGN", 
		"RIGHT_SHIFT_ASSIGN", 
		"UNSIGNED_RIGHT_SHIFT_ASSIGN", 
		"COND_EXPR", 
		"RIGHT_SHIFT", 
		"INSTANCEOF", 
		"LOG_OR", 
		"LOG_AND", 
		"BIT_OR", 
		"BIT_XOR", 
		"BIT_AND", 
		"NOT_EQUAL", 
		"EQUAL", 
		"LTHAN", 
		"LTE", 
		"GTE", 
		"LEFT_SHIFT", 
		"UNSIGNED_RIGHT_SHIFT", 
		"SUPER", 
		"LONGNUMBER", 
		"PLUS", 
		"MINUS", 
		"DIV", 
		"MOD", 
		"STAR", 
		"LAMBDA", 
		"COMMA", 
		"TYPE", 
		"TYPE_VAR", 
		"TYPE_DYNAMIC", 
		"ENUM_BODY", 
		"TYPE_PARAM_CONSTRAINT", 
		"UNARY_EXPR", 
		"CAST_EXPR", 
		"EXCEPTION", 
		"SYNCHRONIZED", 
		"PAYLOAD", 
		"PAYLOAD_LIST", 
		"JAVAWRAPPER", 
		"JAVAWRAPPEREXPRESSION", 
		"JAVAWRAPPERARGUMENT", 
		"JAVAWRAPPERARGUMENTLIST", 
		"JAVAWRAPPERTYPE", 
		"SEP", 
		"KGHOLE", 
		"BOOL", 
		"BYTE", 
		"CHAR", 
		"SHORT", 
		"INT", 
		"LONG", 
		"FLOAT", 
		"DOUBLE", 
		"IDENTIFIER", 
		"Real_literal", 
		"NUMBER", 
		"Hex_number", 
		"Character_literal", 
		"STRINGLITERAL", 
		"Verbatim_string_literal", 
		"TRUE", 
		"FALSE", 
		"NULL", 
		"DOT", 
		"PTR", 
		"GT", 
		"USING", 
		"ELIF", 
		"ENDIF", 
		"DEFINE", 
		"UNDEF", 
		"SEMI", 
		"RPAREN", 
		"WS", 
		"TS", 
		"DOC_LINE_COMMENT", 
		"LINE_COMMENT", 
		"COMMENT", 
		"EscapeSequence", 
		"Verbatim_string_literal_character", 
		"Decimal_digits", 
		"INTEGER_TYPE_SUFFIX", 
		"Decimal_integer_literal", 
		"GooBallIdentifier", 
		"GooBall", 
		"IdentifierStart", 
		"IdentifierPart", 
		"Exponent_part", 
		"Real_type_suffix", 
		"Pragma", 
		"PP_CONDITIONAL", 
		"PREPROCESSOR_DIRECTIVE", 
		"IF_TOKEN", 
		"DEFINE_TOKEN", 
		"ELSE_TOKEN", 
		"ENDIF_TOKEN", 
		"UNDEF_TOKEN", 
		"PP_EXPRESSION", 
		"PP_OR_EXPRESSION", 
		"PP_AND_EXPRESSION", 
		"PP_EQUALITY_EXPRESSION", 
		"PP_UNARY_EXPRESSION", 
		"PP_PRIMARY_EXPRESSION", 
		"UNICODE_LETTER", 
		"HEX_DIGIT", 
		"HEX_DIGITS", 
		"DECIMAL_DIGIT", 
		"Sign", 
		"'namespace'", 
		"'extern'", 
		"'alias'", 
		"'partial'", 
		"'new'", 
		"'unsafe'", 
		"'abstract'", 
		"'sealed'", 
		"'readonly'", 
		"'volatile'", 
		"'virtual'", 
		"'override'", 
		"'const'", 
		"'void'", 
		"'base'", 
		"'::'", 
		"'++'", 
		"'--'", 
		"':'", 
		"'out'", 
		"'ref'", 
		"'sizeof'", 
		"'checked'", 
		"'unchecked'", 
		"'default'", 
		"'delegate'", 
		"'typeof'", 
		"'?'", 
		"'extends'", 
		"'is'", 
		"'as'", 
		"'into'", 
		"'from'", 
		"'join'", 
		"'on'", 
		"'equals'", 
		"'let'", 
		"'orderby'", 
		"'ascending'", 
		"'descending'", 
		"'select'", 
		"'group'", 
		"'by'", 
		"'where'", 
		"'assembly'", 
		"'module'", 
		"'field'", 
		"'event'", 
		"'method'", 
		"'param'", 
		"'property'", 
		"'type'", 
		"'class'", 
		"'throws'", 
		"'get'", 
		"'set'", 
		"'add'", 
		"'remove'", 
		"'sbyte'", 
		"'ushort'", 
		"'uint'", 
		"'ulong'", 
		"'struct'", 
		"'__arglist'", 
		"'params'", 
		"'interface'", 
		"'operator'", 
		"'implicit'", 
		"'explicit'", 
		"'fixed'", 
		"'var'", 
		"'dynamic'", 
		"'stackalloc'", 
		"'switch'", 
		"'case'", 
		"'while'", 
		"'do'", 
		"'for'", 
		"'continue'", 
		"'goto'", 
		"'lock'", 
		"'yield'", 
		"'decimal'", 
		"'string'", 
		"'pragma'"
    };

    public const int T__265 = 265;
    public const int T__264 = 264;
    public const int T__267 = 267;
    public const int T__266 = 266;
    public const int T__261 = 261;
    public const int T__260 = 260;
    public const int UNSIGNED_RIGHT_SHIFT = 102;
    public const int T__263 = 263;
    public const int T__262 = 262;
    public const int THROW = 62;
    public const int LEFT_SHIFT = 101;
    public const int STATIC = 57;
    public const int MINUS = 106;
    public const int JAVAWRAPPERARGUMENT = 125;
    public const int OPEN_BRACE = 71;
    public const int INTERNAL = 56;
    public const int KGHOLE = 129;
    public const int Decimal_integer_literal = 167;
    public const int T__258 = 258;
    public const int T__257 = 257;
    public const int ENUM_BODY = 115;
    public const int T__259 = 259;
    public const int T__254 = 254;
    public const int T__253 = 253;
    public const int T__256 = 256;
    public const int T__255 = 255;
    public const int T__250 = 250;
    public const int ELIF = 152;
    public const int NEW_ARRAY = 49;
    public const int T__252 = 252;
    public const int T__251 = 251;
    public const int PLUS_ASSIGN = 77;
    public const int LPAREN = 73;
    public const int UNSIGNED_RIGHT_SHIFT_ASSIGN = 87;
    public const int MONOTWIDDLE = 37;
    public const int PP_EQUALITY_EXPRESSION = 185;
    public const int LINE_COMMENT = 161;
    public const int PARAMS_TYPELESS = 27;
    public const int POSTDEC = 43;
    public const int T__247 = 247;
    public const int T__246 = 246;
    public const int T__249 = 249;
    public const int T__248 = 248;
    public const int SEP = 128;
    public const int INDEXER = 17;
    public const int Verbatim_string_literal = 144;
    public const int UNICODE_LETTER = 188;
    public const int EXCEPTION = 119;
    public const int CLOSE_BRACKET = 70;
    public const int FOREACH = 67;
    public const int DEFINE = 154;
    public const int GooBallIdentifier = 168;
    public const int CLOSE_BRACE = 72;
    public const int PROTECTED = 54;
    public const int ELSE_TOKEN = 179;
    public const int LONG = 135;
    public const int T__276 = 276;
    public const int T__275 = 275;
    public const int T__277 = 277;
    public const int T__272 = 272;
    public const int POSTINC = 42;
    public const int T__271 = 271;
    public const int T__274 = 274;
    public const int T__273 = 273;
    public const int T__270 = 270;
    public const int NULL_COALESCE = 74;
    public const int MINUS_ASSIGN = 78;
    public const int Real_literal = 139;
    public const int DIV = 107;
    public const int OPERATOR = 19;
    public const int STAR = 109;
    public const int CONVERSION_OPERATOR = 22;
    public const int NOT_EQUAL = 96;
    public const int PP_AND_EXPRESSION = 184;
    public const int T__269 = 269;
    public const int CONSTRUCTOR = 23;
    public const int T__268 = 268;
    public const int UNDEF = 155;
    public const int TS = 159;
    public const int T__221 = 221;
    public const int T__220 = 220;
    public const int EXTENDS = 6;
    public const int T__223 = 223;
    public const int RIGHT_SHIFT = 89;
    public const int T__222 = 222;
    public const int UNDEF_TOKEN = 181;
    public const int GooBall = 169;
    public const int METHOD_HEADER = 25;
    public const int PAYLOAD = 121;
    public const int HEX_DIGITS = 190;
    public const int CLASS = 5;
    public const int FINALLY = 61;
    public const int MONONOT = 36;
    public const int UNCHECKED = 31;
    public const int ADDRESSOF = 39;
    public const int PARENS = 44;
    public const int PACKAGE = 4;
    public const int CONST = 13;
    public const int NEW_ANON_OBJECT = 51;
    public const int T__218 = 218;
    public const int T__217 = 217;
    public const int T__219 = 219;
    public const int INDEX = 45;
    public const int T__214 = 214;
    public const int T__213 = 213;
    public const int T__216 = 216;
    public const int T__215 = 215;
    public const int T__210 = 210;
    public const int T__212 = 212;
    public const int NUMBER = 140;
    public const int T__211 = 211;
    public const int ATTRIBUTE = 33;
    public const int PROPERTY = 16;
    public const int FINAL = 10;
    public const int LAMBDA = 110;
    public const int USING = 151;
    public const int PREPROCESSOR_DIRECTIVE = 176;
    public const int T__207 = 207;
    public const int T__206 = 206;
    public const int THIS = 66;
    public const int BIT_OR = 93;
    public const int T__209 = 209;
    public const int T__208 = 208;
    public const int T__203 = 203;
    public const int T__202 = 202;
    public const int T__205 = 205;
    public const int T__204 = 204;
    public const int T__243 = 243;
    public const int T__242 = 242;
    public const int T__245 = 245;
    public const int T__244 = 244;
    public const int ARGS = 47;
    public const int T__241 = 241;
    public const int T__240 = 240;
    public const int PTR = 149;
    public const int ENDIF_TOKEN = 180;
    public const int RETURN = 58;
    public const int PP_UNARY_EXPRESSION = 186;
    public const int MONOSTAR = 38;
    public const int HEX_DIGIT = 189;
    public const int T__239 = 239;
    public const int IDENTIFIER = 138;
    public const int T__236 = 236;
    public const int WS = 158;
    public const int EOF = -1;
    public const int T__235 = 235;
    public const int T__238 = 238;
    public const int T__237 = 237;
    public const int T__232 = 232;
    public const int T__231 = 231;
    public const int T__234 = 234;
    public const int T__233 = 233;
    public const int MOD = 108;
    public const int T__230 = 230;
    public const int EQUAL = 97;
    public const int OPEN_BRACKET = 69;
    public const int ENDIF = 153;
    public const int EscapeSequence = 163;
    public const int TYPE_VAR = 113;
    public const int GT = 150;
    public const int SHORT = 133;
    public const int MOD_ASSIGN = 81;
    public const int LOG_OR = 91;
    public const int BOOL = 130;
    public const int APPLY = 46;
    public const int T__229 = 229;
    public const int T__228 = 228;
    public const int GTE = 100;
    public const int FALSE = 146;
    public const int T__225 = 225;
    public const int T__224 = 224;
    public const int T__227 = 227;
    public const int DELEGATE = 21;
    public const int JAVAWRAPPERTYPE = 127;
    public const int T__226 = 226;
    public const int NEW_DELEGATE = 50;
    public const int COND_EXPR = 88;
    public const int Character_literal = 142;
    public const int Verbatim_string_literal_character = 164;
    public const int Real_type_suffix = 173;
    public const int PAYLOAD_LIST = 122;
    public const int LEFT_SHIFT_ASSIGN = 85;
    public const int PP_EXPRESSION = 182;
    public const int GLOBAL_ATTRIBUTE = 32;
    public const int INTERFACE = 9;
    public const int ANNOTATION = 11;
    public const int BREAK = 64;
    public const int BYTE = 131;
    public const int ELSE = 63;
    public const int IF = 75;
    public const int TYPE = 112;
    public const int BIT_AND_ASSIGN = 82;
    public const int ENUM = 20;
    public const int LOG_AND = 92;
    public const int PP_CONDITIONAL = 175;
    public const int IN = 68;
    public const int FIELD = 18;
    public const int TYPE_DYNAMIC = 114;
    public const int DOT = 148;
    public const int MONOMINUS = 35;
    public const int OUT = 12;
    public const int PUBLIC = 53;
    public const int IF_TOKEN = 177;
    public const int BIT_XOR_ASSIGN = 84;
    public const int T__201 = 201;
    public const int T__200 = 200;
    public const int YIELD_BREAK = 30;
    public const int UNARY_EXPR = 117;
    public const int SEMI = 156;
    public const int CHAR = 132;
    public const int PP_PRIMARY_EXPRESSION = 187;
    public const int ASSIGN = 76;
    public const int COMMENT = 162;
    public const int BIT_XOR = 94;
    public const int IdentifierPart = 171;
    public const int IMPORT = 8;
    public const int CATCH = 60;
    public const int PREDEC = 41;
    public const int DOUBLE = 137;
    public const int DOC_LINE_COMMENT = 160;
    public const int COMMA = 111;
    public const int JAVAWRAPPEREXPRESSION = 124;
    public const int Exponent_part = 172;
    public const int PRIVATE = 55;
    public const int INTEGER_TYPE_SUFFIX = 166;
    public const int YIELD_RETURN = 29;
    public const int PREINC = 40;
    public const int NEW = 48;
    public const int INSTANCEOF = 90;
    public const int LONGNUMBER = 104;
    public const int RIGHT_SHIFT_ASSIGN = 86;
    public const int EVENT = 14;
    public const int CAST_EXPR = 118;
    public const int TRY = 59;
    public const int SYNCHRONIZED = 120;
    public const int MONOPLUS = 34;
    public const int DEFINE_TOKEN = 178;
    public const int NULL = 147;
    public const int STATIC_CONSTRUCTOR = 52;
    public const int TRUE = 145;
    public const int RPAREN = 157;
    public const int Pragma = 174;
    public const int OBJECT = 65;
    public const int STRINGLITERAL = 143;
    public const int STAR_ASSIGN = 79;
    public const int METHOD = 15;
    public const int PARAMS = 26;
    public const int LTHAN = 98;
    public const int LTE = 99;
    public const int PLUS = 105;
    public const int JAVAWRAPPER = 123;
    public const int DESTRUCTOR = 24;
    public const int FLOAT = 136;
    public const int DIV_ASSIGN = 80;
    public const int INT = 134;
    public const int TYPE_PARAM_CONSTRAINT = 116;
    public const int IdentifierStart = 170;
    public const int BIT_AND = 95;
    public const int SWITCH_SECTION = 28;
    public const int T__199 = 199;
    public const int T__198 = 198;
    public const int SUPER = 103;
    public const int T__195 = 195;
    public const int T__194 = 194;
    public const int T__197 = 197;
    public const int T__196 = 196;
    public const int T__193 = 193;
    public const int IMPLEMENTS = 7;
    public const int JAVAWRAPPERARGUMENTLIST = 126;
    public const int DECIMAL_DIGIT = 191;
    public const int Decimal_digits = 165;
    public const int Hex_number = 141;
    public const int BIT_OR_ASSIGN = 83;
    public const int Sign = 192;
    public const int PP_OR_EXPRESSION = 183;

    // delegates
    // delegators



        public csParser(ITokenStream input)
    		: this(input, new RecognizerSharedState()) {
        }

        public csParser(ITokenStream input, RecognizerSharedState state)
    		: base(input, state) {
            InitializeCyclicDFAs();
            this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[363+1];
             
             
        }
        
    protected ITreeAdaptor adaptor = new CommonTreeAdaptor();

    public ITreeAdaptor TreeAdaptor
    {
        get { return this.adaptor; }
        set {
    	this.adaptor = value;
    	}
    }

    override public string[] TokenNames {
		get { return csParser.tokenNames; }
    }

    override public string GrammarFileName {
		get { return "/Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g"; }
    }


    	protected bool is_class_modifier() 
    	{
    		return false;
    	}

        // We have a fragments library for strings that we want to splice in to the generated code.
        // This is Java, so to parse it we need to set IsJavaish so that we are a bit more lenient ...
        private bool isJavaish = false;
     	public bool IsJavaish 
     	{
     		get {
                return isJavaish;
             } 
             set {
                isJavaish = value;
             }
     	}


    public class compilation_unit_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "compilation_unit"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:227:8: public compilation_unit : namespace_body[true] ;
    public csParser.compilation_unit_return compilation_unit() // throws RecognitionException [1]
    {   
        csParser.compilation_unit_return retval = new csParser.compilation_unit_return();
        retval.start = input.LT(1);
        int compilation_unit_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_body_return namespace_body1 = default(csParser.namespace_body_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 1) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:227:24: ( namespace_body[true] )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:228:2: namespace_body[true]
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_namespace_body_in_compilation_unit2416);
            	namespace_body1 = namespace_body(true);
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_body1.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 1, compilation_unit_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public class namespace_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "namespace_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:230:8: public namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
    public csParser.namespace_declaration_return namespace_declaration() // throws RecognitionException [1]
    {   
        csParser.namespace_declaration_return retval = new csParser.namespace_declaration_return();
        retval.start = input.LT(1);
        int namespace_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal2 = null;
        IToken char_literal5 = null;
        csParser.qualified_identifier_return qualified_identifier3 = default(csParser.qualified_identifier_return);

        csParser.namespace_block_return namespace_block4 = default(csParser.namespace_block_return);


        object string_literal2_tree=null;
        object char_literal5_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 2) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:230:29: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:231:2: 'namespace' qualified_identifier namespace_block ( ';' )?
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal2=(IToken)Match(input,193,FOLLOW_193_in_namespace_declaration2427); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal2_tree = (object)adaptor.Create(string_literal2);
            		adaptor.AddChild(root_0, string_literal2_tree);
            	}
            	PushFollow(FOLLOW_qualified_identifier_in_namespace_declaration2431);
            	qualified_identifier3 = qualified_identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qualified_identifier3.Tree);
            	PushFollow(FOLLOW_namespace_block_in_namespace_declaration2435);
            	namespace_block4 = namespace_block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_block4.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:231:57: ( ';' )?
            	int alt1 = 2;
            	int LA1_0 = input.LA(1);

            	if ( (LA1_0 == SEMI) )
            	{
            	    alt1 = 1;
            	}
            	switch (alt1) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:231:57: ';'
            	        {
            	        	char_literal5=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_namespace_declaration2439); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal5_tree = (object)adaptor.Create(char_literal5);
            	        		adaptor.AddChild(root_0, char_literal5_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 2, namespace_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_declaration"

    public class namespace_block_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "namespace_block"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:232:8: public namespace_block : '{' namespace_body[false] '}' ;
    public csParser.namespace_block_return namespace_block() // throws RecognitionException [1]
    {   
        csParser.namespace_block_return retval = new csParser.namespace_block_return();
        retval.start = input.LT(1);
        int namespace_block_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal6 = null;
        IToken char_literal8 = null;
        csParser.namespace_body_return namespace_body7 = default(csParser.namespace_body_return);


        object char_literal6_tree=null;
        object char_literal8_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 3) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:232:23: ( '{' namespace_body[false] '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:233:2: '{' namespace_body[false] '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal6=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_namespace_block2450); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal6_tree = (object)adaptor.Create(char_literal6);
            		adaptor.AddChild(root_0, char_literal6_tree);
            	}
            	PushFollow(FOLLOW_namespace_body_in_namespace_block2454);
            	namespace_body7 = namespace_body(false);
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_body7.Tree);
            	char_literal8=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_namespace_block2459); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal8_tree = (object)adaptor.Create(char_literal8);
            		adaptor.AddChild(root_0, char_literal8_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 3, namespace_block_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_block"

    public class namespace_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "namespace_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:234:1: namespace_body[bool bGlobal] : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
    public csParser.namespace_body_return namespace_body(bool bGlobal) // throws RecognitionException [1]
    {   
        csParser.namespace_body_return retval = new csParser.namespace_body_return();
        retval.start = input.LT(1);
        int namespace_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.extern_alias_directives_return extern_alias_directives9 = default(csParser.extern_alias_directives_return);

        csParser.using_directives_return using_directives10 = default(csParser.using_directives_return);

        csParser.global_attributes_return global_attributes11 = default(csParser.global_attributes_return);

        csParser.namespace_member_declarations_return namespace_member_declarations12 = default(csParser.namespace_member_declarations_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 4) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:234:29: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:2: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:2: ( extern_alias_directives )?
            	int alt2 = 2;
            	int LA2_0 = input.LA(1);

            	if ( (LA2_0 == 194) )
            	{
            	    int LA2_1 = input.LA(2);

            	    if ( (LA2_1 == 195) )
            	    {
            	        alt2 = 1;
            	    }
            	}
            	switch (alt2) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:2: extern_alias_directives
            	        {
            	        	PushFollow(FOLLOW_extern_alias_directives_in_namespace_body2468);
            	        	extern_alias_directives9 = extern_alias_directives();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, extern_alias_directives9.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:29: ( using_directives )?
            	int alt3 = 2;
            	int LA3_0 = input.LA(1);

            	if ( (LA3_0 == USING) )
            	{
            	    alt3 = 1;
            	}
            	switch (alt3) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:29: using_directives
            	        {
            	        	PushFollow(FOLLOW_using_directives_in_namespace_body2473);
            	        	using_directives10 = using_directives();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_directives10.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:49: ( global_attributes )?
            	int alt4 = 2;
            	int LA4_0 = input.LA(1);

            	if ( (LA4_0 == OPEN_BRACKET) )
            	{
            	    int LA4_1 = input.LA(2);

            	    if ( ((LA4_1 >= 237 && LA4_1 <= 238)) )
            	    {
            	        int LA4_3 = input.LA(3);

            	        if ( (LA4_3 == 211) )
            	        {
            	            alt4 = 1;
            	        }
            	    }
            	}
            	switch (alt4) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:49: global_attributes
            	        {
            	        	PushFollow(FOLLOW_global_attributes_in_namespace_body2478);
            	        	global_attributes11 = global_attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attributes11.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:70: ( namespace_member_declarations )?
            	int alt5 = 2;
            	int LA5_0 = input.LA(1);

            	if ( (LA5_0 == ENUM || (LA5_0 >= PUBLIC && LA5_0 <= STATIC) || LA5_0 == OPEN_BRACKET || (LA5_0 >= 193 && LA5_0 <= 194) || (LA5_0 >= 196 && LA5_0 <= 204) || LA5_0 == 218 || LA5_0 == 245 || LA5_0 == 255 || LA5_0 == 258) )
            	{
            	    alt5 = 1;
            	}
            	switch (alt5) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:235:70: namespace_member_declarations
            	        {
            	        	PushFollow(FOLLOW_namespace_member_declarations_in_namespace_body2483);
            	        	namespace_member_declarations12 = namespace_member_declarations();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_member_declarations12.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 4, namespace_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_body"

    public class extern_alias_directives_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "extern_alias_directives"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:236:8: public extern_alias_directives : ( extern_alias_directive )+ ;
    public csParser.extern_alias_directives_return extern_alias_directives() // throws RecognitionException [1]
    {   
        csParser.extern_alias_directives_return retval = new csParser.extern_alias_directives_return();
        retval.start = input.LT(1);
        int extern_alias_directives_StartIndex = input.Index;
        object root_0 = null;

        csParser.extern_alias_directive_return extern_alias_directive13 = default(csParser.extern_alias_directive_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 5) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:236:31: ( ( extern_alias_directive )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:237:2: ( extern_alias_directive )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:237:2: ( extern_alias_directive )+
            	int cnt6 = 0;
            	do 
            	{
            	    int alt6 = 2;
            	    int LA6_0 = input.LA(1);

            	    if ( (LA6_0 == 194) )
            	    {
            	        int LA6_2 = input.LA(2);

            	        if ( (LA6_2 == 195) )
            	        {
            	            alt6 = 1;
            	        }


            	    }


            	    switch (alt6) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:237:2: extern_alias_directive
            			    {
            			    	PushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives2494);
            			    	extern_alias_directive13 = extern_alias_directive();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, extern_alias_directive13.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt6 >= 1 ) goto loop6;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee6 =
            		                new EarlyExitException(6, input);
            		            throw eee6;
            	    }
            	    cnt6++;
            	} while (true);

            	loop6:
            		;	// Stops C# compiler whining that label 'loop6' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 5, extern_alias_directives_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directives"

    public class extern_alias_directive_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "extern_alias_directive"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:238:8: public extern_alias_directive : 'extern' 'alias' identifier ';' ;
    public csParser.extern_alias_directive_return extern_alias_directive() // throws RecognitionException [1]
    {   
        csParser.extern_alias_directive_return retval = new csParser.extern_alias_directive_return();
        retval.start = input.LT(1);
        int extern_alias_directive_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal14 = null;
        IToken string_literal15 = null;
        IToken char_literal17 = null;
        csParser.identifier_return identifier16 = default(csParser.identifier_return);


        object string_literal14_tree=null;
        object string_literal15_tree=null;
        object char_literal17_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 6) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:238:30: ( 'extern' 'alias' identifier ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:239:2: 'extern' 'alias' identifier ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal14=(IToken)Match(input,194,FOLLOW_194_in_extern_alias_directive2505); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal14_tree = (object)adaptor.Create(string_literal14);
            		adaptor.AddChild(root_0, string_literal14_tree);
            	}
            	string_literal15=(IToken)Match(input,195,FOLLOW_195_in_extern_alias_directive2509); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal15_tree = (object)adaptor.Create(string_literal15);
            		adaptor.AddChild(root_0, string_literal15_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_extern_alias_directive2513);
            	identifier16 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier16.Tree);
            	char_literal17=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_extern_alias_directive2516); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal17_tree = (object)adaptor.Create(char_literal17);
            		adaptor.AddChild(root_0, char_literal17_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 6, extern_alias_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directive"

    public class using_directives_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "using_directives"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:240:8: public using_directives : ( using_directive )+ ;
    public csParser.using_directives_return using_directives() // throws RecognitionException [1]
    {   
        csParser.using_directives_return retval = new csParser.using_directives_return();
        retval.start = input.LT(1);
        int using_directives_StartIndex = input.Index;
        object root_0 = null;

        csParser.using_directive_return using_directive18 = default(csParser.using_directive_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 7) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:240:24: ( ( using_directive )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:241:2: ( using_directive )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:241:2: ( using_directive )+
            	int cnt7 = 0;
            	do 
            	{
            	    int alt7 = 2;
            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0 == USING) )
            	    {
            	        alt7 = 1;
            	    }


            	    switch (alt7) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:241:2: using_directive
            			    {
            			    	PushFollow(FOLLOW_using_directive_in_using_directives2526);
            			    	using_directive18 = using_directive();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_directive18.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt7 >= 1 ) goto loop7;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee7 =
            		                new EarlyExitException(7, input);
            		            throw eee7;
            	    }
            	    cnt7++;
            	} while (true);

            	loop7:
            		;	// Stops C# compiler whining that label 'loop7' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 7, using_directives_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_directives"

    public class using_directive_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "using_directive"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:242:8: public using_directive : ( using_alias_directive | using_namespace_directive ) ;
    public csParser.using_directive_return using_directive() // throws RecognitionException [1]
    {   
        csParser.using_directive_return retval = new csParser.using_directive_return();
        retval.start = input.LT(1);
        int using_directive_StartIndex = input.Index;
        object root_0 = null;

        csParser.using_alias_directive_return using_alias_directive19 = default(csParser.using_alias_directive_return);

        csParser.using_namespace_directive_return using_namespace_directive20 = default(csParser.using_namespace_directive_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 8) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:242:23: ( ( using_alias_directive | using_namespace_directive ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:243:2: ( using_alias_directive | using_namespace_directive )
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:243:2: ( using_alias_directive | using_namespace_directive )
            	int alt8 = 2;
            	int LA8_0 = input.LA(1);

            	if ( (LA8_0 == USING) )
            	{
            	    int LA8_1 = input.LA(2);

            	    if ( (LA8_1 == IDENTIFIER) )
            	    {
            	        int LA8_2 = input.LA(3);

            	        if ( (LA8_2 == LTHAN || LA8_2 == DOT || LA8_2 == SEMI || LA8_2 == 208) )
            	        {
            	            alt8 = 2;
            	        }
            	        else if ( (LA8_2 == ASSIGN) )
            	        {
            	            alt8 = 1;
            	        }
            	        else 
            	        {
            	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	            NoViableAltException nvae_d8s2 =
            	                new NoViableAltException("", 8, 2, input);

            	            throw nvae_d8s2;
            	        }
            	    }
            	    else if ( ((LA8_1 >= ELIF && LA8_1 <= UNDEF) || LA8_1 == 195 || LA8_1 == 221 || (LA8_1 >= 224 && LA8_1 <= 239) || (LA8_1 >= 241 && LA8_1 <= 244) || (LA8_1 >= 247 && LA8_1 <= 250) || LA8_1 == 256 || (LA8_1 >= 263 && LA8_1 <= 264) || LA8_1 == 274 || LA8_1 == 277) )
            	    {
            	        int LA8_3 = input.LA(3);

            	        if ( (LA8_3 == LTHAN || LA8_3 == DOT || LA8_3 == SEMI || LA8_3 == 208) )
            	        {
            	            alt8 = 2;
            	        }
            	        else if ( (LA8_3 == ASSIGN) )
            	        {
            	            alt8 = 1;
            	        }
            	        else 
            	        {
            	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	            NoViableAltException nvae_d8s3 =
            	                new NoViableAltException("", 8, 3, input);

            	            throw nvae_d8s3;
            	        }
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d8s1 =
            	            new NoViableAltException("", 8, 1, input);

            	        throw nvae_d8s1;
            	    }
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d8s0 =
            	        new NoViableAltException("", 8, 0, input);

            	    throw nvae_d8s0;
            	}
            	switch (alt8) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:243:3: using_alias_directive
            	        {
            	        	PushFollow(FOLLOW_using_alias_directive_in_using_directive2538);
            	        	using_alias_directive19 = using_alias_directive();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_alias_directive19.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:244:4: using_namespace_directive
            	        {
            	        	PushFollow(FOLLOW_using_namespace_directive_in_using_directive2543);
            	        	using_namespace_directive20 = using_namespace_directive();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_namespace_directive20.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 8, using_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_directive"

    public class using_alias_directive_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "using_alias_directive"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:245:8: public using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
    public csParser.using_alias_directive_return using_alias_directive() // throws RecognitionException [1]
    {   
        csParser.using_alias_directive_return retval = new csParser.using_alias_directive_return();
        retval.start = input.LT(1);
        int using_alias_directive_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal21 = null;
        IToken char_literal23 = null;
        IToken char_literal25 = null;
        csParser.identifier_return identifier22 = default(csParser.identifier_return);

        csParser.namespace_or_type_name_return namespace_or_type_name24 = default(csParser.namespace_or_type_name_return);


        object string_literal21_tree=null;
        object char_literal23_tree=null;
        object char_literal25_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 9) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:245:29: ( 'using' identifier '=' namespace_or_type_name ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:246:2: 'using' identifier '=' namespace_or_type_name ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal21=(IToken)Match(input,USING,FOLLOW_USING_in_using_alias_directive2554); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal21_tree = (object)adaptor.Create(string_literal21);
            		adaptor.AddChild(root_0, string_literal21_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_using_alias_directive2558);
            	identifier22 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier22.Tree);
            	char_literal23=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_using_alias_directive2562); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal23_tree = (object)adaptor.Create(char_literal23);
            		adaptor.AddChild(root_0, char_literal23_tree);
            	}
            	PushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive2566);
            	namespace_or_type_name24 = namespace_or_type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name24.Tree);
            	char_literal25=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_using_alias_directive2570); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal25_tree = (object)adaptor.Create(char_literal25);
            		adaptor.AddChild(root_0, char_literal25_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 9, using_alias_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_alias_directive"

    public class using_namespace_directive_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "using_namespace_directive"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:247:8: public using_namespace_directive : 'using' namespace_name ';' ;
    public csParser.using_namespace_directive_return using_namespace_directive() // throws RecognitionException [1]
    {   
        csParser.using_namespace_directive_return retval = new csParser.using_namespace_directive_return();
        retval.start = input.LT(1);
        int using_namespace_directive_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal26 = null;
        IToken char_literal28 = null;
        csParser.namespace_name_return namespace_name27 = default(csParser.namespace_name_return);


        object string_literal26_tree=null;
        object char_literal28_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 10) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:247:33: ( 'using' namespace_name ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:248:2: 'using' namespace_name ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal26=(IToken)Match(input,USING,FOLLOW_USING_in_using_namespace_directive2580); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal26_tree = (object)adaptor.Create(string_literal26);
            		adaptor.AddChild(root_0, string_literal26_tree);
            	}
            	PushFollow(FOLLOW_namespace_name_in_using_namespace_directive2584);
            	namespace_name27 = namespace_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_name27.Tree);
            	char_literal28=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_using_namespace_directive2588); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal28_tree = (object)adaptor.Create(char_literal28);
            		adaptor.AddChild(root_0, char_literal28_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 10, using_namespace_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_namespace_directive"

    public class namespace_member_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "namespace_member_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:249:8: public namespace_member_declarations : ( namespace_member_declaration )+ ;
    public csParser.namespace_member_declarations_return namespace_member_declarations() // throws RecognitionException [1]
    {   
        csParser.namespace_member_declarations_return retval = new csParser.namespace_member_declarations_return();
        retval.start = input.LT(1);
        int namespace_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_member_declaration_return namespace_member_declaration29 = default(csParser.namespace_member_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 11) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:249:37: ( ( namespace_member_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:250:2: ( namespace_member_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:250:2: ( namespace_member_declaration )+
            	int cnt9 = 0;
            	do 
            	{
            	    int alt9 = 2;
            	    int LA9_0 = input.LA(1);

            	    if ( (LA9_0 == ENUM || (LA9_0 >= PUBLIC && LA9_0 <= STATIC) || LA9_0 == OPEN_BRACKET || (LA9_0 >= 193 && LA9_0 <= 194) || (LA9_0 >= 196 && LA9_0 <= 204) || LA9_0 == 218 || LA9_0 == 245 || LA9_0 == 255 || LA9_0 == 258) )
            	    {
            	        alt9 = 1;
            	    }


            	    switch (alt9) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:250:2: namespace_member_declaration
            			    {
            			    	PushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations2598);
            			    	namespace_member_declaration29 = namespace_member_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_member_declaration29.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt9 >= 1 ) goto loop9;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee9 =
            		                new EarlyExitException(9, input);
            		            throw eee9;
            	    }
            	    cnt9++;
            	} while (true);

            	loop9:
            		;	// Stops C# compiler whining that label 'loop9' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 11, namespace_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declarations"

    public class namespace_member_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "namespace_member_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:251:8: public namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration );
    public csParser.namespace_member_declaration_return namespace_member_declaration() // throws RecognitionException [1]
    {   
        csParser.namespace_member_declaration_return retval = new csParser.namespace_member_declaration_return();
        retval.start = input.LT(1);
        int namespace_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_declaration_return namespace_declaration30 = default(csParser.namespace_declaration_return);

        csParser.attributes_return attributes31 = default(csParser.attributes_return);

        csParser.modifiers_return modifiers32 = default(csParser.modifiers_return);

        csParser.type_declaration_return type_declaration33 = default(csParser.type_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 12) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:251:36: ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration )
            int alt12 = 2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0 == 193) )
            {
                alt12 = 1;
            }
            else if ( (LA12_0 == ENUM || (LA12_0 >= PUBLIC && LA12_0 <= STATIC) || LA12_0 == OPEN_BRACKET || LA12_0 == 194 || (LA12_0 >= 196 && LA12_0 <= 204) || LA12_0 == 218 || LA12_0 == 245 || LA12_0 == 255 || LA12_0 == 258) )
            {
                alt12 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d12s0 =
                    new NoViableAltException("", 12, 0, input);

                throw nvae_d12s0;
            }
            switch (alt12) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:252:2: namespace_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration2609);
                    	namespace_declaration30 = namespace_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_declaration30.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:253:4: ( attributes )? ( modifiers )? type_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:253:4: ( attributes )?
                    	int alt10 = 2;
                    	int LA10_0 = input.LA(1);

                    	if ( (LA10_0 == OPEN_BRACKET) )
                    	{
                    	    alt10 = 1;
                    	}
                    	switch (alt10) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:253:4: attributes
                    	        {
                    	        	PushFollow(FOLLOW_attributes_in_namespace_member_declaration2614);
                    	        	attributes31 = attributes();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes31.Tree);

                    	        }
                    	        break;

                    	}

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:253:18: ( modifiers )?
                    	int alt11 = 2;
                    	int LA11_0 = input.LA(1);

                    	if ( ((LA11_0 >= PUBLIC && LA11_0 <= STATIC) || LA11_0 == 194 || (LA11_0 >= 197 && LA11_0 <= 204)) )
                    	{
                    	    alt11 = 1;
                    	}
                    	switch (alt11) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:253:18: modifiers
                    	        {
                    	        	PushFollow(FOLLOW_modifiers_in_namespace_member_declaration2619);
                    	        	modifiers32 = modifiers();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifiers32.Tree);

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_type_declaration_in_namespace_member_declaration2624);
                    	type_declaration33 = type_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_declaration33.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 12, namespace_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declaration"

    public class type_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:254:8: public type_declaration : ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
    public csParser.type_declaration_return type_declaration() // throws RecognitionException [1]
    {   
        csParser.type_declaration_return retval = new csParser.type_declaration_return();
        retval.start = input.LT(1);
        int type_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal34 = null;
        csParser.class_declaration_return class_declaration35 = default(csParser.class_declaration_return);

        csParser.struct_declaration_return struct_declaration36 = default(csParser.struct_declaration_return);

        csParser.interface_declaration_return interface_declaration37 = default(csParser.interface_declaration_return);

        csParser.class_declaration_return class_declaration38 = default(csParser.class_declaration_return);

        csParser.struct_declaration_return struct_declaration39 = default(csParser.struct_declaration_return);

        csParser.interface_declaration_return interface_declaration40 = default(csParser.interface_declaration_return);

        csParser.enum_declaration_return enum_declaration41 = default(csParser.enum_declaration_return);

        csParser.delegate_declaration_return delegate_declaration42 = default(csParser.delegate_declaration_return);


        object string_literal34_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 13) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:254:24: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
            int alt14 = 6;
            int LA14_0 = input.LA(1);

            if ( (LA14_0 == 196) && (synpred1_cs()) )
            {
                alt14 = 1;
            }
            else if ( (LA14_0 == 245) )
            {
                alt14 = 2;
            }
            else if ( (LA14_0 == 255) )
            {
                alt14 = 3;
            }
            else if ( (LA14_0 == 258) )
            {
                alt14 = 4;
            }
            else if ( (LA14_0 == ENUM) )
            {
                alt14 = 5;
            }
            else if ( (LA14_0 == 218) )
            {
                alt14 = 6;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d14s0 =
                    new NoViableAltException("", 14, 0, input);

                throw nvae_d14s0;
            }
            switch (alt14) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:255:2: ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal34=(IToken)Match(input,196,FOLLOW_196_in_type_declaration2640); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal34_tree = (object)adaptor.Create(string_literal34);
                    		adaptor.AddChild(root_0, string_literal34_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:255:29: ( class_declaration | struct_declaration | interface_declaration )
                    	int alt13 = 3;
                    	switch ( input.LA(1) ) 
                    	{
                    	case 245:
                    		{
                    	    alt13 = 1;
                    	    }
                    	    break;
                    	case 255:
                    		{
                    	    alt13 = 2;
                    	    }
                    	    break;
                    	case 258:
                    		{
                    	    alt13 = 3;
                    	    }
                    	    break;
                    		default:
                    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		    NoViableAltException nvae_d13s0 =
                    		        new NoViableAltException("", 13, 0, input);

                    		    throw nvae_d13s0;
                    	}

                    	switch (alt13) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:255:30: class_declaration
                    	        {
                    	        	PushFollow(FOLLOW_class_declaration_in_type_declaration2645);
                    	        	class_declaration35 = class_declaration();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration35.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:256:11: struct_declaration
                    	        {
                    	        	PushFollow(FOLLOW_struct_declaration_in_type_declaration2657);
                    	        	struct_declaration36 = struct_declaration();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_declaration36.Tree);

                    	        }
                    	        break;
                    	    case 3 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:257:11: interface_declaration
                    	        {
                    	        	PushFollow(FOLLOW_interface_declaration_in_type_declaration2669);
                    	        	interface_declaration37 = interface_declaration();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_declaration37.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:258:4: class_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_class_declaration_in_type_declaration2675);
                    	class_declaration38 = class_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration38.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:259:4: struct_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_struct_declaration_in_type_declaration2680);
                    	struct_declaration39 = struct_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_declaration39.Tree);

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:260:4: interface_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_interface_declaration_in_type_declaration2685);
                    	interface_declaration40 = interface_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_declaration40.Tree);

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:261:4: enum_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_enum_declaration_in_type_declaration2690);
                    	enum_declaration41 = enum_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_declaration41.Tree);

                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:262:4: delegate_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_delegate_declaration_in_type_declaration2695);
                    	delegate_declaration42 = delegate_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_declaration42.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 13, type_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public class qualified_identifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "qualified_identifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:264:8: public qualified_identifier : identifier ( '.' identifier )* ;
    public csParser.qualified_identifier_return qualified_identifier() // throws RecognitionException [1]
    {   
        csParser.qualified_identifier_return retval = new csParser.qualified_identifier_return();
        retval.start = input.LT(1);
        int qualified_identifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal44 = null;
        csParser.identifier_return identifier43 = default(csParser.identifier_return);

        csParser.identifier_return identifier45 = default(csParser.identifier_return);


        object char_literal44_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 14) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:264:28: ( identifier ( '.' identifier )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:265:2: identifier ( '.' identifier )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_qualified_identifier2706);
            	identifier43 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier43.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:265:13: ( '.' identifier )*
            	do 
            	{
            	    int alt15 = 2;
            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0 == DOT) )
            	    {
            	        alt15 = 1;
            	    }


            	    switch (alt15) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:265:14: '.' identifier
            			    {
            			    	char_literal44=(IToken)Match(input,DOT,FOLLOW_DOT_in_qualified_identifier2709); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal44_tree = (object)adaptor.Create(char_literal44);
            			    		adaptor.AddChild(root_0, char_literal44_tree);
            			    	}
            			    	PushFollow(FOLLOW_identifier_in_qualified_identifier2711);
            			    	identifier45 = identifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier45.Tree);

            			    }
            			    break;

            			default:
            			    goto loop15;
            	    }
            	} while (true);

            	loop15:
            		;	// Stops C# compiler whining that label 'loop15' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 14, qualified_identifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qualified_identifier"

    public class namespace_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "namespace_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:266:1: namespace_name : namespace_or_type_name ;
    public csParser.namespace_name_return namespace_name() // throws RecognitionException [1]
    {   
        csParser.namespace_name_return retval = new csParser.namespace_name_return();
        retval.start = input.LT(1);
        int namespace_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name46 = default(csParser.namespace_or_type_name_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 15) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:267:2: ( namespace_or_type_name )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:267:4: namespace_or_type_name
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_namespace_or_type_name_in_namespace_name2722);
            	namespace_or_type_name46 = namespace_or_type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name46.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 15, namespace_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_name"

    public class modifiers_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "modifiers"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:269:8: public modifiers : ( modifier )+ ;
    public csParser.modifiers_return modifiers() // throws RecognitionException [1]
    {   
        csParser.modifiers_return retval = new csParser.modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.modifier_return modifier47 = default(csParser.modifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 16) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:269:17: ( ( modifier )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:270:2: ( modifier )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:270:2: ( modifier )+
            	int cnt16 = 0;
            	do 
            	{
            	    int alt16 = 2;
            	    int LA16_0 = input.LA(1);

            	    if ( ((LA16_0 >= PUBLIC && LA16_0 <= STATIC) || LA16_0 == 194 || (LA16_0 >= 197 && LA16_0 <= 204)) )
            	    {
            	        alt16 = 1;
            	    }


            	    switch (alt16) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:270:2: modifier
            			    {
            			    	PushFollow(FOLLOW_modifier_in_modifiers2733);
            			    	modifier47 = modifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifier47.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt16 >= 1 ) goto loop16;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee16 =
            		                new EarlyExitException(16, input);
            		            throw eee16;
            	    }
            	    cnt16++;
            	} while (true);

            	loop16:
            		;	// Stops C# compiler whining that label 'loop16' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 16, modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "modifiers"

    public class modifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "modifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:271:8: public modifier : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
    public csParser.modifier_return modifier() // throws RecognitionException [1]
    {   
        csParser.modifier_return retval = new csParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set48 = null;

        object set48_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 17) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:271:16: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set48 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= PUBLIC && input.LA(1) <= STATIC) || input.LA(1) == 194 || (input.LA(1) >= 197 && input.LA(1) <= 204) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set48));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 17, modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public class class_member_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "class_member_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:275:8: public class_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) ;
    public csParser.class_member_declaration_return class_member_declaration() // throws RecognitionException [1]
    {   
        csParser.class_member_declaration_return retval = new csParser.class_member_declaration_return();
        retval.start = input.LT(1);
        int class_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal50 = null;
        IToken char_literal53 = null;
        IToken string_literal55 = null;
        IToken string_literal56 = null;
        IToken string_literal62 = null;
        IToken char_literal68 = null;
        csParser.modifiers_return m = default(csParser.modifiers_return);

        csParser.attributes_return attributes49 = default(csParser.attributes_return);

        csParser.type_return type51 = default(csParser.type_return);

        csParser.constant_declarators_return constant_declarators52 = default(csParser.constant_declarators_return);

        csParser.event_declaration_return event_declaration54 = default(csParser.event_declaration_return);

        csParser.method_declaration_return method_declaration57 = default(csParser.method_declaration_return);

        csParser.interface_declaration_return interface_declaration58 = default(csParser.interface_declaration_return);

        csParser.class_declaration_return class_declaration59 = default(csParser.class_declaration_return);

        csParser.struct_declaration_return struct_declaration60 = default(csParser.struct_declaration_return);

        csParser.interface_declaration_return interface_declaration61 = default(csParser.interface_declaration_return);

        csParser.method_declaration_return method_declaration63 = default(csParser.method_declaration_return);

        csParser.type_return type64 = default(csParser.type_return);

        csParser.method_declaration_return method_declaration65 = default(csParser.method_declaration_return);

        csParser.property_declaration_return property_declaration66 = default(csParser.property_declaration_return);

        csParser.type_name_return type_name67 = default(csParser.type_name_return);

        csParser.indexer_declaration_return indexer_declaration69 = default(csParser.indexer_declaration_return);

        csParser.indexer_declaration_return indexer_declaration70 = default(csParser.indexer_declaration_return);

        csParser.field_declaration_return field_declaration71 = default(csParser.field_declaration_return);

        csParser.operator_declaration_return operator_declaration72 = default(csParser.operator_declaration_return);

        csParser.class_declaration_return class_declaration73 = default(csParser.class_declaration_return);

        csParser.struct_declaration_return struct_declaration74 = default(csParser.struct_declaration_return);

        csParser.enum_declaration_return enum_declaration75 = default(csParser.enum_declaration_return);

        csParser.delegate_declaration_return delegate_declaration76 = default(csParser.delegate_declaration_return);

        csParser.conversion_operator_declaration_return conversion_operator_declaration77 = default(csParser.conversion_operator_declaration_return);

        csParser.constructor_declaration_return constructor_declaration78 = default(csParser.constructor_declaration_return);

        csParser.destructor_declaration_return destructor_declaration79 = default(csParser.destructor_declaration_return);


        object string_literal50_tree=null;
        object char_literal53_tree=null;
        object string_literal55_tree=null;
        object string_literal56_tree=null;
        object string_literal62_tree=null;
        object char_literal68_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 18) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:275:32: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:276:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:276:2: ( attributes )?
            	int alt17 = 2;
            	int LA17_0 = input.LA(1);

            	if ( (LA17_0 == OPEN_BRACKET) )
            	{
            	    alt17 = 1;
            	}
            	switch (alt17) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:276:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_class_member_declaration2809);
            	        	attributes49 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes49.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:277:3: (m= modifiers )?
            	int alt18 = 2;
            	int LA18_0 = input.LA(1);

            	if ( ((LA18_0 >= PUBLIC && LA18_0 <= STATIC) || LA18_0 == 194 || (LA18_0 >= 197 && LA18_0 <= 204)) )
            	{
            	    alt18 = 1;
            	}
            	switch (alt18) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:277:3: m= modifiers
            	        {
            	        	PushFollow(FOLLOW_modifiers_in_class_member_declaration2815);
            	        	m = modifiers();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, m.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:278:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
            	int alt21 = 13;
            	alt21 = dfa21.Predict(input);
            	switch (alt21) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:278:4: 'const' type constant_declarators ';'
            	        {
            	        	string_literal50=(IToken)Match(input,205,FOLLOW_205_in_class_member_declaration2821); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal50_tree = (object)adaptor.Create(string_literal50);
            	        		adaptor.AddChild(root_0, string_literal50_tree);
            	        	}
            	        	PushFollow(FOLLOW_type_in_class_member_declaration2825);
            	        	type51 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type51.Tree);
            	        	PushFollow(FOLLOW_constant_declarators_in_class_member_declaration2829);
            	        	constant_declarators52 = constant_declarators();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarators52.Tree);
            	        	char_literal53=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_class_member_declaration2833); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal53_tree = (object)adaptor.Create(char_literal53);
            	        		adaptor.AddChild(root_0, char_literal53_tree);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:279:4: event_declaration
            	        {
            	        	PushFollow(FOLLOW_event_declaration_in_class_member_declaration2838);
            	        	event_declaration54 = event_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_declaration54.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:280:4: 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration )
            	        {
            	        	string_literal55=(IToken)Match(input,196,FOLLOW_196_in_class_member_declaration2845); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal55_tree = (object)adaptor.Create(string_literal55);
            	        		adaptor.AddChild(root_0, string_literal55_tree);
            	        	}
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:280:14: ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration )
            	        	int alt19 = 4;
            	        	switch ( input.LA(1) ) 
            	        	{
            	        	case 206:
            	        		{
            	        	    alt19 = 1;
            	        	    }
            	        	    break;
            	        	case 258:
            	        		{
            	        	    alt19 = 2;
            	        	    }
            	        	    break;
            	        	case 245:
            	        		{
            	        	    alt19 = 3;
            	        	    }
            	        	    break;
            	        	case 255:
            	        		{
            	        	    alt19 = 4;
            	        	    }
            	        	    break;
            	        		default:
            	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        		    NoViableAltException nvae_d19s0 =
            	        		        new NoViableAltException("", 19, 0, input);

            	        		    throw nvae_d19s0;
            	        	}

            	        	switch (alt19) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:280:15: 'void' method_declaration
            	        	        {
            	        	        	string_literal56=(IToken)Match(input,206,FOLLOW_206_in_class_member_declaration2848); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{string_literal56_tree = (object)adaptor.Create(string_literal56);
            	        	        		adaptor.AddChild(root_0, string_literal56_tree);
            	        	        	}
            	        	        	PushFollow(FOLLOW_method_declaration_in_class_member_declaration2850);
            	        	        	method_declaration57 = method_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration57.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:281:9: interface_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_interface_declaration_in_class_member_declaration2861);
            	        	        	interface_declaration58 = interface_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_declaration58.Tree);

            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:282:9: class_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_class_declaration_in_class_member_declaration2872);
            	        	        	class_declaration59 = class_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration59.Tree);

            	        	        }
            	        	        break;
            	        	    case 4 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:283:9: struct_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_struct_declaration_in_class_member_declaration2883);
            	        	        	struct_declaration60 = struct_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_declaration60.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 4 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:284:4: interface_declaration
            	        {
            	        	PushFollow(FOLLOW_interface_declaration_in_class_member_declaration2889);
            	        	interface_declaration61 = interface_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_declaration61.Tree);

            	        }
            	        break;
            	    case 5 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:285:4: 'void' method_declaration
            	        {
            	        	string_literal62=(IToken)Match(input,206,FOLLOW_206_in_class_member_declaration2895); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal62_tree = (object)adaptor.Create(string_literal62);
            	        		adaptor.AddChild(root_0, string_literal62_tree);
            	        	}
            	        	PushFollow(FOLLOW_method_declaration_in_class_member_declaration2899);
            	        	method_declaration63 = method_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration63.Tree);

            	        }
            	        break;
            	    case 6 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:286:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	        {
            	        	PushFollow(FOLLOW_type_in_class_member_declaration2904);
            	        	type64 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type64.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:286:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	        	int alt20 = 6;
            	        	alt20 = dfa20.Predict(input);
            	        	switch (alt20) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:286:11: ( member_name '(' )=> method_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_method_declaration_in_class_member_declaration2918);
            	        	        	method_declaration65 = method_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration65.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:287:8: ( member_name '{' )=> property_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_property_declaration_in_class_member_declaration2937);
            	        	        	property_declaration66 = property_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_declaration66.Tree);

            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:288:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_type_name_in_class_member_declaration2960);
            	        	        	type_name67 = type_name();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name67.Tree);
            	        	        	char_literal68=(IToken)Match(input,DOT,FOLLOW_DOT_in_class_member_declaration2962); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{char_literal68_tree = (object)adaptor.Create(char_literal68);
            	        	        		adaptor.AddChild(root_0, char_literal68_tree);
            	        	        	}
            	        	        	PushFollow(FOLLOW_indexer_declaration_in_class_member_declaration2964);
            	        	        	indexer_declaration69 = indexer_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declaration69.Tree);

            	        	        }
            	        	        break;
            	        	    case 4 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:289:8: indexer_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_indexer_declaration_in_class_member_declaration2973);
            	        	        	indexer_declaration70 = indexer_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declaration70.Tree);

            	        	        }
            	        	        break;
            	        	    case 5 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:290:11: field_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_field_declaration_in_class_member_declaration2986);
            	        	        	field_declaration71 = field_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_declaration71.Tree);

            	        	        }
            	        	        break;
            	        	    case 6 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:291:11: operator_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_operator_declaration_in_class_member_declaration3004);
            	        	        	operator_declaration72 = operator_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_declaration72.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 7 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:295:4: class_declaration
            	        {
            	        	PushFollow(FOLLOW_class_declaration_in_class_member_declaration3022);
            	        	class_declaration73 = class_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration73.Tree);

            	        }
            	        break;
            	    case 8 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:296:4: struct_declaration
            	        {
            	        	PushFollow(FOLLOW_struct_declaration_in_class_member_declaration3029);
            	        	struct_declaration74 = struct_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_declaration74.Tree);

            	        }
            	        break;
            	    case 9 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:297:4: enum_declaration
            	        {
            	        	PushFollow(FOLLOW_enum_declaration_in_class_member_declaration3035);
            	        	enum_declaration75 = enum_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_declaration75.Tree);

            	        }
            	        break;
            	    case 10 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:298:4: delegate_declaration
            	        {
            	        	PushFollow(FOLLOW_delegate_declaration_in_class_member_declaration3042);
            	        	delegate_declaration76 = delegate_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_declaration76.Tree);

            	        }
            	        break;
            	    case 11 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:299:4: conversion_operator_declaration
            	        {
            	        	PushFollow(FOLLOW_conversion_operator_declaration_in_class_member_declaration3048);
            	        	conversion_operator_declaration77 = conversion_operator_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conversion_operator_declaration77.Tree);

            	        }
            	        break;
            	    case 12 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:300:4: constructor_declaration
            	        {
            	        	PushFollow(FOLLOW_constructor_declaration_in_class_member_declaration3053);
            	        	constructor_declaration78 = constructor_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_declaration78.Tree);

            	        }
            	        break;
            	    case 13 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:301:4: destructor_declaration
            	        {
            	        	PushFollow(FOLLOW_destructor_declaration_in_class_member_declaration3059);
            	        	destructor_declaration79 = destructor_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, destructor_declaration79.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 18, class_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_member_declaration"

    public class java_delegate_creation_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "java_delegate_creation_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:305:8: public java_delegate_creation_expression : 'new' type '(' ')' '{' class_member_declaration '}' ;
    public csParser.java_delegate_creation_expression_return java_delegate_creation_expression() // throws RecognitionException [1]
    {   
        csParser.java_delegate_creation_expression_return retval = new csParser.java_delegate_creation_expression_return();
        retval.start = input.LT(1);
        int java_delegate_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal80 = null;
        IToken char_literal82 = null;
        IToken char_literal83 = null;
        IToken char_literal84 = null;
        IToken char_literal86 = null;
        csParser.type_return type81 = default(csParser.type_return);

        csParser.class_member_declaration_return class_member_declaration85 = default(csParser.class_member_declaration_return);


        object string_literal80_tree=null;
        object char_literal82_tree=null;
        object char_literal83_tree=null;
        object char_literal84_tree=null;
        object char_literal86_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 19) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:305:41: ( 'new' type '(' ')' '{' class_member_declaration '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:306:6: 'new' type '(' ')' '{' class_member_declaration '}'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal80=(IToken)Match(input,197,FOLLOW_197_in_java_delegate_creation_expression3079); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal80_tree = (object)adaptor.Create(string_literal80);
            		adaptor.AddChild(root_0, string_literal80_tree);
            	}
            	PushFollow(FOLLOW_type_in_java_delegate_creation_expression3081);
            	type81 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type81.Tree);
            	char_literal82=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_java_delegate_creation_expression3083); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal82_tree = (object)adaptor.Create(char_literal82);
            		adaptor.AddChild(root_0, char_literal82_tree);
            	}
            	char_literal83=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_java_delegate_creation_expression3085); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal83_tree = (object)adaptor.Create(char_literal83);
            		adaptor.AddChild(root_0, char_literal83_tree);
            	}
            	char_literal84=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_java_delegate_creation_expression3087); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal84_tree = (object)adaptor.Create(char_literal84);
            		adaptor.AddChild(root_0, char_literal84_tree);
            	}
            	PushFollow(FOLLOW_class_member_declaration_in_java_delegate_creation_expression3089);
            	class_member_declaration85 = class_member_declaration();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_member_declaration85.Tree);
            	char_literal86=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_java_delegate_creation_expression3091); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal86_tree = (object)adaptor.Create(char_literal86);
            		adaptor.AddChild(root_0, char_literal86_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 19, java_delegate_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "java_delegate_creation_expression"

    public class primary_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "primary_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:308:8: public primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'base' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( object_creation_expression )=> object_creation_expression | delegate_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
    public csParser.primary_expression_return primary_expression() // throws RecognitionException [1]
    {   
        csParser.primary_expression_return retval = new csParser.primary_expression_return();
        retval.start = input.LT(1);
        int primary_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal87 = null;
        IToken string_literal90 = null;
        IToken string_literal95 = null;
        csParser.brackets_return brackets88 = default(csParser.brackets_return);

        csParser.primary_expression_part_return primary_expression_part89 = default(csParser.primary_expression_part_return);

        csParser.brackets_return brackets91 = default(csParser.brackets_return);

        csParser.primary_expression_part_return primary_expression_part92 = default(csParser.primary_expression_part_return);

        csParser.primary_expression_start_return primary_expression_start93 = default(csParser.primary_expression_start_return);

        csParser.primary_expression_part_return primary_expression_part94 = default(csParser.primary_expression_part_return);

        csParser.object_creation_expression_return object_creation_expression96 = default(csParser.object_creation_expression_return);

        csParser.primary_expression_part_return primary_expression_part97 = default(csParser.primary_expression_part_return);

        csParser.object_creation_expression_return object_creation_expression98 = default(csParser.object_creation_expression_return);

        csParser.delegate_creation_expression_return delegate_creation_expression99 = default(csParser.delegate_creation_expression_return);

        csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression100 = default(csParser.anonymous_object_creation_expression_return);

        csParser.sizeof_expression_return sizeof_expression101 = default(csParser.sizeof_expression_return);

        csParser.checked_expression_return checked_expression102 = default(csParser.checked_expression_return);

        csParser.unchecked_expression_return unchecked_expression103 = default(csParser.unchecked_expression_return);

        csParser.default_value_expression_return default_value_expression104 = default(csParser.default_value_expression_return);

        csParser.anonymous_method_expression_return anonymous_method_expression105 = default(csParser.anonymous_method_expression_return);


        object string_literal87_tree=null;
        object string_literal90_tree=null;
        object string_literal95_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 20) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:308:26: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'base' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( object_creation_expression )=> object_creation_expression | delegate_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
            int alt27 = 9;
            alt27 = dfa27.Predict(input);
            switch (alt27) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:309:2: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal87=(IToken)Match(input,THIS,FOLLOW_THIS_in_primary_expression3113); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal87_tree = (object)adaptor.Create(string_literal87);
                    		adaptor.AddChild(root_0, string_literal87_tree);
                    	}
                    	PushFollow(FOLLOW_brackets_in_primary_expression3117);
                    	brackets88 = brackets();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets88.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:309:46: ( primary_expression_part )*
                    	do 
                    	{
                    	    int alt22 = 2;
                    	    int LA22_0 = input.LA(1);

                    	    if ( (LA22_0 == OPEN_BRACKET || LA22_0 == LPAREN || (LA22_0 >= DOT && LA22_0 <= PTR) || (LA22_0 >= 209 && LA22_0 <= 210)) )
                    	    {
                    	        alt22 = 1;
                    	    }


                    	    switch (alt22) 
                    		{
                    			case 1 :
                    			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:309:46: primary_expression_part
                    			    {
                    			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression3121);
                    			    	primary_expression_part89 = primary_expression_part();
                    			    	state._fsp--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_part89.Tree);

                    			    }
                    			    break;

                    			default:
                    			    goto loop22;
                    	    }
                    	} while (true);

                    	loop22:
                    		;	// Stops C# compiler whining that label 'loop22' has no statements


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:310:4: ( 'base' brackets )=> 'base' brackets ( primary_expression_part )*
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal90=(IToken)Match(input,207,FOLLOW_207_in_primary_expression3137); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal90_tree = (object)adaptor.Create(string_literal90);
                    		adaptor.AddChild(root_0, string_literal90_tree);
                    	}
                    	PushFollow(FOLLOW_brackets_in_primary_expression3141);
                    	brackets91 = brackets();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets91.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:310:47: ( primary_expression_part )*
                    	do 
                    	{
                    	    int alt23 = 2;
                    	    int LA23_0 = input.LA(1);

                    	    if ( (LA23_0 == OPEN_BRACKET || LA23_0 == LPAREN || (LA23_0 >= DOT && LA23_0 <= PTR) || (LA23_0 >= 209 && LA23_0 <= 210)) )
                    	    {
                    	        alt23 = 1;
                    	    }


                    	    switch (alt23) 
                    		{
                    			case 1 :
                    			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:310:47: primary_expression_part
                    			    {
                    			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression3145);
                    			    	primary_expression_part92 = primary_expression_part();
                    			    	state._fsp--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_part92.Tree);

                    			    }
                    			    break;

                    			default:
                    			    goto loop23;
                    	    }
                    	} while (true);

                    	loop23:
                    		;	// Stops C# compiler whining that label 'loop23' has no statements


                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:311:4: primary_expression_start ( primary_expression_part )*
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_primary_expression_start_in_primary_expression3151);
                    	primary_expression_start93 = primary_expression_start();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_start93.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:311:31: ( primary_expression_part )*
                    	do 
                    	{
                    	    int alt24 = 2;
                    	    int LA24_0 = input.LA(1);

                    	    if ( (LA24_0 == OPEN_BRACKET || LA24_0 == LPAREN || (LA24_0 >= DOT && LA24_0 <= PTR) || (LA24_0 >= 209 && LA24_0 <= 210)) )
                    	    {
                    	        alt24 = 1;
                    	    }


                    	    switch (alt24) 
                    		{
                    			case 1 :
                    			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:311:31: primary_expression_part
                    			    {
                    			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression3155);
                    			    	primary_expression_part94 = primary_expression_part();
                    			    	state._fsp--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_part94.Tree);

                    			    }
                    			    break;

                    			default:
                    			    goto loop24;
                    	    }
                    	} while (true);

                    	loop24:
                    		;	// Stops C# compiler whining that label 'loop24' has no statements


                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:312:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( object_creation_expression )=> object_creation_expression | delegate_creation_expression | anonymous_object_creation_expression )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal95=(IToken)Match(input,197,FOLLOW_197_in_primary_expression3161); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal95_tree = (object)adaptor.Create(string_literal95);
                    		adaptor.AddChild(root_0, string_literal95_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:312:10: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( object_creation_expression )=> object_creation_expression | delegate_creation_expression | anonymous_object_creation_expression )
                    	int alt26 = 4;
                    	switch ( input.LA(1) ) 
                    	{
                    	case OBJECT:
                    	case BOOL:
                    	case BYTE:
                    	case CHAR:
                    	case SHORT:
                    	case INT:
                    	case LONG:
                    	case FLOAT:
                    	case DOUBLE:
                    	case 251:
                    	case 252:
                    	case 253:
                    	case 254:
                    	case 275:
                    	case 276:
                    		{
                    	    int LA26_1 = input.LA(2);

                    	    if ( (synpred7_cs()) )
                    	    {
                    	        alt26 = 1;
                    	    }
                    	    else if ( (synpred8_cs()) )
                    	    {
                    	        alt26 = 2;
                    	    }
                    	    else 
                    	    {
                    	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        NoViableAltException nvae_d26s1 =
                    	            new NoViableAltException("", 26, 1, input);

                    	        throw nvae_d26s1;
                    	    }
                    	    }
                    	    break;
                    	case IDENTIFIER:
                    		{
                    	    int LA26_2 = input.LA(2);

                    	    if ( (synpred7_cs()) )
                    	    {
                    	        alt26 = 1;
                    	    }
                    	    else if ( (synpred8_cs()) )
                    	    {
                    	        alt26 = 2;
                    	    }
                    	    else if ( (true) )
                    	    {
                    	        alt26 = 3;
                    	    }
                    	    else 
                    	    {
                    	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        NoViableAltException nvae_d26s2 =
                    	            new NoViableAltException("", 26, 2, input);

                    	        throw nvae_d26s2;
                    	    }
                    	    }
                    	    break;
                    	case ELIF:
                    	case ENDIF:
                    	case DEFINE:
                    	case UNDEF:
                    	case 195:
                    	case 221:
                    	case 224:
                    	case 225:
                    	case 226:
                    	case 227:
                    	case 228:
                    	case 229:
                    	case 230:
                    	case 231:
                    	case 232:
                    	case 233:
                    	case 234:
                    	case 235:
                    	case 236:
                    	case 237:
                    	case 238:
                    	case 239:
                    	case 241:
                    	case 242:
                    	case 243:
                    	case 244:
                    	case 247:
                    	case 248:
                    	case 249:
                    	case 250:
                    	case 256:
                    	case 263:
                    	case 264:
                    	case 274:
                    	case 277:
                    		{
                    	    int LA26_3 = input.LA(2);

                    	    if ( (synpred7_cs()) )
                    	    {
                    	        alt26 = 1;
                    	    }
                    	    else if ( (synpred8_cs()) )
                    	    {
                    	        alt26 = 2;
                    	    }
                    	    else if ( (true) )
                    	    {
                    	        alt26 = 3;
                    	    }
                    	    else 
                    	    {
                    	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        NoViableAltException nvae_d26s3 =
                    	            new NoViableAltException("", 26, 3, input);

                    	        throw nvae_d26s3;
                    	    }
                    	    }
                    	    break;
                    	case 206:
                    		{
                    	    int LA26_4 = input.LA(2);

                    	    if ( (synpred7_cs()) )
                    	    {
                    	        alt26 = 1;
                    	    }
                    	    else if ( (synpred8_cs()) )
                    	    {
                    	        alt26 = 2;
                    	    }
                    	    else 
                    	    {
                    	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        NoViableAltException nvae_d26s4 =
                    	            new NoViableAltException("", 26, 4, input);

                    	        throw nvae_d26s4;
                    	    }
                    	    }
                    	    break;
                    	case OPEN_BRACE:
                    		{
                    	    alt26 = 4;
                    	    }
                    	    break;
                    		default:
                    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		    NoViableAltException nvae_d26s0 =
                    		        new NoViableAltException("", 26, 0, input);

                    		    throw nvae_d26s0;
                    	}

                    	switch (alt26) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:312:14: ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+
                    	        {
                    	        	PushFollow(FOLLOW_object_creation_expression_in_primary_expression3189);
                    	        	object_creation_expression96 = object_creation_expression();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_creation_expression96.Tree);
                    	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:313:35: ( primary_expression_part )+
                    	        	int cnt25 = 0;
                    	        	do 
                    	        	{
                    	        	    int alt25 = 2;
                    	        	    int LA25_0 = input.LA(1);

                    	        	    if ( (LA25_0 == OPEN_BRACKET || LA25_0 == LPAREN || (LA25_0 >= DOT && LA25_0 <= PTR) || (LA25_0 >= 209 && LA25_0 <= 210)) )
                    	        	    {
                    	        	        alt25 = 1;
                    	        	    }


                    	        	    switch (alt25) 
                    	        		{
                    	        			case 1 :
                    	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:313:35: primary_expression_part
                    	        			    {
                    	        			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression3193);
                    	        			    	primary_expression_part97 = primary_expression_part();
                    	        			    	state._fsp--;
                    	        			    	if (state.failed) return retval;
                    	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_part97.Tree);

                    	        			    }
                    	        			    break;

                    	        			default:
                    	        			    if ( cnt25 >= 1 ) goto loop25;
                    	        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        		            EarlyExitException eee25 =
                    	        		                new EarlyExitException(25, input);
                    	        		            throw eee25;
                    	        	    }
                    	        	    cnt25++;
                    	        	} while (true);

                    	        	loop25:
                    	        		;	// Stops C# compiler whining that label 'loop25' has no statements


                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:318:7: ( object_creation_expression )=> object_creation_expression
                    	        {
                    	        	PushFollow(FOLLOW_object_creation_expression_in_primary_expression3255);
                    	        	object_creation_expression98 = object_creation_expression();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_creation_expression98.Tree);

                    	        }
                    	        break;
                    	    case 3 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:319:7: delegate_creation_expression
                    	        {
                    	        	PushFollow(FOLLOW_delegate_creation_expression_in_primary_expression3263);
                    	        	delegate_creation_expression99 = delegate_creation_expression();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_creation_expression99.Tree);

                    	        }
                    	        break;
                    	    case 4 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:320:7: anonymous_object_creation_expression
                    	        {
                    	        	PushFollow(FOLLOW_anonymous_object_creation_expression_in_primary_expression3272);
                    	        	anonymous_object_creation_expression100 = anonymous_object_creation_expression();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_object_creation_expression100.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:321:4: sizeof_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_sizeof_expression_in_primary_expression3285);
                    	sizeof_expression101 = sizeof_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sizeof_expression101.Tree);

                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:322:4: checked_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_checked_expression_in_primary_expression3296);
                    	checked_expression102 = checked_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, checked_expression102.Tree);

                    }
                    break;
                case 7 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:323:4: unchecked_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_unchecked_expression_in_primary_expression3315);
                    	unchecked_expression103 = unchecked_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unchecked_expression103.Tree);

                    }
                    break;
                case 8 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:324:4: default_value_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_default_value_expression_in_primary_expression3332);
                    	default_value_expression104 = default_value_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, default_value_expression104.Tree);

                    }
                    break;
                case 9 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:325:4: anonymous_method_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_anonymous_method_expression_in_primary_expression3345);
                    	anonymous_method_expression105 = anonymous_method_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_method_expression105.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 20, primary_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression"

    public class primary_expression_start_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "primary_expression_start"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:328:8: public primary_expression_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );
    public csParser.primary_expression_start_return primary_expression_start() // throws RecognitionException [1]
    {   
        csParser.primary_expression_start_return retval = new csParser.primary_expression_start_return();
        retval.start = input.LT(1);
        int primary_expression_start_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal110 = null;
        IToken string_literal112 = null;
        IToken string_literal113 = null;
        csParser.predefined_type_return predefined_type106 = default(csParser.predefined_type_return);

        csParser.identifier_return identifier107 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list108 = default(csParser.generic_argument_list_return);

        csParser.identifier_return identifier109 = default(csParser.identifier_return);

        csParser.identifier_return identifier111 = default(csParser.identifier_return);

        csParser.paren_expression_return paren_expression114 = default(csParser.paren_expression_return);

        csParser.typeof_expression_return typeof_expression115 = default(csParser.typeof_expression_return);

        csParser.literal_return literal116 = default(csParser.literal_return);


        object string_literal110_tree=null;
        object string_literal112_tree=null;
        object string_literal113_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 21) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:328:32: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal )
            int alt29 = 8;
            alt29 = dfa29.Predict(input);
            switch (alt29) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:329:2: predefined_type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_predefined_type_in_primary_expression_start3360);
                    	predefined_type106 = predefined_type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type106.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:330:4: ( identifier generic_argument_list )=> identifier generic_argument_list
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_primary_expression_start3388);
                    	identifier107 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier107.Tree);
                    	PushFollow(FOLLOW_generic_argument_list_in_primary_expression_start3392);
                    	generic_argument_list108 = generic_argument_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list108.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:331:4: identifier ( '::' identifier )?
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_primary_expression_start3397);
                    	identifier109 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier109.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:331:15: ( '::' identifier )?
                    	int alt28 = 2;
                    	int LA28_0 = input.LA(1);

                    	if ( (LA28_0 == 208) )
                    	{
                    	    alt28 = 1;
                    	}
                    	switch (alt28) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:331:16: '::' identifier
                    	        {
                    	        	string_literal110=(IToken)Match(input,208,FOLLOW_208_in_primary_expression_start3400); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal110_tree = (object)adaptor.Create(string_literal110);
                    	        		adaptor.AddChild(root_0, string_literal110_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_identifier_in_primary_expression_start3404);
                    	        	identifier111 = identifier();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier111.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:332:4: 'this'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal112=(IToken)Match(input,THIS,FOLLOW_THIS_in_primary_expression_start3411); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal112_tree = (object)adaptor.Create(string_literal112);
                    		adaptor.AddChild(root_0, string_literal112_tree);
                    	}

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:333:4: 'base'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal113=(IToken)Match(input,207,FOLLOW_207_in_primary_expression_start3417); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal113_tree = (object)adaptor.Create(string_literal113);
                    		adaptor.AddChild(root_0, string_literal113_tree);
                    	}

                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:334:4: paren_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_paren_expression_in_primary_expression_start3422);
                    	paren_expression114 = paren_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, paren_expression114.Tree);

                    }
                    break;
                case 7 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:335:4: typeof_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_typeof_expression_in_primary_expression_start3427);
                    	typeof_expression115 = typeof_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, typeof_expression115.Tree);

                    }
                    break;
                case 8 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:336:4: literal
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_literal_in_primary_expression_start3445);
                    	literal116 = literal();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, literal116.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 21, primary_expression_start_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start"

    public class primary_expression_part_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "primary_expression_part"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:339:8: public primary_expression_part : ( access_identifier | brackets_or_arguments | '++' | '--' );
    public csParser.primary_expression_part_return primary_expression_part() // throws RecognitionException [1]
    {   
        csParser.primary_expression_part_return retval = new csParser.primary_expression_part_return();
        retval.start = input.LT(1);
        int primary_expression_part_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal119 = null;
        IToken string_literal120 = null;
        csParser.access_identifier_return access_identifier117 = default(csParser.access_identifier_return);

        csParser.brackets_or_arguments_return brackets_or_arguments118 = default(csParser.brackets_or_arguments_return);


        object string_literal119_tree=null;
        object string_literal120_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 22) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:339:31: ( access_identifier | brackets_or_arguments | '++' | '--' )
            int alt30 = 4;
            switch ( input.LA(1) ) 
            {
            case DOT:
            case PTR:
            	{
                alt30 = 1;
                }
                break;
            case OPEN_BRACKET:
            case LPAREN:
            	{
                alt30 = 2;
                }
                break;
            case 209:
            	{
                alt30 = 3;
                }
                break;
            case 210:
            	{
                alt30 = 4;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d30s0 =
            	        new NoViableAltException("", 30, 0, input);

            	    throw nvae_d30s0;
            }

            switch (alt30) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:340:3: access_identifier
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_access_identifier_in_primary_expression_part3458);
                    	access_identifier117 = access_identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_identifier117.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:341:4: brackets_or_arguments
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_part3463);
                    	brackets_or_arguments118 = brackets_or_arguments();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets_or_arguments118.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:342:4: '++'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal119=(IToken)Match(input,209,FOLLOW_209_in_primary_expression_part3469); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal119_tree = (object)adaptor.Create(string_literal119);
                    		adaptor.AddChild(root_0, string_literal119_tree);
                    	}

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:343:4: '--'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal120=(IToken)Match(input,210,FOLLOW_210_in_primary_expression_part3474); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal120_tree = (object)adaptor.Create(string_literal120);
                    		adaptor.AddChild(root_0, string_literal120_tree);
                    	}

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 22, primary_expression_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_part"

    public class access_identifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "access_identifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:344:8: public access_identifier : access_operator type_or_generic ;
    public csParser.access_identifier_return access_identifier() // throws RecognitionException [1]
    {   
        csParser.access_identifier_return retval = new csParser.access_identifier_return();
        retval.start = input.LT(1);
        int access_identifier_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_operator_return access_operator121 = default(csParser.access_operator_return);

        csParser.type_or_generic_return type_or_generic122 = default(csParser.type_or_generic_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 23) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:344:25: ( access_operator type_or_generic )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:345:2: access_operator type_or_generic
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_access_operator_in_access_identifier3484);
            	access_operator121 = access_operator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_operator121.Tree);
            	PushFollow(FOLLOW_type_or_generic_in_access_identifier3488);
            	type_or_generic122 = type_or_generic();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_or_generic122.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 23, access_identifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "access_identifier"

    public class access_operator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "access_operator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:346:8: public access_operator : ( '.' | '->' );
    public csParser.access_operator_return access_operator() // throws RecognitionException [1]
    {   
        csParser.access_operator_return retval = new csParser.access_operator_return();
        retval.start = input.LT(1);
        int access_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken set123 = null;

        object set123_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 24) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:346:23: ( '.' | '->' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set123 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set123));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 24, access_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "access_operator"

    public class brackets_or_arguments_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "brackets_or_arguments"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:348:8: public brackets_or_arguments : ( brackets | arguments );
    public csParser.brackets_or_arguments_return brackets_or_arguments() // throws RecognitionException [1]
    {   
        csParser.brackets_or_arguments_return retval = new csParser.brackets_or_arguments_return();
        retval.start = input.LT(1);
        int brackets_or_arguments_StartIndex = input.Index;
        object root_0 = null;

        csParser.brackets_return brackets124 = default(csParser.brackets_return);

        csParser.arguments_return arguments125 = default(csParser.arguments_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 25) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:348:29: ( brackets | arguments )
            int alt31 = 2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0 == OPEN_BRACKET) )
            {
                alt31 = 1;
            }
            else if ( (LA31_0 == LPAREN) )
            {
                alt31 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d31s0 =
                    new NoViableAltException("", 31, 0, input);

                throw nvae_d31s0;
            }
            switch (alt31) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:349:2: brackets
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_brackets_in_brackets_or_arguments3514);
                    	brackets124 = brackets();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets124.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:349:13: arguments
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_arguments_in_brackets_or_arguments3518);
                    	arguments125 = arguments();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments125.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 25, brackets_or_arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "brackets_or_arguments"

    public class brackets_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "brackets"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:350:8: public brackets : '[' ( expression_list )? ']' ;
    public csParser.brackets_return brackets() // throws RecognitionException [1]
    {   
        csParser.brackets_return retval = new csParser.brackets_return();
        retval.start = input.LT(1);
        int brackets_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal126 = null;
        IToken char_literal128 = null;
        csParser.expression_list_return expression_list127 = default(csParser.expression_list_return);


        object char_literal126_tree=null;
        object char_literal128_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 26) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:350:16: ( '[' ( expression_list )? ']' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:351:2: '[' ( expression_list )? ']'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal126=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_brackets3528); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal126_tree = (object)adaptor.Create(char_literal126);
            		adaptor.AddChild(root_0, char_literal126_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:351:8: ( expression_list )?
            	int alt32 = 2;
            	int LA32_0 = input.LA(1);

            	if ( ((LA32_0 >= MONONOT && LA32_0 <= MONOTWIDDLE) || (LA32_0 >= OBJECT && LA32_0 <= THIS) || LA32_0 == LPAREN || LA32_0 == BIT_AND || (LA32_0 >= PLUS && LA32_0 <= MINUS) || LA32_0 == STAR || (LA32_0 >= BOOL && LA32_0 <= NULL) || (LA32_0 >= ELIF && LA32_0 <= UNDEF) || LA32_0 == 195 || LA32_0 == 197 || LA32_0 == 207 || (LA32_0 >= 209 && LA32_0 <= 210) || (LA32_0 >= 214 && LA32_0 <= 219) || LA32_0 == 221 || (LA32_0 >= 224 && LA32_0 <= 239) || (LA32_0 >= 241 && LA32_0 <= 244) || (LA32_0 >= 247 && LA32_0 <= 254) || LA32_0 == 256 || (LA32_0 >= 263 && LA32_0 <= 264) || (LA32_0 >= 274 && LA32_0 <= 277)) )
            	{
            	    alt32 = 1;
            	}
            	switch (alt32) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:351:8: expression_list
            	        {
            	        	PushFollow(FOLLOW_expression_list_in_brackets3532);
            	        	expression_list127 = expression_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_list127.Tree);

            	        }
            	        break;

            	}

            	char_literal128=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_brackets3537); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal128_tree = (object)adaptor.Create(char_literal128);
            		adaptor.AddChild(root_0, char_literal128_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 26, brackets_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public class paren_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "paren_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:352:8: public paren_expression : '(' expression ')' ;
    public csParser.paren_expression_return paren_expression() // throws RecognitionException [1]
    {   
        csParser.paren_expression_return retval = new csParser.paren_expression_return();
        retval.start = input.LT(1);
        int paren_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal129 = null;
        IToken char_literal131 = null;
        csParser.expression_return expression130 = default(csParser.expression_return);


        object char_literal129_tree=null;
        object char_literal131_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 27) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:352:24: ( '(' expression ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:353:2: '(' expression ')'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal129=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_paren_expression3549); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal129_tree = (object)adaptor.Create(char_literal129);
            		adaptor.AddChild(root_0, char_literal129_tree);
            	}
            	PushFollow(FOLLOW_expression_in_paren_expression3553);
            	expression130 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression130.Tree);
            	char_literal131=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_paren_expression3557); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal131_tree = (object)adaptor.Create(char_literal131);
            		adaptor.AddChild(root_0, char_literal131_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 27, paren_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "paren_expression"

    public class arguments_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "arguments"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:354:8: public arguments : '(' ( argument_list )? ')' ;
    public csParser.arguments_return arguments() // throws RecognitionException [1]
    {   
        csParser.arguments_return retval = new csParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal132 = null;
        IToken char_literal134 = null;
        csParser.argument_list_return argument_list133 = default(csParser.argument_list_return);


        object char_literal132_tree=null;
        object char_literal134_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 28) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:354:17: ( '(' ( argument_list )? ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:355:2: '(' ( argument_list )? ')'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal132=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_arguments3568); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal132_tree = (object)adaptor.Create(char_literal132);
            		adaptor.AddChild(root_0, char_literal132_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:355:8: ( argument_list )?
            	int alt33 = 2;
            	int LA33_0 = input.LA(1);

            	if ( ((LA33_0 >= MONONOT && LA33_0 <= MONOTWIDDLE) || (LA33_0 >= OBJECT && LA33_0 <= THIS) || LA33_0 == LPAREN || LA33_0 == BIT_AND || (LA33_0 >= PLUS && LA33_0 <= MINUS) || LA33_0 == STAR || (LA33_0 >= BOOL && LA33_0 <= NULL) || (LA33_0 >= ELIF && LA33_0 <= UNDEF) || LA33_0 == 195 || LA33_0 == 197 || LA33_0 == 207 || (LA33_0 >= 209 && LA33_0 <= 210) || (LA33_0 >= 212 && LA33_0 <= 219) || LA33_0 == 221 || (LA33_0 >= 224 && LA33_0 <= 239) || (LA33_0 >= 241 && LA33_0 <= 244) || (LA33_0 >= 247 && LA33_0 <= 254) || LA33_0 == 256 || (LA33_0 >= 263 && LA33_0 <= 264) || (LA33_0 >= 274 && LA33_0 <= 277)) )
            	{
            	    alt33 = 1;
            	}
            	switch (alt33) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:355:8: argument_list
            	        {
            	        	PushFollow(FOLLOW_argument_list_in_arguments3572);
            	        	argument_list133 = argument_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_list133.Tree);

            	        }
            	        break;

            	}

            	char_literal134=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_arguments3577); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal134_tree = (object)adaptor.Create(char_literal134);
            		adaptor.AddChild(root_0, char_literal134_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 28, arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public class argument_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "argument_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:356:8: public argument_list : argument ( ',' argument )* ;
    public csParser.argument_list_return argument_list() // throws RecognitionException [1]
    {   
        csParser.argument_list_return retval = new csParser.argument_list_return();
        retval.start = input.LT(1);
        int argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal136 = null;
        csParser.argument_return argument135 = default(csParser.argument_return);

        csParser.argument_return argument137 = default(csParser.argument_return);


        object char_literal136_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 29) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:356:21: ( argument ( ',' argument )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:357:2: argument ( ',' argument )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_argument_in_argument_list3588);
            	argument135 = argument();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument135.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:357:11: ( ',' argument )*
            	do 
            	{
            	    int alt34 = 2;
            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0 == COMMA) )
            	    {
            	        alt34 = 1;
            	    }


            	    switch (alt34) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:357:12: ',' argument
            			    {
            			    	char_literal136=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_argument_list3591); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal136_tree = (object)adaptor.Create(char_literal136);
            			    		adaptor.AddChild(root_0, char_literal136_tree);
            			    	}
            			    	PushFollow(FOLLOW_argument_in_argument_list3593);
            			    	argument137 = argument();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument137.Tree);

            			    }
            			    break;

            			default:
            			    goto loop34;
            	    }
            	} while (true);

            	loop34:
            		;	// Stops C# compiler whining that label 'loop34' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 29, argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument_list"

    public class argument_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "argument"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:359:8: public argument : ( argument_name argument_value | argument_value );
    public csParser.argument_return argument() // throws RecognitionException [1]
    {   
        csParser.argument_return retval = new csParser.argument_return();
        retval.start = input.LT(1);
        int argument_StartIndex = input.Index;
        object root_0 = null;

        csParser.argument_name_return argument_name138 = default(csParser.argument_name_return);

        csParser.argument_value_return argument_value139 = default(csParser.argument_value_return);

        csParser.argument_value_return argument_value140 = default(csParser.argument_value_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 30) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:359:16: ( argument_name argument_value | argument_value )
            int alt35 = 2;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            	{
                int LA35_1 = input.LA(2);

                if ( (LA35_1 == OPEN_BRACKET || (LA35_1 >= LPAREN && LA35_1 <= NULL_COALESCE) || (LA35_1 >= ASSIGN && LA35_1 <= LEFT_SHIFT_ASSIGN) || (LA35_1 >= LOG_OR && LA35_1 <= LEFT_SHIFT) || (LA35_1 >= PLUS && LA35_1 <= COMMA) || (LA35_1 >= DOT && LA35_1 <= GT) || LA35_1 == RPAREN || (LA35_1 >= 208 && LA35_1 <= 210) || LA35_1 == 220 || (LA35_1 >= 222 && LA35_1 <= 223)) )
                {
                    alt35 = 2;
                }
                else if ( (LA35_1 == 211) )
                {
                    alt35 = 1;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d35s1 =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae_d35s1;
                }
                }
                break;
            case 225:
            	{
                int LA35_2 = input.LA(2);

                if ( (LA35_2 == OBJECT || LA35_2 == OPEN_BRACKET || (LA35_2 >= LPAREN && LA35_2 <= NULL_COALESCE) || (LA35_2 >= ASSIGN && LA35_2 <= LEFT_SHIFT_ASSIGN) || (LA35_2 >= LOG_OR && LA35_2 <= LEFT_SHIFT) || (LA35_2 >= PLUS && LA35_2 <= COMMA) || (LA35_2 >= BOOL && LA35_2 <= IDENTIFIER) || (LA35_2 >= DOT && LA35_2 <= GT) || (LA35_2 >= ELIF && LA35_2 <= UNDEF) || LA35_2 == RPAREN || LA35_2 == 195 || LA35_2 == 206 || (LA35_2 >= 208 && LA35_2 <= 210) || (LA35_2 >= 220 && LA35_2 <= 239) || (LA35_2 >= 241 && LA35_2 <= 244) || (LA35_2 >= 247 && LA35_2 <= 254) || LA35_2 == 256 || (LA35_2 >= 263 && LA35_2 <= 264) || (LA35_2 >= 274 && LA35_2 <= 277)) )
                {
                    alt35 = 2;
                }
                else if ( (LA35_2 == 211) )
                {
                    alt35 = 1;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d35s2 =
                        new NoViableAltException("", 35, 2, input);

                    throw nvae_d35s2;
                }
                }
                break;
            case MONONOT:
            case MONOTWIDDLE:
            case OBJECT:
            case THIS:
            case LPAREN:
            case BIT_AND:
            case PLUS:
            case MINUS:
            case STAR:
            case BOOL:
            case BYTE:
            case CHAR:
            case SHORT:
            case INT:
            case LONG:
            case FLOAT:
            case DOUBLE:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case 197:
            case 207:
            case 209:
            case 210:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 251:
            case 252:
            case 253:
            case 254:
            case 275:
            case 276:
            	{
                alt35 = 2;
                }
                break;
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 221:
            case 224:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 256:
            case 263:
            case 264:
            case 274:
            case 277:
            	{
                int LA35_4 = input.LA(2);

                if ( (LA35_4 == OPEN_BRACKET || (LA35_4 >= LPAREN && LA35_4 <= NULL_COALESCE) || (LA35_4 >= ASSIGN && LA35_4 <= LEFT_SHIFT_ASSIGN) || (LA35_4 >= LOG_OR && LA35_4 <= LEFT_SHIFT) || (LA35_4 >= PLUS && LA35_4 <= COMMA) || (LA35_4 >= DOT && LA35_4 <= GT) || LA35_4 == RPAREN || (LA35_4 >= 208 && LA35_4 <= 210) || LA35_4 == 220 || (LA35_4 >= 222 && LA35_4 <= 223)) )
                {
                    alt35 = 2;
                }
                else if ( (LA35_4 == 211) )
                {
                    alt35 = 1;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d35s4 =
                        new NoViableAltException("", 35, 4, input);

                    throw nvae_d35s4;
                }
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d35s0 =
            	        new NoViableAltException("", 35, 0, input);

            	    throw nvae_d35s0;
            }

            switch (alt35) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:360:2: argument_name argument_value
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_argument_name_in_argument3605);
                    	argument_name138 = argument_name();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_name138.Tree);
                    	PushFollow(FOLLOW_argument_value_in_argument3609);
                    	argument_value139 = argument_value();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_value139.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:361:4: argument_value
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_argument_value_in_argument3614);
                    	argument_value140 = argument_value();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_value140.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 30, argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument"

    public class argument_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "argument_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:362:8: public argument_name : identifier ':' ;
    public csParser.argument_name_return argument_name() // throws RecognitionException [1]
    {   
        csParser.argument_name_return retval = new csParser.argument_name_return();
        retval.start = input.LT(1);
        int argument_name_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal142 = null;
        csParser.identifier_return identifier141 = default(csParser.identifier_return);


        object char_literal142_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 31) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:362:21: ( identifier ':' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:363:2: identifier ':'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_argument_name3623);
            	identifier141 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier141.Tree);
            	char_literal142=(IToken)Match(input,211,FOLLOW_211_in_argument_name3627); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal142_tree = (object)adaptor.Create(char_literal142);
            		adaptor.AddChild(root_0, char_literal142_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 31, argument_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument_name"

    public class argument_value_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "argument_value"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:364:8: public argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
    public csParser.argument_value_return argument_value() // throws RecognitionException [1]
    {   
        csParser.argument_value_return retval = new csParser.argument_value_return();
        retval.start = input.LT(1);
        int argument_value_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal145 = null;
        csParser.expression_return expression143 = default(csParser.expression_return);

        csParser.ref_variable_reference_return ref_variable_reference144 = default(csParser.ref_variable_reference_return);

        csParser.variable_reference_return variable_reference146 = default(csParser.variable_reference_return);


        object string_literal145_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 32) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:364:22: ( expression | ref_variable_reference | 'out' variable_reference )
            int alt36 = 3;
            switch ( input.LA(1) ) 
            {
            case MONONOT:
            case MONOTWIDDLE:
            case OBJECT:
            case THIS:
            case LPAREN:
            case BIT_AND:
            case PLUS:
            case MINUS:
            case STAR:
            case BOOL:
            case BYTE:
            case CHAR:
            case SHORT:
            case INT:
            case LONG:
            case FLOAT:
            case DOUBLE:
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 197:
            case 207:
            case 209:
            case 210:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 221:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 256:
            case 263:
            case 264:
            case 274:
            case 275:
            case 276:
            case 277:
            	{
                alt36 = 1;
                }
                break;
            case 213:
            	{
                alt36 = 2;
                }
                break;
            case 212:
            	{
                alt36 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d36s0 =
            	        new NoViableAltException("", 36, 0, input);

            	    throw nvae_d36s0;
            }

            switch (alt36) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:365:2: expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_expression_in_argument_value3637);
                    	expression143 = expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression143.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:366:4: ref_variable_reference
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_ref_variable_reference_in_argument_value3643);
                    	ref_variable_reference144 = ref_variable_reference();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ref_variable_reference144.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:367:4: 'out' variable_reference
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal145=(IToken)Match(input,212,FOLLOW_212_in_argument_value3649); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal145_tree = (object)adaptor.Create(string_literal145);
                    		adaptor.AddChild(root_0, string_literal145_tree);
                    	}
                    	PushFollow(FOLLOW_variable_reference_in_argument_value3653);
                    	variable_reference146 = variable_reference();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_reference146.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 32, argument_value_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument_value"

    public class ref_variable_reference_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "ref_variable_reference"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:368:8: public ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
    public csParser.ref_variable_reference_return ref_variable_reference() // throws RecognitionException [1]
    {   
        csParser.ref_variable_reference_return retval = new csParser.ref_variable_reference_return();
        retval.start = input.LT(1);
        int ref_variable_reference_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal147 = null;
        IToken char_literal148 = null;
        IToken char_literal150 = null;
        csParser.type_return type149 = default(csParser.type_return);

        csParser.ref_variable_reference_return ref_variable_reference151 = default(csParser.ref_variable_reference_return);

        csParser.variable_reference_return variable_reference152 = default(csParser.variable_reference_return);

        csParser.variable_reference_return variable_reference153 = default(csParser.variable_reference_return);


        object string_literal147_tree=null;
        object char_literal148_tree=null;
        object char_literal150_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 33) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:368:30: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:369:2: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal147=(IToken)Match(input,213,FOLLOW_213_in_ref_variable_reference3663); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal147_tree = (object)adaptor.Create(string_literal147);
            		adaptor.AddChild(root_0, string_literal147_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:370:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
            	int alt38 = 2;
            	alt38 = dfa38.Predict(input);
            	switch (alt38) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:370:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
            	        {
            	        	char_literal148=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_ref_variable_reference3685); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal148_tree = (object)adaptor.Create(char_literal148);
            	        		adaptor.AddChild(root_0, char_literal148_tree);
            	        	}
            	        	PushFollow(FOLLOW_type_in_ref_variable_reference3689);
            	        	type149 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type149.Tree);
            	        	char_literal150=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_ref_variable_reference3693); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal150_tree = (object)adaptor.Create(char_literal150);
            	        		adaptor.AddChild(root_0, char_literal150_tree);
            	        	}
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:370:47: ( ref_variable_reference | variable_reference )
            	        	int alt37 = 2;
            	        	int LA37_0 = input.LA(1);

            	        	if ( (LA37_0 == 213) )
            	        	{
            	        	    alt37 = 1;
            	        	}
            	        	else if ( ((LA37_0 >= MONONOT && LA37_0 <= MONOTWIDDLE) || (LA37_0 >= OBJECT && LA37_0 <= THIS) || LA37_0 == LPAREN || LA37_0 == BIT_AND || (LA37_0 >= PLUS && LA37_0 <= MINUS) || LA37_0 == STAR || (LA37_0 >= BOOL && LA37_0 <= NULL) || (LA37_0 >= ELIF && LA37_0 <= UNDEF) || LA37_0 == 195 || LA37_0 == 197 || LA37_0 == 207 || (LA37_0 >= 209 && LA37_0 <= 210) || (LA37_0 >= 214 && LA37_0 <= 219) || LA37_0 == 221 || (LA37_0 >= 224 && LA37_0 <= 239) || (LA37_0 >= 241 && LA37_0 <= 244) || (LA37_0 >= 247 && LA37_0 <= 254) || LA37_0 == 256 || (LA37_0 >= 263 && LA37_0 <= 264) || (LA37_0 >= 274 && LA37_0 <= 277)) )
            	        	{
            	        	    alt37 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d37s0 =
            	        	        new NoViableAltException("", 37, 0, input);

            	        	    throw nvae_d37s0;
            	        	}
            	        	switch (alt37) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:370:48: ref_variable_reference
            	        	        {
            	        	        	PushFollow(FOLLOW_ref_variable_reference_in_ref_variable_reference3698);
            	        	        	ref_variable_reference151 = ref_variable_reference();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ref_variable_reference151.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:370:73: variable_reference
            	        	        {
            	        	        	PushFollow(FOLLOW_variable_reference_in_ref_variable_reference3702);
            	        	        	variable_reference152 = variable_reference();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_reference152.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:372:5: variable_reference
            	        {
            	        	PushFollow(FOLLOW_variable_reference_in_ref_variable_reference3738);
            	        	variable_reference153 = variable_reference();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_reference153.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 33, ref_variable_reference_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ref_variable_reference"

    public class variable_reference_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variable_reference"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:374:8: public variable_reference : expression ;
    public csParser.variable_reference_return variable_reference() // throws RecognitionException [1]
    {   
        csParser.variable_reference_return retval = new csParser.variable_reference_return();
        retval.start = input.LT(1);
        int variable_reference_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression154 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 34) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:374:26: ( expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:375:2: expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_variable_reference3750);
            	expression154 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression154.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 34, variable_reference_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_reference"

    public class rank_specifiers_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "rank_specifiers"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:376:8: public rank_specifiers : ( rank_specifier )+ ;
    public csParser.rank_specifiers_return rank_specifiers() // throws RecognitionException [1]
    {   
        csParser.rank_specifiers_return retval = new csParser.rank_specifiers_return();
        retval.start = input.LT(1);
        int rank_specifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.rank_specifier_return rank_specifier155 = default(csParser.rank_specifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 35) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:376:23: ( ( rank_specifier )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:377:2: ( rank_specifier )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:377:2: ( rank_specifier )+
            	int cnt39 = 0;
            	do 
            	{
            	    int alt39 = 2;
            	    int LA39_0 = input.LA(1);

            	    if ( (LA39_0 == OPEN_BRACKET) )
            	    {
            	        int LA39_2 = input.LA(2);

            	        if ( (LA39_2 == CLOSE_BRACKET || LA39_2 == COMMA) )
            	        {
            	            alt39 = 1;
            	        }


            	    }


            	    switch (alt39) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:377:2: rank_specifier
            			    {
            			    	PushFollow(FOLLOW_rank_specifier_in_rank_specifiers3760);
            			    	rank_specifier155 = rank_specifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifier155.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt39 >= 1 ) goto loop39;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee39 =
            		                new EarlyExitException(39, input);
            		            throw eee39;
            	    }
            	    cnt39++;
            	} while (true);

            	loop39:
            		;	// Stops C# compiler whining that label 'loop39' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 35, rank_specifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "rank_specifiers"

    public class rank_specifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "rank_specifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:378:8: public rank_specifier : '[' ( dim_separators )? ']' ;
    public csParser.rank_specifier_return rank_specifier() // throws RecognitionException [1]
    {   
        csParser.rank_specifier_return retval = new csParser.rank_specifier_return();
        retval.start = input.LT(1);
        int rank_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal156 = null;
        IToken char_literal158 = null;
        csParser.dim_separators_return dim_separators157 = default(csParser.dim_separators_return);


        object char_literal156_tree=null;
        object char_literal158_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 36) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:378:22: ( '[' ( dim_separators )? ']' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:379:2: '[' ( dim_separators )? ']'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal156=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_rank_specifier3780); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal156_tree = (object)adaptor.Create(char_literal156);
            		adaptor.AddChild(root_0, char_literal156_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:379:8: ( dim_separators )?
            	int alt40 = 2;
            	int LA40_0 = input.LA(1);

            	if ( (LA40_0 == COMMA) )
            	{
            	    alt40 = 1;
            	}
            	switch (alt40) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:379:8: dim_separators
            	        {
            	        	PushFollow(FOLLOW_dim_separators_in_rank_specifier3784);
            	        	dim_separators157 = dim_separators();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, dim_separators157.Tree);

            	        }
            	        break;

            	}

            	char_literal158=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_rank_specifier3789); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal158_tree = (object)adaptor.Create(char_literal158);
            		adaptor.AddChild(root_0, char_literal158_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 36, rank_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "rank_specifier"

    public class dim_separators_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "dim_separators"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:380:8: public dim_separators : ( ',' )+ ;
    public csParser.dim_separators_return dim_separators() // throws RecognitionException [1]
    {   
        csParser.dim_separators_return retval = new csParser.dim_separators_return();
        retval.start = input.LT(1);
        int dim_separators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal159 = null;

        object char_literal159_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 37) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:380:22: ( ( ',' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:381:2: ( ',' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:381:2: ( ',' )+
            	int cnt41 = 0;
            	do 
            	{
            	    int alt41 = 2;
            	    int LA41_0 = input.LA(1);

            	    if ( (LA41_0 == COMMA) )
            	    {
            	        alt41 = 1;
            	    }


            	    switch (alt41) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:381:2: ','
            			    {
            			    	char_literal159=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_dim_separators3800); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal159_tree = (object)adaptor.Create(char_literal159);
            			    		adaptor.AddChild(root_0, char_literal159_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt41 >= 1 ) goto loop41;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee41 =
            		                new EarlyExitException(41, input);
            		            throw eee41;
            	    }
            	    cnt41++;
            	} while (true);

            	loop41:
            		;	// Stops C# compiler whining that label 'loop41' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 37, dim_separators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "dim_separators"

    public class delegate_creation_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "delegate_creation_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:383:8: public delegate_creation_expression : type_name '(' type_name ')' ;
    public csParser.delegate_creation_expression_return delegate_creation_expression() // throws RecognitionException [1]
    {   
        csParser.delegate_creation_expression_return retval = new csParser.delegate_creation_expression_return();
        retval.start = input.LT(1);
        int delegate_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal161 = null;
        IToken char_literal163 = null;
        csParser.type_name_return type_name160 = default(csParser.type_name_return);

        csParser.type_name_return type_name162 = default(csParser.type_name_return);


        object char_literal161_tree=null;
        object char_literal163_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 38) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:383:36: ( type_name '(' type_name ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:385:2: type_name '(' type_name ')'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_name_in_delegate_creation_expression3815);
            	type_name160 = type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name160.Tree);
            	char_literal161=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_delegate_creation_expression3819); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal161_tree = (object)adaptor.Create(char_literal161);
            		adaptor.AddChild(root_0, char_literal161_tree);
            	}
            	PushFollow(FOLLOW_type_name_in_delegate_creation_expression3823);
            	type_name162 = type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name162.Tree);
            	char_literal163=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_delegate_creation_expression3827); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal163_tree = (object)adaptor.Create(char_literal163);
            		adaptor.AddChild(root_0, char_literal163_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 38, delegate_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_creation_expression"

    public class anonymous_object_creation_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "anonymous_object_creation_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:386:8: public anonymous_object_creation_expression : anonymous_object_initializer ;
    public csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression() // throws RecognitionException [1]
    {   
        csParser.anonymous_object_creation_expression_return retval = new csParser.anonymous_object_creation_expression_return();
        retval.start = input.LT(1);
        int anonymous_object_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.anonymous_object_initializer_return anonymous_object_initializer164 = default(csParser.anonymous_object_initializer_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 39) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:386:44: ( anonymous_object_initializer )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:388:2: anonymous_object_initializer
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression3840);
            	anonymous_object_initializer164 = anonymous_object_initializer();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_object_initializer164.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 39, anonymous_object_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_creation_expression"

    public class anonymous_object_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "anonymous_object_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:389:8: public anonymous_object_initializer : '{' ( member_declarator_list ( ',' )? )? '}' ;
    public csParser.anonymous_object_initializer_return anonymous_object_initializer() // throws RecognitionException [1]
    {   
        csParser.anonymous_object_initializer_return retval = new csParser.anonymous_object_initializer_return();
        retval.start = input.LT(1);
        int anonymous_object_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal165 = null;
        IToken char_literal167 = null;
        IToken char_literal168 = null;
        csParser.member_declarator_list_return member_declarator_list166 = default(csParser.member_declarator_list_return);


        object char_literal165_tree=null;
        object char_literal167_tree=null;
        object char_literal168_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 40) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:389:36: ( '{' ( member_declarator_list ( ',' )? )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:390:2: '{' ( member_declarator_list ( ',' )? )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal165=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer3851); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal165_tree = (object)adaptor.Create(char_literal165);
            		adaptor.AddChild(root_0, char_literal165_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:390:8: ( member_declarator_list ( ',' )? )?
            	int alt43 = 2;
            	int LA43_0 = input.LA(1);

            	if ( (LA43_0 == OBJECT || (LA43_0 >= BOOL && LA43_0 <= NULL) || (LA43_0 >= ELIF && LA43_0 <= UNDEF) || LA43_0 == 195 || LA43_0 == 221 || (LA43_0 >= 224 && LA43_0 <= 239) || (LA43_0 >= 241 && LA43_0 <= 244) || (LA43_0 >= 247 && LA43_0 <= 254) || LA43_0 == 256 || (LA43_0 >= 263 && LA43_0 <= 264) || (LA43_0 >= 274 && LA43_0 <= 277)) )
            	{
            	    alt43 = 1;
            	}
            	switch (alt43) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:390:9: member_declarator_list ( ',' )?
            	        {
            	        	PushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer3856);
            	        	member_declarator_list166 = member_declarator_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_declarator_list166.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:390:34: ( ',' )?
            	        	int alt42 = 2;
            	        	int LA42_0 = input.LA(1);

            	        	if ( (LA42_0 == COMMA) )
            	        	{
            	        	    alt42 = 1;
            	        	}
            	        	switch (alt42) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:390:34: ','
            	        	        {
            	        	        	char_literal167=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_anonymous_object_initializer3860); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{char_literal167_tree = (object)adaptor.Create(char_literal167);
            	        	        		adaptor.AddChild(root_0, char_literal167_tree);
            	        	        	}

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}

            	char_literal168=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer3867); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal168_tree = (object)adaptor.Create(char_literal168);
            		adaptor.AddChild(root_0, char_literal168_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 40, anonymous_object_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_initializer"

    public class member_declarator_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "member_declarator_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:391:8: public member_declarator_list : member_declarator ( ',' member_declarator )* ;
    public csParser.member_declarator_list_return member_declarator_list() // throws RecognitionException [1]
    {   
        csParser.member_declarator_list_return retval = new csParser.member_declarator_list_return();
        retval.start = input.LT(1);
        int member_declarator_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal170 = null;
        csParser.member_declarator_return member_declarator169 = default(csParser.member_declarator_return);

        csParser.member_declarator_return member_declarator171 = default(csParser.member_declarator_return);


        object char_literal170_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 41) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:391:30: ( member_declarator ( ',' member_declarator )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:392:2: member_declarator ( ',' member_declarator )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_member_declarator_in_member_declarator_list3877);
            	member_declarator169 = member_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_declarator169.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:392:21: ( ',' member_declarator )*
            	do 
            	{
            	    int alt44 = 2;
            	    int LA44_0 = input.LA(1);

            	    if ( (LA44_0 == COMMA) )
            	    {
            	        int LA44_1 = input.LA(2);

            	        if ( (LA44_1 == OBJECT || (LA44_1 >= BOOL && LA44_1 <= NULL) || (LA44_1 >= ELIF && LA44_1 <= UNDEF) || LA44_1 == 195 || LA44_1 == 221 || (LA44_1 >= 224 && LA44_1 <= 239) || (LA44_1 >= 241 && LA44_1 <= 244) || (LA44_1 >= 247 && LA44_1 <= 254) || LA44_1 == 256 || (LA44_1 >= 263 && LA44_1 <= 264) || (LA44_1 >= 274 && LA44_1 <= 277)) )
            	        {
            	            alt44 = 1;
            	        }


            	    }


            	    switch (alt44) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:392:22: ',' member_declarator
            			    {
            			    	char_literal170=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_member_declarator_list3881); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal170_tree = (object)adaptor.Create(char_literal170);
            			    		adaptor.AddChild(root_0, char_literal170_tree);
            			    	}
            			    	PushFollow(FOLLOW_member_declarator_in_member_declarator_list3883);
            			    	member_declarator171 = member_declarator();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_declarator171.Tree);

            			    }
            			    break;

            			default:
            			    goto loop44;
            	    }
            	} while (true);

            	loop44:
            		;	// Stops C# compiler whining that label 'loop44' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 41, member_declarator_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_declarator_list"

    public class member_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "member_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:393:8: public member_declarator : qid ( '=' expression )? ;
    public csParser.member_declarator_return member_declarator() // throws RecognitionException [1]
    {   
        csParser.member_declarator_return retval = new csParser.member_declarator_return();
        retval.start = input.LT(1);
        int member_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal173 = null;
        csParser.qid_return qid172 = default(csParser.qid_return);

        csParser.expression_return expression174 = default(csParser.expression_return);


        object char_literal173_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 42) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:393:25: ( qid ( '=' expression )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:394:2: qid ( '=' expression )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_qid_in_member_declarator3897);
            	qid172 = qid();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid172.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:394:8: ( '=' expression )?
            	int alt45 = 2;
            	int LA45_0 = input.LA(1);

            	if ( (LA45_0 == ASSIGN) )
            	{
            	    alt45 = 1;
            	}
            	switch (alt45) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:394:9: '=' expression
            	        {
            	        	char_literal173=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_member_declarator3902); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal173_tree = (object)adaptor.Create(char_literal173);
            	        		adaptor.AddChild(root_0, char_literal173_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_member_declarator3906);
            	        	expression174 = expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression174.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 42, member_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_declarator"

    public class primary_or_array_creation_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "primary_or_array_creation_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:395:8: public primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
    public csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression() // throws RecognitionException [1]
    {   
        csParser.primary_or_array_creation_expression_return retval = new csParser.primary_or_array_creation_expression_return();
        retval.start = input.LT(1);
        int primary_or_array_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.array_creation_expression_return array_creation_expression175 = default(csParser.array_creation_expression_return);

        csParser.primary_expression_return primary_expression176 = default(csParser.primary_expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 43) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:395:44: ( ( array_creation_expression )=> array_creation_expression | primary_expression )
            int alt46 = 2;
            alt46 = dfa46.Predict(input);
            switch (alt46) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:396:2: ( array_creation_expression )=> array_creation_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression3924);
                    	array_creation_expression175 = array_creation_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_creation_expression175.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:397:4: primary_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_primary_expression_in_primary_or_array_creation_expression3929);
                    	primary_expression176 = primary_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression176.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 43, primary_or_array_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_or_array_creation_expression"

    public class array_creation_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "array_creation_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:400:8: public array_creation_expression : new_array ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ( ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )? ) ;
    public csParser.array_creation_expression_return array_creation_expression() // throws RecognitionException [1]
    {   
        csParser.array_creation_expression_return retval = new csParser.array_creation_expression_return();
        retval.start = input.LT(1);
        int array_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal179 = null;
        IToken char_literal181 = null;
        csParser.new_array_return new_array177 = default(csParser.new_array_return);

        csParser.type_return type178 = default(csParser.type_return);

        csParser.expression_list_return expression_list180 = default(csParser.expression_list_return);

        csParser.rank_specifiers_return rank_specifiers182 = default(csParser.rank_specifiers_return);

        csParser.array_initializer_return array_initializer183 = default(csParser.array_initializer_return);

        csParser.arguments_return arguments184 = default(csParser.arguments_return);

        csParser.invocation_part_return invocation_part185 = default(csParser.invocation_part_return);

        csParser.invocation_part_return invocation_part186 = default(csParser.invocation_part_return);

        csParser.arguments_return arguments187 = default(csParser.arguments_return);

        csParser.array_initializer_return array_initializer188 = default(csParser.array_initializer_return);

        csParser.rank_specifier_return rank_specifier189 = default(csParser.rank_specifier_return);

        csParser.array_initializer_return array_initializer190 = default(csParser.array_initializer_return);

        csParser.arguments_return arguments191 = default(csParser.arguments_return);

        csParser.invocation_part_return invocation_part192 = default(csParser.invocation_part_return);

        csParser.invocation_part_return invocation_part193 = default(csParser.invocation_part_return);

        csParser.arguments_return arguments194 = default(csParser.arguments_return);


        object char_literal179_tree=null;
        object char_literal181_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 44) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:400:33: ( new_array ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ( ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )? ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:401:2: new_array ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ( ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )? )
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_new_array_in_array_creation_expression3942);
            	new_array177 = new_array();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, new_array177.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:402:3: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ( ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )? )
            	int alt54 = 2;
            	int LA54_0 = input.LA(1);

            	if ( (LA54_0 == OBJECT || (LA54_0 >= BOOL && LA54_0 <= IDENTIFIER) || (LA54_0 >= ELIF && LA54_0 <= UNDEF) || LA54_0 == 195 || LA54_0 == 206 || LA54_0 == 221 || (LA54_0 >= 224 && LA54_0 <= 239) || (LA54_0 >= 241 && LA54_0 <= 244) || (LA54_0 >= 247 && LA54_0 <= 254) || LA54_0 == 256 || (LA54_0 >= 263 && LA54_0 <= 264) || (LA54_0 >= 274 && LA54_0 <= 277)) )
            	{
            	    alt54 = 1;
            	}
            	else if ( (LA54_0 == OPEN_BRACKET) )
            	{
            	    alt54 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d54s0 =
            	        new NoViableAltException("", 54, 0, input);

            	    throw nvae_d54s0;
            	}
            	switch (alt54) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:402:4: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
            	        {
            	        	PushFollow(FOLLOW_type_in_array_creation_expression3949);
            	        	type178 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type178.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:402:11: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
            	        	int alt51 = 2;
            	        	int LA51_0 = input.LA(1);

            	        	if ( (LA51_0 == OPEN_BRACKET) )
            	        	{
            	        	    alt51 = 1;
            	        	}
            	        	else if ( (LA51_0 == OPEN_BRACE) )
            	        	{
            	        	    alt51 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d51s0 =
            	        	        new NoViableAltException("", 51, 0, input);

            	        	    throw nvae_d51s0;
            	        	}
            	        	switch (alt51) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:402:12: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
            	        	        {
            	        	        	char_literal179=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_array_creation_expression3954); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{char_literal179_tree = (object)adaptor.Create(char_literal179);
            	        	        		adaptor.AddChild(root_0, char_literal179_tree);
            	        	        	}
            	        	        	PushFollow(FOLLOW_expression_list_in_array_creation_expression3958);
            	        	        	expression_list180 = expression_list();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_list180.Tree);
            	        	        	char_literal181=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_array_creation_expression3962); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{char_literal181_tree = (object)adaptor.Create(char_literal181);
            	        	        		adaptor.AddChild(root_0, char_literal181_tree);
            	        	        	}
            	        	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:403:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
            	        	        	int alt50 = 2;
            	        	        	alt50 = dfa50.Predict(input);
            	        	        	switch (alt50) 
            	        	        	{
            	        	        	    case 1 :
            	        	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:403:8: ( rank_specifiers )? ( array_initializer )?
            	        	        	        {
            	        	        	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:403:8: ( rank_specifiers )?
            	        	        	        	int alt47 = 2;
            	        	        	        	int LA47_0 = input.LA(1);

            	        	        	        	if ( (LA47_0 == OPEN_BRACKET) )
            	        	        	        	{
            	        	        	        	    alt47 = 1;
            	        	        	        	}
            	        	        	        	switch (alt47) 
            	        	        	        	{
            	        	        	        	    case 1 :
            	        	        	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:403:8: rank_specifiers
            	        	        	        	        {
            	        	        	        	        	PushFollow(FOLLOW_rank_specifiers_in_array_creation_expression3974);
            	        	        	        	        	rank_specifiers182 = rank_specifiers();
            	        	        	        	        	state._fsp--;
            	        	        	        	        	if (state.failed) return retval;
            	        	        	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers182.Tree);

            	        	        	        	        }
            	        	        	        	        break;

            	        	        	        	}

            	        	        	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:403:27: ( array_initializer )?
            	        	        	        	int alt48 = 2;
            	        	        	        	int LA48_0 = input.LA(1);

            	        	        	        	if ( (LA48_0 == OPEN_BRACE) )
            	        	        	        	{
            	        	        	        	    alt48 = 1;
            	        	        	        	}
            	        	        	        	switch (alt48) 
            	        	        	        	{
            	        	        	        	    case 1 :
            	        	        	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:403:27: array_initializer
            	        	        	        	        {
            	        	        	        	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression3979);
            	        	        	        	        	array_initializer183 = array_initializer();
            	        	        	        	        	state._fsp--;
            	        	        	        	        	if (state.failed) return retval;
            	        	        	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer183.Tree);

            	        	        	        	        }
            	        	        	        	        break;

            	        	        	        	}


            	        	        	        }
            	        	        	        break;
            	        	        	    case 2 :
            	        	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:405:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
            	        	        	        {
            	        	        	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:405:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
            	        	        	        	do 
            	        	        	        	{
            	        	        	        	    int alt49 = 3;
            	        	        	        	    int LA49_0 = input.LA(1);

            	        	        	        	    if ( (LA49_0 == LPAREN) )
            	        	        	        	    {
            	        	        	        	        int LA49_1 = input.LA(2);

            	        	        	        	        if ( (synpred12_cs()) )
            	        	        	        	        {
            	        	        	        	            alt49 = 1;
            	        	        	        	        }


            	        	        	        	    }
            	        	        	        	    else if ( (LA49_0 == OPEN_BRACKET || (LA49_0 >= DOT && LA49_0 <= PTR)) )
            	        	        	        	    {
            	        	        	        	        alt49 = 2;
            	        	        	        	    }


            	        	        	        	    switch (alt49) 
            	        	        	        		{
            	        	        	        			case 1 :
            	        	        	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:405:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	        	        	        			    {
            	        	        	        			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:405:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	        	        	        			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:405:11: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
            	        	        	        			    	{
            	        	        	        			    		PushFollow(FOLLOW_arguments_in_array_creation_expression4015);
            	        	        	        			    		arguments184 = arguments();
            	        	        	        			    		state._fsp--;
            	        	        	        			    		if (state.failed) return retval;
            	        	        	        			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments184.Tree);
            	        	        	        			    		PushFollow(FOLLOW_invocation_part_in_array_creation_expression4019);
            	        	        	        			    		invocation_part185 = invocation_part();
            	        	        	        			    		state._fsp--;
            	        	        	        			    		if (state.failed) return retval;
            	        	        	        			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_part185.Tree);

            	        	        	        			    	}


            	        	        	        			    }
            	        	        	        			    break;
            	        	        	        			case 2 :
            	        	        	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:406:10: invocation_part
            	        	        	        			    {
            	        	        	        			    	PushFollow(FOLLOW_invocation_part_in_array_creation_expression4031);
            	        	        	        			    	invocation_part186 = invocation_part();
            	        	        	        			    	state._fsp--;
            	        	        	        			    	if (state.failed) return retval;
            	        	        	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_part186.Tree);

            	        	        	        			    }
            	        	        	        			    break;

            	        	        	        			default:
            	        	        	        			    goto loop49;
            	        	        	        	    }
            	        	        	        	} while (true);

            	        	        	        	loop49:
            	        	        	        		;	// Stops C# compiler whining that label 'loop49' has no statements

            	        	        	        	PushFollow(FOLLOW_arguments_in_array_creation_expression4037);
            	        	        	        	arguments187 = arguments();
            	        	        	        	state._fsp--;
            	        	        	        	if (state.failed) return retval;
            	        	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments187.Tree);

            	        	        	        }
            	        	        	        break;

            	        	        	}


            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:408:7: array_initializer
            	        	        {
            	        	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression4059);
            	        	        	array_initializer188 = array_initializer();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer188.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:410:5: rank_specifier ( array_initializer ) ( ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )?
            	        {
            	        	PushFollow(FOLLOW_rank_specifier_in_array_creation_expression4073);
            	        	rank_specifier189 = rank_specifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifier189.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:411:4: ( array_initializer )
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:411:5: array_initializer
            	        	{
            	        		PushFollow(FOLLOW_array_initializer_in_array_creation_expression4082);
            	        		array_initializer190 = array_initializer();
            	        		state._fsp--;
            	        		if (state.failed) return retval;
            	        		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer190.Tree);

            	        	}

            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:413:13: ( ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )?
            	        	int alt53 = 2;
            	        	int LA53_0 = input.LA(1);

            	        	if ( (LA53_0 == OPEN_BRACKET || LA53_0 == LPAREN || (LA53_0 >= DOT && LA53_0 <= PTR)) )
            	        	{
            	        	    alt53 = 1;
            	        	}
            	        	switch (alt53) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:414:15: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
            	        	        {
            	        	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:414:15: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
            	        	        	do 
            	        	        	{
            	        	        	    int alt52 = 3;
            	        	        	    int LA52_0 = input.LA(1);

            	        	        	    if ( (LA52_0 == LPAREN) )
            	        	        	    {
            	        	        	        int LA52_1 = input.LA(2);

            	        	        	        if ( (synpred13_cs()) )
            	        	        	        {
            	        	        	            alt52 = 1;
            	        	        	        }


            	        	        	    }
            	        	        	    else if ( (LA52_0 == OPEN_BRACKET || (LA52_0 >= DOT && LA52_0 <= PTR)) )
            	        	        	    {
            	        	        	        alt52 = 2;
            	        	        	    }


            	        	        	    switch (alt52) 
            	        	        		{
            	        	        			case 1 :
            	        	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:414:17: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	        	        			    {
            	        	        			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:414:17: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	        	        			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:414:18: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
            	        	        			    	{
            	        	        			    		PushFollow(FOLLOW_arguments_in_array_creation_expression4141);
            	        	        			    		arguments191 = arguments();
            	        	        			    		state._fsp--;
            	        	        			    		if (state.failed) return retval;
            	        	        			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments191.Tree);
            	        	        			    		PushFollow(FOLLOW_invocation_part_in_array_creation_expression4145);
            	        	        			    		invocation_part192 = invocation_part();
            	        	        			    		state._fsp--;
            	        	        			    		if (state.failed) return retval;
            	        	        			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_part192.Tree);

            	        	        			    	}


            	        	        			    }
            	        	        			    break;
            	        	        			case 2 :
            	        	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:415:10: invocation_part
            	        	        			    {
            	        	        			    	PushFollow(FOLLOW_invocation_part_in_array_creation_expression4157);
            	        	        			    	invocation_part193 = invocation_part();
            	        	        			    	state._fsp--;
            	        	        			    	if (state.failed) return retval;
            	        	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_part193.Tree);

            	        	        			    }
            	        	        			    break;

            	        	        			default:
            	        	        			    goto loop52;
            	        	        	    }
            	        	        	} while (true);

            	        	        	loop52:
            	        	        		;	// Stops C# compiler whining that label 'loop52' has no statements

            	        	        	PushFollow(FOLLOW_arguments_in_array_creation_expression4163);
            	        	        	arguments194 = arguments();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments194.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 44, array_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression"

    public class new_array_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "new_array"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:418:8: public new_array : n= 'new' -> NEW_ARRAY[$n, \"newarray\"] ;
    public csParser.new_array_return new_array() // throws RecognitionException [1]
    {   
        csParser.new_array_return retval = new csParser.new_array_return();
        retval.start = input.LT(1);
        int new_array_StartIndex = input.Index;
        object root_0 = null;

        IToken n = null;

        object n_tree=null;
        RewriteRuleTokenStream stream_197 = new RewriteRuleTokenStream(adaptor,"token 197");

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 45) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:418:17: (n= 'new' -> NEW_ARRAY[$n, \"newarray\"] )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:419:5: n= 'new'
            {
            	n=(IToken)Match(input,197,FOLLOW_197_in_new_array4197); if (state.failed) return retval; 
            	if ( (state.backtracking==0) ) stream_197.Add(n);



            	// AST REWRITE
            	// elements:          
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	// wildcard labels: 
            	if ( (state.backtracking==0) ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

            	root_0 = (object)adaptor.Nil;
            	// 419:13: -> NEW_ARRAY[$n, \"newarray\"]
            	{
            	    adaptor.AddChild(root_0, (object)adaptor.Create(NEW_ARRAY, n, "newarray"));

            	}

            	retval.tree = root_0;retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 45, new_array_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "new_array"

    public class array_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "array_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:420:8: public array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
    public csParser.array_initializer_return array_initializer() // throws RecognitionException [1]
    {   
        csParser.array_initializer_return retval = new csParser.array_initializer_return();
        retval.start = input.LT(1);
        int array_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal195 = null;
        IToken char_literal197 = null;
        IToken char_literal198 = null;
        csParser.variable_initializer_list_return variable_initializer_list196 = default(csParser.variable_initializer_list_return);


        object char_literal195_tree=null;
        object char_literal197_tree=null;
        object char_literal198_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 46) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:420:25: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:421:2: '{' ( variable_initializer_list )? ( ',' )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal195=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer4212); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal195_tree = (object)adaptor.Create(char_literal195);
            		adaptor.AddChild(root_0, char_literal195_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:421:8: ( variable_initializer_list )?
            	int alt55 = 2;
            	int LA55_0 = input.LA(1);

            	if ( ((LA55_0 >= MONONOT && LA55_0 <= MONOTWIDDLE) || (LA55_0 >= OBJECT && LA55_0 <= THIS) || LA55_0 == OPEN_BRACE || LA55_0 == LPAREN || LA55_0 == BIT_AND || (LA55_0 >= PLUS && LA55_0 <= MINUS) || LA55_0 == STAR || (LA55_0 >= BOOL && LA55_0 <= NULL) || (LA55_0 >= ELIF && LA55_0 <= UNDEF) || LA55_0 == 195 || LA55_0 == 197 || LA55_0 == 207 || (LA55_0 >= 209 && LA55_0 <= 210) || (LA55_0 >= 214 && LA55_0 <= 219) || LA55_0 == 221 || (LA55_0 >= 224 && LA55_0 <= 239) || (LA55_0 >= 241 && LA55_0 <= 244) || (LA55_0 >= 247 && LA55_0 <= 254) || LA55_0 == 256 || (LA55_0 >= 263 && LA55_0 <= 264) || (LA55_0 >= 274 && LA55_0 <= 277)) )
            	{
            	    alt55 = 1;
            	}
            	switch (alt55) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:421:8: variable_initializer_list
            	        {
            	        	PushFollow(FOLLOW_variable_initializer_list_in_array_initializer4216);
            	        	variable_initializer_list196 = variable_initializer_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer_list196.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:421:37: ( ',' )?
            	int alt56 = 2;
            	int LA56_0 = input.LA(1);

            	if ( (LA56_0 == COMMA) )
            	{
            	    alt56 = 1;
            	}
            	switch (alt56) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:421:37: ','
            	        {
            	        	char_literal197=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_array_initializer4221); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal197_tree = (object)adaptor.Create(char_literal197);
            	        		adaptor.AddChild(root_0, char_literal197_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal198=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer4226); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal198_tree = (object)adaptor.Create(char_literal198);
            		adaptor.AddChild(root_0, char_literal198_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 46, array_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "array_initializer"

    public class variable_initializer_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variable_initializer_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:422:8: public variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
    public csParser.variable_initializer_list_return variable_initializer_list() // throws RecognitionException [1]
    {   
        csParser.variable_initializer_list_return retval = new csParser.variable_initializer_list_return();
        retval.start = input.LT(1);
        int variable_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal200 = null;
        csParser.variable_initializer_return variable_initializer199 = default(csParser.variable_initializer_return);

        csParser.variable_initializer_return variable_initializer201 = default(csParser.variable_initializer_return);


        object char_literal200_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 47) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:422:33: ( variable_initializer ( ',' variable_initializer )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:423:2: variable_initializer ( ',' variable_initializer )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list4236);
            	variable_initializer199 = variable_initializer();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer199.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:423:23: ( ',' variable_initializer )*
            	do 
            	{
            	    int alt57 = 2;
            	    int LA57_0 = input.LA(1);

            	    if ( (LA57_0 == COMMA) )
            	    {
            	        int LA57_1 = input.LA(2);

            	        if ( ((LA57_1 >= MONONOT && LA57_1 <= MONOTWIDDLE) || (LA57_1 >= OBJECT && LA57_1 <= THIS) || LA57_1 == OPEN_BRACE || LA57_1 == LPAREN || LA57_1 == BIT_AND || (LA57_1 >= PLUS && LA57_1 <= MINUS) || LA57_1 == STAR || (LA57_1 >= BOOL && LA57_1 <= NULL) || (LA57_1 >= ELIF && LA57_1 <= UNDEF) || LA57_1 == 195 || LA57_1 == 197 || LA57_1 == 207 || (LA57_1 >= 209 && LA57_1 <= 210) || (LA57_1 >= 214 && LA57_1 <= 219) || LA57_1 == 221 || (LA57_1 >= 224 && LA57_1 <= 239) || (LA57_1 >= 241 && LA57_1 <= 244) || (LA57_1 >= 247 && LA57_1 <= 254) || LA57_1 == 256 || (LA57_1 >= 263 && LA57_1 <= 264) || (LA57_1 >= 274 && LA57_1 <= 277)) )
            	        {
            	            alt57 = 1;
            	        }


            	    }


            	    switch (alt57) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:423:24: ',' variable_initializer
            			    {
            			    	char_literal200=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_variable_initializer_list4239); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal200_tree = (object)adaptor.Create(char_literal200);
            			    		adaptor.AddChild(root_0, char_literal200_tree);
            			    	}
            			    	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list4241);
            			    	variable_initializer201 = variable_initializer();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer201.Tree);

            			    }
            			    break;

            			default:
            			    goto loop57;
            	    }
            	} while (true);

            	loop57:
            		;	// Stops C# compiler whining that label 'loop57' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 47, variable_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list"

    public class variable_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variable_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:424:8: public variable_initializer : ( non_assignment_expression | array_initializer );
    public csParser.variable_initializer_return variable_initializer() // throws RecognitionException [1]
    {   
        csParser.variable_initializer_return retval = new csParser.variable_initializer_return();
        retval.start = input.LT(1);
        int variable_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.non_assignment_expression_return non_assignment_expression202 = default(csParser.non_assignment_expression_return);

        csParser.array_initializer_return array_initializer203 = default(csParser.array_initializer_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 48) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:424:28: ( non_assignment_expression | array_initializer )
            int alt58 = 2;
            int LA58_0 = input.LA(1);

            if ( ((LA58_0 >= MONONOT && LA58_0 <= MONOTWIDDLE) || (LA58_0 >= OBJECT && LA58_0 <= THIS) || LA58_0 == LPAREN || LA58_0 == BIT_AND || (LA58_0 >= PLUS && LA58_0 <= MINUS) || LA58_0 == STAR || (LA58_0 >= BOOL && LA58_0 <= NULL) || (LA58_0 >= ELIF && LA58_0 <= UNDEF) || LA58_0 == 195 || LA58_0 == 197 || LA58_0 == 207 || (LA58_0 >= 209 && LA58_0 <= 210) || (LA58_0 >= 214 && LA58_0 <= 219) || LA58_0 == 221 || (LA58_0 >= 224 && LA58_0 <= 239) || (LA58_0 >= 241 && LA58_0 <= 244) || (LA58_0 >= 247 && LA58_0 <= 254) || LA58_0 == 256 || (LA58_0 >= 263 && LA58_0 <= 264) || (LA58_0 >= 274 && LA58_0 <= 277)) )
            {
                alt58 = 1;
            }
            else if ( (LA58_0 == OPEN_BRACE) )
            {
                alt58 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d58s0 =
                    new NoViableAltException("", 58, 0, input);

                throw nvae_d58s0;
            }
            switch (alt58) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:425:2: non_assignment_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_non_assignment_expression_in_variable_initializer4253);
                    	non_assignment_expression202 = non_assignment_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_assignment_expression202.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:425:30: array_initializer
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_array_initializer_in_variable_initializer4257);
                    	array_initializer203 = array_initializer();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer203.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 48, variable_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_initializer"

    public class sizeof_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "sizeof_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:426:8: public sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
    public csParser.sizeof_expression_return sizeof_expression() // throws RecognitionException [1]
    {   
        csParser.sizeof_expression_return retval = new csParser.sizeof_expression_return();
        retval.start = input.LT(1);
        int sizeof_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal204 = null;
        IToken char_literal205 = null;
        IToken char_literal207 = null;
        csParser.unmanaged_type_return unmanaged_type206 = default(csParser.unmanaged_type_return);


        object string_literal204_tree=null;
        object char_literal205_tree=null;
        object char_literal207_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 49) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:426:25: ( 'sizeof' '(' unmanaged_type ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:427:2: 'sizeof' '(' unmanaged_type ')'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal204=(IToken)Match(input,214,FOLLOW_214_in_sizeof_expression4267); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal204_tree = (object)adaptor.Create(string_literal204);
            		adaptor.AddChild(root_0, string_literal204_tree);
            	}
            	char_literal205=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_sizeof_expression4271); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal205_tree = (object)adaptor.Create(char_literal205);
            		adaptor.AddChild(root_0, char_literal205_tree);
            	}
            	PushFollow(FOLLOW_unmanaged_type_in_sizeof_expression4275);
            	unmanaged_type206 = unmanaged_type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unmanaged_type206.Tree);
            	char_literal207=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_sizeof_expression4279); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal207_tree = (object)adaptor.Create(char_literal207);
            		adaptor.AddChild(root_0, char_literal207_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 49, sizeof_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "sizeof_expression"

    public class checked_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "checked_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:428:8: public checked_expression : 'checked' '(' expression ')' ;
    public csParser.checked_expression_return checked_expression() // throws RecognitionException [1]
    {   
        csParser.checked_expression_return retval = new csParser.checked_expression_return();
        retval.start = input.LT(1);
        int checked_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal208 = null;
        IToken char_literal209 = null;
        IToken char_literal211 = null;
        csParser.expression_return expression210 = default(csParser.expression_return);


        object string_literal208_tree=null;
        object char_literal209_tree=null;
        object char_literal211_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 50) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:428:26: ( 'checked' '(' expression ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:429:2: 'checked' '(' expression ')'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal208=(IToken)Match(input,215,FOLLOW_215_in_checked_expression4289); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal208_tree = (object)adaptor.Create(string_literal208);
            		adaptor.AddChild(root_0, string_literal208_tree);
            	}
            	char_literal209=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_checked_expression4293); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal209_tree = (object)adaptor.Create(char_literal209);
            		adaptor.AddChild(root_0, char_literal209_tree);
            	}
            	PushFollow(FOLLOW_expression_in_checked_expression4297);
            	expression210 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression210.Tree);
            	char_literal211=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_checked_expression4301); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal211_tree = (object)adaptor.Create(char_literal211);
            		adaptor.AddChild(root_0, char_literal211_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 50, checked_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "checked_expression"

    public class unchecked_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unchecked_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:430:8: public unchecked_expression : 'unchecked' '(' expression ')' ;
    public csParser.unchecked_expression_return unchecked_expression() // throws RecognitionException [1]
    {   
        csParser.unchecked_expression_return retval = new csParser.unchecked_expression_return();
        retval.start = input.LT(1);
        int unchecked_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal212 = null;
        IToken char_literal213 = null;
        IToken char_literal215 = null;
        csParser.expression_return expression214 = default(csParser.expression_return);


        object string_literal212_tree=null;
        object char_literal213_tree=null;
        object char_literal215_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 51) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:430:28: ( 'unchecked' '(' expression ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:431:2: 'unchecked' '(' expression ')'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal212=(IToken)Match(input,216,FOLLOW_216_in_unchecked_expression4312); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal212_tree = (object)adaptor.Create(string_literal212);
            		adaptor.AddChild(root_0, string_literal212_tree);
            	}
            	char_literal213=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_unchecked_expression4316); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal213_tree = (object)adaptor.Create(char_literal213);
            		adaptor.AddChild(root_0, char_literal213_tree);
            	}
            	PushFollow(FOLLOW_expression_in_unchecked_expression4320);
            	expression214 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression214.Tree);
            	char_literal215=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_unchecked_expression4324); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal215_tree = (object)adaptor.Create(char_literal215);
            		adaptor.AddChild(root_0, char_literal215_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 51, unchecked_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unchecked_expression"

    public class default_value_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "default_value_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:432:8: public default_value_expression : 'default' '(' type ')' ;
    public csParser.default_value_expression_return default_value_expression() // throws RecognitionException [1]
    {   
        csParser.default_value_expression_return retval = new csParser.default_value_expression_return();
        retval.start = input.LT(1);
        int default_value_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal216 = null;
        IToken char_literal217 = null;
        IToken char_literal219 = null;
        csParser.type_return type218 = default(csParser.type_return);


        object string_literal216_tree=null;
        object char_literal217_tree=null;
        object char_literal219_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 52) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:432:32: ( 'default' '(' type ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:433:2: 'default' '(' type ')'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal216=(IToken)Match(input,217,FOLLOW_217_in_default_value_expression4335); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal216_tree = (object)adaptor.Create(string_literal216);
            		adaptor.AddChild(root_0, string_literal216_tree);
            	}
            	char_literal217=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_default_value_expression4339); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal217_tree = (object)adaptor.Create(char_literal217);
            		adaptor.AddChild(root_0, char_literal217_tree);
            	}
            	PushFollow(FOLLOW_type_in_default_value_expression4343);
            	type218 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type218.Tree);
            	char_literal219=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_default_value_expression4347); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal219_tree = (object)adaptor.Create(char_literal219);
            		adaptor.AddChild(root_0, char_literal219_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 52, default_value_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "default_value_expression"

    public class anonymous_method_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "anonymous_method_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:434:8: public anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
    public csParser.anonymous_method_expression_return anonymous_method_expression() // throws RecognitionException [1]
    {   
        csParser.anonymous_method_expression_return retval = new csParser.anonymous_method_expression_return();
        retval.start = input.LT(1);
        int anonymous_method_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal220 = null;
        csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature221 = default(csParser.explicit_anonymous_function_signature_return);

        csParser.block_return block222 = default(csParser.block_return);


        object string_literal220_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 53) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:434:35: ( 'delegate' ( explicit_anonymous_function_signature )? block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:435:2: 'delegate' ( explicit_anonymous_function_signature )? block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal220=(IToken)Match(input,218,FOLLOW_218_in_anonymous_method_expression4357); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal220_tree = (object)adaptor.Create(string_literal220);
            		adaptor.AddChild(root_0, string_literal220_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:435:15: ( explicit_anonymous_function_signature )?
            	int alt59 = 2;
            	int LA59_0 = input.LA(1);

            	if ( (LA59_0 == LPAREN) )
            	{
            	    alt59 = 1;
            	}
            	switch (alt59) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:435:15: explicit_anonymous_function_signature
            	        {
            	        	PushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression4361);
            	        	explicit_anonymous_function_signature221 = explicit_anonymous_function_signature();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_signature221.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_block_in_anonymous_method_expression4366);
            	block222 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block222.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 53, anonymous_method_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_method_expression"

    public class explicit_anonymous_function_signature_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "explicit_anonymous_function_signature"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:436:8: public explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
    public csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() // throws RecognitionException [1]
    {   
        csParser.explicit_anonymous_function_signature_return retval = new csParser.explicit_anonymous_function_signature_return();
        retval.start = input.LT(1);
        int explicit_anonymous_function_signature_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal223 = null;
        IToken char_literal225 = null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list224 = default(csParser.explicit_anonymous_function_parameter_list_return);


        object char_literal223_tree=null;
        object char_literal225_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 54) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:436:45: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:437:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal223=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_explicit_anonymous_function_signature4375); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal223_tree = (object)adaptor.Create(char_literal223);
            		adaptor.AddChild(root_0, char_literal223_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:437:8: ( explicit_anonymous_function_parameter_list )?
            	int alt60 = 2;
            	int LA60_0 = input.LA(1);

            	if ( (LA60_0 == OBJECT || (LA60_0 >= BOOL && LA60_0 <= IDENTIFIER) || (LA60_0 >= ELIF && LA60_0 <= UNDEF) || LA60_0 == 195 || LA60_0 == 206 || (LA60_0 >= 212 && LA60_0 <= 213) || LA60_0 == 221 || (LA60_0 >= 224 && LA60_0 <= 239) || (LA60_0 >= 241 && LA60_0 <= 244) || (LA60_0 >= 247 && LA60_0 <= 254) || LA60_0 == 256 || (LA60_0 >= 263 && LA60_0 <= 264) || (LA60_0 >= 274 && LA60_0 <= 277)) )
            	{
            	    alt60 = 1;
            	}
            	switch (alt60) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:437:8: explicit_anonymous_function_parameter_list
            	        {
            	        	PushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature4379);
            	        	explicit_anonymous_function_parameter_list224 = explicit_anonymous_function_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list224.Tree);

            	        }
            	        break;

            	}

            	char_literal225=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_explicit_anonymous_function_signature4384); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal225_tree = (object)adaptor.Create(char_literal225);
            		adaptor.AddChild(root_0, char_literal225_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 54, explicit_anonymous_function_signature_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_signature"

    public class explicit_anonymous_function_parameter_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:438:8: public explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
    public csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() // throws RecognitionException [1]
    {   
        csParser.explicit_anonymous_function_parameter_list_return retval = new csParser.explicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);
        int explicit_anonymous_function_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal227 = null;
        csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter226 = default(csParser.explicit_anonymous_function_parameter_return);

        csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter228 = default(csParser.explicit_anonymous_function_parameter_return);


        object char_literal227_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 55) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:438:50: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:439:2: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4394);
            	explicit_anonymous_function_parameter226 = explicit_anonymous_function_parameter();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_parameter226.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:439:42: ( ',' explicit_anonymous_function_parameter )*
            	do 
            	{
            	    int alt61 = 2;
            	    int LA61_0 = input.LA(1);

            	    if ( (LA61_0 == COMMA) )
            	    {
            	        alt61 = 1;
            	    }


            	    switch (alt61) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:439:43: ',' explicit_anonymous_function_parameter
            			    {
            			    	char_literal227=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list4399); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal227_tree = (object)adaptor.Create(char_literal227);
            			    		adaptor.AddChild(root_0, char_literal227_tree);
            			    	}
            			    	PushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4403);
            			    	explicit_anonymous_function_parameter228 = explicit_anonymous_function_parameter();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_parameter228.Tree);

            			    }
            			    break;

            			default:
            			    goto loop61;
            	    }
            	} while (true);

            	loop61:
            		;	// Stops C# compiler whining that label 'loop61' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 55, explicit_anonymous_function_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"

    public class explicit_anonymous_function_parameter_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "explicit_anonymous_function_parameter"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:440:8: public explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
    public csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() // throws RecognitionException [1]
    {   
        csParser.explicit_anonymous_function_parameter_return retval = new csParser.explicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);
        int explicit_anonymous_function_parameter_StartIndex = input.Index;
        object root_0 = null;

        csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier229 = default(csParser.anonymous_function_parameter_modifier_return);

        csParser.type_return type230 = default(csParser.type_return);

        csParser.identifier_return identifier231 = default(csParser.identifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 56) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:440:45: ( ( anonymous_function_parameter_modifier )? type identifier )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:441:2: ( anonymous_function_parameter_modifier )? type identifier
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:441:2: ( anonymous_function_parameter_modifier )?
            	int alt62 = 2;
            	int LA62_0 = input.LA(1);

            	if ( ((LA62_0 >= 212 && LA62_0 <= 213)) )
            	{
            	    alt62 = 1;
            	}
            	switch (alt62) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:441:2: anonymous_function_parameter_modifier
            	        {
            	        	PushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter4416);
            	        	anonymous_function_parameter_modifier229 = anonymous_function_parameter_modifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_function_parameter_modifier229.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter4421);
            	type230 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type230.Tree);
            	PushFollow(FOLLOW_identifier_in_explicit_anonymous_function_parameter4425);
            	identifier231 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier231.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 56, explicit_anonymous_function_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter"

    public class anonymous_function_parameter_modifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "anonymous_function_parameter_modifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:442:8: public anonymous_function_parameter_modifier : ( 'ref' | 'out' );
    public csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() // throws RecognitionException [1]
    {   
        csParser.anonymous_function_parameter_modifier_return retval = new csParser.anonymous_function_parameter_modifier_return();
        retval.start = input.LT(1);
        int anonymous_function_parameter_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set232 = null;

        object set232_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 57) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:442:45: ( 'ref' | 'out' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set232 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 212 && input.LA(1) <= 213) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set232));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 57, anonymous_function_parameter_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_parameter_modifier"

    public class object_creation_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "object_creation_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:447:8: public object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
    public csParser.object_creation_expression_return object_creation_expression() // throws RecognitionException [1]
    {   
        csParser.object_creation_expression_return retval = new csParser.object_creation_expression_return();
        retval.start = input.LT(1);
        int object_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal234 = null;
        IToken char_literal236 = null;
        csParser.type_return type233 = default(csParser.type_return);

        csParser.argument_list_return argument_list235 = default(csParser.argument_list_return);

        csParser.object_or_collection_initializer_return object_or_collection_initializer237 = default(csParser.object_or_collection_initializer_return);

        csParser.object_or_collection_initializer_return object_or_collection_initializer238 = default(csParser.object_or_collection_initializer_return);


        object char_literal234_tree=null;
        object char_literal236_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 58) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:447:34: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:449:2: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_in_object_creation_expression4453);
            	type233 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type233.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:450:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            	int alt65 = 2;
            	int LA65_0 = input.LA(1);

            	if ( (LA65_0 == LPAREN) )
            	{
            	    alt65 = 1;
            	}
            	else if ( (LA65_0 == OPEN_BRACE) )
            	{
            	    alt65 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d65s0 =
            	        new NoViableAltException("", 65, 0, input);

            	    throw nvae_d65s0;
            	}
            	switch (alt65) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:450:5: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
            	        {
            	        	char_literal234=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_object_creation_expression4462); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal234_tree = (object)adaptor.Create(char_literal234);
            	        		adaptor.AddChild(root_0, char_literal234_tree);
            	        	}
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:450:11: ( argument_list )?
            	        	int alt63 = 2;
            	        	int LA63_0 = input.LA(1);

            	        	if ( ((LA63_0 >= MONONOT && LA63_0 <= MONOTWIDDLE) || (LA63_0 >= OBJECT && LA63_0 <= THIS) || LA63_0 == LPAREN || LA63_0 == BIT_AND || (LA63_0 >= PLUS && LA63_0 <= MINUS) || LA63_0 == STAR || (LA63_0 >= BOOL && LA63_0 <= NULL) || (LA63_0 >= ELIF && LA63_0 <= UNDEF) || LA63_0 == 195 || LA63_0 == 197 || LA63_0 == 207 || (LA63_0 >= 209 && LA63_0 <= 210) || (LA63_0 >= 212 && LA63_0 <= 219) || LA63_0 == 221 || (LA63_0 >= 224 && LA63_0 <= 239) || (LA63_0 >= 241 && LA63_0 <= 244) || (LA63_0 >= 247 && LA63_0 <= 254) || LA63_0 == 256 || (LA63_0 >= 263 && LA63_0 <= 264) || (LA63_0 >= 274 && LA63_0 <= 277)) )
            	        	{
            	        	    alt63 = 1;
            	        	}
            	        	switch (alt63) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:450:11: argument_list
            	        	        {
            	        	        	PushFollow(FOLLOW_argument_list_in_object_creation_expression4466);
            	        	        	argument_list235 = argument_list();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_list235.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	char_literal236=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_object_creation_expression4471); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal236_tree = (object)adaptor.Create(char_literal236);
            	        		adaptor.AddChild(root_0, char_literal236_tree);
            	        	}
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:450:34: ( object_or_collection_initializer )?
            	        	int alt64 = 2;
            	        	int LA64_0 = input.LA(1);

            	        	if ( (LA64_0 == OPEN_BRACE) )
            	        	{
            	        	    alt64 = 1;
            	        	}
            	        	switch (alt64) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:450:34: object_or_collection_initializer
            	        	        {
            	        	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression4475);
            	        	        	object_or_collection_initializer237 = object_or_collection_initializer();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_or_collection_initializer237.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:451:7: object_or_collection_initializer
            	        {
            	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression4486);
            	        	object_or_collection_initializer238 = object_or_collection_initializer();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_or_collection_initializer238.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 58, object_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression"

    public class object_or_collection_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "object_or_collection_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:453:8: public object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
    public csParser.object_or_collection_initializer_return object_or_collection_initializer() // throws RecognitionException [1]
    {   
        csParser.object_or_collection_initializer_return retval = new csParser.object_or_collection_initializer_return();
        retval.start = input.LT(1);
        int object_or_collection_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal239 = null;
        csParser.object_initializer_return object_initializer240 = default(csParser.object_initializer_return);

        csParser.collection_initializer_return collection_initializer241 = default(csParser.collection_initializer_return);


        object char_literal239_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 59) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:453:40: ( '{' ( object_initializer | collection_initializer ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:454:2: '{' ( object_initializer | collection_initializer )
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal239=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_or_collection_initializer4500); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal239_tree = (object)adaptor.Create(char_literal239);
            		adaptor.AddChild(root_0, char_literal239_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:454:7: ( object_initializer | collection_initializer )
            	int alt66 = 2;
            	switch ( input.LA(1) ) 
            	{
            	case IDENTIFIER:
            		{
            	    int LA66_1 = input.LA(2);

            	    if ( (LA66_1 == ASSIGN) )
            	    {
            	        alt66 = 1;
            	    }
            	    else if ( (LA66_1 == OPEN_BRACKET || (LA66_1 >= CLOSE_BRACE && LA66_1 <= NULL_COALESCE) || (LA66_1 >= LOG_OR && LA66_1 <= LEFT_SHIFT) || (LA66_1 >= PLUS && LA66_1 <= COMMA) || (LA66_1 >= DOT && LA66_1 <= GT) || (LA66_1 >= 208 && LA66_1 <= 210) || LA66_1 == 220 || (LA66_1 >= 222 && LA66_1 <= 223)) )
            	    {
            	        alt66 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d66s1 =
            	            new NoViableAltException("", 66, 1, input);

            	        throw nvae_d66s1;
            	    }
            	    }
            	    break;
            	case 225:
            		{
            	    int LA66_2 = input.LA(2);

            	    if ( (LA66_2 == ASSIGN) )
            	    {
            	        alt66 = 1;
            	    }
            	    else if ( (LA66_2 == OBJECT || LA66_2 == OPEN_BRACKET || (LA66_2 >= CLOSE_BRACE && LA66_2 <= NULL_COALESCE) || (LA66_2 >= LOG_OR && LA66_2 <= LEFT_SHIFT) || (LA66_2 >= PLUS && LA66_2 <= COMMA) || (LA66_2 >= BOOL && LA66_2 <= IDENTIFIER) || (LA66_2 >= DOT && LA66_2 <= GT) || (LA66_2 >= ELIF && LA66_2 <= UNDEF) || LA66_2 == 195 || LA66_2 == 206 || (LA66_2 >= 208 && LA66_2 <= 210) || (LA66_2 >= 220 && LA66_2 <= 239) || (LA66_2 >= 241 && LA66_2 <= 244) || (LA66_2 >= 247 && LA66_2 <= 254) || LA66_2 == 256 || (LA66_2 >= 263 && LA66_2 <= 264) || (LA66_2 >= 274 && LA66_2 <= 277)) )
            	    {
            	        alt66 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d66s2 =
            	            new NoViableAltException("", 66, 2, input);

            	        throw nvae_d66s2;
            	    }
            	    }
            	    break;
            	case CLOSE_BRACE:
            	case COMMA:
            		{
            	    alt66 = 1;
            	    }
            	    break;
            	case MONONOT:
            	case MONOTWIDDLE:
            	case OBJECT:
            	case THIS:
            	case OPEN_BRACE:
            	case LPAREN:
            	case BIT_AND:
            	case PLUS:
            	case MINUS:
            	case STAR:
            	case BOOL:
            	case BYTE:
            	case CHAR:
            	case SHORT:
            	case INT:
            	case LONG:
            	case FLOAT:
            	case DOUBLE:
            	case Real_literal:
            	case NUMBER:
            	case Hex_number:
            	case Character_literal:
            	case STRINGLITERAL:
            	case Verbatim_string_literal:
            	case TRUE:
            	case FALSE:
            	case NULL:
            	case 197:
            	case 207:
            	case 209:
            	case 210:
            	case 214:
            	case 215:
            	case 216:
            	case 217:
            	case 218:
            	case 219:
            	case 251:
            	case 252:
            	case 253:
            	case 254:
            	case 275:
            	case 276:
            		{
            	    alt66 = 2;
            	    }
            	    break;
            	case ELIF:
            	case ENDIF:
            	case DEFINE:
            	case UNDEF:
            	case 195:
            	case 221:
            	case 224:
            	case 226:
            	case 227:
            	case 228:
            	case 229:
            	case 230:
            	case 231:
            	case 232:
            	case 233:
            	case 234:
            	case 235:
            	case 236:
            	case 237:
            	case 238:
            	case 239:
            	case 241:
            	case 242:
            	case 243:
            	case 244:
            	case 247:
            	case 248:
            	case 249:
            	case 250:
            	case 256:
            	case 263:
            	case 264:
            	case 274:
            	case 277:
            		{
            	    int LA66_5 = input.LA(2);

            	    if ( (LA66_5 == ASSIGN) )
            	    {
            	        alt66 = 1;
            	    }
            	    else if ( (LA66_5 == OPEN_BRACKET || (LA66_5 >= CLOSE_BRACE && LA66_5 <= NULL_COALESCE) || (LA66_5 >= LOG_OR && LA66_5 <= LEFT_SHIFT) || (LA66_5 >= PLUS && LA66_5 <= COMMA) || (LA66_5 >= DOT && LA66_5 <= GT) || (LA66_5 >= 208 && LA66_5 <= 210) || LA66_5 == 220 || (LA66_5 >= 222 && LA66_5 <= 223)) )
            	    {
            	        alt66 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d66s5 =
            	            new NoViableAltException("", 66, 5, input);

            	        throw nvae_d66s5;
            	    }
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d66s0 =
            		        new NoViableAltException("", 66, 0, input);

            		    throw nvae_d66s0;
            	}

            	switch (alt66) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:454:8: object_initializer
            	        {
            	        	PushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer4504);
            	        	object_initializer240 = object_initializer();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_initializer240.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:455:5: collection_initializer
            	        {
            	        	PushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer4511);
            	        	collection_initializer241 = collection_initializer();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, collection_initializer241.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 59, object_or_collection_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "object_or_collection_initializer"

    public class collection_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "collection_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:456:8: public collection_initializer : element_initializer_list ( ',' )? '}' ;
    public csParser.collection_initializer_return collection_initializer() // throws RecognitionException [1]
    {   
        csParser.collection_initializer_return retval = new csParser.collection_initializer_return();
        retval.start = input.LT(1);
        int collection_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal243 = null;
        IToken char_literal244 = null;
        csParser.element_initializer_list_return element_initializer_list242 = default(csParser.element_initializer_list_return);


        object char_literal243_tree=null;
        object char_literal244_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 60) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:456:30: ( element_initializer_list ( ',' )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:457:2: element_initializer_list ( ',' )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_element_initializer_list_in_collection_initializer4523);
            	element_initializer_list242 = element_initializer_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, element_initializer_list242.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:457:29: ( ',' )?
            	int alt67 = 2;
            	int LA67_0 = input.LA(1);

            	if ( (LA67_0 == COMMA) )
            	{
            	    alt67 = 1;
            	}
            	switch (alt67) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:457:29: ','
            	        {
            	        	char_literal243=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_collection_initializer4527); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal243_tree = (object)adaptor.Create(char_literal243);
            	        		adaptor.AddChild(root_0, char_literal243_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal244=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection_initializer4532); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal244_tree = (object)adaptor.Create(char_literal244);
            		adaptor.AddChild(root_0, char_literal244_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 60, collection_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "collection_initializer"

    public class element_initializer_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "element_initializer_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:458:8: public element_initializer_list : element_initializer ( ',' element_initializer )* ;
    public csParser.element_initializer_list_return element_initializer_list() // throws RecognitionException [1]
    {   
        csParser.element_initializer_list_return retval = new csParser.element_initializer_list_return();
        retval.start = input.LT(1);
        int element_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal246 = null;
        csParser.element_initializer_return element_initializer245 = default(csParser.element_initializer_return);

        csParser.element_initializer_return element_initializer247 = default(csParser.element_initializer_return);


        object char_literal246_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 61) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:458:32: ( element_initializer ( ',' element_initializer )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:459:2: element_initializer ( ',' element_initializer )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_element_initializer_in_element_initializer_list4543);
            	element_initializer245 = element_initializer();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, element_initializer245.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:459:23: ( ',' element_initializer )*
            	do 
            	{
            	    int alt68 = 2;
            	    int LA68_0 = input.LA(1);

            	    if ( (LA68_0 == COMMA) )
            	    {
            	        int LA68_1 = input.LA(2);

            	        if ( ((LA68_1 >= MONONOT && LA68_1 <= MONOTWIDDLE) || (LA68_1 >= OBJECT && LA68_1 <= THIS) || LA68_1 == OPEN_BRACE || LA68_1 == LPAREN || LA68_1 == BIT_AND || (LA68_1 >= PLUS && LA68_1 <= MINUS) || LA68_1 == STAR || (LA68_1 >= BOOL && LA68_1 <= NULL) || (LA68_1 >= ELIF && LA68_1 <= UNDEF) || LA68_1 == 195 || LA68_1 == 197 || LA68_1 == 207 || (LA68_1 >= 209 && LA68_1 <= 210) || (LA68_1 >= 214 && LA68_1 <= 219) || LA68_1 == 221 || (LA68_1 >= 224 && LA68_1 <= 239) || (LA68_1 >= 241 && LA68_1 <= 244) || (LA68_1 >= 247 && LA68_1 <= 254) || LA68_1 == 256 || (LA68_1 >= 263 && LA68_1 <= 264) || (LA68_1 >= 274 && LA68_1 <= 277)) )
            	        {
            	            alt68 = 1;
            	        }


            	    }


            	    switch (alt68) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:459:24: ',' element_initializer
            			    {
            			    	char_literal246=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_element_initializer_list4547); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal246_tree = (object)adaptor.Create(char_literal246);
            			    		adaptor.AddChild(root_0, char_literal246_tree);
            			    	}
            			    	PushFollow(FOLLOW_element_initializer_in_element_initializer_list4549);
            			    	element_initializer247 = element_initializer();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, element_initializer247.Tree);

            			    }
            			    break;

            			default:
            			    goto loop68;
            	    }
            	} while (true);

            	loop68:
            		;	// Stops C# compiler whining that label 'loop68' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 61, element_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "element_initializer_list"

    public class element_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "element_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:460:8: public element_initializer : ( non_assignment_expression | '{' expression_list '}' );
    public csParser.element_initializer_return element_initializer() // throws RecognitionException [1]
    {   
        csParser.element_initializer_return retval = new csParser.element_initializer_return();
        retval.start = input.LT(1);
        int element_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal249 = null;
        IToken char_literal251 = null;
        csParser.non_assignment_expression_return non_assignment_expression248 = default(csParser.non_assignment_expression_return);

        csParser.expression_list_return expression_list250 = default(csParser.expression_list_return);


        object char_literal249_tree=null;
        object char_literal251_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 62) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:460:27: ( non_assignment_expression | '{' expression_list '}' )
            int alt69 = 2;
            int LA69_0 = input.LA(1);

            if ( ((LA69_0 >= MONONOT && LA69_0 <= MONOTWIDDLE) || (LA69_0 >= OBJECT && LA69_0 <= THIS) || LA69_0 == LPAREN || LA69_0 == BIT_AND || (LA69_0 >= PLUS && LA69_0 <= MINUS) || LA69_0 == STAR || (LA69_0 >= BOOL && LA69_0 <= NULL) || (LA69_0 >= ELIF && LA69_0 <= UNDEF) || LA69_0 == 195 || LA69_0 == 197 || LA69_0 == 207 || (LA69_0 >= 209 && LA69_0 <= 210) || (LA69_0 >= 214 && LA69_0 <= 219) || LA69_0 == 221 || (LA69_0 >= 224 && LA69_0 <= 239) || (LA69_0 >= 241 && LA69_0 <= 244) || (LA69_0 >= 247 && LA69_0 <= 254) || LA69_0 == 256 || (LA69_0 >= 263 && LA69_0 <= 264) || (LA69_0 >= 274 && LA69_0 <= 277)) )
            {
                alt69 = 1;
            }
            else if ( (LA69_0 == OPEN_BRACE) )
            {
                alt69 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d69s0 =
                    new NoViableAltException("", 69, 0, input);

                throw nvae_d69s0;
            }
            switch (alt69) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:461:2: non_assignment_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_non_assignment_expression_in_element_initializer4562);
                    	non_assignment_expression248 = non_assignment_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_assignment_expression248.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:462:4: '{' expression_list '}'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal249=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_element_initializer4568); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal249_tree = (object)adaptor.Create(char_literal249);
                    		adaptor.AddChild(root_0, char_literal249_tree);
                    	}
                    	PushFollow(FOLLOW_expression_list_in_element_initializer4572);
                    	expression_list250 = expression_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_list250.Tree);
                    	char_literal251=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_element_initializer4576); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal251_tree = (object)adaptor.Create(char_literal251);
                    		adaptor.AddChild(root_0, char_literal251_tree);
                    	}

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 62, element_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "element_initializer"

    public class object_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "object_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:469:8: public object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
    public csParser.object_initializer_return object_initializer() // throws RecognitionException [1]
    {   
        csParser.object_initializer_return retval = new csParser.object_initializer_return();
        retval.start = input.LT(1);
        int object_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal253 = null;
        IToken char_literal254 = null;
        csParser.member_initializer_list_return member_initializer_list252 = default(csParser.member_initializer_list_return);


        object char_literal253_tree=null;
        object char_literal254_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 63) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:469:26: ( ( member_initializer_list )? ( ',' )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:470:2: ( member_initializer_list )? ( ',' )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:470:2: ( member_initializer_list )?
            	int alt70 = 2;
            	int LA70_0 = input.LA(1);

            	if ( (LA70_0 == IDENTIFIER || (LA70_0 >= ELIF && LA70_0 <= UNDEF) || LA70_0 == 195 || LA70_0 == 221 || (LA70_0 >= 224 && LA70_0 <= 239) || (LA70_0 >= 241 && LA70_0 <= 244) || (LA70_0 >= 247 && LA70_0 <= 250) || LA70_0 == 256 || (LA70_0 >= 263 && LA70_0 <= 264) || LA70_0 == 274 || LA70_0 == 277) )
            	{
            	    alt70 = 1;
            	}
            	switch (alt70) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:470:2: member_initializer_list
            	        {
            	        	PushFollow(FOLLOW_member_initializer_list_in_object_initializer4593);
            	        	member_initializer_list252 = member_initializer_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_initializer_list252.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:470:29: ( ',' )?
            	int alt71 = 2;
            	int LA71_0 = input.LA(1);

            	if ( (LA71_0 == COMMA) )
            	{
            	    alt71 = 1;
            	}
            	switch (alt71) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:470:29: ','
            	        {
            	        	char_literal253=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_object_initializer4598); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal253_tree = (object)adaptor.Create(char_literal253);
            	        		adaptor.AddChild(root_0, char_literal253_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal254=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer4603); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal254_tree = (object)adaptor.Create(char_literal254);
            		adaptor.AddChild(root_0, char_literal254_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 63, object_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "object_initializer"

    public class member_initializer_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "member_initializer_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:471:8: public member_initializer_list : member_initializer ( ',' member_initializer )* ;
    public csParser.member_initializer_list_return member_initializer_list() // throws RecognitionException [1]
    {   
        csParser.member_initializer_list_return retval = new csParser.member_initializer_list_return();
        retval.start = input.LT(1);
        int member_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal256 = null;
        csParser.member_initializer_return member_initializer255 = default(csParser.member_initializer_return);

        csParser.member_initializer_return member_initializer257 = default(csParser.member_initializer_return);


        object char_literal256_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 64) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:471:31: ( member_initializer ( ',' member_initializer )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:472:2: member_initializer ( ',' member_initializer )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_member_initializer_in_member_initializer_list4614);
            	member_initializer255 = member_initializer();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_initializer255.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:472:22: ( ',' member_initializer )*
            	do 
            	{
            	    int alt72 = 2;
            	    int LA72_0 = input.LA(1);

            	    if ( (LA72_0 == COMMA) )
            	    {
            	        int LA72_1 = input.LA(2);

            	        if ( (LA72_1 == IDENTIFIER || (LA72_1 >= ELIF && LA72_1 <= UNDEF) || LA72_1 == 195 || LA72_1 == 221 || (LA72_1 >= 224 && LA72_1 <= 239) || (LA72_1 >= 241 && LA72_1 <= 244) || (LA72_1 >= 247 && LA72_1 <= 250) || LA72_1 == 256 || (LA72_1 >= 263 && LA72_1 <= 264) || LA72_1 == 274 || LA72_1 == 277) )
            	        {
            	            alt72 = 1;
            	        }


            	    }


            	    switch (alt72) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:472:23: ',' member_initializer
            			    {
            			    	char_literal256=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_member_initializer_list4618); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal256_tree = (object)adaptor.Create(char_literal256);
            			    		adaptor.AddChild(root_0, char_literal256_tree);
            			    	}
            			    	PushFollow(FOLLOW_member_initializer_in_member_initializer_list4620);
            			    	member_initializer257 = member_initializer();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_initializer257.Tree);

            			    }
            			    break;

            			default:
            			    goto loop72;
            	    }
            	} while (true);

            	loop72:
            		;	// Stops C# compiler whining that label 'loop72' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 64, member_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_initializer_list"

    public class member_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "member_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:473:8: public member_initializer : identifier '=' initializer_value ;
    public csParser.member_initializer_return member_initializer() // throws RecognitionException [1]
    {   
        csParser.member_initializer_return retval = new csParser.member_initializer_return();
        retval.start = input.LT(1);
        int member_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal259 = null;
        csParser.identifier_return identifier258 = default(csParser.identifier_return);

        csParser.initializer_value_return initializer_value260 = default(csParser.initializer_value_return);


        object char_literal259_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 65) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:473:26: ( identifier '=' initializer_value )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:474:2: identifier '=' initializer_value
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_member_initializer4633);
            	identifier258 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier258.Tree);
            	char_literal259=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_member_initializer4637); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal259_tree = (object)adaptor.Create(char_literal259);
            		adaptor.AddChild(root_0, char_literal259_tree);
            	}
            	PushFollow(FOLLOW_initializer_value_in_member_initializer4641);
            	initializer_value260 = initializer_value();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, initializer_value260.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 65, member_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_initializer"

    public class initializer_value_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "initializer_value"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:475:8: public initializer_value : ( expression | object_or_collection_initializer );
    public csParser.initializer_value_return initializer_value() // throws RecognitionException [1]
    {   
        csParser.initializer_value_return retval = new csParser.initializer_value_return();
        retval.start = input.LT(1);
        int initializer_value_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression261 = default(csParser.expression_return);

        csParser.object_or_collection_initializer_return object_or_collection_initializer262 = default(csParser.object_or_collection_initializer_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 66) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:475:25: ( expression | object_or_collection_initializer )
            int alt73 = 2;
            int LA73_0 = input.LA(1);

            if ( ((LA73_0 >= MONONOT && LA73_0 <= MONOTWIDDLE) || (LA73_0 >= OBJECT && LA73_0 <= THIS) || LA73_0 == LPAREN || LA73_0 == BIT_AND || (LA73_0 >= PLUS && LA73_0 <= MINUS) || LA73_0 == STAR || (LA73_0 >= BOOL && LA73_0 <= NULL) || (LA73_0 >= ELIF && LA73_0 <= UNDEF) || LA73_0 == 195 || LA73_0 == 197 || LA73_0 == 207 || (LA73_0 >= 209 && LA73_0 <= 210) || (LA73_0 >= 214 && LA73_0 <= 219) || LA73_0 == 221 || (LA73_0 >= 224 && LA73_0 <= 239) || (LA73_0 >= 241 && LA73_0 <= 244) || (LA73_0 >= 247 && LA73_0 <= 254) || LA73_0 == 256 || (LA73_0 >= 263 && LA73_0 <= 264) || (LA73_0 >= 274 && LA73_0 <= 277)) )
            {
                alt73 = 1;
            }
            else if ( (LA73_0 == OPEN_BRACE) )
            {
                alt73 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d73s0 =
                    new NoViableAltException("", 73, 0, input);

                throw nvae_d73s0;
            }
            switch (alt73) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:476:2: expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_expression_in_initializer_value4652);
                    	expression261 = expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression261.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:477:4: object_or_collection_initializer
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value4658);
                    	object_or_collection_initializer262 = object_or_collection_initializer();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_or_collection_initializer262.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 66, initializer_value_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "initializer_value"

    public class typeof_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "typeof_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:481:8: public typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
    public csParser.typeof_expression_return typeof_expression() // throws RecognitionException [1]
    {   
        csParser.typeof_expression_return retval = new csParser.typeof_expression_return();
        retval.start = input.LT(1);
        int typeof_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal263 = null;
        IToken char_literal264 = null;
        IToken string_literal267 = null;
        IToken char_literal268 = null;
        csParser.unbound_type_name_return unbound_type_name265 = default(csParser.unbound_type_name_return);

        csParser.type_return type266 = default(csParser.type_return);


        object string_literal263_tree=null;
        object char_literal264_tree=null;
        object string_literal267_tree=null;
        object char_literal268_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 67) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:481:25: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:482:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal263=(IToken)Match(input,219,FOLLOW_219_in_typeof_expression4672); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal263_tree = (object)adaptor.Create(string_literal263);
            		adaptor.AddChild(root_0, string_literal263_tree);
            	}
            	char_literal264=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_typeof_expression4676); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal264_tree = (object)adaptor.Create(char_literal264);
            		adaptor.AddChild(root_0, char_literal264_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:482:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
            	int alt74 = 3;
            	alt74 = dfa74.Predict(input);
            	switch (alt74) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:482:20: ( unbound_type_name )=> unbound_type_name
            	        {
            	        	PushFollow(FOLLOW_unbound_type_name_in_typeof_expression4687);
            	        	unbound_type_name265 = unbound_type_name();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unbound_type_name265.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:483:10: type
            	        {
            	        	PushFollow(FOLLOW_type_in_typeof_expression4698);
            	        	type266 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type266.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:484:10: 'void'
            	        {
            	        	string_literal267=(IToken)Match(input,206,FOLLOW_206_in_typeof_expression4710); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal267_tree = (object)adaptor.Create(string_literal267);
            	        		adaptor.AddChild(root_0, string_literal267_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal268=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression4715); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal268_tree = (object)adaptor.Create(char_literal268);
            		adaptor.AddChild(root_0, char_literal268_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 67, typeof_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "typeof_expression"

    public class unbound_type_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unbound_type_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:489:8: public unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
    public csParser.unbound_type_name_return unbound_type_name() // throws RecognitionException [1]
    {   
        csParser.unbound_type_name_return retval = new csParser.unbound_type_name_return();
        retval.start = input.LT(1);
        int unbound_type_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.unbound_type_name_start_return unbound_type_name_start269 = default(csParser.unbound_type_name_start_return);

        csParser.generic_dimension_specifier_return generic_dimension_specifier270 = default(csParser.generic_dimension_specifier_return);

        csParser.unbound_type_name_part_return unbound_type_name_part271 = default(csParser.unbound_type_name_part_return);

        csParser.unbound_type_name_part_return unbound_type_name_part272 = default(csParser.unbound_type_name_part_return);

        csParser.generic_dimension_specifier_return generic_dimension_specifier273 = default(csParser.generic_dimension_specifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 68) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:489:25: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:491:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_unbound_type_name_start_in_unbound_type_name4732);
            	unbound_type_name_start269 = unbound_type_name_start();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unbound_type_name_start269.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:492:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
            	do 
            	{
            	    int alt75 = 3;
            	    alt75 = dfa75.Predict(input);
            	    switch (alt75) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:492:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:492:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:492:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
            			    	{
            			    		PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name4751);
            			    		generic_dimension_specifier270 = generic_dimension_specifier();
            			    		state._fsp--;
            			    		if (state.failed) return retval;
            			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_dimension_specifier270.Tree);
            			    		PushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name4755);
            			    		unbound_type_name_part271 = unbound_type_name_part();
            			    		state._fsp--;
            			    		if (state.failed) return retval;
            			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unbound_type_name_part271.Tree);

            			    	}


            			    }
            			    break;
            			case 2 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:493:5: unbound_type_name_part
            			    {
            			    	PushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name4762);
            			    	unbound_type_name_part272 = unbound_type_name_part();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unbound_type_name_part272.Tree);

            			    }
            			    break;

            			default:
            			    goto loop75;
            	    }
            	} while (true);

            	loop75:
            		;	// Stops C# compiler whining that label 'loop75' has no statements

            	PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name4772);
            	generic_dimension_specifier273 = generic_dimension_specifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_dimension_specifier273.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 68, unbound_type_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name"

    public class unbound_type_name_start_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unbound_type_name_start"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:497:8: public unbound_type_name_start : identifier ( '::' identifier )? ;
    public csParser.unbound_type_name_start_return unbound_type_name_start() // throws RecognitionException [1]
    {   
        csParser.unbound_type_name_start_return retval = new csParser.unbound_type_name_start_return();
        retval.start = input.LT(1);
        int unbound_type_name_start_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal275 = null;
        csParser.identifier_return identifier274 = default(csParser.identifier_return);

        csParser.identifier_return identifier276 = default(csParser.identifier_return);


        object string_literal275_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 69) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:497:31: ( identifier ( '::' identifier )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:498:2: identifier ( '::' identifier )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_unbound_type_name_start4784);
            	identifier274 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier274.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:498:13: ( '::' identifier )?
            	int alt76 = 2;
            	int LA76_0 = input.LA(1);

            	if ( (LA76_0 == 208) )
            	{
            	    alt76 = 1;
            	}
            	switch (alt76) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:498:14: '::' identifier
            	        {
            	        	string_literal275=(IToken)Match(input,208,FOLLOW_208_in_unbound_type_name_start4787); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal275_tree = (object)adaptor.Create(string_literal275);
            	        		adaptor.AddChild(root_0, string_literal275_tree);
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_unbound_type_name_start4789);
            	        	identifier276 = identifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier276.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 69, unbound_type_name_start_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_start"

    public class unbound_type_name_part_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unbound_type_name_part"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:499:8: public unbound_type_name_part : '.' identifier ;
    public csParser.unbound_type_name_part_return unbound_type_name_part() // throws RecognitionException [1]
    {   
        csParser.unbound_type_name_part_return retval = new csParser.unbound_type_name_part_return();
        retval.start = input.LT(1);
        int unbound_type_name_part_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal277 = null;
        csParser.identifier_return identifier278 = default(csParser.identifier_return);


        object char_literal277_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 70) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:499:30: ( '.' identifier )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:500:2: '.' identifier
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal277=(IToken)Match(input,DOT,FOLLOW_DOT_in_unbound_type_name_part4800); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal277_tree = (object)adaptor.Create(char_literal277);
            		adaptor.AddChild(root_0, char_literal277_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_unbound_type_name_part4804);
            	identifier278 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier278.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 70, unbound_type_name_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_part"

    public class generic_dimension_specifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "generic_dimension_specifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:501:8: public generic_dimension_specifier : '<' ( commas )? '>' ;
    public csParser.generic_dimension_specifier_return generic_dimension_specifier() // throws RecognitionException [1]
    {   
        csParser.generic_dimension_specifier_return retval = new csParser.generic_dimension_specifier_return();
        retval.start = input.LT(1);
        int generic_dimension_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal279 = null;
        IToken char_literal281 = null;
        csParser.commas_return commas280 = default(csParser.commas_return);


        object char_literal279_tree=null;
        object char_literal281_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 71) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:501:35: ( '<' ( commas )? '>' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:502:2: '<' ( commas )? '>'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal279=(IToken)Match(input,LTHAN,FOLLOW_LTHAN_in_generic_dimension_specifier4814); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal279_tree = (object)adaptor.Create(char_literal279);
            		adaptor.AddChild(root_0, char_literal279_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:502:8: ( commas )?
            	int alt77 = 2;
            	int LA77_0 = input.LA(1);

            	if ( (LA77_0 == COMMA) )
            	{
            	    alt77 = 1;
            	}
            	switch (alt77) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:502:8: commas
            	        {
            	        	PushFollow(FOLLOW_commas_in_generic_dimension_specifier4818);
            	        	commas280 = commas();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, commas280.Tree);

            	        }
            	        break;

            	}

            	char_literal281=(IToken)Match(input,GT,FOLLOW_GT_in_generic_dimension_specifier4823); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal281_tree = (object)adaptor.Create(char_literal281);
            		adaptor.AddChild(root_0, char_literal281_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 71, generic_dimension_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "generic_dimension_specifier"

    public class commas_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "commas"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:503:8: public commas : ( ',' )+ ;
    public csParser.commas_return commas() // throws RecognitionException [1]
    {   
        csParser.commas_return retval = new csParser.commas_return();
        retval.start = input.LT(1);
        int commas_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal282 = null;

        object char_literal282_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 72) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:503:14: ( ( ',' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:504:2: ( ',' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:504:2: ( ',' )+
            	int cnt78 = 0;
            	do 
            	{
            	    int alt78 = 2;
            	    int LA78_0 = input.LA(1);

            	    if ( (LA78_0 == COMMA) )
            	    {
            	        alt78 = 1;
            	    }


            	    switch (alt78) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:504:2: ','
            			    {
            			    	char_literal282=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_commas4834); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal282_tree = (object)adaptor.Create(char_literal282);
            			    		adaptor.AddChild(root_0, char_literal282_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt78 >= 1 ) goto loop78;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee78 =
            		                new EarlyExitException(78, input);
            		            throw eee78;
            	    }
            	    cnt78++;
            	} while (true);

            	loop78:
            		;	// Stops C# compiler whining that label 'loop78' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 72, commas_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "commas"

    public class type_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:510:8: public type_name : namespace_or_type_name ;
    public csParser.type_name_return type_name() // throws RecognitionException [1]
    {   
        csParser.type_name_return retval = new csParser.type_name_return();
        retval.start = input.LT(1);
        int type_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name283 = default(csParser.namespace_or_type_name_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 73) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:510:17: ( namespace_or_type_name )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:511:2: namespace_or_type_name
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_namespace_or_type_name_in_type_name4852);
            	namespace_or_type_name283 = namespace_or_type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name283.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 73, type_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_name"

    public class namespace_or_type_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "namespace_or_type_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:512:8: public namespace_or_type_name : type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
    public csParser.namespace_or_type_name_return namespace_or_type_name() // throws RecognitionException [1]
    {   
        csParser.namespace_or_type_name_return retval = new csParser.namespace_or_type_name_return();
        retval.start = input.LT(1);
        int namespace_or_type_name_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal285 = null;
        IToken char_literal287 = null;
        csParser.type_or_generic_return type_or_generic284 = default(csParser.type_or_generic_return);

        csParser.type_or_generic_return type_or_generic286 = default(csParser.type_or_generic_return);

        csParser.type_or_generic_return type_or_generic288 = default(csParser.type_or_generic_return);


        object string_literal285_tree=null;
        object char_literal287_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 74) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:512:30: ( type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:513:3: type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name4863);
            	type_or_generic284 = type_or_generic();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_or_generic284.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:513:21: ( '::' type_or_generic )?
            	int alt79 = 2;
            	int LA79_0 = input.LA(1);

            	if ( (LA79_0 == 208) )
            	{
            	    alt79 = 1;
            	}
            	switch (alt79) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:513:22: '::' type_or_generic
            	        {
            	        	string_literal285=(IToken)Match(input,208,FOLLOW_208_in_namespace_or_type_name4868); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal285_tree = (object)adaptor.Create(string_literal285);
            	        		adaptor.AddChild(root_0, string_literal285_tree);
            	        	}
            	        	PushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name4870);
            	        	type_or_generic286 = type_or_generic();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_or_generic286.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:513:45: ( '.' type_or_generic )*
            	do 
            	{
            	    int alt80 = 2;
            	    int LA80_0 = input.LA(1);

            	    if ( (LA80_0 == DOT) )
            	    {
            	        int LA80_2 = input.LA(2);

            	        if ( (LA80_2 == IDENTIFIER || (LA80_2 >= ELIF && LA80_2 <= UNDEF) || LA80_2 == 195 || LA80_2 == 221 || (LA80_2 >= 224 && LA80_2 <= 239) || (LA80_2 >= 241 && LA80_2 <= 244) || (LA80_2 >= 247 && LA80_2 <= 250) || LA80_2 == 256 || (LA80_2 >= 263 && LA80_2 <= 264) || LA80_2 == 274 || LA80_2 == 277) )
            	        {
            	            alt80 = 1;
            	        }


            	    }


            	    switch (alt80) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:513:46: '.' type_or_generic
            			    {
            			    	char_literal287=(IToken)Match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name4875); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal287_tree = (object)adaptor.Create(char_literal287);
            			    		adaptor.AddChild(root_0, char_literal287_tree);
            			    	}
            			    	PushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name4879);
            			    	type_or_generic288 = type_or_generic();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_or_generic288.Tree);

            			    }
            			    break;

            			default:
            			    goto loop80;
            	    }
            	} while (true);

            	loop80:
            		;	// Stops C# compiler whining that label 'loop80' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 74, namespace_or_type_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name"

    public class type_or_generic_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_or_generic"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:514:8: public type_or_generic : ( ( identifier generic_argument_list )=> identifier generic_argument_list | identifier );
    public csParser.type_or_generic_return type_or_generic() // throws RecognitionException [1]
    {   
        csParser.type_or_generic_return retval = new csParser.type_or_generic_return();
        retval.start = input.LT(1);
        int type_or_generic_StartIndex = input.Index;
        object root_0 = null;

        csParser.identifier_return identifier289 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list290 = default(csParser.generic_argument_list_return);

        csParser.identifier_return identifier291 = default(csParser.identifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 75) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:514:23: ( ( identifier generic_argument_list )=> identifier generic_argument_list | identifier )
            int alt81 = 2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0 == IDENTIFIER) )
            {
                int LA81_1 = input.LA(2);

                if ( (synpred16_cs()) )
                {
                    alt81 = 1;
                }
                else if ( (true) )
                {
                    alt81 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d81s1 =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae_d81s1;
                }
            }
            else if ( ((LA81_0 >= ELIF && LA81_0 <= UNDEF) || LA81_0 == 195 || LA81_0 == 221 || (LA81_0 >= 224 && LA81_0 <= 239) || (LA81_0 >= 241 && LA81_0 <= 244) || (LA81_0 >= 247 && LA81_0 <= 250) || LA81_0 == 256 || (LA81_0 >= 263 && LA81_0 <= 264) || LA81_0 == 274 || LA81_0 == 277) )
            {
                int LA81_2 = input.LA(2);

                if ( (synpred16_cs()) )
                {
                    alt81 = 1;
                }
                else if ( (true) )
                {
                    alt81 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d81s2 =
                        new NoViableAltException("", 81, 2, input);

                    throw nvae_d81s2;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d81s0 =
                    new NoViableAltException("", 81, 0, input);

                throw nvae_d81s0;
            }
            switch (alt81) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:515:2: ( identifier generic_argument_list )=> identifier generic_argument_list
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_type_or_generic4901);
                    	identifier289 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier289.Tree);
                    	PushFollow(FOLLOW_generic_argument_list_in_type_or_generic4905);
                    	generic_argument_list290 = generic_argument_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list290.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:516:4: identifier
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_type_or_generic4910);
                    	identifier291 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier291.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 75, type_or_generic_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_or_generic"

    public class qid_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "qid"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:518:8: public qid : qid_start ( qid_part )* ;
    public csParser.qid_return qid() // throws RecognitionException [1]
    {   
        csParser.qid_return retval = new csParser.qid_return();
        retval.start = input.LT(1);
        int qid_StartIndex = input.Index;
        object root_0 = null;

        csParser.qid_start_return qid_start292 = default(csParser.qid_start_return);

        csParser.qid_part_return qid_part293 = default(csParser.qid_part_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 76) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:518:11: ( qid_start ( qid_part )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:519:2: qid_start ( qid_part )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_qid_start_in_qid4923);
            	qid_start292 = qid_start();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid_start292.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:519:14: ( qid_part )*
            	do 
            	{
            	    int alt82 = 2;
            	    int LA82_0 = input.LA(1);

            	    if ( (LA82_0 == DOT) )
            	    {
            	        int LA82_2 = input.LA(2);

            	        if ( (LA82_2 == IDENTIFIER || (LA82_2 >= ELIF && LA82_2 <= UNDEF) || LA82_2 == 195 || LA82_2 == 221 || (LA82_2 >= 224 && LA82_2 <= 239) || (LA82_2 >= 241 && LA82_2 <= 244) || (LA82_2 >= 247 && LA82_2 <= 250) || LA82_2 == 256 || (LA82_2 >= 263 && LA82_2 <= 264) || LA82_2 == 274 || LA82_2 == 277) )
            	        {
            	            alt82 = 1;
            	        }


            	    }
            	    else if ( (LA82_0 == PTR) )
            	    {
            	        alt82 = 1;
            	    }


            	    switch (alt82) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:519:14: qid_part
            			    {
            			    	PushFollow(FOLLOW_qid_part_in_qid4927);
            			    	qid_part293 = qid_part();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid_part293.Tree);

            			    }
            			    break;

            			default:
            			    goto loop82;
            	    }
            	} while (true);

            	loop82:
            		;	// Stops C# compiler whining that label 'loop82' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 76, qid_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qid"

    public class qid_start_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "qid_start"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:521:8: public qid_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
    public csParser.qid_start_return qid_start() // throws RecognitionException [1]
    {   
        csParser.qid_start_return retval = new csParser.qid_start_return();
        retval.start = input.LT(1);
        int qid_start_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal298 = null;
        csParser.predefined_type_return predefined_type294 = default(csParser.predefined_type_return);

        csParser.identifier_return identifier295 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list296 = default(csParser.generic_argument_list_return);

        csParser.identifier_return identifier297 = default(csParser.identifier_return);

        csParser.identifier_return identifier299 = default(csParser.identifier_return);

        csParser.literal_return literal300 = default(csParser.literal_return);


        object string_literal298_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 77) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:521:17: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
            int alt84 = 4;
            switch ( input.LA(1) ) 
            {
            case OBJECT:
            case BOOL:
            case BYTE:
            case CHAR:
            case SHORT:
            case INT:
            case LONG:
            case FLOAT:
            case DOUBLE:
            case 251:
            case 252:
            case 253:
            case 254:
            case 275:
            case 276:
            	{
                alt84 = 1;
                }
                break;
            case IDENTIFIER:
            	{
                int LA84_2 = input.LA(2);

                if ( ((LA84_2 >= OPEN_BRACE && LA84_2 <= LPAREN) || LA84_2 == ASSIGN || LA84_2 == COMMA || (LA84_2 >= DOT && LA84_2 <= PTR) || LA84_2 == 208) )
                {
                    alt84 = 3;
                }
                else if ( (LA84_2 == LTHAN) && (synpred17_cs()) )
                {
                    alt84 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d84s2 =
                        new NoViableAltException("", 84, 2, input);

                    throw nvae_d84s2;
                }
                }
                break;
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 221:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 256:
            case 263:
            case 264:
            case 274:
            case 277:
            	{
                int LA84_3 = input.LA(2);

                if ( ((LA84_3 >= OPEN_BRACE && LA84_3 <= LPAREN) || LA84_3 == ASSIGN || LA84_3 == COMMA || (LA84_3 >= DOT && LA84_3 <= PTR) || LA84_3 == 208) )
                {
                    alt84 = 3;
                }
                else if ( (LA84_3 == LTHAN) && (synpred17_cs()) )
                {
                    alt84 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d84s3 =
                        new NoViableAltException("", 84, 3, input);

                    throw nvae_d84s3;
                }
                }
                break;
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            	{
                alt84 = 4;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d84s0 =
            	        new NoViableAltException("", 84, 0, input);

            	    throw nvae_d84s0;
            }

            switch (alt84) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:522:2: predefined_type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_predefined_type_in_qid_start4939);
                    	predefined_type294 = predefined_type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type294.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:523:4: ( identifier generic_argument_list )=> identifier generic_argument_list
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_qid_start4954);
                    	identifier295 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier295.Tree);
                    	PushFollow(FOLLOW_generic_argument_list_in_qid_start4958);
                    	generic_argument_list296 = generic_argument_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list296.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:526:4: identifier ( '::' identifier )?
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_qid_start4965);
                    	identifier297 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier297.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:526:17: ( '::' identifier )?
                    	int alt83 = 2;
                    	int LA83_0 = input.LA(1);

                    	if ( (LA83_0 == 208) )
                    	{
                    	    alt83 = 1;
                    	}
                    	switch (alt83) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:526:18: '::' identifier
                    	        {
                    	        	string_literal298=(IToken)Match(input,208,FOLLOW_208_in_qid_start4970); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal298_tree = (object)adaptor.Create(string_literal298);
                    	        		adaptor.AddChild(root_0, string_literal298_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_identifier_in_qid_start4974);
                    	        	identifier299 = identifier();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier299.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:527:4: literal
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_literal_in_qid_start4981);
                    	literal300 = literal();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, literal300.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 77, qid_start_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qid_start"

    public class qid_part_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "qid_part"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:531:8: public qid_part : access_identifier ;
    public csParser.qid_part_return qid_part() // throws RecognitionException [1]
    {   
        csParser.qid_part_return retval = new csParser.qid_part_return();
        retval.start = input.LT(1);
        int qid_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_identifier_return access_identifier301 = default(csParser.access_identifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 78) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:531:16: ( access_identifier )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:532:2: access_identifier
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_access_identifier_in_qid_part4997);
            	access_identifier301 = access_identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_identifier301.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 78, qid_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qid_part"

    public class generic_argument_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "generic_argument_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:534:8: public generic_argument_list : '<' type_arguments '>' ;
    public csParser.generic_argument_list_return generic_argument_list() // throws RecognitionException [1]
    {   
        csParser.generic_argument_list_return retval = new csParser.generic_argument_list_return();
        retval.start = input.LT(1);
        int generic_argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal302 = null;
        IToken char_literal304 = null;
        csParser.type_arguments_return type_arguments303 = default(csParser.type_arguments_return);


        object char_literal302_tree=null;
        object char_literal304_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 79) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:534:29: ( '<' type_arguments '>' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:535:2: '<' type_arguments '>'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal302=(IToken)Match(input,LTHAN,FOLLOW_LTHAN_in_generic_argument_list5009); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal302_tree = (object)adaptor.Create(char_literal302);
            		adaptor.AddChild(root_0, char_literal302_tree);
            	}
            	PushFollow(FOLLOW_type_arguments_in_generic_argument_list5013);
            	type_arguments303 = type_arguments();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_arguments303.Tree);
            	char_literal304=(IToken)Match(input,GT,FOLLOW_GT_in_generic_argument_list5017); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal304_tree = (object)adaptor.Create(char_literal304);
            		adaptor.AddChild(root_0, char_literal304_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 79, generic_argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "generic_argument_list"

    public class type_arguments_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_arguments"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:536:8: public type_arguments : type_argument ( ',' type_argument )* ;
    public csParser.type_arguments_return type_arguments() // throws RecognitionException [1]
    {   
        csParser.type_arguments_return retval = new csParser.type_arguments_return();
        retval.start = input.LT(1);
        int type_arguments_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal306 = null;
        csParser.type_argument_return type_argument305 = default(csParser.type_argument_return);

        csParser.type_argument_return type_argument307 = default(csParser.type_argument_return);


        object char_literal306_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 80) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:536:22: ( type_argument ( ',' type_argument )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:537:2: type_argument ( ',' type_argument )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_argument_in_type_arguments5028);
            	type_argument305 = type_argument();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_argument305.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:537:16: ( ',' type_argument )*
            	do 
            	{
            	    int alt85 = 2;
            	    int LA85_0 = input.LA(1);

            	    if ( (LA85_0 == COMMA) )
            	    {
            	        alt85 = 1;
            	    }


            	    switch (alt85) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:537:17: ',' type_argument
            			    {
            			    	char_literal306=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_type_arguments5031); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal306_tree = (object)adaptor.Create(char_literal306);
            			    		adaptor.AddChild(root_0, char_literal306_tree);
            			    	}
            			    	PushFollow(FOLLOW_type_argument_in_type_arguments5033);
            			    	type_argument307 = type_argument();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_argument307.Tree);

            			    }
            			    break;

            			default:
            			    goto loop85;
            	    }
            	} while (true);

            	loop85:
            		;	// Stops C# compiler whining that label 'loop85' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 80, type_arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_arguments"

    public class type_argument_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_argument"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:538:8: public type_argument : ({...}? => javaish_type_argument | type );
    public csParser.type_argument_return type_argument() // throws RecognitionException [1]
    {   
        csParser.type_argument_return retval = new csParser.type_argument_return();
        retval.start = input.LT(1);
        int type_argument_StartIndex = input.Index;
        object root_0 = null;

        csParser.javaish_type_argument_return javaish_type_argument308 = default(csParser.javaish_type_argument_return);

        csParser.type_return type309 = default(csParser.type_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 81) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:538:21: ({...}? => javaish_type_argument | type )
            int alt86 = 2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0 == 220) && ((this.IsJavaish)) )
            {
                alt86 = 1;
            }
            else if ( (LA86_0 == OBJECT || (LA86_0 >= BOOL && LA86_0 <= DOUBLE) || (LA86_0 >= 251 && LA86_0 <= 254) || (LA86_0 >= 275 && LA86_0 <= 276)) )
            {
                int LA86_2 = input.LA(2);

                if ( ((this.IsJavaish)) )
                {
                    alt86 = 1;
                }
                else if ( (true) )
                {
                    alt86 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d86s2 =
                        new NoViableAltException("", 86, 2, input);

                    throw nvae_d86s2;
                }
            }
            else if ( (LA86_0 == IDENTIFIER) )
            {
                int LA86_3 = input.LA(2);

                if ( ((this.IsJavaish)) )
                {
                    alt86 = 1;
                }
                else if ( (true) )
                {
                    alt86 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d86s3 =
                        new NoViableAltException("", 86, 3, input);

                    throw nvae_d86s3;
                }
            }
            else if ( ((LA86_0 >= ELIF && LA86_0 <= UNDEF) || LA86_0 == 195 || LA86_0 == 221 || (LA86_0 >= 224 && LA86_0 <= 239) || (LA86_0 >= 241 && LA86_0 <= 244) || (LA86_0 >= 247 && LA86_0 <= 250) || LA86_0 == 256 || (LA86_0 >= 263 && LA86_0 <= 264) || LA86_0 == 274 || LA86_0 == 277) )
            {
                int LA86_4 = input.LA(2);

                if ( ((this.IsJavaish)) )
                {
                    alt86 = 1;
                }
                else if ( (true) )
                {
                    alt86 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d86s4 =
                        new NoViableAltException("", 86, 4, input);

                    throw nvae_d86s4;
                }
            }
            else if ( (LA86_0 == 206) )
            {
                int LA86_5 = input.LA(2);

                if ( (LA86_5 == STAR) )
                {
                    int LA86_7 = input.LA(3);

                    if ( ((this.IsJavaish)) )
                    {
                        alt86 = 1;
                    }
                    else if ( (true) )
                    {
                        alt86 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d86s7 =
                            new NoViableAltException("", 86, 7, input);

                        throw nvae_d86s7;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d86s5 =
                        new NoViableAltException("", 86, 5, input);

                    throw nvae_d86s5;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d86s0 =
                    new NoViableAltException("", 86, 0, input);

                throw nvae_d86s0;
            }
            switch (alt86) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:539:5: {...}? => javaish_type_argument
                    {
                    	root_0 = (object)adaptor.Nil;

                    	if ( !((this.IsJavaish)) ) 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    throw new FailedPredicateException(input, "type_argument", "this.IsJavaish");
                    	}
                    	PushFollow(FOLLOW_javaish_type_argument_in_type_argument5051);
                    	javaish_type_argument308 = javaish_type_argument();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, javaish_type_argument308.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:540:6: type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_type_in_type_argument5058);
                    	type309 = type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type309.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 81, type_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_argument"

    public class javaish_type_argument_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "javaish_type_argument"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:542:8: public javaish_type_argument : ( ( '?' 'extends' )=> '?' 'extends' type | '?' | type );
    public csParser.javaish_type_argument_return javaish_type_argument() // throws RecognitionException [1]
    {   
        csParser.javaish_type_argument_return retval = new csParser.javaish_type_argument_return();
        retval.start = input.LT(1);
        int javaish_type_argument_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal310 = null;
        IToken string_literal311 = null;
        IToken char_literal313 = null;
        csParser.type_return type312 = default(csParser.type_return);

        csParser.type_return type314 = default(csParser.type_return);


        object char_literal310_tree=null;
        object string_literal311_tree=null;
        object char_literal313_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 82) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:542:29: ( ( '?' 'extends' )=> '?' 'extends' type | '?' | type )
            int alt87 = 3;
            int LA87_0 = input.LA(1);

            if ( (LA87_0 == 220) )
            {
                int LA87_1 = input.LA(2);

                if ( (LA87_1 == 221) && (synpred18_cs()) )
                {
                    alt87 = 1;
                }
                else if ( (LA87_1 == COMMA || LA87_1 == GT) )
                {
                    alt87 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d87s1 =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae_d87s1;
                }
            }
            else if ( (LA87_0 == OBJECT || (LA87_0 >= BOOL && LA87_0 <= IDENTIFIER) || (LA87_0 >= ELIF && LA87_0 <= UNDEF) || LA87_0 == 195 || LA87_0 == 206 || LA87_0 == 221 || (LA87_0 >= 224 && LA87_0 <= 239) || (LA87_0 >= 241 && LA87_0 <= 244) || (LA87_0 >= 247 && LA87_0 <= 254) || LA87_0 == 256 || (LA87_0 >= 263 && LA87_0 <= 264) || (LA87_0 >= 274 && LA87_0 <= 277)) )
            {
                alt87 = 3;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d87s0 =
                    new NoViableAltException("", 87, 0, input);

                throw nvae_d87s0;
            }
            switch (alt87) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:543:7: ( '?' 'extends' )=> '?' 'extends' type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal310=(IToken)Match(input,220,FOLLOW_220_in_javaish_type_argument5080); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal310_tree = (object)adaptor.Create(char_literal310);
                    		adaptor.AddChild(root_0, char_literal310_tree);
                    	}
                    	string_literal311=(IToken)Match(input,221,FOLLOW_221_in_javaish_type_argument5082); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal311_tree = (object)adaptor.Create(string_literal311);
                    		adaptor.AddChild(root_0, string_literal311_tree);
                    	}
                    	PushFollow(FOLLOW_type_in_javaish_type_argument5084);
                    	type312 = type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type312.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:544:6: '?'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal313=(IToken)Match(input,220,FOLLOW_220_in_javaish_type_argument5091); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal313_tree = (object)adaptor.Create(char_literal313);
                    		adaptor.AddChild(root_0, char_literal313_tree);
                    	}

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:545:6: type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_type_in_javaish_type_argument5098);
                    	type314 = type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type314.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 82, javaish_type_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "javaish_type_argument"

    public class type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:547:8: public type : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ );
    public csParser.type_return type() // throws RecognitionException [1]
    {   
        csParser.type_return retval = new csParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal318 = null;
        IToken char_literal321 = null;
        IToken char_literal322 = null;
        IToken string_literal325 = null;
        IToken char_literal326 = null;
        csParser.predefined_type_return predefined_type315 = default(csParser.predefined_type_return);

        csParser.type_name_return type_name316 = default(csParser.type_name_return);

        csParser.rank_specifiers_return rank_specifiers317 = default(csParser.rank_specifiers_return);

        csParser.predefined_type_return predefined_type319 = default(csParser.predefined_type_return);

        csParser.type_name_return type_name320 = default(csParser.type_name_return);

        csParser.predefined_type_return predefined_type323 = default(csParser.predefined_type_return);

        csParser.type_name_return type_name324 = default(csParser.type_name_return);


        object char_literal318_tree=null;
        object char_literal321_tree=null;
        object char_literal322_tree=null;
        object string_literal325_tree=null;
        object char_literal326_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 83) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:547:12: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
            int alt95 = 4;
            switch ( input.LA(1) ) 
            {
            case OBJECT:
            case BOOL:
            case BYTE:
            case CHAR:
            case SHORT:
            case INT:
            case LONG:
            case FLOAT:
            case DOUBLE:
            case 251:
            case 252:
            case 253:
            case 254:
            case 275:
            case 276:
            	{
                int LA95_1 = input.LA(2);

                if ( (synpred19_cs()) )
                {
                    alt95 = 1;
                }
                else if ( (synpred20_cs()) )
                {
                    alt95 = 2;
                }
                else if ( (true) )
                {
                    alt95 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d95s1 =
                        new NoViableAltException("", 95, 1, input);

                    throw nvae_d95s1;
                }
                }
                break;
            case IDENTIFIER:
            	{
                int LA95_2 = input.LA(2);

                if ( (synpred19_cs()) )
                {
                    alt95 = 1;
                }
                else if ( (synpred20_cs()) )
                {
                    alt95 = 2;
                }
                else if ( (true) )
                {
                    alt95 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d95s2 =
                        new NoViableAltException("", 95, 2, input);

                    throw nvae_d95s2;
                }
                }
                break;
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 221:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 256:
            case 263:
            case 264:
            case 274:
            case 277:
            	{
                int LA95_3 = input.LA(2);

                if ( (synpred19_cs()) )
                {
                    alt95 = 1;
                }
                else if ( (synpred20_cs()) )
                {
                    alt95 = 2;
                }
                else if ( (true) )
                {
                    alt95 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d95s3 =
                        new NoViableAltException("", 95, 3, input);

                    throw nvae_d95s3;
                }
                }
                break;
            case 206:
            	{
                alt95 = 4;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d95s0 =
            	        new NoViableAltException("", 95, 0, input);

            	    throw nvae_d95s0;
            }

            switch (alt95) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:4: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:56: ( predefined_type | type_name )
                    	int alt88 = 2;
                    	int LA88_0 = input.LA(1);

                    	if ( (LA88_0 == OBJECT || (LA88_0 >= BOOL && LA88_0 <= DOUBLE) || (LA88_0 >= 251 && LA88_0 <= 254) || (LA88_0 >= 275 && LA88_0 <= 276)) )
                    	{
                    	    alt88 = 1;
                    	}
                    	else if ( (LA88_0 == IDENTIFIER || (LA88_0 >= ELIF && LA88_0 <= UNDEF) || LA88_0 == 195 || LA88_0 == 221 || (LA88_0 >= 224 && LA88_0 <= 239) || (LA88_0 >= 241 && LA88_0 <= 244) || (LA88_0 >= 247 && LA88_0 <= 250) || LA88_0 == 256 || (LA88_0 >= 263 && LA88_0 <= 264) || LA88_0 == 274 || LA88_0 == 277) )
                    	{
                    	    alt88 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d88s0 =
                    	        new NoViableAltException("", 88, 0, input);

                    	    throw nvae_d88s0;
                    	}
                    	switch (alt88) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:57: predefined_type
                    	        {
                    	        	PushFollow(FOLLOW_predefined_type_in_type5126);
                    	        	predefined_type315 = predefined_type();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type315.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:75: type_name
                    	        {
                    	        	PushFollow(FOLLOW_type_name_in_type5130);
                    	        	type_name316 = type_name();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name316.Tree);

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_rank_specifiers_in_type5135);
                    	rank_specifiers317 = rank_specifiers();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers317.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:106: ( '*' )*
                    	do 
                    	{
                    	    int alt89 = 2;
                    	    int LA89_0 = input.LA(1);

                    	    if ( (LA89_0 == STAR) )
                    	    {
                    	        alt89 = 1;
                    	    }


                    	    switch (alt89) 
                    		{
                    			case 1 :
                    			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:106: '*'
                    			    {
                    			    	char_literal318=(IToken)Match(input,STAR,FOLLOW_STAR_in_type5139); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal318_tree = (object)adaptor.Create(char_literal318);
                    			    		adaptor.AddChild(root_0, char_literal318_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop89;
                    	    }
                    	} while (true);

                    	loop89:
                    		;	// Stops C# compiler whining that label 'loop89' has no statements


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:53: ( predefined_type | type_name )
                    	int alt90 = 2;
                    	int LA90_0 = input.LA(1);

                    	if ( (LA90_0 == OBJECT || (LA90_0 >= BOOL && LA90_0 <= DOUBLE) || (LA90_0 >= 251 && LA90_0 <= 254) || (LA90_0 >= 275 && LA90_0 <= 276)) )
                    	{
                    	    alt90 = 1;
                    	}
                    	else if ( (LA90_0 == IDENTIFIER || (LA90_0 >= ELIF && LA90_0 <= UNDEF) || LA90_0 == 195 || LA90_0 == 221 || (LA90_0 >= 224 && LA90_0 <= 239) || (LA90_0 >= 241 && LA90_0 <= 244) || (LA90_0 >= 247 && LA90_0 <= 250) || LA90_0 == 256 || (LA90_0 >= 263 && LA90_0 <= 264) || LA90_0 == 274 || LA90_0 == 277) )
                    	{
                    	    alt90 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d90s0 =
                    	        new NoViableAltException("", 90, 0, input);

                    	    throw nvae_d90s0;
                    	}
                    	switch (alt90) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:54: predefined_type
                    	        {
                    	        	PushFollow(FOLLOW_predefined_type_in_type5168);
                    	        	predefined_type319 = predefined_type();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type319.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:72: type_name
                    	        {
                    	        	PushFollow(FOLLOW_type_name_in_type5172);
                    	        	type_name320 = type_name();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name320.Tree);

                    	        }
                    	        break;

                    	}

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:85: ( ( '*' )+ | '?' )
                    	int alt92 = 2;
                    	int LA92_0 = input.LA(1);

                    	if ( (LA92_0 == STAR) )
                    	{
                    	    alt92 = 1;
                    	}
                    	else if ( (LA92_0 == 220) )
                    	{
                    	    alt92 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d92s0 =
                    	        new NoViableAltException("", 92, 0, input);

                    	    throw nvae_d92s0;
                    	}
                    	switch (alt92) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:86: ( '*' )+
                    	        {
                    	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:86: ( '*' )+
                    	        	int cnt91 = 0;
                    	        	do 
                    	        	{
                    	        	    int alt91 = 2;
                    	        	    int LA91_0 = input.LA(1);

                    	        	    if ( (LA91_0 == STAR) )
                    	        	    {
                    	        	        alt91 = 1;
                    	        	    }


                    	        	    switch (alt91) 
                    	        		{
                    	        			case 1 :
                    	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:86: '*'
                    	        			    {
                    	        			    	char_literal321=(IToken)Match(input,STAR,FOLLOW_STAR_in_type5178); if (state.failed) return retval;
                    	        			    	if ( state.backtracking == 0 )
                    	        			    	{char_literal321_tree = (object)adaptor.Create(char_literal321);
                    	        			    		adaptor.AddChild(root_0, char_literal321_tree);
                    	        			    	}

                    	        			    }
                    	        			    break;

                    	        			default:
                    	        			    if ( cnt91 >= 1 ) goto loop91;
                    	        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        		            EarlyExitException eee91 =
                    	        		                new EarlyExitException(91, input);
                    	        		            throw eee91;
                    	        	    }
                    	        	    cnt91++;
                    	        	} while (true);

                    	        	loop91:
                    	        		;	// Stops C# compiler whining that label 'loop91' has no statements


                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:93: '?'
                    	        {
                    	        	char_literal322=(IToken)Match(input,220,FOLLOW_220_in_type5183); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{char_literal322_tree = (object)adaptor.Create(char_literal322);
                    	        		adaptor.AddChild(root_0, char_literal322_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:550:4: ( predefined_type | type_name )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:550:4: ( predefined_type | type_name )
                    	int alt93 = 2;
                    	int LA93_0 = input.LA(1);

                    	if ( (LA93_0 == OBJECT || (LA93_0 >= BOOL && LA93_0 <= DOUBLE) || (LA93_0 >= 251 && LA93_0 <= 254) || (LA93_0 >= 275 && LA93_0 <= 276)) )
                    	{
                    	    alt93 = 1;
                    	}
                    	else if ( (LA93_0 == IDENTIFIER || (LA93_0 >= ELIF && LA93_0 <= UNDEF) || LA93_0 == 195 || LA93_0 == 221 || (LA93_0 >= 224 && LA93_0 <= 239) || (LA93_0 >= 241 && LA93_0 <= 244) || (LA93_0 >= 247 && LA93_0 <= 250) || LA93_0 == 256 || (LA93_0 >= 263 && LA93_0 <= 264) || LA93_0 == 274 || LA93_0 == 277) )
                    	{
                    	    alt93 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d93s0 =
                    	        new NoViableAltException("", 93, 0, input);

                    	    throw nvae_d93s0;
                    	}
                    	switch (alt93) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:550:5: predefined_type
                    	        {
                    	        	PushFollow(FOLLOW_predefined_type_in_type5190);
                    	        	predefined_type323 = predefined_type();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type323.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:550:23: type_name
                    	        {
                    	        	PushFollow(FOLLOW_type_name_in_type5194);
                    	        	type_name324 = type_name();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name324.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:551:4: 'void' ( '*' )+
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal325=(IToken)Match(input,206,FOLLOW_206_in_type5200); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal325_tree = (object)adaptor.Create(string_literal325);
                    		adaptor.AddChild(root_0, string_literal325_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:551:11: ( '*' )+
                    	int cnt94 = 0;
                    	do 
                    	{
                    	    int alt94 = 2;
                    	    int LA94_0 = input.LA(1);

                    	    if ( (LA94_0 == STAR) )
                    	    {
                    	        alt94 = 1;
                    	    }


                    	    switch (alt94) 
                    		{
                    			case 1 :
                    			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:551:11: '*'
                    			    {
                    			    	char_literal326=(IToken)Match(input,STAR,FOLLOW_STAR_in_type5202); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal326_tree = (object)adaptor.Create(char_literal326);
                    			    		adaptor.AddChild(root_0, char_literal326_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt94 >= 1 ) goto loop94;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee94 =
                    		                new EarlyExitException(94, input);
                    		            throw eee94;
                    	    }
                    	    cnt94++;
                    	} while (true);

                    	loop94:
                    		;	// Stops C# compiler whining that label 'loop94' has no statements


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 83, type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type"

    public class non_nullable_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "non_nullable_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:553:8: public non_nullable_type : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ );
    public csParser.non_nullable_type_return non_nullable_type() // throws RecognitionException [1]
    {   
        csParser.non_nullable_type_return retval = new csParser.non_nullable_type_return();
        retval.start = input.LT(1);
        int non_nullable_type_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal330 = null;
        IToken char_literal331 = null;
        IToken string_literal332 = null;
        IToken char_literal333 = null;
        csParser.predefined_type_return predefined_type327 = default(csParser.predefined_type_return);

        csParser.type_name_return type_name328 = default(csParser.type_name_return);

        csParser.rank_specifiers_return rank_specifiers329 = default(csParser.rank_specifiers_return);


        object char_literal330_tree=null;
        object char_literal331_tree=null;
        object string_literal332_tree=null;
        object char_literal333_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 84) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:553:25: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ )
            int alt102 = 2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0 == OBJECT || (LA102_0 >= BOOL && LA102_0 <= IDENTIFIER) || (LA102_0 >= ELIF && LA102_0 <= UNDEF) || LA102_0 == 195 || LA102_0 == 221 || (LA102_0 >= 224 && LA102_0 <= 239) || (LA102_0 >= 241 && LA102_0 <= 244) || (LA102_0 >= 247 && LA102_0 <= 254) || LA102_0 == 256 || (LA102_0 >= 263 && LA102_0 <= 264) || (LA102_0 >= 274 && LA102_0 <= 277)) )
            {
                alt102 = 1;
            }
            else if ( (LA102_0 == 206) )
            {
                alt102 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d102s0 =
                    new NoViableAltException("", 102, 0, input);

                throw nvae_d102s0;
            }
            switch (alt102) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:554:2: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:554:2: ( predefined_type | type_name )
                    	int alt96 = 2;
                    	int LA96_0 = input.LA(1);

                    	if ( (LA96_0 == OBJECT || (LA96_0 >= BOOL && LA96_0 <= DOUBLE) || (LA96_0 >= 251 && LA96_0 <= 254) || (LA96_0 >= 275 && LA96_0 <= 276)) )
                    	{
                    	    alt96 = 1;
                    	}
                    	else if ( (LA96_0 == IDENTIFIER || (LA96_0 >= ELIF && LA96_0 <= UNDEF) || LA96_0 == 195 || LA96_0 == 221 || (LA96_0 >= 224 && LA96_0 <= 239) || (LA96_0 >= 241 && LA96_0 <= 244) || (LA96_0 >= 247 && LA96_0 <= 250) || LA96_0 == 256 || (LA96_0 >= 263 && LA96_0 <= 264) || LA96_0 == 274 || LA96_0 == 277) )
                    	{
                    	    alt96 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d96s0 =
                    	        new NoViableAltException("", 96, 0, input);

                    	    throw nvae_d96s0;
                    	}
                    	switch (alt96) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:554:3: predefined_type
                    	        {
                    	        	PushFollow(FOLLOW_predefined_type_in_non_nullable_type5215);
                    	        	predefined_type327 = predefined_type();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type327.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:554:21: type_name
                    	        {
                    	        	PushFollow(FOLLOW_type_name_in_non_nullable_type5219);
                    	        	type_name328 = type_name();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name328.Tree);

                    	        }
                    	        break;

                    	}

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:555:3: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
                    	int alt100 = 2;
                    	int LA100_0 = input.LA(1);

                    	if ( (LA100_0 == OPEN_BRACKET) )
                    	{
                    	    alt100 = 1;
                    	}
                    	else if ( (LA100_0 == EOF || LA100_0 == CLOSE_BRACKET || LA100_0 == CLOSE_BRACE || LA100_0 == NULL_COALESCE || (LA100_0 >= LOG_OR && LA100_0 <= GTE) || LA100_0 == STAR || LA100_0 == COMMA || LA100_0 == IDENTIFIER || LA100_0 == GT || (LA100_0 >= ELIF && LA100_0 <= RPAREN) || LA100_0 == 195 || LA100_0 == 211 || (LA100_0 >= 220 && LA100_0 <= 239) || (LA100_0 >= 241 && LA100_0 <= 244) || (LA100_0 >= 247 && LA100_0 <= 250) || LA100_0 == 256 || (LA100_0 >= 263 && LA100_0 <= 264) || LA100_0 == 274 || LA100_0 == 277) )
                    	{
                    	    alt100 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d100s0 =
                    	        new NoViableAltException("", 100, 0, input);

                    	    throw nvae_d100s0;
                    	}
                    	switch (alt100) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:555:7: rank_specifiers ( '*' )*
                    	        {
                    	        	PushFollow(FOLLOW_rank_specifiers_in_non_nullable_type5228);
                    	        	rank_specifiers329 = rank_specifiers();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers329.Tree);
                    	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:555:25: ( '*' )*
                    	        	do 
                    	        	{
                    	        	    int alt97 = 2;
                    	        	    int LA97_0 = input.LA(1);

                    	        	    if ( (LA97_0 == STAR) )
                    	        	    {
                    	        	        alt97 = 1;
                    	        	    }


                    	        	    switch (alt97) 
                    	        		{
                    	        			case 1 :
                    	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:555:25: '*'
                    	        			    {
                    	        			    	char_literal330=(IToken)Match(input,STAR,FOLLOW_STAR_in_non_nullable_type5232); if (state.failed) return retval;
                    	        			    	if ( state.backtracking == 0 )
                    	        			    	{char_literal330_tree = (object)adaptor.Create(char_literal330);
                    	        			    		adaptor.AddChild(root_0, char_literal330_tree);
                    	        			    	}

                    	        			    }
                    	        			    break;

                    	        			default:
                    	        			    goto loop97;
                    	        	    }
                    	        	} while (true);

                    	        	loop97:
                    	        		;	// Stops C# compiler whining that label 'loop97' has no statements


                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:556:6: ( ( '*' )+ )?
                    	        {
                    	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:556:6: ( ( '*' )+ )?
                    	        	int alt99 = 2;
                    	        	int LA99_0 = input.LA(1);

                    	        	if ( (LA99_0 == STAR) )
                    	        	{
                    	        	    alt99 = 1;
                    	        	}
                    	        	switch (alt99) 
                    	        	{
                    	        	    case 1 :
                    	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:556:7: ( '*' )+
                    	        	        {
                    	        	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:556:7: ( '*' )+
                    	        	        	int cnt98 = 0;
                    	        	        	do 
                    	        	        	{
                    	        	        	    int alt98 = 2;
                    	        	        	    int LA98_0 = input.LA(1);

                    	        	        	    if ( (LA98_0 == STAR) )
                    	        	        	    {
                    	        	        	        alt98 = 1;
                    	        	        	    }


                    	        	        	    switch (alt98) 
                    	        	        		{
                    	        	        			case 1 :
                    	        	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:556:7: '*'
                    	        	        			    {
                    	        	        			    	char_literal331=(IToken)Match(input,STAR,FOLLOW_STAR_in_non_nullable_type5241); if (state.failed) return retval;
                    	        	        			    	if ( state.backtracking == 0 )
                    	        	        			    	{char_literal331_tree = (object)adaptor.Create(char_literal331);
                    	        	        			    		adaptor.AddChild(root_0, char_literal331_tree);
                    	        	        			    	}

                    	        	        			    }
                    	        	        			    break;

                    	        	        			default:
                    	        	        			    if ( cnt98 >= 1 ) goto loop98;
                    	        	        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        	        		            EarlyExitException eee98 =
                    	        	        		                new EarlyExitException(98, input);
                    	        	        		            throw eee98;
                    	        	        	    }
                    	        	        	    cnt98++;
                    	        	        	} while (true);

                    	        	        	loop98:
                    	        	        		;	// Stops C# compiler whining that label 'loop98' has no statements


                    	        	        }
                    	        	        break;

                    	        	}


                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:558:4: 'void' ( '*' )+
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal332=(IToken)Match(input,206,FOLLOW_206_in_non_nullable_type5253); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal332_tree = (object)adaptor.Create(string_literal332);
                    		adaptor.AddChild(root_0, string_literal332_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:558:13: ( '*' )+
                    	int cnt101 = 0;
                    	do 
                    	{
                    	    int alt101 = 2;
                    	    int LA101_0 = input.LA(1);

                    	    if ( (LA101_0 == STAR) )
                    	    {
                    	        alt101 = 1;
                    	    }


                    	    switch (alt101) 
                    		{
                    			case 1 :
                    			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:558:13: '*'
                    			    {
                    			    	char_literal333=(IToken)Match(input,STAR,FOLLOW_STAR_in_non_nullable_type5257); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal333_tree = (object)adaptor.Create(char_literal333);
                    			    		adaptor.AddChild(root_0, char_literal333_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt101 >= 1 ) goto loop101;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee101 =
                    		                new EarlyExitException(101, input);
                    		            throw eee101;
                    	    }
                    	    cnt101++;
                    	} while (true);

                    	loop101:
                    		;	// Stops C# compiler whining that label 'loop101' has no statements


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 84, non_nullable_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "non_nullable_type"

    public class non_array_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "non_array_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:560:8: public non_array_type : type ;
    public csParser.non_array_type_return non_array_type() // throws RecognitionException [1]
    {   
        csParser.non_array_type_return retval = new csParser.non_array_type_return();
        retval.start = input.LT(1);
        int non_array_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type334 = default(csParser.type_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 85) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:560:22: ( type )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:561:2: type
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_in_non_array_type5270);
            	type334 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type334.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 85, non_array_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "non_array_type"

    public class array_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "array_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:562:8: public array_type : type ;
    public csParser.array_type_return array_type() // throws RecognitionException [1]
    {   
        csParser.array_type_return retval = new csParser.array_type_return();
        retval.start = input.LT(1);
        int array_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type335 = default(csParser.type_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 86) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:562:18: ( type )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:563:2: type
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_in_array_type5279);
            	type335 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type335.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 86, array_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "array_type"

    public class unmanaged_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unmanaged_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:564:8: public unmanaged_type : type ;
    public csParser.unmanaged_type_return unmanaged_type() // throws RecognitionException [1]
    {   
        csParser.unmanaged_type_return retval = new csParser.unmanaged_type_return();
        retval.start = input.LT(1);
        int unmanaged_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type336 = default(csParser.type_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 87) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:564:22: ( type )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:565:2: type
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_in_unmanaged_type5288);
            	type336 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type336.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 87, unmanaged_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unmanaged_type"

    public class class_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "class_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:566:8: public class_type : type ;
    public csParser.class_type_return class_type() // throws RecognitionException [1]
    {   
        csParser.class_type_return retval = new csParser.class_type_return();
        retval.start = input.LT(1);
        int class_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type337 = default(csParser.type_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 88) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:566:18: ( type )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:567:2: type
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_in_class_type5297);
            	type337 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type337.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 88, class_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_type"

    public class pointer_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "pointer_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:568:8: public pointer_type : type ;
    public csParser.pointer_type_return pointer_type() // throws RecognitionException [1]
    {   
        csParser.pointer_type_return retval = new csParser.pointer_type_return();
        retval.start = input.LT(1);
        int pointer_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type338 = default(csParser.type_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 89) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:568:20: ( type )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:569:2: type
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_in_pointer_type5306);
            	type338 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type338.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 89, pointer_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pointer_type"

    public class block_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "block"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:575:8: public block : ( ';' | '{' ( statement_list )? '}' );
    public csParser.block_return block() // throws RecognitionException [1]
    {   
        csParser.block_return retval = new csParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal339 = null;
        IToken char_literal340 = null;
        IToken char_literal342 = null;
        csParser.statement_list_return statement_list341 = default(csParser.statement_list_return);


        object char_literal339_tree=null;
        object char_literal340_tree=null;
        object char_literal342_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 90) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:575:13: ( ';' | '{' ( statement_list )? '}' )
            int alt104 = 2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0 == SEMI) )
            {
                alt104 = 1;
            }
            else if ( (LA104_0 == OPEN_BRACE) )
            {
                alt104 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d104s0 =
                    new NoViableAltException("", 104, 0, input);

                throw nvae_d104s0;
            }
            switch (alt104) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:576:2: ';'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal339=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_block5320); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal339_tree = (object)adaptor.Create(char_literal339);
                    		adaptor.AddChild(root_0, char_literal339_tree);
                    	}

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:577:4: '{' ( statement_list )? '}'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal340=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_block5325); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal340_tree = (object)adaptor.Create(char_literal340);
                    		adaptor.AddChild(root_0, char_literal340_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:577:10: ( statement_list )?
                    	int alt103 = 2;
                    	int LA103_0 = input.LA(1);

                    	if ( ((LA103_0 >= MONONOT && LA103_0 <= MONOTWIDDLE) || (LA103_0 >= RETURN && LA103_0 <= TRY) || LA103_0 == THROW || (LA103_0 >= BREAK && LA103_0 <= FOREACH) || LA103_0 == OPEN_BRACE || LA103_0 == LPAREN || LA103_0 == IF || LA103_0 == BIT_AND || (LA103_0 >= PLUS && LA103_0 <= MINUS) || LA103_0 == STAR || (LA103_0 >= BOOL && LA103_0 <= NULL) || (LA103_0 >= USING && LA103_0 <= SEMI) || LA103_0 == 195 || (LA103_0 >= 197 && LA103_0 <= 198) || (LA103_0 >= 205 && LA103_0 <= 207) || (LA103_0 >= 209 && LA103_0 <= 210) || (LA103_0 >= 214 && LA103_0 <= 219) || LA103_0 == 221 || (LA103_0 >= 224 && LA103_0 <= 239) || (LA103_0 >= 241 && LA103_0 <= 244) || (LA103_0 >= 247 && LA103_0 <= 254) || LA103_0 == 256 || (LA103_0 >= 262 && LA103_0 <= 264) || LA103_0 == 266 || (LA103_0 >= 268 && LA103_0 <= 277)) )
                    	{
                    	    alt103 = 1;
                    	}
                    	switch (alt103) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:577:10: statement_list
                    	        {
                    	        	PushFollow(FOLLOW_statement_list_in_block5329);
                    	        	statement_list341 = statement_list();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_list341.Tree);

                    	        }
                    	        break;

                    	}

                    	char_literal342=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_block5334); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal342_tree = (object)adaptor.Create(char_literal342);
                    		adaptor.AddChild(root_0, char_literal342_tree);
                    	}

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 90, block_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "block"

    public class statement_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "statement_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:578:8: public statement_list : ( statement )+ ;
    public csParser.statement_list_return statement_list() // throws RecognitionException [1]
    {   
        csParser.statement_list_return retval = new csParser.statement_list_return();
        retval.start = input.LT(1);
        int statement_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.statement_return statement343 = default(csParser.statement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 91) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:578:22: ( ( statement )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:579:2: ( statement )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:579:2: ( statement )+
            	int cnt105 = 0;
            	do 
            	{
            	    int alt105 = 2;
            	    int LA105_0 = input.LA(1);

            	    if ( (LA105_0 == 217) )
            	    {
            	        int LA105_2 = input.LA(2);

            	        if ( (LA105_2 == LPAREN) )
            	        {
            	            alt105 = 1;
            	        }


            	    }
            	    else if ( ((LA105_0 >= MONONOT && LA105_0 <= MONOTWIDDLE) || (LA105_0 >= RETURN && LA105_0 <= TRY) || LA105_0 == THROW || (LA105_0 >= BREAK && LA105_0 <= FOREACH) || LA105_0 == OPEN_BRACE || LA105_0 == LPAREN || LA105_0 == IF || LA105_0 == BIT_AND || (LA105_0 >= PLUS && LA105_0 <= MINUS) || LA105_0 == STAR || (LA105_0 >= BOOL && LA105_0 <= NULL) || (LA105_0 >= USING && LA105_0 <= SEMI) || LA105_0 == 195 || (LA105_0 >= 197 && LA105_0 <= 198) || (LA105_0 >= 205 && LA105_0 <= 207) || (LA105_0 >= 209 && LA105_0 <= 210) || (LA105_0 >= 214 && LA105_0 <= 216) || (LA105_0 >= 218 && LA105_0 <= 219) || LA105_0 == 221 || (LA105_0 >= 224 && LA105_0 <= 239) || (LA105_0 >= 241 && LA105_0 <= 244) || (LA105_0 >= 247 && LA105_0 <= 254) || LA105_0 == 256 || (LA105_0 >= 262 && LA105_0 <= 264) || LA105_0 == 266 || (LA105_0 >= 268 && LA105_0 <= 277)) )
            	    {
            	        alt105 = 1;
            	    }


            	    switch (alt105) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:579:2: statement
            			    {
            			    	PushFollow(FOLLOW_statement_in_statement_list5343);
            			    	statement343 = statement();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement343.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt105 >= 1 ) goto loop105;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee105 =
            		                new EarlyExitException(105, input);
            		            throw eee105;
            	    }
            	    cnt105++;
            	} while (true);

            	loop105:
            		;	// Stops C# compiler whining that label 'loop105' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 91, statement_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement_list"

    public class expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:584:8: public expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
    public csParser.expression_return expression() // throws RecognitionException [1]
    {   
        csParser.expression_return retval = new csParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.assignment_return assignment344 = default(csParser.assignment_return);

        csParser.non_assignment_expression_return non_assignment_expression345 = default(csParser.non_assignment_expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 92) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:584:18: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )
            int alt106 = 2;
            alt106 = dfa106.Predict(input);
            switch (alt106) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:585:2: ( unary_expression assignment_operator )=> assignment
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_assignment_in_expression5370);
                    	assignment344 = assignment();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignment344.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:586:4: non_assignment_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_non_assignment_expression_in_expression5376);
                    	non_assignment_expression345 = non_assignment_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_assignment_expression345.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 92, expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public class expression_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "expression_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:588:8: public expression_list : expression ( ',' expression )* ;
    public csParser.expression_list_return expression_list() // throws RecognitionException [1]
    {   
        csParser.expression_list_return retval = new csParser.expression_list_return();
        retval.start = input.LT(1);
        int expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal347 = null;
        csParser.expression_return expression346 = default(csParser.expression_return);

        csParser.expression_return expression348 = default(csParser.expression_return);


        object char_literal347_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 93) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:588:23: ( expression ( ',' expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:589:2: expression ( ',' expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_expression_list5387);
            	expression346 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression346.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:589:14: ( ',' expression )*
            	do 
            	{
            	    int alt107 = 2;
            	    int LA107_0 = input.LA(1);

            	    if ( (LA107_0 == COMMA) )
            	    {
            	        alt107 = 1;
            	    }


            	    switch (alt107) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:589:15: ',' expression
            			    {
            			    	char_literal347=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_expression_list5391); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal347_tree = (object)adaptor.Create(char_literal347);
            			    		adaptor.AddChild(root_0, char_literal347_tree);
            			    	}
            			    	PushFollow(FOLLOW_expression_in_expression_list5395);
            			    	expression348 = expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression348.Tree);

            			    }
            			    break;

            			default:
            			    goto loop107;
            	    }
            	} while (true);

            	loop107:
            		;	// Stops C# compiler whining that label 'loop107' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 93, expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression_list"

    public class assignment_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "assignment"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:590:8: public assignment : unary_expression assignment_operator expression ;
    public csParser.assignment_return assignment() // throws RecognitionException [1]
    {   
        csParser.assignment_return retval = new csParser.assignment_return();
        retval.start = input.LT(1);
        int assignment_StartIndex = input.Index;
        object root_0 = null;

        csParser.unary_expression_return unary_expression349 = default(csParser.unary_expression_return);

        csParser.assignment_operator_return assignment_operator350 = default(csParser.assignment_operator_return);

        csParser.expression_return expression351 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 94) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:590:18: ( unary_expression assignment_operator expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:591:2: unary_expression assignment_operator expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_unary_expression_in_assignment5407);
            	unary_expression349 = unary_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression349.Tree);
            	PushFollow(FOLLOW_assignment_operator_in_assignment5411);
            	assignment_operator350 = assignment_operator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignment_operator350.Tree);
            	PushFollow(FOLLOW_expression_in_assignment5415);
            	expression351 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression351.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 94, assignment_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignment"

    public class unary_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unary_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:592:8: public unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
    public csParser.unary_expression_return unary_expression() // throws RecognitionException [1]
    {   
        csParser.unary_expression_return retval = new csParser.unary_expression_return();
        retval.start = input.LT(1);
        int unary_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal354 = null;
        IToken char_literal356 = null;
        IToken char_literal358 = null;
        IToken char_literal360 = null;
        csParser.cast_expression_return cast_expression352 = default(csParser.cast_expression_return);

        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression353 = default(csParser.primary_or_array_creation_expression_return);

        csParser.unary_expression_return unary_expression355 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression357 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression359 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression361 = default(csParser.unary_expression_return);

        csParser.pre_increment_expression_return pre_increment_expression362 = default(csParser.pre_increment_expression_return);

        csParser.pre_decrement_expression_return pre_decrement_expression363 = default(csParser.pre_decrement_expression_return);

        csParser.pointer_indirection_expression_return pointer_indirection_expression364 = default(csParser.pointer_indirection_expression_return);

        csParser.addressof_expression_return addressof_expression365 = default(csParser.addressof_expression_return);


        object char_literal354_tree=null;
        object char_literal356_tree=null;
        object char_literal358_tree=null;
        object char_literal360_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 95) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:592:24: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )
            int alt108 = 10;
            alt108 = dfa108.Predict(input);
            switch (alt108) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:594:2: ( cast_expression )=> cast_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_cast_expression_in_unary_expression5434);
                    	cast_expression352 = cast_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, cast_expression352.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:595:4: primary_or_array_creation_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_primary_or_array_creation_expression_in_unary_expression5439);
                    	primary_or_array_creation_expression353 = primary_or_array_creation_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_or_array_creation_expression353.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:596:4: '+' unary_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal354=(IToken)Match(input,PLUS,FOLLOW_PLUS_in_unary_expression5444); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal354_tree = (object)adaptor.Create(char_literal354);
                    		adaptor.AddChild(root_0, char_literal354_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression5448);
                    	unary_expression355 = unary_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression355.Tree);

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:597:4: '-' unary_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal356=(IToken)Match(input,MINUS,FOLLOW_MINUS_in_unary_expression5454); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal356_tree = (object)adaptor.Create(char_literal356);
                    		adaptor.AddChild(root_0, char_literal356_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression5458);
                    	unary_expression357 = unary_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression357.Tree);

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:598:4: '!' unary_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal358=(IToken)Match(input,MONONOT,FOLLOW_MONONOT_in_unary_expression5464); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal358_tree = (object)adaptor.Create(char_literal358);
                    		adaptor.AddChild(root_0, char_literal358_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression5468);
                    	unary_expression359 = unary_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression359.Tree);

                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:599:4: '~' unary_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal360=(IToken)Match(input,MONOTWIDDLE,FOLLOW_MONOTWIDDLE_in_unary_expression5474); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal360_tree = (object)adaptor.Create(char_literal360);
                    		adaptor.AddChild(root_0, char_literal360_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression5478);
                    	unary_expression361 = unary_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression361.Tree);

                    }
                    break;
                case 7 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:600:4: pre_increment_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_pre_increment_expression_in_unary_expression5484);
                    	pre_increment_expression362 = pre_increment_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pre_increment_expression362.Tree);

                    }
                    break;
                case 8 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:601:4: pre_decrement_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_pre_decrement_expression_in_unary_expression5490);
                    	pre_decrement_expression363 = pre_decrement_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pre_decrement_expression363.Tree);

                    }
                    break;
                case 9 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:602:4: pointer_indirection_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression5496);
                    	pointer_indirection_expression364 = pointer_indirection_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pointer_indirection_expression364.Tree);

                    }
                    break;
                case 10 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:603:4: addressof_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_addressof_expression_in_unary_expression5501);
                    	addressof_expression365 = addressof_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, addressof_expression365.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 95, unary_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public class cast_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "cast_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:605:8: public cast_expression : '(' type ')' unary_expression ;
    public csParser.cast_expression_return cast_expression() // throws RecognitionException [1]
    {   
        csParser.cast_expression_return retval = new csParser.cast_expression_return();
        retval.start = input.LT(1);
        int cast_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal366 = null;
        IToken char_literal368 = null;
        csParser.type_return type367 = default(csParser.type_return);

        csParser.unary_expression_return unary_expression369 = default(csParser.unary_expression_return);


        object char_literal366_tree=null;
        object char_literal368_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 96) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:605:23: ( '(' type ')' unary_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:606:2: '(' type ')' unary_expression
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal366=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_cast_expression5513); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal366_tree = (object)adaptor.Create(char_literal366);
            		adaptor.AddChild(root_0, char_literal366_tree);
            	}
            	PushFollow(FOLLOW_type_in_cast_expression5517);
            	type367 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type367.Tree);
            	char_literal368=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_cast_expression5521); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal368_tree = (object)adaptor.Create(char_literal368);
            		adaptor.AddChild(root_0, char_literal368_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_cast_expression5525);
            	unary_expression369 = unary_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression369.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 96, cast_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "cast_expression"

    public class assignment_operator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "assignment_operator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:607:8: public assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
    public csParser.assignment_operator_return assignment_operator() // throws RecognitionException [1]
    {   
        csParser.assignment_operator_return retval = new csParser.assignment_operator_return();
        retval.start = input.LT(1);
        int assignment_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal370 = null;
        IToken string_literal371 = null;
        IToken string_literal372 = null;
        IToken string_literal373 = null;
        IToken string_literal374 = null;
        IToken string_literal375 = null;
        IToken string_literal376 = null;
        IToken string_literal377 = null;
        IToken string_literal378 = null;
        IToken string_literal379 = null;
        IToken char_literal380 = null;
        IToken string_literal381 = null;

        object char_literal370_tree=null;
        object string_literal371_tree=null;
        object string_literal372_tree=null;
        object string_literal373_tree=null;
        object string_literal374_tree=null;
        object string_literal375_tree=null;
        object string_literal376_tree=null;
        object string_literal377_tree=null;
        object string_literal378_tree=null;
        object string_literal379_tree=null;
        object char_literal380_tree=null;
        object string_literal381_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 97) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:607:27: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
            int alt109 = 11;
            switch ( input.LA(1) ) 
            {
            case ASSIGN:
            	{
                alt109 = 1;
                }
                break;
            case PLUS_ASSIGN:
            	{
                alt109 = 2;
                }
                break;
            case MINUS_ASSIGN:
            	{
                alt109 = 3;
                }
                break;
            case STAR_ASSIGN:
            	{
                alt109 = 4;
                }
                break;
            case DIV_ASSIGN:
            	{
                alt109 = 5;
                }
                break;
            case MOD_ASSIGN:
            	{
                alt109 = 6;
                }
                break;
            case BIT_AND_ASSIGN:
            	{
                alt109 = 7;
                }
                break;
            case BIT_OR_ASSIGN:
            	{
                alt109 = 8;
                }
                break;
            case BIT_XOR_ASSIGN:
            	{
                alt109 = 9;
                }
                break;
            case LEFT_SHIFT_ASSIGN:
            	{
                alt109 = 10;
                }
                break;
            case GT:
            	{
                alt109 = 11;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d109s0 =
            	        new NoViableAltException("", 109, 0, input);

            	    throw nvae_d109s0;
            }

            switch (alt109) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:2: '='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal370=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_operator5535); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal370_tree = (object)adaptor.Create(char_literal370);
                    		adaptor.AddChild(root_0, char_literal370_tree);
                    	}

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:8: '+='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal371=(IToken)Match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignment_operator5539); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal371_tree = (object)adaptor.Create(string_literal371);
                    		adaptor.AddChild(root_0, string_literal371_tree);
                    	}

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:15: '-='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal372=(IToken)Match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignment_operator5543); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal372_tree = (object)adaptor.Create(string_literal372);
                    		adaptor.AddChild(root_0, string_literal372_tree);
                    	}

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:22: '*='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal373=(IToken)Match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignment_operator5547); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal373_tree = (object)adaptor.Create(string_literal373);
                    		adaptor.AddChild(root_0, string_literal373_tree);
                    	}

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:29: '/='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal374=(IToken)Match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignment_operator5551); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal374_tree = (object)adaptor.Create(string_literal374);
                    		adaptor.AddChild(root_0, string_literal374_tree);
                    	}

                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:36: '%='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal375=(IToken)Match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignment_operator5555); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal375_tree = (object)adaptor.Create(string_literal375);
                    		adaptor.AddChild(root_0, string_literal375_tree);
                    	}

                    }
                    break;
                case 7 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:43: '&='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal376=(IToken)Match(input,BIT_AND_ASSIGN,FOLLOW_BIT_AND_ASSIGN_in_assignment_operator5559); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal376_tree = (object)adaptor.Create(string_literal376);
                    		adaptor.AddChild(root_0, string_literal376_tree);
                    	}

                    }
                    break;
                case 8 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:50: '|='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal377=(IToken)Match(input,BIT_OR_ASSIGN,FOLLOW_BIT_OR_ASSIGN_in_assignment_operator5563); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal377_tree = (object)adaptor.Create(string_literal377);
                    		adaptor.AddChild(root_0, string_literal377_tree);
                    	}

                    }
                    break;
                case 9 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:57: '^='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal378=(IToken)Match(input,BIT_XOR_ASSIGN,FOLLOW_BIT_XOR_ASSIGN_in_assignment_operator5567); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal378_tree = (object)adaptor.Create(string_literal378);
                    		adaptor.AddChild(root_0, string_literal378_tree);
                    	}

                    }
                    break;
                case 10 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:64: '<<='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal379=(IToken)Match(input,LEFT_SHIFT_ASSIGN,FOLLOW_LEFT_SHIFT_ASSIGN_in_assignment_operator5571); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal379_tree = (object)adaptor.Create(string_literal379);
                    		adaptor.AddChild(root_0, string_literal379_tree);
                    	}

                    }
                    break;
                case 11 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:608:72: '>' '>='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal380=(IToken)Match(input,GT,FOLLOW_GT_in_assignment_operator5575); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal380_tree = (object)adaptor.Create(char_literal380);
                    		adaptor.AddChild(root_0, char_literal380_tree);
                    	}
                    	string_literal381=(IToken)Match(input,GTE,FOLLOW_GTE_in_assignment_operator5577); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal381_tree = (object)adaptor.Create(string_literal381);
                    		adaptor.AddChild(root_0, string_literal381_tree);
                    	}

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 97, assignment_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignment_operator"

    public class pre_increment_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "pre_increment_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:609:8: public pre_increment_expression : '++' unary_expression ;
    public csParser.pre_increment_expression_return pre_increment_expression() // throws RecognitionException [1]
    {   
        csParser.pre_increment_expression_return retval = new csParser.pre_increment_expression_return();
        retval.start = input.LT(1);
        int pre_increment_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal382 = null;
        csParser.unary_expression_return unary_expression383 = default(csParser.unary_expression_return);


        object string_literal382_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 98) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:609:32: ( '++' unary_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:610:2: '++' unary_expression
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal382=(IToken)Match(input,209,FOLLOW_209_in_pre_increment_expression5588); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal382_tree = (object)adaptor.Create(string_literal382);
            		adaptor.AddChild(root_0, string_literal382_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_pre_increment_expression5592);
            	unary_expression383 = unary_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression383.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 98, pre_increment_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pre_increment_expression"

    public class pre_decrement_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "pre_decrement_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:611:8: public pre_decrement_expression : '--' unary_expression ;
    public csParser.pre_decrement_expression_return pre_decrement_expression() // throws RecognitionException [1]
    {   
        csParser.pre_decrement_expression_return retval = new csParser.pre_decrement_expression_return();
        retval.start = input.LT(1);
        int pre_decrement_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal384 = null;
        csParser.unary_expression_return unary_expression385 = default(csParser.unary_expression_return);


        object string_literal384_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 99) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:611:32: ( '--' unary_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:612:2: '--' unary_expression
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal384=(IToken)Match(input,210,FOLLOW_210_in_pre_decrement_expression5603); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal384_tree = (object)adaptor.Create(string_literal384);
            		adaptor.AddChild(root_0, string_literal384_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_pre_decrement_expression5607);
            	unary_expression385 = unary_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression385.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 99, pre_decrement_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pre_decrement_expression"

    public class pointer_indirection_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "pointer_indirection_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:613:8: public pointer_indirection_expression : '*' unary_expression ;
    public csParser.pointer_indirection_expression_return pointer_indirection_expression() // throws RecognitionException [1]
    {   
        csParser.pointer_indirection_expression_return retval = new csParser.pointer_indirection_expression_return();
        retval.start = input.LT(1);
        int pointer_indirection_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal386 = null;
        csParser.unary_expression_return unary_expression387 = default(csParser.unary_expression_return);


        object char_literal386_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 100) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:613:38: ( '*' unary_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:614:2: '*' unary_expression
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal386=(IToken)Match(input,STAR,FOLLOW_STAR_in_pointer_indirection_expression5617); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal386_tree = (object)adaptor.Create(char_literal386);
            		adaptor.AddChild(root_0, char_literal386_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression5621);
            	unary_expression387 = unary_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression387.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 100, pointer_indirection_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pointer_indirection_expression"

    public class addressof_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "addressof_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:615:8: public addressof_expression : '&' unary_expression ;
    public csParser.addressof_expression_return addressof_expression() // throws RecognitionException [1]
    {   
        csParser.addressof_expression_return retval = new csParser.addressof_expression_return();
        retval.start = input.LT(1);
        int addressof_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal388 = null;
        csParser.unary_expression_return unary_expression389 = default(csParser.unary_expression_return);


        object char_literal388_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 101) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:615:28: ( '&' unary_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:616:2: '&' unary_expression
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal388=(IToken)Match(input,BIT_AND,FOLLOW_BIT_AND_in_addressof_expression5631); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal388_tree = (object)adaptor.Create(char_literal388);
            		adaptor.AddChild(root_0, char_literal388_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_addressof_expression5635);
            	unary_expression389 = unary_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression389.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 101, addressof_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "addressof_expression"

    public class non_assignment_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "non_assignment_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:618:8: public non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
    public csParser.non_assignment_expression_return non_assignment_expression() // throws RecognitionException [1]
    {   
        csParser.non_assignment_expression_return retval = new csParser.non_assignment_expression_return();
        retval.start = input.LT(1);
        int non_assignment_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.lambda_expression_return lambda_expression390 = default(csParser.lambda_expression_return);

        csParser.query_expression_return query_expression391 = default(csParser.query_expression_return);

        csParser.conditional_expression_return conditional_expression392 = default(csParser.conditional_expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 102) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:618:33: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )
            int alt110 = 3;
            alt110 = dfa110.Predict(input);
            switch (alt110) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:620:2: ( anonymous_function_signature '=>' )=> lambda_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_lambda_expression_in_non_assignment_expression5658);
                    	lambda_expression390 = lambda_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, lambda_expression390.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:621:4: ( query_expression )=> query_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_query_expression_in_non_assignment_expression5669);
                    	query_expression391 = query_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_expression391.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:622:4: conditional_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_conditional_expression_in_non_assignment_expression5675);
                    	conditional_expression392 = conditional_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_expression392.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 102, non_assignment_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression"

    public class multiplicative_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "multiplicative_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:629:8: public multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
    public csParser.multiplicative_expression_return multiplicative_expression() // throws RecognitionException [1]
    {   
        csParser.multiplicative_expression_return retval = new csParser.multiplicative_expression_return();
        retval.start = input.LT(1);
        int multiplicative_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set394 = null;
        csParser.unary_expression_return unary_expression393 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression395 = default(csParser.unary_expression_return);


        object set394_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 103) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:629:33: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:630:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_unary_expression_in_multiplicative_expression5691);
            	unary_expression393 = unary_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression393.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:630:19: ( ( '*' | '/' | '%' ) unary_expression )*
            	do 
            	{
            	    int alt111 = 2;
            	    int LA111_0 = input.LA(1);

            	    if ( ((LA111_0 >= DIV && LA111_0 <= STAR)) )
            	    {
            	        alt111 = 1;
            	    }


            	    switch (alt111) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:630:22: ( '*' | '/' | '%' ) unary_expression
            			    {
            			    	set394 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= DIV && input.LA(1) <= STAR) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set394));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	PushFollow(FOLLOW_unary_expression_in_multiplicative_expression5706);
            			    	unary_expression395 = unary_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression395.Tree);

            			    }
            			    break;

            			default:
            			    goto loop111;
            	    }
            	} while (true);

            	loop111:
            		;	// Stops C# compiler whining that label 'loop111' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 103, multiplicative_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"

    public class additive_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "additive_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:631:8: public additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
    public csParser.additive_expression_return additive_expression() // throws RecognitionException [1]
    {   
        csParser.additive_expression_return retval = new csParser.additive_expression_return();
        retval.start = input.LT(1);
        int additive_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set397 = null;
        csParser.multiplicative_expression_return multiplicative_expression396 = default(csParser.multiplicative_expression_return);

        csParser.multiplicative_expression_return multiplicative_expression398 = default(csParser.multiplicative_expression_return);


        object set397_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 104) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:631:27: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:632:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_multiplicative_expression_in_additive_expression5718);
            	multiplicative_expression396 = multiplicative_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplicative_expression396.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:632:28: ( ( '+' | '-' ) multiplicative_expression )*
            	do 
            	{
            	    int alt112 = 2;
            	    int LA112_0 = input.LA(1);

            	    if ( ((LA112_0 >= PLUS && LA112_0 <= MINUS)) )
            	    {
            	        alt112 = 1;
            	    }


            	    switch (alt112) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:632:29: ( '+' | '-' ) multiplicative_expression
            			    {
            			    	set397 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set397));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	PushFollow(FOLLOW_multiplicative_expression_in_additive_expression5729);
            			    	multiplicative_expression398 = multiplicative_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplicative_expression398.Tree);

            			    }
            			    break;

            			default:
            			    goto loop112;
            	    }
            	} while (true);

            	loop112:
            		;	// Stops C# compiler whining that label 'loop112' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 104, additive_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "additive_expression"

    public class shift_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "shift_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:634:8: public shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
    public csParser.shift_expression_return shift_expression() // throws RecognitionException [1]
    {   
        csParser.shift_expression_return retval = new csParser.shift_expression_return();
        retval.start = input.LT(1);
        int shift_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal400 = null;
        IToken char_literal401 = null;
        IToken char_literal402 = null;
        csParser.additive_expression_return additive_expression399 = default(csParser.additive_expression_return);

        csParser.additive_expression_return additive_expression403 = default(csParser.additive_expression_return);


        object string_literal400_tree=null;
        object char_literal401_tree=null;
        object char_literal402_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 105) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:634:24: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:635:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_additive_expression_in_shift_expression5742);
            	additive_expression399 = additive_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, additive_expression399.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:635:22: ( ( '<<' | '>' '>' ) additive_expression )*
            	do 
            	{
            	    int alt114 = 2;
            	    int LA114_0 = input.LA(1);

            	    if ( (LA114_0 == GT) )
            	    {
            	        int LA114_1 = input.LA(2);

            	        if ( (LA114_1 == GT) )
            	        {
            	            alt114 = 1;
            	        }


            	    }
            	    else if ( (LA114_0 == LEFT_SHIFT) )
            	    {
            	        alt114 = 1;
            	    }


            	    switch (alt114) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:635:23: ( '<<' | '>' '>' ) additive_expression
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:635:23: ( '<<' | '>' '>' )
            			    	int alt113 = 2;
            			    	int LA113_0 = input.LA(1);

            			    	if ( (LA113_0 == LEFT_SHIFT) )
            			    	{
            			    	    alt113 = 1;
            			    	}
            			    	else if ( (LA113_0 == GT) )
            			    	{
            			    	    alt113 = 2;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    NoViableAltException nvae_d113s0 =
            			    	        new NoViableAltException("", 113, 0, input);

            			    	    throw nvae_d113s0;
            			    	}
            			    	switch (alt113) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:635:24: '<<'
            			    	        {
            			    	        	string_literal400=(IToken)Match(input,LEFT_SHIFT,FOLLOW_LEFT_SHIFT_in_shift_expression5746); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{string_literal400_tree = (object)adaptor.Create(string_literal400);
            			    	        		adaptor.AddChild(root_0, string_literal400_tree);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:635:29: '>' '>'
            			    	        {
            			    	        	char_literal401=(IToken)Match(input,GT,FOLLOW_GT_in_shift_expression5748); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{char_literal401_tree = (object)adaptor.Create(char_literal401);
            			    	        		adaptor.AddChild(root_0, char_literal401_tree);
            			    	        	}
            			    	        	char_literal402=(IToken)Match(input,GT,FOLLOW_GT_in_shift_expression5750); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{char_literal402_tree = (object)adaptor.Create(char_literal402);
            			    	        		adaptor.AddChild(root_0, char_literal402_tree);
            			    	        	}

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_additive_expression_in_shift_expression5753);
            			    	additive_expression403 = additive_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, additive_expression403.Tree);

            			    }
            			    break;

            			default:
            			    goto loop114;
            	    }
            	} while (true);

            	loop114:
            		;	// Stops C# compiler whining that label 'loop114' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 105, shift_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "shift_expression"

    public class relational_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "relational_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:636:8: public relational_expression : shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* ;
    public csParser.relational_expression_return relational_expression() // throws RecognitionException [1]
    {   
        csParser.relational_expression_return retval = new csParser.relational_expression_return();
        retval.start = input.LT(1);
        int relational_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set405 = null;
        IToken set407 = null;
        csParser.shift_expression_return shift_expression404 = default(csParser.shift_expression_return);

        csParser.shift_expression_return shift_expression406 = default(csParser.shift_expression_return);

        csParser.non_nullable_type_return non_nullable_type408 = default(csParser.non_nullable_type_return);


        object set405_tree=null;
        object set407_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 106) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:636:29: ( shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:637:2: shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_shift_expression_in_relational_expression5765);
            	shift_expression404 = shift_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shift_expression404.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:638:3: ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
            	do 
            	{
            	    int alt115 = 3;
            	    int LA115_0 = input.LA(1);

            	    if ( ((LA115_0 >= LTHAN && LA115_0 <= GTE) || LA115_0 == GT) )
            	    {
            	        alt115 = 1;
            	    }
            	    else if ( ((LA115_0 >= 222 && LA115_0 <= 223)) )
            	    {
            	        alt115 = 2;
            	    }


            	    switch (alt115) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:638:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:638:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:638:6: ( '<' | '>' | '>=' | '<=' ) shift_expression
            			    	{
            			    		set405 = (IToken)input.LT(1);
            			    		if ( (input.LA(1) >= LTHAN && input.LA(1) <= GTE) || input.LA(1) == GT ) 
            			    		{
            			    		    input.Consume();
            			    		    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set405));
            			    		    state.errorRecovery = false;state.failed = false;
            			    		}
            			    		else 
            			    		{
            			    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    		    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    		    throw mse;
            			    		}

            			    		PushFollow(FOLLOW_shift_expression_in_relational_expression5782);
            			    		shift_expression406 = shift_expression();
            			    		state._fsp--;
            			    		if (state.failed) return retval;
            			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shift_expression406.Tree);

            			    	}


            			    }
            			    break;
            			case 2 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:639:6: ( ( 'is' | 'as' ) non_nullable_type )
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:639:6: ( ( 'is' | 'as' ) non_nullable_type )
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:639:7: ( 'is' | 'as' ) non_nullable_type
            			    	{
            			    		set407 = (IToken)input.LT(1);
            			    		if ( (input.LA(1) >= 222 && input.LA(1) <= 223) ) 
            			    		{
            			    		    input.Consume();
            			    		    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set407));
            			    		    state.errorRecovery = false;state.failed = false;
            			    		}
            			    		else 
            			    		{
            			    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    		    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    		    throw mse;
            			    		}

            			    		PushFollow(FOLLOW_non_nullable_type_in_relational_expression5799);
            			    		non_nullable_type408 = non_nullable_type();
            			    		state._fsp--;
            			    		if (state.failed) return retval;
            			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_nullable_type408.Tree);

            			    	}


            			    }
            			    break;

            			default:
            			    goto loop115;
            	    }
            	} while (true);

            	loop115:
            		;	// Stops C# compiler whining that label 'loop115' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 106, relational_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public class equality_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "equality_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:641:8: public equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
    public csParser.equality_expression_return equality_expression() // throws RecognitionException [1]
    {   
        csParser.equality_expression_return retval = new csParser.equality_expression_return();
        retval.start = input.LT(1);
        int equality_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set410 = null;
        csParser.relational_expression_return relational_expression409 = default(csParser.relational_expression_return);

        csParser.relational_expression_return relational_expression411 = default(csParser.relational_expression_return);


        object set410_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 107) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:641:27: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:642:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_relational_expression_in_equality_expression5815);
            	relational_expression409 = relational_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relational_expression409.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:643:5: ( ( '==' | '!=' ) relational_expression )*
            	do 
            	{
            	    int alt116 = 2;
            	    int LA116_0 = input.LA(1);

            	    if ( ((LA116_0 >= NOT_EQUAL && LA116_0 <= EQUAL)) )
            	    {
            	        alt116 = 1;
            	    }


            	    switch (alt116) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:643:6: ( '==' | '!=' ) relational_expression
            			    {
            			    	set410 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= NOT_EQUAL && input.LA(1) <= EQUAL) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set410));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	PushFollow(FOLLOW_relational_expression_in_equality_expression5830);
            			    	relational_expression411 = relational_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relational_expression411.Tree);

            			    }
            			    break;

            			default:
            			    goto loop116;
            	    }
            	} while (true);

            	loop116:
            		;	// Stops C# compiler whining that label 'loop116' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 107, equality_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "equality_expression"

    public class and_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "and_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:644:8: public and_expression : equality_expression ( '&' equality_expression )* ;
    public csParser.and_expression_return and_expression() // throws RecognitionException [1]
    {   
        csParser.and_expression_return retval = new csParser.and_expression_return();
        retval.start = input.LT(1);
        int and_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal413 = null;
        csParser.equality_expression_return equality_expression412 = default(csParser.equality_expression_return);

        csParser.equality_expression_return equality_expression414 = default(csParser.equality_expression_return);


        object char_literal413_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 108) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:644:22: ( equality_expression ( '&' equality_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:645:2: equality_expression ( '&' equality_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_equality_expression_in_and_expression5842);
            	equality_expression412 = equality_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equality_expression412.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:645:22: ( '&' equality_expression )*
            	do 
            	{
            	    int alt117 = 2;
            	    int LA117_0 = input.LA(1);

            	    if ( (LA117_0 == BIT_AND) )
            	    {
            	        alt117 = 1;
            	    }


            	    switch (alt117) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:645:23: '&' equality_expression
            			    {
            			    	char_literal413=(IToken)Match(input,BIT_AND,FOLLOW_BIT_AND_in_and_expression5845); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal413_tree = (object)adaptor.Create(char_literal413);
            			    		adaptor.AddChild(root_0, char_literal413_tree);
            			    	}
            			    	PushFollow(FOLLOW_equality_expression_in_and_expression5849);
            			    	equality_expression414 = equality_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equality_expression414.Tree);

            			    }
            			    break;

            			default:
            			    goto loop117;
            	    }
            	} while (true);

            	loop117:
            		;	// Stops C# compiler whining that label 'loop117' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 108, and_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "and_expression"

    public class exclusive_or_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "exclusive_or_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:646:8: public exclusive_or_expression : and_expression ( '^' and_expression )* ;
    public csParser.exclusive_or_expression_return exclusive_or_expression() // throws RecognitionException [1]
    {   
        csParser.exclusive_or_expression_return retval = new csParser.exclusive_or_expression_return();
        retval.start = input.LT(1);
        int exclusive_or_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal416 = null;
        csParser.and_expression_return and_expression415 = default(csParser.and_expression_return);

        csParser.and_expression_return and_expression417 = default(csParser.and_expression_return);


        object char_literal416_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 109) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:646:31: ( and_expression ( '^' and_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:647:2: and_expression ( '^' and_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_and_expression_in_exclusive_or_expression5861);
            	and_expression415 = and_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, and_expression415.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:647:17: ( '^' and_expression )*
            	do 
            	{
            	    int alt118 = 2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0 == BIT_XOR) )
            	    {
            	        alt118 = 1;
            	    }


            	    switch (alt118) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:647:18: '^' and_expression
            			    {
            			    	char_literal416=(IToken)Match(input,BIT_XOR,FOLLOW_BIT_XOR_in_exclusive_or_expression5864); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal416_tree = (object)adaptor.Create(char_literal416);
            			    		adaptor.AddChild(root_0, char_literal416_tree);
            			    	}
            			    	PushFollow(FOLLOW_and_expression_in_exclusive_or_expression5868);
            			    	and_expression417 = and_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, and_expression417.Tree);

            			    }
            			    break;

            			default:
            			    goto loop118;
            	    }
            	} while (true);

            	loop118:
            		;	// Stops C# compiler whining that label 'loop118' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 109, exclusive_or_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"

    public class inclusive_or_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "inclusive_or_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:648:8: public inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
    public csParser.inclusive_or_expression_return inclusive_or_expression() // throws RecognitionException [1]
    {   
        csParser.inclusive_or_expression_return retval = new csParser.inclusive_or_expression_return();
        retval.start = input.LT(1);
        int inclusive_or_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal419 = null;
        csParser.exclusive_or_expression_return exclusive_or_expression418 = default(csParser.exclusive_or_expression_return);

        csParser.exclusive_or_expression_return exclusive_or_expression420 = default(csParser.exclusive_or_expression_return);


        object char_literal419_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 110) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:648:31: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:649:2: exclusive_or_expression ( '|' exclusive_or_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression5880);
            	exclusive_or_expression418 = exclusive_or_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, exclusive_or_expression418.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:649:28: ( '|' exclusive_or_expression )*
            	do 
            	{
            	    int alt119 = 2;
            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0 == BIT_OR) )
            	    {
            	        alt119 = 1;
            	    }


            	    switch (alt119) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:649:29: '|' exclusive_or_expression
            			    {
            			    	char_literal419=(IToken)Match(input,BIT_OR,FOLLOW_BIT_OR_in_inclusive_or_expression5885); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal419_tree = (object)adaptor.Create(char_literal419);
            			    		adaptor.AddChild(root_0, char_literal419_tree);
            			    	}
            			    	PushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression5889);
            			    	exclusive_or_expression420 = exclusive_or_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, exclusive_or_expression420.Tree);

            			    }
            			    break;

            			default:
            			    goto loop119;
            	    }
            	} while (true);

            	loop119:
            		;	// Stops C# compiler whining that label 'loop119' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 110, inclusive_or_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"

    public class conditional_and_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "conditional_and_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:650:8: public conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
    public csParser.conditional_and_expression_return conditional_and_expression() // throws RecognitionException [1]
    {   
        csParser.conditional_and_expression_return retval = new csParser.conditional_and_expression_return();
        retval.start = input.LT(1);
        int conditional_and_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal422 = null;
        csParser.inclusive_or_expression_return inclusive_or_expression421 = default(csParser.inclusive_or_expression_return);

        csParser.inclusive_or_expression_return inclusive_or_expression423 = default(csParser.inclusive_or_expression_return);


        object string_literal422_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 111) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:650:34: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:651:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression5901);
            	inclusive_or_expression421 = inclusive_or_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, inclusive_or_expression421.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:651:28: ( '&&' inclusive_or_expression )*
            	do 
            	{
            	    int alt120 = 2;
            	    int LA120_0 = input.LA(1);

            	    if ( (LA120_0 == LOG_AND) )
            	    {
            	        alt120 = 1;
            	    }


            	    switch (alt120) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:651:29: '&&' inclusive_or_expression
            			    {
            			    	string_literal422=(IToken)Match(input,LOG_AND,FOLLOW_LOG_AND_in_conditional_and_expression5906); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal422_tree = (object)adaptor.Create(string_literal422);
            			    		adaptor.AddChild(root_0, string_literal422_tree);
            			    	}
            			    	PushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression5910);
            			    	inclusive_or_expression423 = inclusive_or_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, inclusive_or_expression423.Tree);

            			    }
            			    break;

            			default:
            			    goto loop120;
            	    }
            	} while (true);

            	loop120:
            		;	// Stops C# compiler whining that label 'loop120' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 111, conditional_and_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression"

    public class conditional_or_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "conditional_or_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:652:8: public conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
    public csParser.conditional_or_expression_return conditional_or_expression() // throws RecognitionException [1]
    {   
        csParser.conditional_or_expression_return retval = new csParser.conditional_or_expression_return();
        retval.start = input.LT(1);
        int conditional_or_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal425 = null;
        csParser.conditional_and_expression_return conditional_and_expression424 = default(csParser.conditional_and_expression_return);

        csParser.conditional_and_expression_return conditional_and_expression426 = default(csParser.conditional_and_expression_return);


        object string_literal425_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 112) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:652:33: ( conditional_and_expression ( '||' conditional_and_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:653:2: conditional_and_expression ( '||' conditional_and_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression5922);
            	conditional_and_expression424 = conditional_and_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_and_expression424.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:653:30: ( '||' conditional_and_expression )*
            	do 
            	{
            	    int alt121 = 2;
            	    int LA121_0 = input.LA(1);

            	    if ( (LA121_0 == LOG_OR) )
            	    {
            	        alt121 = 1;
            	    }


            	    switch (alt121) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:653:31: '||' conditional_and_expression
            			    {
            			    	string_literal425=(IToken)Match(input,LOG_OR,FOLLOW_LOG_OR_in_conditional_or_expression5926); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal425_tree = (object)adaptor.Create(string_literal425);
            			    		adaptor.AddChild(root_0, string_literal425_tree);
            			    	}
            			    	PushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression5930);
            			    	conditional_and_expression426 = conditional_and_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_and_expression426.Tree);

            			    }
            			    break;

            			default:
            			    goto loop121;
            	    }
            	} while (true);

            	loop121:
            		;	// Stops C# compiler whining that label 'loop121' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 112, conditional_or_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression"

    public class null_coalescing_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "null_coalescing_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:655:8: public null_coalescing_expression : conditional_or_expression ( '??' conditional_or_expression )* ;
    public csParser.null_coalescing_expression_return null_coalescing_expression() // throws RecognitionException [1]
    {   
        csParser.null_coalescing_expression_return retval = new csParser.null_coalescing_expression_return();
        retval.start = input.LT(1);
        int null_coalescing_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal428 = null;
        csParser.conditional_or_expression_return conditional_or_expression427 = default(csParser.conditional_or_expression_return);

        csParser.conditional_or_expression_return conditional_or_expression429 = default(csParser.conditional_or_expression_return);


        object string_literal428_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 113) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:655:34: ( conditional_or_expression ( '??' conditional_or_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:656:2: conditional_or_expression ( '??' conditional_or_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression5943);
            	conditional_or_expression427 = conditional_or_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_or_expression427.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:656:30: ( '??' conditional_or_expression )*
            	do 
            	{
            	    int alt122 = 2;
            	    int LA122_0 = input.LA(1);

            	    if ( (LA122_0 == NULL_COALESCE) )
            	    {
            	        alt122 = 1;
            	    }


            	    switch (alt122) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:656:31: '??' conditional_or_expression
            			    {
            			    	string_literal428=(IToken)Match(input,NULL_COALESCE,FOLLOW_NULL_COALESCE_in_null_coalescing_expression5948); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal428_tree = (object)adaptor.Create(string_literal428);
            			    		adaptor.AddChild(root_0, string_literal428_tree);
            			    	}
            			    	PushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression5952);
            			    	conditional_or_expression429 = conditional_or_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_or_expression429.Tree);

            			    }
            			    break;

            			default:
            			    goto loop122;
            	    }
            	} while (true);

            	loop122:
            		;	// Stops C# compiler whining that label 'loop122' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 113, null_coalescing_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "null_coalescing_expression"

    public class conditional_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "conditional_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:657:8: public conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
    public csParser.conditional_expression_return conditional_expression() // throws RecognitionException [1]
    {   
        csParser.conditional_expression_return retval = new csParser.conditional_expression_return();
        retval.start = input.LT(1);
        int conditional_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal431 = null;
        IToken char_literal433 = null;
        csParser.null_coalescing_expression_return null_coalescing_expression430 = default(csParser.null_coalescing_expression_return);

        csParser.expression_return expression432 = default(csParser.expression_return);

        csParser.expression_return expression434 = default(csParser.expression_return);


        object char_literal431_tree=null;
        object char_literal433_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 114) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:657:30: ( null_coalescing_expression ( '?' expression ':' expression )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:658:2: null_coalescing_expression ( '?' expression ':' expression )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression5964);
            	null_coalescing_expression430 = null_coalescing_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, null_coalescing_expression430.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:658:31: ( '?' expression ':' expression )?
            	int alt123 = 2;
            	int LA123_0 = input.LA(1);

            	if ( (LA123_0 == 220) )
            	{
            	    alt123 = 1;
            	}
            	switch (alt123) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:658:32: '?' expression ':' expression
            	        {
            	        	char_literal431=(IToken)Match(input,220,FOLLOW_220_in_conditional_expression5969); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal431_tree = (object)adaptor.Create(char_literal431);
            	        		adaptor.AddChild(root_0, char_literal431_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_conditional_expression5973);
            	        	expression432 = expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression432.Tree);
            	        	char_literal433=(IToken)Match(input,211,FOLLOW_211_in_conditional_expression5977); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal433_tree = (object)adaptor.Create(char_literal433);
            	        		adaptor.AddChild(root_0, char_literal433_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_conditional_expression5981);
            	        	expression434 = expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression434.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 114, conditional_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"

    public class lambda_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "lambda_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:663:8: public lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
    public csParser.lambda_expression_return lambda_expression() // throws RecognitionException [1]
    {   
        csParser.lambda_expression_return retval = new csParser.lambda_expression_return();
        retval.start = input.LT(1);
        int lambda_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal436 = null;
        csParser.anonymous_function_signature_return anonymous_function_signature435 = default(csParser.anonymous_function_signature_return);

        csParser.anonymous_function_body_return anonymous_function_body437 = default(csParser.anonymous_function_body_return);


        object string_literal436_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 115) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:663:25: ( anonymous_function_signature '=>' anonymous_function_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:664:2: anonymous_function_signature '=>' anonymous_function_body
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression6003);
            	anonymous_function_signature435 = anonymous_function_signature();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_function_signature435.Tree);
            	string_literal436=(IToken)Match(input,LAMBDA,FOLLOW_LAMBDA_in_lambda_expression6007); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal436_tree = (object)adaptor.Create(string_literal436);
            		adaptor.AddChild(root_0, string_literal436_tree);
            	}
            	PushFollow(FOLLOW_anonymous_function_body_in_lambda_expression6011);
            	anonymous_function_body437 = anonymous_function_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_function_body437.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 115, lambda_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"

    public class anonymous_function_signature_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "anonymous_function_signature"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:665:8: public anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
    public csParser.anonymous_function_signature_return anonymous_function_signature() // throws RecognitionException [1]
    {   
        csParser.anonymous_function_signature_return retval = new csParser.anonymous_function_signature_return();
        retval.start = input.LT(1);
        int anonymous_function_signature_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal438 = null;
        IToken char_literal441 = null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list439 = default(csParser.explicit_anonymous_function_parameter_list_return);

        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list440 = default(csParser.implicit_anonymous_function_parameter_list_return);

        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list442 = default(csParser.implicit_anonymous_function_parameter_list_return);


        object char_literal438_tree=null;
        object char_literal441_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 116) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:665:36: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )
            int alt125 = 2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0 == LPAREN) )
            {
                alt125 = 1;
            }
            else if ( (LA125_0 == IDENTIFIER || (LA125_0 >= ELIF && LA125_0 <= UNDEF) || LA125_0 == 195 || LA125_0 == 221 || (LA125_0 >= 224 && LA125_0 <= 239) || (LA125_0 >= 241 && LA125_0 <= 244) || (LA125_0 >= 247 && LA125_0 <= 250) || LA125_0 == 256 || (LA125_0 >= 263 && LA125_0 <= 264) || LA125_0 == 274 || LA125_0 == 277) )
            {
                alt125 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d125s0 =
                    new NoViableAltException("", 125, 0, input);

                throw nvae_d125s0;
            }
            switch (alt125) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:666:2: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal438=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_anonymous_function_signature6020); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal438_tree = (object)adaptor.Create(char_literal438);
                    		adaptor.AddChild(root_0, char_literal438_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:666:6: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
                    	int alt124 = 3;
                    	switch ( input.LA(1) ) 
                    	{
                    	    case OBJECT:
                    	    case BOOL:
                    	    case BYTE:
                    	    case CHAR:
                    	    case SHORT:
                    	    case INT:
                    	    case LONG:
                    	    case FLOAT:
                    	    case DOUBLE:
                    	    case 206:
                    	    case 212:
                    	    case 213:
                    	    case 251:
                    	    case 252:
                    	    case 253:
                    	    case 254:
                    	    case 275:
                    	    case 276:
                    	    	{
                    	        alt124 = 1;
                    	        }
                    	        break;
                    	    case IDENTIFIER:
                    	    	{
                    	        int LA124_2 = input.LA(2);

                    	        if ( (LA124_2 == OPEN_BRACKET || LA124_2 == LTHAN || LA124_2 == STAR || LA124_2 == IDENTIFIER || LA124_2 == DOT || (LA124_2 >= ELIF && LA124_2 <= UNDEF) || LA124_2 == 195 || LA124_2 == 208 || (LA124_2 >= 220 && LA124_2 <= 221) || (LA124_2 >= 224 && LA124_2 <= 239) || (LA124_2 >= 241 && LA124_2 <= 244) || (LA124_2 >= 247 && LA124_2 <= 250) || LA124_2 == 256 || (LA124_2 >= 263 && LA124_2 <= 264) || LA124_2 == 274 || LA124_2 == 277) )
                    	        {
                    	            alt124 = 1;
                    	        }
                    	        else if ( (LA124_2 == COMMA || LA124_2 == RPAREN) )
                    	        {
                    	            alt124 = 2;
                    	        }
                    	        }
                    	        break;
                    	    case ELIF:
                    	    case ENDIF:
                    	    case DEFINE:
                    	    case UNDEF:
                    	    case 195:
                    	    case 221:
                    	    case 224:
                    	    case 225:
                    	    case 226:
                    	    case 227:
                    	    case 228:
                    	    case 229:
                    	    case 230:
                    	    case 231:
                    	    case 232:
                    	    case 233:
                    	    case 234:
                    	    case 235:
                    	    case 236:
                    	    case 237:
                    	    case 238:
                    	    case 239:
                    	    case 241:
                    	    case 242:
                    	    case 243:
                    	    case 244:
                    	    case 247:
                    	    case 248:
                    	    case 249:
                    	    case 250:
                    	    case 256:
                    	    case 263:
                    	    case 264:
                    	    case 274:
                    	    case 277:
                    	    	{
                    	        int LA124_3 = input.LA(2);

                    	        if ( (LA124_3 == OPEN_BRACKET || LA124_3 == LTHAN || LA124_3 == STAR || LA124_3 == IDENTIFIER || LA124_3 == DOT || (LA124_3 >= ELIF && LA124_3 <= UNDEF) || LA124_3 == 195 || LA124_3 == 208 || (LA124_3 >= 220 && LA124_3 <= 221) || (LA124_3 >= 224 && LA124_3 <= 239) || (LA124_3 >= 241 && LA124_3 <= 244) || (LA124_3 >= 247 && LA124_3 <= 250) || LA124_3 == 256 || (LA124_3 >= 263 && LA124_3 <= 264) || LA124_3 == 274 || LA124_3 == 277) )
                    	        {
                    	            alt124 = 1;
                    	        }
                    	        else if ( (LA124_3 == COMMA || LA124_3 == RPAREN) )
                    	        {
                    	            alt124 = 2;
                    	        }
                    	        }
                    	        break;
                    	}

                    	switch (alt124) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:666:7: explicit_anonymous_function_parameter_list
                    	        {
                    	        	PushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature6023);
                    	        	explicit_anonymous_function_parameter_list439 = explicit_anonymous_function_parameter_list();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list439.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:667:5: implicit_anonymous_function_parameter_list
                    	        {
                    	        	PushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature6029);
                    	        	implicit_anonymous_function_parameter_list440 = implicit_anonymous_function_parameter_list();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list440.Tree);

                    	        }
                    	        break;

                    	}

                    	char_literal441=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_anonymous_function_signature6033); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal441_tree = (object)adaptor.Create(char_literal441);
                    		adaptor.AddChild(root_0, char_literal441_tree);
                    	}

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:668:4: implicit_anonymous_function_parameter_list
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature6038);
                    	implicit_anonymous_function_parameter_list442 = implicit_anonymous_function_parameter_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list442.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 116, anonymous_function_signature_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_signature"

    public class implicit_anonymous_function_parameter_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:670:8: public implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
    public csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() // throws RecognitionException [1]
    {   
        csParser.implicit_anonymous_function_parameter_list_return retval = new csParser.implicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);
        int implicit_anonymous_function_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal444 = null;
        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter443 = default(csParser.implicit_anonymous_function_parameter_return);

        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter445 = default(csParser.implicit_anonymous_function_parameter_return);


        object char_literal444_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 117) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:670:50: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:671:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list6049);
            	implicit_anonymous_function_parameter443 = implicit_anonymous_function_parameter();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter443.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:671:42: ( ',' implicit_anonymous_function_parameter )*
            	do 
            	{
            	    int alt126 = 2;
            	    int LA126_0 = input.LA(1);

            	    if ( (LA126_0 == COMMA) )
            	    {
            	        alt126 = 1;
            	    }


            	    switch (alt126) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:671:43: ',' implicit_anonymous_function_parameter
            			    {
            			    	char_literal444=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list6054); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal444_tree = (object)adaptor.Create(char_literal444);
            			    		adaptor.AddChild(root_0, char_literal444_tree);
            			    	}
            			    	PushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list6058);
            			    	implicit_anonymous_function_parameter445 = implicit_anonymous_function_parameter();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter445.Tree);

            			    }
            			    break;

            			default:
            			    goto loop126;
            	    }
            	} while (true);

            	loop126:
            		;	// Stops C# compiler whining that label 'loop126' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 117, implicit_anonymous_function_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"

    public class implicit_anonymous_function_parameter_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "implicit_anonymous_function_parameter"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:672:8: public implicit_anonymous_function_parameter : identifier ;
    public csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() // throws RecognitionException [1]
    {   
        csParser.implicit_anonymous_function_parameter_return retval = new csParser.implicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);
        int implicit_anonymous_function_parameter_StartIndex = input.Index;
        object root_0 = null;

        csParser.identifier_return identifier446 = default(csParser.identifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 118) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:672:45: ( identifier )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:673:2: identifier
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_implicit_anonymous_function_parameter6070);
            	identifier446 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier446.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 118, implicit_anonymous_function_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter"

    public class anonymous_function_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "anonymous_function_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:674:8: public anonymous_function_body : ( expression | block );
    public csParser.anonymous_function_body_return anonymous_function_body() // throws RecognitionException [1]
    {   
        csParser.anonymous_function_body_return retval = new csParser.anonymous_function_body_return();
        retval.start = input.LT(1);
        int anonymous_function_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression447 = default(csParser.expression_return);

        csParser.block_return block448 = default(csParser.block_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 119) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:674:31: ( expression | block )
            int alt127 = 2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0 >= MONONOT && LA127_0 <= MONOTWIDDLE) || (LA127_0 >= OBJECT && LA127_0 <= THIS) || LA127_0 == LPAREN || LA127_0 == BIT_AND || (LA127_0 >= PLUS && LA127_0 <= MINUS) || LA127_0 == STAR || (LA127_0 >= BOOL && LA127_0 <= NULL) || (LA127_0 >= ELIF && LA127_0 <= UNDEF) || LA127_0 == 195 || LA127_0 == 197 || LA127_0 == 207 || (LA127_0 >= 209 && LA127_0 <= 210) || (LA127_0 >= 214 && LA127_0 <= 219) || LA127_0 == 221 || (LA127_0 >= 224 && LA127_0 <= 239) || (LA127_0 >= 241 && LA127_0 <= 244) || (LA127_0 >= 247 && LA127_0 <= 254) || LA127_0 == 256 || (LA127_0 >= 263 && LA127_0 <= 264) || (LA127_0 >= 274 && LA127_0 <= 277)) )
            {
                alt127 = 1;
            }
            else if ( (LA127_0 == OPEN_BRACE || LA127_0 == SEMI) )
            {
                alt127 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d127s0 =
                    new NoViableAltException("", 127, 0, input);

                throw nvae_d127s0;
            }
            switch (alt127) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:675:2: expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_expression_in_anonymous_function_body6079);
                    	expression447 = expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression447.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:676:4: block
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_block_in_anonymous_function_body6084);
                    	block448 = block();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block448.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 119, anonymous_function_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_body"

    public class query_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "query_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:681:8: public query_expression : from_clause query_body ;
    public csParser.query_expression_return query_expression() // throws RecognitionException [1]
    {   
        csParser.query_expression_return retval = new csParser.query_expression_return();
        retval.start = input.LT(1);
        int query_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.from_clause_return from_clause449 = default(csParser.from_clause_return);

        csParser.query_body_return query_body450 = default(csParser.query_body_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 120) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:681:24: ( from_clause query_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:682:2: from_clause query_body
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_from_clause_in_query_expression6098);
            	from_clause449 = from_clause();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, from_clause449.Tree);
            	PushFollow(FOLLOW_query_body_in_query_expression6102);
            	query_body450 = query_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body450.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 120, query_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_expression"

    public class query_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "query_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:683:8: public query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
    public csParser.query_body_return query_body() // throws RecognitionException [1]
    {   
        csParser.query_body_return retval = new csParser.query_body_return();
        retval.start = input.LT(1);
        int query_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.query_body_clauses_return query_body_clauses451 = default(csParser.query_body_clauses_return);

        csParser.select_or_group_clause_return select_or_group_clause452 = default(csParser.select_or_group_clause_return);

        csParser.query_continuation_return query_continuation453 = default(csParser.query_continuation_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 121) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:683:18: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:685:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:685:2: ( query_body_clauses )?
            	int alt128 = 2;
            	int LA128_0 = input.LA(1);

            	if ( ((LA128_0 >= 225 && LA128_0 <= 226) || (LA128_0 >= 229 && LA128_0 <= 230) || LA128_0 == 236) )
            	{
            	    alt128 = 1;
            	}
            	switch (alt128) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:685:2: query_body_clauses
            	        {
            	        	PushFollow(FOLLOW_query_body_clauses_in_query_body6114);
            	        	query_body_clauses451 = query_body_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body_clauses451.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_select_or_group_clause_in_query_body6119);
            	select_or_group_clause452 = select_or_group_clause();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, select_or_group_clause452.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:685:49: ( ( 'into' )=> query_continuation )?
            	int alt129 = 2;
            	int LA129_0 = input.LA(1);

            	if ( (LA129_0 == 224) )
            	{
            	    int LA129_1 = input.LA(2);

            	    if ( (synpred25_cs()) )
            	    {
            	        alt129 = 1;
            	    }
            	}
            	switch (alt129) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:685:50: ( 'into' )=> query_continuation
            	        {
            	        	PushFollow(FOLLOW_query_continuation_in_query_body6130);
            	        	query_continuation453 = query_continuation();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_continuation453.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 121, query_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_body"

    public class query_continuation_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "query_continuation"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:686:8: public query_continuation : 'into' identifier query_body ;
    public csParser.query_continuation_return query_continuation() // throws RecognitionException [1]
    {   
        csParser.query_continuation_return retval = new csParser.query_continuation_return();
        retval.start = input.LT(1);
        int query_continuation_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal454 = null;
        csParser.identifier_return identifier455 = default(csParser.identifier_return);

        csParser.query_body_return query_body456 = default(csParser.query_body_return);


        object string_literal454_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 122) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:686:26: ( 'into' identifier query_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:687:2: 'into' identifier query_body
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal454=(IToken)Match(input,224,FOLLOW_224_in_query_continuation6142); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal454_tree = (object)adaptor.Create(string_literal454);
            		adaptor.AddChild(root_0, string_literal454_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_query_continuation6146);
            	identifier455 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier455.Tree);
            	PushFollow(FOLLOW_query_body_in_query_continuation6150);
            	query_body456 = query_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body456.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 122, query_continuation_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_continuation"

    public class query_body_clauses_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "query_body_clauses"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:688:8: public query_body_clauses : ( query_body_clause )+ ;
    public csParser.query_body_clauses_return query_body_clauses() // throws RecognitionException [1]
    {   
        csParser.query_body_clauses_return retval = new csParser.query_body_clauses_return();
        retval.start = input.LT(1);
        int query_body_clauses_StartIndex = input.Index;
        object root_0 = null;

        csParser.query_body_clause_return query_body_clause457 = default(csParser.query_body_clause_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 123) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:688:26: ( ( query_body_clause )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:689:2: ( query_body_clause )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:689:2: ( query_body_clause )+
            	int cnt130 = 0;
            	do 
            	{
            	    int alt130 = 2;
            	    int LA130_0 = input.LA(1);

            	    if ( ((LA130_0 >= 225 && LA130_0 <= 226) || (LA130_0 >= 229 && LA130_0 <= 230) || LA130_0 == 236) )
            	    {
            	        alt130 = 1;
            	    }


            	    switch (alt130) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:689:2: query_body_clause
            			    {
            			    	PushFollow(FOLLOW_query_body_clause_in_query_body_clauses6159);
            			    	query_body_clause457 = query_body_clause();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body_clause457.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt130 >= 1 ) goto loop130;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee130 =
            		                new EarlyExitException(130, input);
            		            throw eee130;
            	    }
            	    cnt130++;
            	} while (true);

            	loop130:
            		;	// Stops C# compiler whining that label 'loop130' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 123, query_body_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_body_clauses"

    public class query_body_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "query_body_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:690:8: public query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
    public csParser.query_body_clause_return query_body_clause() // throws RecognitionException [1]
    {   
        csParser.query_body_clause_return retval = new csParser.query_body_clause_return();
        retval.start = input.LT(1);
        int query_body_clause_StartIndex = input.Index;
        object root_0 = null;

        csParser.from_clause_return from_clause458 = default(csParser.from_clause_return);

        csParser.let_clause_return let_clause459 = default(csParser.let_clause_return);

        csParser.where_clause_return where_clause460 = default(csParser.where_clause_return);

        csParser.join_clause_return join_clause461 = default(csParser.join_clause_return);

        csParser.orderby_clause_return orderby_clause462 = default(csParser.orderby_clause_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 124) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:690:25: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
            int alt131 = 5;
            switch ( input.LA(1) ) 
            {
            case 225:
            	{
                alt131 = 1;
                }
                break;
            case 229:
            	{
                alt131 = 2;
                }
                break;
            case 236:
            	{
                alt131 = 3;
                }
                break;
            case 226:
            	{
                alt131 = 4;
                }
                break;
            case 230:
            	{
                alt131 = 5;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d131s0 =
            	        new NoViableAltException("", 131, 0, input);

            	    throw nvae_d131s0;
            }

            switch (alt131) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:691:2: from_clause
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_from_clause_in_query_body_clause6170);
                    	from_clause458 = from_clause();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, from_clause458.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:692:4: let_clause
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_let_clause_in_query_body_clause6175);
                    	let_clause459 = let_clause();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, let_clause459.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:693:4: where_clause
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_where_clause_in_query_body_clause6180);
                    	where_clause460 = where_clause();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, where_clause460.Tree);

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:694:4: join_clause
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_join_clause_in_query_body_clause6185);
                    	join_clause461 = join_clause();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, join_clause461.Tree);

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:695:4: orderby_clause
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_orderby_clause_in_query_body_clause6190);
                    	orderby_clause462 = orderby_clause();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, orderby_clause462.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 124, query_body_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_body_clause"

    public class from_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "from_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:696:8: public from_clause : 'from' ( type )? identifier 'in' expression ;
    public csParser.from_clause_return from_clause() // throws RecognitionException [1]
    {   
        csParser.from_clause_return retval = new csParser.from_clause_return();
        retval.start = input.LT(1);
        int from_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal463 = null;
        IToken string_literal466 = null;
        csParser.type_return type464 = default(csParser.type_return);

        csParser.identifier_return identifier465 = default(csParser.identifier_return);

        csParser.expression_return expression467 = default(csParser.expression_return);


        object string_literal463_tree=null;
        object string_literal466_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 125) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:696:19: ( 'from' ( type )? identifier 'in' expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:697:2: 'from' ( type )? identifier 'in' expression
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal463=(IToken)Match(input,225,FOLLOW_225_in_from_clause6199); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal463_tree = (object)adaptor.Create(string_literal463);
            		adaptor.AddChild(root_0, string_literal463_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:697:11: ( type )?
            	int alt132 = 2;
            	switch ( input.LA(1) ) 
            	{
            	    case OBJECT:
            	    case BOOL:
            	    case BYTE:
            	    case CHAR:
            	    case SHORT:
            	    case INT:
            	    case LONG:
            	    case FLOAT:
            	    case DOUBLE:
            	    case 206:
            	    case 251:
            	    case 252:
            	    case 253:
            	    case 254:
            	    case 275:
            	    case 276:
            	    	{
            	        alt132 = 1;
            	        }
            	        break;
            	    case IDENTIFIER:
            	    	{
            	        int LA132_2 = input.LA(2);

            	        if ( (LA132_2 == OPEN_BRACKET || LA132_2 == LTHAN || LA132_2 == STAR || LA132_2 == IDENTIFIER || LA132_2 == DOT || (LA132_2 >= ELIF && LA132_2 <= UNDEF) || LA132_2 == 195 || LA132_2 == 208 || (LA132_2 >= 220 && LA132_2 <= 221) || (LA132_2 >= 224 && LA132_2 <= 239) || (LA132_2 >= 241 && LA132_2 <= 244) || (LA132_2 >= 247 && LA132_2 <= 250) || LA132_2 == 256 || (LA132_2 >= 263 && LA132_2 <= 264) || LA132_2 == 274 || LA132_2 == 277) )
            	        {
            	            alt132 = 1;
            	        }
            	        }
            	        break;
            	    case ELIF:
            	    case ENDIF:
            	    case DEFINE:
            	    case UNDEF:
            	    case 195:
            	    case 221:
            	    case 224:
            	    case 225:
            	    case 226:
            	    case 227:
            	    case 228:
            	    case 229:
            	    case 230:
            	    case 231:
            	    case 232:
            	    case 233:
            	    case 234:
            	    case 235:
            	    case 236:
            	    case 237:
            	    case 238:
            	    case 239:
            	    case 241:
            	    case 242:
            	    case 243:
            	    case 244:
            	    case 247:
            	    case 248:
            	    case 249:
            	    case 250:
            	    case 256:
            	    case 263:
            	    case 264:
            	    case 274:
            	    case 277:
            	    	{
            	        int LA132_3 = input.LA(2);

            	        if ( (LA132_3 == OPEN_BRACKET || LA132_3 == LTHAN || LA132_3 == STAR || LA132_3 == IDENTIFIER || LA132_3 == DOT || (LA132_3 >= ELIF && LA132_3 <= UNDEF) || LA132_3 == 195 || LA132_3 == 208 || (LA132_3 >= 220 && LA132_3 <= 221) || (LA132_3 >= 224 && LA132_3 <= 239) || (LA132_3 >= 241 && LA132_3 <= 244) || (LA132_3 >= 247 && LA132_3 <= 250) || LA132_3 == 256 || (LA132_3 >= 263 && LA132_3 <= 264) || LA132_3 == 274 || LA132_3 == 277) )
            	        {
            	            alt132 = 1;
            	        }
            	        }
            	        break;
            	}

            	switch (alt132) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:697:11: type
            	        {
            	        	PushFollow(FOLLOW_type_in_from_clause6203);
            	        	type464 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type464.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_identifier_in_from_clause6208);
            	identifier465 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier465.Tree);
            	string_literal466=(IToken)Match(input,IN,FOLLOW_IN_in_from_clause6212); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal466_tree = (object)adaptor.Create(string_literal466);
            		adaptor.AddChild(root_0, string_literal466_tree);
            	}
            	PushFollow(FOLLOW_expression_in_from_clause6216);
            	expression467 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression467.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 125, from_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "from_clause"

    public class join_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "join_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:698:8: public join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
    public csParser.join_clause_return join_clause() // throws RecognitionException [1]
    {   
        csParser.join_clause_return retval = new csParser.join_clause_return();
        retval.start = input.LT(1);
        int join_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal468 = null;
        IToken string_literal471 = null;
        IToken string_literal473 = null;
        IToken string_literal475 = null;
        IToken string_literal477 = null;
        csParser.type_return type469 = default(csParser.type_return);

        csParser.identifier_return identifier470 = default(csParser.identifier_return);

        csParser.expression_return expression472 = default(csParser.expression_return);

        csParser.expression_return expression474 = default(csParser.expression_return);

        csParser.expression_return expression476 = default(csParser.expression_return);

        csParser.identifier_return identifier478 = default(csParser.identifier_return);


        object string_literal468_tree=null;
        object string_literal471_tree=null;
        object string_literal473_tree=null;
        object string_literal475_tree=null;
        object string_literal477_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 126) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:698:19: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:699:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal468=(IToken)Match(input,226,FOLLOW_226_in_join_clause6226); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal468_tree = (object)adaptor.Create(string_literal468);
            		adaptor.AddChild(root_0, string_literal468_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:699:11: ( type )?
            	int alt133 = 2;
            	switch ( input.LA(1) ) 
            	{
            	    case OBJECT:
            	    case BOOL:
            	    case BYTE:
            	    case CHAR:
            	    case SHORT:
            	    case INT:
            	    case LONG:
            	    case FLOAT:
            	    case DOUBLE:
            	    case 206:
            	    case 251:
            	    case 252:
            	    case 253:
            	    case 254:
            	    case 275:
            	    case 276:
            	    	{
            	        alt133 = 1;
            	        }
            	        break;
            	    case IDENTIFIER:
            	    	{
            	        int LA133_2 = input.LA(2);

            	        if ( (LA133_2 == OPEN_BRACKET || LA133_2 == LTHAN || LA133_2 == STAR || LA133_2 == IDENTIFIER || LA133_2 == DOT || (LA133_2 >= ELIF && LA133_2 <= UNDEF) || LA133_2 == 195 || LA133_2 == 208 || (LA133_2 >= 220 && LA133_2 <= 221) || (LA133_2 >= 224 && LA133_2 <= 239) || (LA133_2 >= 241 && LA133_2 <= 244) || (LA133_2 >= 247 && LA133_2 <= 250) || LA133_2 == 256 || (LA133_2 >= 263 && LA133_2 <= 264) || LA133_2 == 274 || LA133_2 == 277) )
            	        {
            	            alt133 = 1;
            	        }
            	        }
            	        break;
            	    case ELIF:
            	    case ENDIF:
            	    case DEFINE:
            	    case UNDEF:
            	    case 195:
            	    case 221:
            	    case 224:
            	    case 225:
            	    case 226:
            	    case 227:
            	    case 228:
            	    case 229:
            	    case 230:
            	    case 231:
            	    case 232:
            	    case 233:
            	    case 234:
            	    case 235:
            	    case 236:
            	    case 237:
            	    case 238:
            	    case 239:
            	    case 241:
            	    case 242:
            	    case 243:
            	    case 244:
            	    case 247:
            	    case 248:
            	    case 249:
            	    case 250:
            	    case 256:
            	    case 263:
            	    case 264:
            	    case 274:
            	    case 277:
            	    	{
            	        int LA133_3 = input.LA(2);

            	        if ( (LA133_3 == OPEN_BRACKET || LA133_3 == LTHAN || LA133_3 == STAR || LA133_3 == IDENTIFIER || LA133_3 == DOT || (LA133_3 >= ELIF && LA133_3 <= UNDEF) || LA133_3 == 195 || LA133_3 == 208 || (LA133_3 >= 220 && LA133_3 <= 221) || (LA133_3 >= 224 && LA133_3 <= 239) || (LA133_3 >= 241 && LA133_3 <= 244) || (LA133_3 >= 247 && LA133_3 <= 250) || LA133_3 == 256 || (LA133_3 >= 263 && LA133_3 <= 264) || LA133_3 == 274 || LA133_3 == 277) )
            	        {
            	            alt133 = 1;
            	        }
            	        }
            	        break;
            	}

            	switch (alt133) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:699:11: type
            	        {
            	        	PushFollow(FOLLOW_type_in_join_clause6230);
            	        	type469 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type469.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_identifier_in_join_clause6235);
            	identifier470 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier470.Tree);
            	string_literal471=(IToken)Match(input,IN,FOLLOW_IN_in_join_clause6239); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal471_tree = (object)adaptor.Create(string_literal471);
            		adaptor.AddChild(root_0, string_literal471_tree);
            	}
            	PushFollow(FOLLOW_expression_in_join_clause6243);
            	expression472 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression472.Tree);
            	string_literal473=(IToken)Match(input,227,FOLLOW_227_in_join_clause6247); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal473_tree = (object)adaptor.Create(string_literal473);
            		adaptor.AddChild(root_0, string_literal473_tree);
            	}
            	PushFollow(FOLLOW_expression_in_join_clause6251);
            	expression474 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression474.Tree);
            	string_literal475=(IToken)Match(input,228,FOLLOW_228_in_join_clause6255); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal475_tree = (object)adaptor.Create(string_literal475);
            		adaptor.AddChild(root_0, string_literal475_tree);
            	}
            	PushFollow(FOLLOW_expression_in_join_clause6259);
            	expression476 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression476.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:699:94: ( 'into' identifier )?
            	int alt134 = 2;
            	int LA134_0 = input.LA(1);

            	if ( (LA134_0 == 224) )
            	{
            	    alt134 = 1;
            	}
            	switch (alt134) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:699:95: 'into' identifier
            	        {
            	        	string_literal477=(IToken)Match(input,224,FOLLOW_224_in_join_clause6262); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal477_tree = (object)adaptor.Create(string_literal477);
            	        		adaptor.AddChild(root_0, string_literal477_tree);
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_join_clause6264);
            	        	identifier478 = identifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier478.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 126, join_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "join_clause"

    public class let_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "let_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:700:8: public let_clause : 'let' identifier '=' expression ;
    public csParser.let_clause_return let_clause() // throws RecognitionException [1]
    {   
        csParser.let_clause_return retval = new csParser.let_clause_return();
        retval.start = input.LT(1);
        int let_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal479 = null;
        IToken char_literal481 = null;
        csParser.identifier_return identifier480 = default(csParser.identifier_return);

        csParser.expression_return expression482 = default(csParser.expression_return);


        object string_literal479_tree=null;
        object char_literal481_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 127) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:700:18: ( 'let' identifier '=' expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:701:2: 'let' identifier '=' expression
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal479=(IToken)Match(input,229,FOLLOW_229_in_let_clause6276); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal479_tree = (object)adaptor.Create(string_literal479);
            		adaptor.AddChild(root_0, string_literal479_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_let_clause6280);
            	identifier480 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier480.Tree);
            	char_literal481=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_let_clause6284); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal481_tree = (object)adaptor.Create(char_literal481);
            		adaptor.AddChild(root_0, char_literal481_tree);
            	}
            	PushFollow(FOLLOW_expression_in_let_clause6288);
            	expression482 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression482.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 127, let_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "let_clause"

    public class orderby_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "orderby_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:702:8: public orderby_clause : 'orderby' ordering_list ;
    public csParser.orderby_clause_return orderby_clause() // throws RecognitionException [1]
    {   
        csParser.orderby_clause_return retval = new csParser.orderby_clause_return();
        retval.start = input.LT(1);
        int orderby_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal483 = null;
        csParser.ordering_list_return ordering_list484 = default(csParser.ordering_list_return);


        object string_literal483_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 128) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:702:22: ( 'orderby' ordering_list )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:703:2: 'orderby' ordering_list
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal483=(IToken)Match(input,230,FOLLOW_230_in_orderby_clause6297); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal483_tree = (object)adaptor.Create(string_literal483);
            		adaptor.AddChild(root_0, string_literal483_tree);
            	}
            	PushFollow(FOLLOW_ordering_list_in_orderby_clause6301);
            	ordering_list484 = ordering_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ordering_list484.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 128, orderby_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "orderby_clause"

    public class ordering_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "ordering_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:704:8: public ordering_list : ordering ( ',' ordering )* ;
    public csParser.ordering_list_return ordering_list() // throws RecognitionException [1]
    {   
        csParser.ordering_list_return retval = new csParser.ordering_list_return();
        retval.start = input.LT(1);
        int ordering_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal486 = null;
        csParser.ordering_return ordering485 = default(csParser.ordering_return);

        csParser.ordering_return ordering487 = default(csParser.ordering_return);


        object char_literal486_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 129) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:704:21: ( ordering ( ',' ordering )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:705:2: ordering ( ',' ordering )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_ordering_in_ordering_list6311);
            	ordering485 = ordering();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ordering485.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:705:13: ( ',' ordering )*
            	do 
            	{
            	    int alt135 = 2;
            	    int LA135_0 = input.LA(1);

            	    if ( (LA135_0 == COMMA) )
            	    {
            	        alt135 = 1;
            	    }


            	    switch (alt135) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:705:14: ',' ordering
            			    {
            			    	char_literal486=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_ordering_list6316); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal486_tree = (object)adaptor.Create(char_literal486);
            			    		adaptor.AddChild(root_0, char_literal486_tree);
            			    	}
            			    	PushFollow(FOLLOW_ordering_in_ordering_list6320);
            			    	ordering487 = ordering();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ordering487.Tree);

            			    }
            			    break;

            			default:
            			    goto loop135;
            	    }
            	} while (true);

            	loop135:
            		;	// Stops C# compiler whining that label 'loop135' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 129, ordering_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ordering_list"

    public class ordering_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "ordering"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:706:8: public ordering : expression ( ordering_direction )? ;
    public csParser.ordering_return ordering() // throws RecognitionException [1]
    {   
        csParser.ordering_return retval = new csParser.ordering_return();
        retval.start = input.LT(1);
        int ordering_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression488 = default(csParser.expression_return);

        csParser.ordering_direction_return ordering_direction489 = default(csParser.ordering_direction_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 130) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:706:16: ( expression ( ordering_direction )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:707:2: expression ( ordering_direction )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_ordering6332);
            	expression488 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression488.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:707:16: ( ordering_direction )?
            	int alt136 = 2;
            	int LA136_0 = input.LA(1);

            	if ( ((LA136_0 >= 231 && LA136_0 <= 232)) )
            	{
            	    alt136 = 1;
            	}
            	switch (alt136) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:707:16: ordering_direction
            	        {
            	        	PushFollow(FOLLOW_ordering_direction_in_ordering6337);
            	        	ordering_direction489 = ordering_direction();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ordering_direction489.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 130, ordering_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ordering"

    public class ordering_direction_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "ordering_direction"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:709:8: public ordering_direction : ( 'ascending' | 'descending' );
    public csParser.ordering_direction_return ordering_direction() // throws RecognitionException [1]
    {   
        csParser.ordering_direction_return retval = new csParser.ordering_direction_return();
        retval.start = input.LT(1);
        int ordering_direction_StartIndex = input.Index;
        object root_0 = null;

        IToken set490 = null;

        object set490_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 131) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:709:26: ( 'ascending' | 'descending' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set490 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 231 && input.LA(1) <= 232) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set490));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 131, ordering_direction_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ordering_direction"

    public class select_or_group_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "select_or_group_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:712:8: public select_or_group_clause : ( select_clause | group_clause );
    public csParser.select_or_group_clause_return select_or_group_clause() // throws RecognitionException [1]
    {   
        csParser.select_or_group_clause_return retval = new csParser.select_or_group_clause_return();
        retval.start = input.LT(1);
        int select_or_group_clause_StartIndex = input.Index;
        object root_0 = null;

        csParser.select_clause_return select_clause491 = default(csParser.select_clause_return);

        csParser.group_clause_return group_clause492 = default(csParser.group_clause_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 132) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:712:30: ( select_clause | group_clause )
            int alt137 = 2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0 == 233) )
            {
                alt137 = 1;
            }
            else if ( (LA137_0 == 234) )
            {
                alt137 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d137s0 =
                    new NoViableAltException("", 137, 0, input);

                throw nvae_d137s0;
            }
            switch (alt137) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:713:2: select_clause
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_select_clause_in_select_or_group_clause6364);
                    	select_clause491 = select_clause();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, select_clause491.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:714:4: group_clause
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_group_clause_in_select_or_group_clause6369);
                    	group_clause492 = group_clause();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, group_clause492.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 132, select_or_group_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "select_or_group_clause"

    public class select_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "select_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:715:8: public select_clause : 'select' expression ;
    public csParser.select_clause_return select_clause() // throws RecognitionException [1]
    {   
        csParser.select_clause_return retval = new csParser.select_clause_return();
        retval.start = input.LT(1);
        int select_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal493 = null;
        csParser.expression_return expression494 = default(csParser.expression_return);


        object string_literal493_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 133) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:715:21: ( 'select' expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:716:2: 'select' expression
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal493=(IToken)Match(input,233,FOLLOW_233_in_select_clause6379); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal493_tree = (object)adaptor.Create(string_literal493);
            		adaptor.AddChild(root_0, string_literal493_tree);
            	}
            	PushFollow(FOLLOW_expression_in_select_clause6383);
            	expression494 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression494.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 133, select_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "select_clause"

    public class group_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "group_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:717:8: public group_clause : 'group' expression 'by' expression ;
    public csParser.group_clause_return group_clause() // throws RecognitionException [1]
    {   
        csParser.group_clause_return retval = new csParser.group_clause_return();
        retval.start = input.LT(1);
        int group_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal495 = null;
        IToken string_literal497 = null;
        csParser.expression_return expression496 = default(csParser.expression_return);

        csParser.expression_return expression498 = default(csParser.expression_return);


        object string_literal495_tree=null;
        object string_literal497_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 134) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:717:20: ( 'group' expression 'by' expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:718:2: 'group' expression 'by' expression
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal495=(IToken)Match(input,234,FOLLOW_234_in_group_clause6393); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal495_tree = (object)adaptor.Create(string_literal495);
            		adaptor.AddChild(root_0, string_literal495_tree);
            	}
            	PushFollow(FOLLOW_expression_in_group_clause6397);
            	expression496 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression496.Tree);
            	string_literal497=(IToken)Match(input,235,FOLLOW_235_in_group_clause6401); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal497_tree = (object)adaptor.Create(string_literal497);
            		adaptor.AddChild(root_0, string_literal497_tree);
            	}
            	PushFollow(FOLLOW_expression_in_group_clause6405);
            	expression498 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression498.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 134, group_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "group_clause"

    public class where_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "where_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:719:8: public where_clause : 'where' boolean_expression ;
    public csParser.where_clause_return where_clause() // throws RecognitionException [1]
    {   
        csParser.where_clause_return retval = new csParser.where_clause_return();
        retval.start = input.LT(1);
        int where_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal499 = null;
        csParser.boolean_expression_return boolean_expression500 = default(csParser.boolean_expression_return);


        object string_literal499_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 135) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:719:20: ( 'where' boolean_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:720:2: 'where' boolean_expression
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal499=(IToken)Match(input,236,FOLLOW_236_in_where_clause6415); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal499_tree = (object)adaptor.Create(string_literal499);
            		adaptor.AddChild(root_0, string_literal499_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_where_clause6419);
            	boolean_expression500 = boolean_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression500.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 135, where_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public class boolean_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "boolean_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:721:8: public boolean_expression : expression ;
    public csParser.boolean_expression_return boolean_expression() // throws RecognitionException [1]
    {   
        csParser.boolean_expression_return retval = new csParser.boolean_expression_return();
        retval.start = input.LT(1);
        int boolean_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression501 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 136) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:721:26: ( expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:722:2: expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_boolean_expression6429);
            	expression501 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression501.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 136, boolean_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "boolean_expression"

    public class global_attributes_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "global_attributes"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:727:8: public global_attributes : ( global_attribute )+ ;
    public csParser.global_attributes_return global_attributes() // throws RecognitionException [1]
    {   
        csParser.global_attributes_return retval = new csParser.global_attributes_return();
        retval.start = input.LT(1);
        int global_attributes_StartIndex = input.Index;
        object root_0 = null;

        csParser.global_attribute_return global_attribute502 = default(csParser.global_attribute_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 137) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:727:25: ( ( global_attribute )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:728:2: ( global_attribute )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:728:2: ( global_attribute )+
            	int cnt138 = 0;
            	do 
            	{
            	    int alt138 = 2;
            	    int LA138_0 = input.LA(1);

            	    if ( (LA138_0 == OPEN_BRACKET) )
            	    {
            	        int LA138_2 = input.LA(2);

            	        if ( ((LA138_2 >= 237 && LA138_2 <= 238)) )
            	        {
            	            int LA138_3 = input.LA(3);

            	            if ( (LA138_3 == 211) )
            	            {
            	                alt138 = 1;
            	            }


            	        }


            	    }


            	    switch (alt138) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:728:2: global_attribute
            			    {
            			    	PushFollow(FOLLOW_global_attribute_in_global_attributes6443);
            			    	global_attribute502 = global_attribute();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attribute502.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt138 >= 1 ) goto loop138;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee138 =
            		                new EarlyExitException(138, input);
            		            throw eee138;
            	    }
            	    cnt138++;
            	} while (true);

            	loop138:
            		;	// Stops C# compiler whining that label 'loop138' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 137, global_attributes_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attributes"

    public class global_attribute_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "global_attribute"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:729:8: public global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
    public csParser.global_attribute_return global_attribute() // throws RecognitionException [1]
    {   
        csParser.global_attribute_return retval = new csParser.global_attribute_return();
        retval.start = input.LT(1);
        int global_attribute_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal503 = null;
        IToken char_literal506 = null;
        IToken char_literal507 = null;
        csParser.global_attribute_target_specifier_return global_attribute_target_specifier504 = default(csParser.global_attribute_target_specifier_return);

        csParser.attribute_list_return attribute_list505 = default(csParser.attribute_list_return);


        object char_literal503_tree=null;
        object char_literal506_tree=null;
        object char_literal507_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 138) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:729:24: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:730:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal503=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_global_attribute6455); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal503_tree = (object)adaptor.Create(char_literal503);
            		adaptor.AddChild(root_0, char_literal503_tree);
            	}
            	PushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute6459);
            	global_attribute_target_specifier504 = global_attribute_target_specifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attribute_target_specifier504.Tree);
            	PushFollow(FOLLOW_attribute_list_in_global_attribute6463);
            	attribute_list505 = attribute_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_list505.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:730:61: ( ',' )?
            	int alt139 = 2;
            	int LA139_0 = input.LA(1);

            	if ( (LA139_0 == COMMA) )
            	{
            	    alt139 = 1;
            	}
            	switch (alt139) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:730:61: ','
            	        {
            	        	char_literal506=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_global_attribute6467); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal506_tree = (object)adaptor.Create(char_literal506);
            	        		adaptor.AddChild(root_0, char_literal506_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal507=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_global_attribute6472); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal507_tree = (object)adaptor.Create(char_literal507);
            		adaptor.AddChild(root_0, char_literal507_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 138, global_attribute_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attribute"

    public class global_attribute_target_specifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "global_attribute_target_specifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:731:8: public global_attribute_target_specifier : global_attribute_target ':' ;
    public csParser.global_attribute_target_specifier_return global_attribute_target_specifier() // throws RecognitionException [1]
    {   
        csParser.global_attribute_target_specifier_return retval = new csParser.global_attribute_target_specifier_return();
        retval.start = input.LT(1);
        int global_attribute_target_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal509 = null;
        csParser.global_attribute_target_return global_attribute_target508 = default(csParser.global_attribute_target_return);


        object char_literal509_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 139) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:731:41: ( global_attribute_target ':' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:732:2: global_attribute_target ':'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier6483);
            	global_attribute_target508 = global_attribute_target();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attribute_target508.Tree);
            	char_literal509=(IToken)Match(input,211,FOLLOW_211_in_global_attribute_target_specifier6487); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal509_tree = (object)adaptor.Create(char_literal509);
            		adaptor.AddChild(root_0, char_literal509_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 139, global_attribute_target_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target_specifier"

    public class global_attribute_target_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "global_attribute_target"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:733:8: public global_attribute_target : ( 'assembly' | 'module' );
    public csParser.global_attribute_target_return global_attribute_target() // throws RecognitionException [1]
    {   
        csParser.global_attribute_target_return retval = new csParser.global_attribute_target_return();
        retval.start = input.LT(1);
        int global_attribute_target_StartIndex = input.Index;
        object root_0 = null;

        IToken set510 = null;

        object set510_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 140) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:733:31: ( 'assembly' | 'module' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set510 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 237 && input.LA(1) <= 238) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set510));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 140, global_attribute_target_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target"

    public class attributes_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attributes"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:735:8: public attributes : attribute_sections ;
    public csParser.attributes_return attributes() // throws RecognitionException [1]
    {   
        csParser.attributes_return retval = new csParser.attributes_return();
        retval.start = input.LT(1);
        int attributes_StartIndex = input.Index;
        object root_0 = null;

        csParser.attribute_sections_return attribute_sections511 = default(csParser.attribute_sections_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 141) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:735:18: ( attribute_sections )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:736:2: attribute_sections
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_attribute_sections_in_attributes6513);
            	attribute_sections511 = attribute_sections();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_sections511.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 141, attributes_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attributes"

    public class attribute_sections_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute_sections"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:737:8: public attribute_sections : ( attribute_section )+ ;
    public csParser.attribute_sections_return attribute_sections() // throws RecognitionException [1]
    {   
        csParser.attribute_sections_return retval = new csParser.attribute_sections_return();
        retval.start = input.LT(1);
        int attribute_sections_StartIndex = input.Index;
        object root_0 = null;

        csParser.attribute_section_return attribute_section512 = default(csParser.attribute_section_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 142) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:737:26: ( ( attribute_section )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:738:2: ( attribute_section )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:738:2: ( attribute_section )+
            	int cnt140 = 0;
            	do 
            	{
            	    int alt140 = 2;
            	    int LA140_0 = input.LA(1);

            	    if ( (LA140_0 == OPEN_BRACKET) )
            	    {
            	        alt140 = 1;
            	    }


            	    switch (alt140) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:738:2: attribute_section
            			    {
            			    	PushFollow(FOLLOW_attribute_section_in_attribute_sections6524);
            			    	attribute_section512 = attribute_section();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_section512.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt140 >= 1 ) goto loop140;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee140 =
            		                new EarlyExitException(140, input);
            		            throw eee140;
            	    }
            	    cnt140++;
            	} while (true);

            	loop140:
            		;	// Stops C# compiler whining that label 'loop140' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 142, attribute_sections_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_sections"

    public class attribute_section_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute_section"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:739:8: public attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
    public csParser.attribute_section_return attribute_section() // throws RecognitionException [1]
    {   
        csParser.attribute_section_return retval = new csParser.attribute_section_return();
        retval.start = input.LT(1);
        int attribute_section_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal513 = null;
        IToken char_literal516 = null;
        IToken char_literal517 = null;
        csParser.attribute_target_specifier_return attribute_target_specifier514 = default(csParser.attribute_target_specifier_return);

        csParser.attribute_list_return attribute_list515 = default(csParser.attribute_list_return);


        object char_literal513_tree=null;
        object char_literal516_tree=null;
        object char_literal517_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 143) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:739:25: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:740:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal513=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_attribute_section6536); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal513_tree = (object)adaptor.Create(char_literal513);
            		adaptor.AddChild(root_0, char_literal513_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:740:8: ( attribute_target_specifier )?
            	int alt141 = 2;
            	int LA141_0 = input.LA(1);

            	if ( (LA141_0 == 239 || (LA141_0 >= 241 && LA141_0 <= 244)) )
            	{
            	    int LA141_1 = input.LA(2);

            	    if ( (LA141_1 == 211) )
            	    {
            	        alt141 = 1;
            	    }
            	}
            	else if ( (LA141_0 == RETURN || LA141_0 == 240) )
            	{
            	    alt141 = 1;
            	}
            	switch (alt141) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:740:8: attribute_target_specifier
            	        {
            	        	PushFollow(FOLLOW_attribute_target_specifier_in_attribute_section6540);
            	        	attribute_target_specifier514 = attribute_target_specifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_target_specifier514.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_attribute_list_in_attribute_section6545);
            	attribute_list515 = attribute_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_list515.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:740:55: ( ',' )?
            	int alt142 = 2;
            	int LA142_0 = input.LA(1);

            	if ( (LA142_0 == COMMA) )
            	{
            	    alt142 = 1;
            	}
            	switch (alt142) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:740:55: ','
            	        {
            	        	char_literal516=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_attribute_section6549); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal516_tree = (object)adaptor.Create(char_literal516);
            	        		adaptor.AddChild(root_0, char_literal516_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal517=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_attribute_section6554); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal517_tree = (object)adaptor.Create(char_literal517);
            		adaptor.AddChild(root_0, char_literal517_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 143, attribute_section_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_section"

    public class attribute_target_specifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute_target_specifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:741:8: public attribute_target_specifier : attribute_target ':' ;
    public csParser.attribute_target_specifier_return attribute_target_specifier() // throws RecognitionException [1]
    {   
        csParser.attribute_target_specifier_return retval = new csParser.attribute_target_specifier_return();
        retval.start = input.LT(1);
        int attribute_target_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal519 = null;
        csParser.attribute_target_return attribute_target518 = default(csParser.attribute_target_return);


        object char_literal519_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 144) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:741:34: ( attribute_target ':' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:742:2: attribute_target ':'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_attribute_target_in_attribute_target_specifier6565);
            	attribute_target518 = attribute_target();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_target518.Tree);
            	char_literal519=(IToken)Match(input,211,FOLLOW_211_in_attribute_target_specifier6569); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal519_tree = (object)adaptor.Create(char_literal519);
            		adaptor.AddChild(root_0, char_literal519_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 144, attribute_target_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_target_specifier"

    public class attribute_target_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute_target"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:743:8: public attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
    public csParser.attribute_target_return attribute_target() // throws RecognitionException [1]
    {   
        csParser.attribute_target_return retval = new csParser.attribute_target_return();
        retval.start = input.LT(1);
        int attribute_target_StartIndex = input.Index;
        object root_0 = null;

        IToken set520 = null;

        object set520_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 145) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:743:24: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set520 = (IToken)input.LT(1);
            	if ( input.LA(1) == RETURN || (input.LA(1) >= 239 && input.LA(1) <= 244) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set520));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 145, attribute_target_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_target"

    public class attribute_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:745:8: public attribute_list : attribute ( ',' attribute )* ;
    public csParser.attribute_list_return attribute_list() // throws RecognitionException [1]
    {   
        csParser.attribute_list_return retval = new csParser.attribute_list_return();
        retval.start = input.LT(1);
        int attribute_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal522 = null;
        csParser.attribute_return attribute521 = default(csParser.attribute_return);

        csParser.attribute_return attribute523 = default(csParser.attribute_return);


        object char_literal522_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 146) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:745:22: ( attribute ( ',' attribute )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:746:2: attribute ( ',' attribute )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_attribute_in_attribute_list6615);
            	attribute521 = attribute();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute521.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:746:12: ( ',' attribute )*
            	do 
            	{
            	    int alt143 = 2;
            	    int LA143_0 = input.LA(1);

            	    if ( (LA143_0 == COMMA) )
            	    {
            	        int LA143_1 = input.LA(2);

            	        if ( (LA143_1 == IDENTIFIER || (LA143_1 >= ELIF && LA143_1 <= UNDEF) || LA143_1 == 195 || LA143_1 == 221 || (LA143_1 >= 224 && LA143_1 <= 239) || (LA143_1 >= 241 && LA143_1 <= 244) || (LA143_1 >= 247 && LA143_1 <= 250) || LA143_1 == 256 || (LA143_1 >= 263 && LA143_1 <= 264) || LA143_1 == 274 || LA143_1 == 277) )
            	        {
            	            alt143 = 1;
            	        }


            	    }


            	    switch (alt143) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:746:13: ',' attribute
            			    {
            			    	char_literal522=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_attribute_list6618); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal522_tree = (object)adaptor.Create(char_literal522);
            			    		adaptor.AddChild(root_0, char_literal522_tree);
            			    	}
            			    	PushFollow(FOLLOW_attribute_in_attribute_list6620);
            			    	attribute523 = attribute();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute523.Tree);

            			    }
            			    break;

            			default:
            			    goto loop143;
            	    }
            	} while (true);

            	loop143:
            		;	// Stops C# compiler whining that label 'loop143' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 146, attribute_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_list"

    public class attribute_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:747:8: public attribute : type_name ( attribute_arguments )? ;
    public csParser.attribute_return attribute() // throws RecognitionException [1]
    {   
        csParser.attribute_return retval = new csParser.attribute_return();
        retval.start = input.LT(1);
        int attribute_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_name_return type_name524 = default(csParser.type_name_return);

        csParser.attribute_arguments_return attribute_arguments525 = default(csParser.attribute_arguments_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 147) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:747:17: ( type_name ( attribute_arguments )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:748:2: type_name ( attribute_arguments )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_name_in_attribute6634);
            	type_name524 = type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name524.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:748:14: ( attribute_arguments )?
            	int alt144 = 2;
            	int LA144_0 = input.LA(1);

            	if ( (LA144_0 == LPAREN) )
            	{
            	    alt144 = 1;
            	}
            	switch (alt144) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:748:14: attribute_arguments
            	        {
            	        	PushFollow(FOLLOW_attribute_arguments_in_attribute6638);
            	        	attribute_arguments525 = attribute_arguments();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_arguments525.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 147, attribute_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute"

    public class attribute_arguments_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute_arguments"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:750:8: public attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
    public csParser.attribute_arguments_return attribute_arguments() // throws RecognitionException [1]
    {   
        csParser.attribute_arguments_return retval = new csParser.attribute_arguments_return();
        retval.start = input.LT(1);
        int attribute_arguments_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal526 = null;
        IToken char_literal527 = null;
        IToken char_literal530 = null;
        IToken char_literal532 = null;
        csParser.positional_argument_return positional_argument528 = default(csParser.positional_argument_return);

        csParser.named_argument_return named_argument529 = default(csParser.named_argument_return);

        csParser.positional_argument_return positional_argument531 = default(csParser.positional_argument_return);


        object char_literal526_tree=null;
        object char_literal527_tree=null;
        object char_literal530_tree=null;
        object char_literal532_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 148) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:750:27: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:751:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal526=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_attribute_arguments6651); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal526_tree = (object)adaptor.Create(char_literal526);
            		adaptor.AddChild(root_0, char_literal526_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:751:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
            	int alt146 = 2;
            	int LA146_0 = input.LA(1);

            	if ( (LA146_0 == RPAREN) )
            	{
            	    alt146 = 1;
            	}
            	else if ( ((LA146_0 >= MONONOT && LA146_0 <= MONOTWIDDLE) || (LA146_0 >= OBJECT && LA146_0 <= THIS) || LA146_0 == LPAREN || LA146_0 == BIT_AND || (LA146_0 >= PLUS && LA146_0 <= MINUS) || LA146_0 == STAR || (LA146_0 >= BOOL && LA146_0 <= NULL) || (LA146_0 >= ELIF && LA146_0 <= UNDEF) || LA146_0 == 195 || LA146_0 == 197 || LA146_0 == 207 || (LA146_0 >= 209 && LA146_0 <= 210) || (LA146_0 >= 214 && LA146_0 <= 219) || LA146_0 == 221 || (LA146_0 >= 224 && LA146_0 <= 239) || (LA146_0 >= 241 && LA146_0 <= 244) || (LA146_0 >= 247 && LA146_0 <= 254) || LA146_0 == 256 || (LA146_0 >= 263 && LA146_0 <= 264) || (LA146_0 >= 274 && LA146_0 <= 277)) )
            	{
            	    alt146 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d146s0 =
            	        new NoViableAltException("", 146, 0, input);

            	    throw nvae_d146s0;
            	}
            	switch (alt146) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:751:9: ')'
            	        {
            	        	char_literal527=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments6656); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal527_tree = (object)adaptor.Create(char_literal527);
            	        		adaptor.AddChild(root_0, char_literal527_tree);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:752:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
            	        {
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:752:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:752:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
            	        	{
            	        		PushFollow(FOLLOW_positional_argument_in_attribute_arguments6676);
            	        		positional_argument528 = positional_argument();
            	        		state._fsp--;
            	        		if (state.failed) return retval;
            	        		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, positional_argument528.Tree);
            	        		// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:752:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
            	        		do 
            	        		{
            	        		    int alt145 = 3;
            	        		    int LA145_0 = input.LA(1);

            	        		    if ( (LA145_0 == IDENTIFIER) && (synpred26_cs()) )
            	        		    {
            	        		        alt145 = 1;
            	        		    }
            	        		    else if ( ((LA145_0 >= ELIF && LA145_0 <= UNDEF) || LA145_0 == 195 || LA145_0 == 221 || (LA145_0 >= 224 && LA145_0 <= 239) || (LA145_0 >= 241 && LA145_0 <= 244) || (LA145_0 >= 247 && LA145_0 <= 250) || LA145_0 == 256 || (LA145_0 >= 263 && LA145_0 <= 264) || LA145_0 == 274 || LA145_0 == 277) && (synpred26_cs()) )
            	        		    {
            	        		        alt145 = 1;
            	        		    }
            	        		    else if ( (LA145_0 == COMMA) )
            	        		    {
            	        		        alt145 = 2;
            	        		    }


            	        		    switch (alt145) 
            	        			{
            	        				case 1 :
            	        				    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:752:32: ( ',' identifier '=' )=> named_argument
            	        				    {
            	        				    	PushFollow(FOLLOW_named_argument_in_attribute_arguments6695);
            	        				    	named_argument529 = named_argument();
            	        				    	state._fsp--;
            	        				    	if (state.failed) return retval;
            	        				    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, named_argument529.Tree);

            	        				    }
            	        				    break;
            	        				case 2 :
            	        				    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:753:15: ',' positional_argument
            	        				    {
            	        				    	char_literal530=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_attribute_arguments6711); if (state.failed) return retval;
            	        				    	if ( state.backtracking == 0 )
            	        				    	{char_literal530_tree = (object)adaptor.Create(char_literal530);
            	        				    		adaptor.AddChild(root_0, char_literal530_tree);
            	        				    	}
            	        				    	PushFollow(FOLLOW_positional_argument_in_attribute_arguments6713);
            	        				    	positional_argument531 = positional_argument();
            	        				    	state._fsp--;
            	        				    	if (state.failed) return retval;
            	        				    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, positional_argument531.Tree);

            	        				    }
            	        				    break;

            	        				default:
            	        				    goto loop145;
            	        		    }
            	        		} while (true);

            	        		loop145:
            	        			;	// Stops C# compiler whining that label 'loop145' has no statements


            	        	}

            	        	char_literal532=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments6724); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal532_tree = (object)adaptor.Create(char_literal532);
            	        		adaptor.AddChild(root_0, char_literal532_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 148, attribute_arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_arguments"

    public class positional_argument_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "positional_argument_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:756:8: public positional_argument_list : positional_argument ( ',' positional_argument )* ;
    public csParser.positional_argument_list_return positional_argument_list() // throws RecognitionException [1]
    {   
        csParser.positional_argument_list_return retval = new csParser.positional_argument_list_return();
        retval.start = input.LT(1);
        int positional_argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal534 = null;
        csParser.positional_argument_return positional_argument533 = default(csParser.positional_argument_return);

        csParser.positional_argument_return positional_argument535 = default(csParser.positional_argument_return);


        object char_literal534_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 149) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:756:32: ( positional_argument ( ',' positional_argument )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:757:2: positional_argument ( ',' positional_argument )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_positional_argument_in_positional_argument_list6740);
            	positional_argument533 = positional_argument();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, positional_argument533.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:757:22: ( ',' positional_argument )*
            	do 
            	{
            	    int alt147 = 2;
            	    int LA147_0 = input.LA(1);

            	    if ( (LA147_0 == COMMA) )
            	    {
            	        alt147 = 1;
            	    }


            	    switch (alt147) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:757:23: ',' positional_argument
            			    {
            			    	char_literal534=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_positional_argument_list6743); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal534_tree = (object)adaptor.Create(char_literal534);
            			    		adaptor.AddChild(root_0, char_literal534_tree);
            			    	}
            			    	PushFollow(FOLLOW_positional_argument_in_positional_argument_list6745);
            			    	positional_argument535 = positional_argument();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, positional_argument535.Tree);

            			    }
            			    break;

            			default:
            			    goto loop147;
            	    }
            	} while (true);

            	loop147:
            		;	// Stops C# compiler whining that label 'loop147' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 149, positional_argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "positional_argument_list"

    public class positional_argument_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "positional_argument"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:758:8: public positional_argument : attribute_argument_expression ;
    public csParser.positional_argument_return positional_argument() // throws RecognitionException [1]
    {   
        csParser.positional_argument_return retval = new csParser.positional_argument_return();
        retval.start = input.LT(1);
        int positional_argument_StartIndex = input.Index;
        object root_0 = null;

        csParser.attribute_argument_expression_return attribute_argument_expression536 = default(csParser.attribute_argument_expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 150) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:758:27: ( attribute_argument_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:759:2: attribute_argument_expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_attribute_argument_expression_in_positional_argument6758);
            	attribute_argument_expression536 = attribute_argument_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_argument_expression536.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 150, positional_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "positional_argument"

    public class named_argument_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "named_argument_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:760:8: public named_argument_list : named_argument ( ',' named_argument )* ;
    public csParser.named_argument_list_return named_argument_list() // throws RecognitionException [1]
    {   
        csParser.named_argument_list_return retval = new csParser.named_argument_list_return();
        retval.start = input.LT(1);
        int named_argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal538 = null;
        csParser.named_argument_return named_argument537 = default(csParser.named_argument_return);

        csParser.named_argument_return named_argument539 = default(csParser.named_argument_return);


        object char_literal538_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 151) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:760:27: ( named_argument ( ',' named_argument )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:761:2: named_argument ( ',' named_argument )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_named_argument_in_named_argument_list6769);
            	named_argument537 = named_argument();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, named_argument537.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:761:17: ( ',' named_argument )*
            	do 
            	{
            	    int alt148 = 2;
            	    int LA148_0 = input.LA(1);

            	    if ( (LA148_0 == COMMA) )
            	    {
            	        alt148 = 1;
            	    }


            	    switch (alt148) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:761:18: ',' named_argument
            			    {
            			    	char_literal538=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_named_argument_list6772); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal538_tree = (object)adaptor.Create(char_literal538);
            			    		adaptor.AddChild(root_0, char_literal538_tree);
            			    	}
            			    	PushFollow(FOLLOW_named_argument_in_named_argument_list6774);
            			    	named_argument539 = named_argument();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, named_argument539.Tree);

            			    }
            			    break;

            			default:
            			    goto loop148;
            	    }
            	} while (true);

            	loop148:
            		;	// Stops C# compiler whining that label 'loop148' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 151, named_argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "named_argument_list"

    public class named_argument_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "named_argument"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:762:8: public named_argument : identifier '=' attribute_argument_expression ;
    public csParser.named_argument_return named_argument() // throws RecognitionException [1]
    {   
        csParser.named_argument_return retval = new csParser.named_argument_return();
        retval.start = input.LT(1);
        int named_argument_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal541 = null;
        csParser.identifier_return identifier540 = default(csParser.identifier_return);

        csParser.attribute_argument_expression_return attribute_argument_expression542 = default(csParser.attribute_argument_expression_return);


        object char_literal541_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 152) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:762:22: ( identifier '=' attribute_argument_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:763:2: identifier '=' attribute_argument_expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_named_argument6787);
            	identifier540 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier540.Tree);
            	char_literal541=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_named_argument6791); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal541_tree = (object)adaptor.Create(char_literal541);
            		adaptor.AddChild(root_0, char_literal541_tree);
            	}
            	PushFollow(FOLLOW_attribute_argument_expression_in_named_argument6795);
            	attribute_argument_expression542 = attribute_argument_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_argument_expression542.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 152, named_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "named_argument"

    public class attribute_argument_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "attribute_argument_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:764:8: public attribute_argument_expression : expression ;
    public csParser.attribute_argument_expression_return attribute_argument_expression() // throws RecognitionException [1]
    {   
        csParser.attribute_argument_expression_return retval = new csParser.attribute_argument_expression_return();
        retval.start = input.LT(1);
        int attribute_argument_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression543 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 153) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:764:37: ( expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:765:2: expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_attribute_argument_expression6806);
            	expression543 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression543.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 153, attribute_argument_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_argument_expression"

    public class class_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "class_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:771:8: public class_declaration : 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ;
    public csParser.class_declaration_return class_declaration() // throws RecognitionException [1]
    {   
        csParser.class_declaration_return retval = new csParser.class_declaration_return();
        retval.start = input.LT(1);
        int class_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal544 = null;
        IToken char_literal549 = null;
        csParser.type_or_generic_return type_or_generic545 = default(csParser.type_or_generic_return);

        csParser.class_base_return class_base546 = default(csParser.class_base_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses547 = default(csParser.type_parameter_constraints_clauses_return);

        csParser.class_body_return class_body548 = default(csParser.class_body_return);


        object string_literal544_tree=null;
        object char_literal549_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 154) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:771:25: ( 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:772:2: 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal544=(IToken)Match(input,245,FOLLOW_245_in_class_declaration6821); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal544_tree = (object)adaptor.Create(string_literal544);
            		adaptor.AddChild(root_0, string_literal544_tree);
            	}
            	PushFollow(FOLLOW_type_or_generic_in_class_declaration6824);
            	type_or_generic545 = type_or_generic();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_or_generic545.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:772:29: ( class_base )?
            	int alt149 = 2;
            	int LA149_0 = input.LA(1);

            	if ( (LA149_0 == 211) )
            	{
            	    alt149 = 1;
            	}
            	switch (alt149) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:772:29: class_base
            	        {
            	        	PushFollow(FOLLOW_class_base_in_class_declaration6828);
            	        	class_base546 = class_base();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_base546.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:772:43: ( type_parameter_constraints_clauses )?
            	int alt150 = 2;
            	int LA150_0 = input.LA(1);

            	if ( (LA150_0 == 236) )
            	{
            	    alt150 = 1;
            	}
            	switch (alt150) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:772:43: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration6833);
            	        	type_parameter_constraints_clauses547 = type_parameter_constraints_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses547.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_class_body_in_class_declaration6838);
            	class_body548 = class_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_body548.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:772:94: ( ';' )?
            	int alt151 = 2;
            	int LA151_0 = input.LA(1);

            	if ( (LA151_0 == SEMI) )
            	{
            	    alt151 = 1;
            	}
            	switch (alt151) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:772:94: ';'
            	        {
            	        	char_literal549=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_class_declaration6842); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal549_tree = (object)adaptor.Create(char_literal549);
            	        		adaptor.AddChild(root_0, char_literal549_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 154, class_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_declaration"

    public class class_base_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "class_base"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:773:8: public class_base : ':' interface_type_list ;
    public csParser.class_base_return class_base() // throws RecognitionException [1]
    {   
        csParser.class_base_return retval = new csParser.class_base_return();
        retval.start = input.LT(1);
        int class_base_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal550 = null;
        csParser.interface_type_list_return interface_type_list551 = default(csParser.interface_type_list_return);


        object char_literal550_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 155) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:773:18: ( ':' interface_type_list )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:776:2: ':' interface_type_list
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal550=(IToken)Match(input,211,FOLLOW_211_in_class_base6857); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal550_tree = (object)adaptor.Create(char_literal550);
            		adaptor.AddChild(root_0, char_literal550_tree);
            	}
            	PushFollow(FOLLOW_interface_type_list_in_class_base6861);
            	interface_type_list551 = interface_type_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_type_list551.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 155, class_base_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_base"

    public class interface_type_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_type_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:778:8: public interface_type_list : type ( ',' type )* ;
    public csParser.interface_type_list_return interface_type_list() // throws RecognitionException [1]
    {   
        csParser.interface_type_list_return retval = new csParser.interface_type_list_return();
        retval.start = input.LT(1);
        int interface_type_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal553 = null;
        csParser.type_return type552 = default(csParser.type_return);

        csParser.type_return type554 = default(csParser.type_return);


        object char_literal553_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 156) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:778:27: ( type ( ',' type )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:779:2: type ( ',' type )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_in_interface_type_list6873);
            	type552 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type552.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:779:7: ( ',' type )*
            	do 
            	{
            	    int alt152 = 2;
            	    int LA152_0 = input.LA(1);

            	    if ( (LA152_0 == COMMA) )
            	    {
            	        alt152 = 1;
            	    }


            	    switch (alt152) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:779:8: ',' type
            			    {
            			    	char_literal553=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_interface_type_list6876); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal553_tree = (object)adaptor.Create(char_literal553);
            			    		adaptor.AddChild(root_0, char_literal553_tree);
            			    	}
            			    	PushFollow(FOLLOW_type_in_interface_type_list6880);
            			    	type554 = type();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type554.Tree);

            			    }
            			    break;

            			default:
            			    goto loop152;
            	    }
            	} while (true);

            	loop152:
            		;	// Stops C# compiler whining that label 'loop152' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 156, interface_type_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_type_list"

    public class class_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "class_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:781:8: public class_body : '{' ( class_member_declarations )? '}' ;
    public csParser.class_body_return class_body() // throws RecognitionException [1]
    {   
        csParser.class_body_return retval = new csParser.class_body_return();
        retval.start = input.LT(1);
        int class_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal555 = null;
        IToken char_literal557 = null;
        csParser.class_member_declarations_return class_member_declarations556 = default(csParser.class_member_declarations_return);


        object char_literal555_tree=null;
        object char_literal557_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 157) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:781:18: ( '{' ( class_member_declarations )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:782:2: '{' ( class_member_declarations )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal555=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_class_body6893); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal555_tree = (object)adaptor.Create(char_literal555);
            		adaptor.AddChild(root_0, char_literal555_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:782:8: ( class_member_declarations )?
            	int alt153 = 2;
            	int LA153_0 = input.LA(1);

            	if ( (LA153_0 == ENUM || LA153_0 == MONOTWIDDLE || (LA153_0 >= PUBLIC && LA153_0 <= STATIC) || LA153_0 == OBJECT || LA153_0 == OPEN_BRACKET || (LA153_0 >= BOOL && LA153_0 <= IDENTIFIER) || (LA153_0 >= ELIF && LA153_0 <= UNDEF) || (LA153_0 >= 194 && LA153_0 <= 206) || LA153_0 == 218 || LA153_0 == 221 || (LA153_0 >= 224 && LA153_0 <= 245) || (LA153_0 >= 247 && LA153_0 <= 256) || LA153_0 == 258 || (LA153_0 >= 260 && LA153_0 <= 261) || (LA153_0 >= 263 && LA153_0 <= 264) || (LA153_0 >= 274 && LA153_0 <= 277)) )
            	{
            	    alt153 = 1;
            	}
            	switch (alt153) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:782:8: class_member_declarations
            	        {
            	        	PushFollow(FOLLOW_class_member_declarations_in_class_body6897);
            	        	class_member_declarations556 = class_member_declarations();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_member_declarations556.Tree);

            	        }
            	        break;

            	}

            	char_literal557=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_class_body6902); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal557_tree = (object)adaptor.Create(char_literal557);
            		adaptor.AddChild(root_0, char_literal557_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 157, class_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_body"

    public class class_member_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "class_member_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:783:8: public class_member_declarations : ( class_member_declaration )+ ;
    public csParser.class_member_declarations_return class_member_declarations() // throws RecognitionException [1]
    {   
        csParser.class_member_declarations_return retval = new csParser.class_member_declarations_return();
        retval.start = input.LT(1);
        int class_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.class_member_declaration_return class_member_declaration558 = default(csParser.class_member_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 158) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:783:33: ( ( class_member_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:784:2: ( class_member_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:784:2: ( class_member_declaration )+
            	int cnt154 = 0;
            	do 
            	{
            	    int alt154 = 2;
            	    int LA154_0 = input.LA(1);

            	    if ( (LA154_0 == ENUM || LA154_0 == MONOTWIDDLE || (LA154_0 >= PUBLIC && LA154_0 <= STATIC) || LA154_0 == OBJECT || LA154_0 == OPEN_BRACKET || (LA154_0 >= BOOL && LA154_0 <= IDENTIFIER) || (LA154_0 >= ELIF && LA154_0 <= UNDEF) || (LA154_0 >= 194 && LA154_0 <= 206) || LA154_0 == 218 || LA154_0 == 221 || (LA154_0 >= 224 && LA154_0 <= 245) || (LA154_0 >= 247 && LA154_0 <= 256) || LA154_0 == 258 || (LA154_0 >= 260 && LA154_0 <= 261) || (LA154_0 >= 263 && LA154_0 <= 264) || (LA154_0 >= 274 && LA154_0 <= 277)) )
            	    {
            	        alt154 = 1;
            	    }


            	    switch (alt154) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:784:2: class_member_declaration
            			    {
            			    	PushFollow(FOLLOW_class_member_declaration_in_class_member_declarations6912);
            			    	class_member_declaration558 = class_member_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_member_declaration558.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt154 >= 1 ) goto loop154;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee154 =
            		                new EarlyExitException(154, input);
            		            throw eee154;
            	    }
            	    cnt154++;
            	} while (true);

            	loop154:
            		;	// Stops C# compiler whining that label 'loop154' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 158, class_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_member_declarations"

    public class constant_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constant_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:787:8: public constant_declaration : 'const' type constant_declarators ';' ;
    public csParser.constant_declaration_return constant_declaration() // throws RecognitionException [1]
    {   
        csParser.constant_declaration_return retval = new csParser.constant_declaration_return();
        retval.start = input.LT(1);
        int constant_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal559 = null;
        IToken char_literal562 = null;
        csParser.type_return type560 = default(csParser.type_return);

        csParser.constant_declarators_return constant_declarators561 = default(csParser.constant_declarators_return);


        object string_literal559_tree=null;
        object char_literal562_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 159) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:787:28: ( 'const' type constant_declarators ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:788:2: 'const' type constant_declarators ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal559=(IToken)Match(input,205,FOLLOW_205_in_constant_declaration6925); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal559_tree = (object)adaptor.Create(string_literal559);
            		adaptor.AddChild(root_0, string_literal559_tree);
            	}
            	PushFollow(FOLLOW_type_in_constant_declaration6929);
            	type560 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type560.Tree);
            	PushFollow(FOLLOW_constant_declarators_in_constant_declaration6933);
            	constant_declarators561 = constant_declarators();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarators561.Tree);
            	char_literal562=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_constant_declaration6937); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal562_tree = (object)adaptor.Create(char_literal562);
            		adaptor.AddChild(root_0, char_literal562_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 159, constant_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declaration"

    public class constant_declarators_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constant_declarators"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:789:8: public constant_declarators : constant_declarator ( ',' constant_declarator )* ;
    public csParser.constant_declarators_return constant_declarators() // throws RecognitionException [1]
    {   
        csParser.constant_declarators_return retval = new csParser.constant_declarators_return();
        retval.start = input.LT(1);
        int constant_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal564 = null;
        csParser.constant_declarator_return constant_declarator563 = default(csParser.constant_declarator_return);

        csParser.constant_declarator_return constant_declarator565 = default(csParser.constant_declarator_return);


        object char_literal564_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 160) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:789:28: ( constant_declarator ( ',' constant_declarator )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:790:2: constant_declarator ( ',' constant_declarator )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_constant_declarator_in_constant_declarators6947);
            	constant_declarator563 = constant_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarator563.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:790:22: ( ',' constant_declarator )*
            	do 
            	{
            	    int alt155 = 2;
            	    int LA155_0 = input.LA(1);

            	    if ( (LA155_0 == COMMA) )
            	    {
            	        alt155 = 1;
            	    }


            	    switch (alt155) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:790:23: ',' constant_declarator
            			    {
            			    	char_literal564=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_constant_declarators6950); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal564_tree = (object)adaptor.Create(char_literal564);
            			    		adaptor.AddChild(root_0, char_literal564_tree);
            			    	}
            			    	PushFollow(FOLLOW_constant_declarator_in_constant_declarators6952);
            			    	constant_declarator565 = constant_declarator();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarator565.Tree);

            			    }
            			    break;

            			default:
            			    goto loop155;
            	    }
            	} while (true);

            	loop155:
            		;	// Stops C# compiler whining that label 'loop155' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 160, constant_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declarators"

    public class constant_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constant_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:791:8: public constant_declarator : identifier ( '=' constant_expression )? ;
    public csParser.constant_declarator_return constant_declarator() // throws RecognitionException [1]
    {   
        csParser.constant_declarator_return retval = new csParser.constant_declarator_return();
        retval.start = input.LT(1);
        int constant_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal567 = null;
        csParser.identifier_return identifier566 = default(csParser.identifier_return);

        csParser.constant_expression_return constant_expression568 = default(csParser.constant_expression_return);


        object char_literal567_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 161) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:791:27: ( identifier ( '=' constant_expression )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:792:2: identifier ( '=' constant_expression )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_constant_declarator6964);
            	identifier566 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier566.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:792:15: ( '=' constant_expression )?
            	int alt156 = 2;
            	int LA156_0 = input.LA(1);

            	if ( (LA156_0 == ASSIGN) )
            	{
            	    alt156 = 1;
            	}
            	switch (alt156) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:792:16: '=' constant_expression
            	        {
            	        	char_literal567=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_constant_declarator6969); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal567_tree = (object)adaptor.Create(char_literal567);
            	        		adaptor.AddChild(root_0, char_literal567_tree);
            	        	}
            	        	PushFollow(FOLLOW_constant_expression_in_constant_declarator6973);
            	        	constant_expression568 = constant_expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_expression568.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 161, constant_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declarator"

    public class constant_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constant_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:793:8: public constant_expression : expression ;
    public csParser.constant_expression_return constant_expression() // throws RecognitionException [1]
    {   
        csParser.constant_expression_return retval = new csParser.constant_expression_return();
        retval.start = input.LT(1);
        int constant_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression569 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 162) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:793:27: ( expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:794:2: expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_constant_expression6985);
            	expression569 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression569.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 162, constant_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_expression"

    public class field_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "field_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:797:8: public field_declaration : variable_declarators ';' ;
    public csParser.field_declaration_return field_declaration() // throws RecognitionException [1]
    {   
        csParser.field_declaration_return retval = new csParser.field_declaration_return();
        retval.start = input.LT(1);
        int field_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal571 = null;
        csParser.variable_declarators_return variable_declarators570 = default(csParser.variable_declarators_return);


        object char_literal571_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 163) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:797:25: ( variable_declarators ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:798:2: variable_declarators ';'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_variable_declarators_in_field_declaration6996);
            	variable_declarators570 = variable_declarators();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarators570.Tree);
            	char_literal571=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_field_declaration7000); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal571_tree = (object)adaptor.Create(char_literal571);
            		adaptor.AddChild(root_0, char_literal571_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 163, field_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "field_declaration"

    public class variable_declarators_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variable_declarators"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:799:8: public variable_declarators : variable_declarator ( ',' variable_declarator )* ;
    public csParser.variable_declarators_return variable_declarators() // throws RecognitionException [1]
    {   
        csParser.variable_declarators_return retval = new csParser.variable_declarators_return();
        retval.start = input.LT(1);
        int variable_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal573 = null;
        csParser.variable_declarator_return variable_declarator572 = default(csParser.variable_declarator_return);

        csParser.variable_declarator_return variable_declarator574 = default(csParser.variable_declarator_return);


        object char_literal573_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 164) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:799:28: ( variable_declarator ( ',' variable_declarator )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:800:2: variable_declarator ( ',' variable_declarator )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7010);
            	variable_declarator572 = variable_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarator572.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:800:22: ( ',' variable_declarator )*
            	do 
            	{
            	    int alt157 = 2;
            	    int LA157_0 = input.LA(1);

            	    if ( (LA157_0 == COMMA) )
            	    {
            	        alt157 = 1;
            	    }


            	    switch (alt157) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:800:23: ',' variable_declarator
            			    {
            			    	char_literal573=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_variable_declarators7013); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal573_tree = (object)adaptor.Create(char_literal573);
            			    		adaptor.AddChild(root_0, char_literal573_tree);
            			    	}
            			    	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7017);
            			    	variable_declarator574 = variable_declarator();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarator574.Tree);

            			    }
            			    break;

            			default:
            			    goto loop157;
            	    }
            	} while (true);

            	loop157:
            		;	// Stops C# compiler whining that label 'loop157' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 164, variable_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_declarators"

    public class variable_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variable_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:801:8: public variable_declarator : type_name ( '=' variable_initializer )? ;
    public csParser.variable_declarator_return variable_declarator() // throws RecognitionException [1]
    {   
        csParser.variable_declarator_return retval = new csParser.variable_declarator_return();
        retval.start = input.LT(1);
        int variable_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal576 = null;
        csParser.type_name_return type_name575 = default(csParser.type_name_return);

        csParser.variable_initializer_return variable_initializer577 = default(csParser.variable_initializer_return);


        object char_literal576_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 165) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:801:27: ( type_name ( '=' variable_initializer )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:802:2: type_name ( '=' variable_initializer )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_name_in_variable_declarator7029);
            	type_name575 = type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name575.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:802:12: ( '=' variable_initializer )?
            	int alt158 = 2;
            	int LA158_0 = input.LA(1);

            	if ( (LA158_0 == ASSIGN) )
            	{
            	    alt158 = 1;
            	}
            	switch (alt158) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:802:13: '=' variable_initializer
            	        {
            	        	char_literal576=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_variable_declarator7032); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal576_tree = (object)adaptor.Create(char_literal576);
            	        		adaptor.AddChild(root_0, char_literal576_tree);
            	        	}
            	        	PushFollow(FOLLOW_variable_initializer_in_variable_declarator7036);
            	        	variable_initializer577 = variable_initializer();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer577.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 165, variable_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_declarator"

    public class method_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "method_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:805:8: public method_declaration : method_header method_body ;
    public csParser.method_declaration_return method_declaration() // throws RecognitionException [1]
    {   
        csParser.method_declaration_return retval = new csParser.method_declaration_return();
        retval.start = input.LT(1);
        int method_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.method_header_return method_header578 = default(csParser.method_header_return);

        csParser.method_body_return method_body579 = default(csParser.method_body_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 166) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:805:26: ( method_header method_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:806:2: method_header method_body
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_method_header_in_method_declaration7052);
            	method_header578 = method_header();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_header578.Tree);
            	PushFollow(FOLLOW_method_body_in_method_declaration7056);
            	method_body579 = method_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_body579.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 166, method_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_declaration"

    public class method_header_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "method_header"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:807:8: public method_header : member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ( throw_exceptions )? ;
    public csParser.method_header_return method_header() // throws RecognitionException [1]
    {   
        csParser.method_header_return retval = new csParser.method_header_return();
        retval.start = input.LT(1);
        int method_header_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal581 = null;
        IToken char_literal583 = null;
        csParser.member_name_return member_name580 = default(csParser.member_name_return);

        csParser.formal_parameter_list_return formal_parameter_list582 = default(csParser.formal_parameter_list_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses584 = default(csParser.type_parameter_constraints_clauses_return);

        csParser.throw_exceptions_return throw_exceptions585 = default(csParser.throw_exceptions_return);


        object char_literal581_tree=null;
        object char_literal583_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 167) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:807:21: ( member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ( throw_exceptions )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:808:2: member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ( throw_exceptions )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_member_name_in_method_header7066);
            	member_name580 = member_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_name580.Tree);
            	char_literal581=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_method_header7069); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal581_tree = (object)adaptor.Create(char_literal581);
            		adaptor.AddChild(root_0, char_literal581_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:808:21: ( formal_parameter_list )?
            	int alt159 = 2;
            	int LA159_0 = input.LA(1);

            	if ( ((LA159_0 >= OBJECT && LA159_0 <= THIS) || LA159_0 == OPEN_BRACKET || (LA159_0 >= BOOL && LA159_0 <= IDENTIFIER) || (LA159_0 >= ELIF && LA159_0 <= UNDEF) || LA159_0 == 195 || LA159_0 == 206 || (LA159_0 >= 212 && LA159_0 <= 213) || LA159_0 == 221 || (LA159_0 >= 224 && LA159_0 <= 239) || (LA159_0 >= 241 && LA159_0 <= 244) || (LA159_0 >= 247 && LA159_0 <= 254) || (LA159_0 >= 256 && LA159_0 <= 257) || (LA159_0 >= 263 && LA159_0 <= 264) || (LA159_0 >= 274 && LA159_0 <= 277)) )
            	{
            	    alt159 = 1;
            	}
            	switch (alt159) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:808:21: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_method_header7073);
            	        	formal_parameter_list582 = formal_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list582.Tree);

            	        }
            	        break;

            	}

            	char_literal583=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_method_header7078); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal583_tree = (object)adaptor.Create(char_literal583);
            		adaptor.AddChild(root_0, char_literal583_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:808:52: ( type_parameter_constraints_clauses )?
            	int alt160 = 2;
            	int LA160_0 = input.LA(1);

            	if ( (LA160_0 == 236) )
            	{
            	    alt160 = 1;
            	}
            	switch (alt160) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:808:52: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header7082);
            	        	type_parameter_constraints_clauses584 = type_parameter_constraints_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses584.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:810:9: ( throw_exceptions )?
            	int alt161 = 2;
            	int LA161_0 = input.LA(1);

            	if ( (LA161_0 == 246) && ((IsJavaish)) )
            	{
            	    alt161 = 1;
            	}
            	switch (alt161) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:810:9: throw_exceptions
            	        {
            	        	PushFollow(FOLLOW_throw_exceptions_in_method_header7103);
            	        	throw_exceptions585 = throw_exceptions();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, throw_exceptions585.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 167, method_header_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_header"

    public class method_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "method_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:812:8: public method_body : block ;
    public csParser.method_body_return method_body() // throws RecognitionException [1]
    {   
        csParser.method_body_return retval = new csParser.method_body_return();
        retval.start = input.LT(1);
        int method_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block586 = default(csParser.block_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 168) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:812:19: ( block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:813:2: block
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_block_in_method_body7114);
            	block586 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block586.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 168, method_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_body"

    public class member_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "member_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:814:8: public member_name : qid ;
    public csParser.member_name_return member_name() // throws RecognitionException [1]
    {   
        csParser.member_name_return retval = new csParser.member_name_return();
        retval.start = input.LT(1);
        int member_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.qid_return qid587 = default(csParser.qid_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 169) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:814:19: ( qid )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:815:2: qid
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_qid_in_member_name7124);
            	qid587 = qid();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid587.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 169, member_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_name"

    public class throw_exceptions_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "throw_exceptions"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:817:1: throw_exceptions : {...}? => 'throws' identifier ( ',' identifier )* ;
    public csParser.throw_exceptions_return throw_exceptions() // throws RecognitionException [1]
    {   
        csParser.throw_exceptions_return retval = new csParser.throw_exceptions_return();
        retval.start = input.LT(1);
        int throw_exceptions_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal588 = null;
        IToken char_literal590 = null;
        csParser.identifier_return identifier589 = default(csParser.identifier_return);

        csParser.identifier_return identifier591 = default(csParser.identifier_return);


        object string_literal588_tree=null;
        object char_literal590_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 170) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:817:17: ({...}? => 'throws' identifier ( ',' identifier )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:818:4: {...}? => 'throws' identifier ( ',' identifier )*
            {
            	root_0 = (object)adaptor.Nil;

            	if ( !((IsJavaish)) ) 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    throw new FailedPredicateException(input, "throw_exceptions", "IsJavaish");
            	}
            	string_literal588=(IToken)Match(input,246,FOLLOW_246_in_throw_exceptions7141); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal588_tree = (object)adaptor.Create(string_literal588);
            		adaptor.AddChild(root_0, string_literal588_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_throw_exceptions7143);
            	identifier589 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier589.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:818:39: ( ',' identifier )*
            	do 
            	{
            	    int alt162 = 2;
            	    int LA162_0 = input.LA(1);

            	    if ( (LA162_0 == COMMA) )
            	    {
            	        alt162 = 1;
            	    }


            	    switch (alt162) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:818:40: ',' identifier
            			    {
            			    	char_literal590=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_throw_exceptions7146); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal590_tree = (object)adaptor.Create(char_literal590);
            			    		adaptor.AddChild(root_0, char_literal590_tree);
            			    	}
            			    	PushFollow(FOLLOW_identifier_in_throw_exceptions7148);
            			    	identifier591 = identifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier591.Tree);

            			    }
            			    break;

            			default:
            			    goto loop162;
            	    }
            	} while (true);

            	loop162:
            		;	// Stops C# compiler whining that label 'loop162' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 170, throw_exceptions_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "throw_exceptions"

    public class property_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "property_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:822:8: public property_declaration : member_name '{' accessor_declarations '}' ;
    public csParser.property_declaration_return property_declaration() // throws RecognitionException [1]
    {   
        csParser.property_declaration_return retval = new csParser.property_declaration_return();
        retval.start = input.LT(1);
        int property_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal593 = null;
        IToken char_literal595 = null;
        csParser.member_name_return member_name592 = default(csParser.member_name_return);

        csParser.accessor_declarations_return accessor_declarations594 = default(csParser.accessor_declarations_return);


        object char_literal593_tree=null;
        object char_literal595_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 171) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:822:28: ( member_name '{' accessor_declarations '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:823:2: member_name '{' accessor_declarations '}'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_member_name_in_property_declaration7166);
            	member_name592 = member_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_name592.Tree);
            	char_literal593=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_property_declaration7170); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal593_tree = (object)adaptor.Create(char_literal593);
            		adaptor.AddChild(root_0, char_literal593_tree);
            	}
            	PushFollow(FOLLOW_accessor_declarations_in_property_declaration7174);
            	accessor_declarations594 = accessor_declarations();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_declarations594.Tree);
            	char_literal595=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_property_declaration7178); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal595_tree = (object)adaptor.Create(char_literal595);
            		adaptor.AddChild(root_0, char_literal595_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 171, property_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "property_declaration"

    public class accessor_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "accessor_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:824:8: public accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
    public csParser.accessor_declarations_return accessor_declarations() // throws RecognitionException [1]
    {   
        csParser.accessor_declarations_return retval = new csParser.accessor_declarations_return();
        retval.start = input.LT(1);
        int accessor_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes596 = default(csParser.attributes_return);

        csParser.get_accessor_declaration_return get_accessor_declaration597 = default(csParser.get_accessor_declaration_return);

        csParser.attributes_return attributes598 = default(csParser.attributes_return);

        csParser.set_accessor_declaration_return set_accessor_declaration599 = default(csParser.set_accessor_declaration_return);

        csParser.set_accessor_declaration_return set_accessor_declaration600 = default(csParser.set_accessor_declaration_return);

        csParser.attributes_return attributes601 = default(csParser.attributes_return);

        csParser.get_accessor_declaration_return get_accessor_declaration602 = default(csParser.get_accessor_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 172) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:824:29: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:825:2: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:825:2: ( attributes )?
            	int alt163 = 2;
            	int LA163_0 = input.LA(1);

            	if ( (LA163_0 == OPEN_BRACKET) )
            	{
            	    alt163 = 1;
            	}
            	switch (alt163) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:825:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_accessor_declarations7188);
            	        	attributes596 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes596.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:826:3: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
            	int alt168 = 2;
            	switch ( input.LA(1) ) 
            	{
            	case PROTECTED:
            		{
            	    switch ( input.LA(2) ) 
            	    {
            	    case INTERNAL:
            	    	{
            	        int LA168_6 = input.LA(3);

            	        if ( (LA168_6 == 248) )
            	        {
            	            alt168 = 2;
            	        }
            	        else if ( (LA168_6 == 247) )
            	        {
            	            alt168 = 1;
            	        }
            	        else 
            	        {
            	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	            NoViableAltException nvae_d168s6 =
            	                new NoViableAltException("", 168, 6, input);

            	            throw nvae_d168s6;
            	        }
            	        }
            	        break;
            	    case 248:
            	    	{
            	        alt168 = 2;
            	        }
            	        break;
            	    case 247:
            	    	{
            	        alt168 = 1;
            	        }
            	        break;
            	    	default:
            	    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    	    NoViableAltException nvae_d168s1 =
            	    	        new NoViableAltException("", 168, 1, input);

            	    	    throw nvae_d168s1;
            	    }

            	    }
            	    break;
            	case PRIVATE:
            		{
            	    int LA168_2 = input.LA(2);

            	    if ( (LA168_2 == 247) )
            	    {
            	        alt168 = 1;
            	    }
            	    else if ( (LA168_2 == 248) )
            	    {
            	        alt168 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d168s2 =
            	            new NoViableAltException("", 168, 2, input);

            	        throw nvae_d168s2;
            	    }
            	    }
            	    break;
            	case INTERNAL:
            		{
            	    switch ( input.LA(2) ) 
            	    {
            	    case PROTECTED:
            	    	{
            	        int LA168_7 = input.LA(3);

            	        if ( (LA168_7 == 247) )
            	        {
            	            alt168 = 1;
            	        }
            	        else if ( (LA168_7 == 248) )
            	        {
            	            alt168 = 2;
            	        }
            	        else 
            	        {
            	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	            NoViableAltException nvae_d168s7 =
            	                new NoViableAltException("", 168, 7, input);

            	            throw nvae_d168s7;
            	        }
            	        }
            	        break;
            	    case 247:
            	    	{
            	        alt168 = 1;
            	        }
            	        break;
            	    case 248:
            	    	{
            	        alt168 = 2;
            	        }
            	        break;
            	    	default:
            	    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    	    NoViableAltException nvae_d168s3 =
            	    	        new NoViableAltException("", 168, 3, input);

            	    	    throw nvae_d168s3;
            	    }

            	    }
            	    break;
            	case 247:
            		{
            	    alt168 = 1;
            	    }
            	    break;
            	case 248:
            		{
            	    alt168 = 2;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d168s0 =
            		        new NoViableAltException("", 168, 0, input);

            		    throw nvae_d168s0;
            	}

            	switch (alt168) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:826:4: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
            	        {
            	        	PushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations7194);
            	        	get_accessor_declaration597 = get_accessor_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, get_accessor_declaration597.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:826:31: ( attributes )?
            	        	int alt164 = 2;
            	        	int LA164_0 = input.LA(1);

            	        	if ( (LA164_0 == OPEN_BRACKET) )
            	        	{
            	        	    alt164 = 1;
            	        	}
            	        	switch (alt164) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:826:31: attributes
            	        	        {
            	        	        	PushFollow(FOLLOW_attributes_in_accessor_declarations7198);
            	        	        	attributes598 = attributes();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes598.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:826:45: ( set_accessor_declaration )?
            	        	int alt165 = 2;
            	        	int LA165_0 = input.LA(1);

            	        	if ( ((LA165_0 >= PROTECTED && LA165_0 <= INTERNAL) || LA165_0 == 248) )
            	        	{
            	        	    alt165 = 1;
            	        	}
            	        	switch (alt165) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:826:45: set_accessor_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations7203);
            	        	        	set_accessor_declaration599 = set_accessor_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, set_accessor_declaration599.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:827:5: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
            	        {
            	        	PushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations7210);
            	        	set_accessor_declaration600 = set_accessor_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, set_accessor_declaration600.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:827:32: ( attributes )?
            	        	int alt166 = 2;
            	        	int LA166_0 = input.LA(1);

            	        	if ( (LA166_0 == OPEN_BRACKET) )
            	        	{
            	        	    alt166 = 1;
            	        	}
            	        	switch (alt166) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:827:32: attributes
            	        	        {
            	        	        	PushFollow(FOLLOW_attributes_in_accessor_declarations7214);
            	        	        	attributes601 = attributes();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes601.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:827:46: ( get_accessor_declaration )?
            	        	int alt167 = 2;
            	        	int LA167_0 = input.LA(1);

            	        	if ( ((LA167_0 >= PROTECTED && LA167_0 <= INTERNAL) || LA167_0 == 247) )
            	        	{
            	        	    alt167 = 1;
            	        	}
            	        	switch (alt167) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:827:46: get_accessor_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations7219);
            	        	        	get_accessor_declaration602 = get_accessor_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, get_accessor_declaration602.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 172, accessor_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "accessor_declarations"

    public class get_accessor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "get_accessor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:828:8: public get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
    public csParser.get_accessor_declaration_return get_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.get_accessor_declaration_return retval = new csParser.get_accessor_declaration_return();
        retval.start = input.LT(1);
        int get_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal604 = null;
        csParser.accessor_modifier_return accessor_modifier603 = default(csParser.accessor_modifier_return);

        csParser.accessor_body_return accessor_body605 = default(csParser.accessor_body_return);


        object string_literal604_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 173) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:828:32: ( ( accessor_modifier )? 'get' accessor_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:829:2: ( accessor_modifier )? 'get' accessor_body
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:829:2: ( accessor_modifier )?
            	int alt169 = 2;
            	int LA169_0 = input.LA(1);

            	if ( ((LA169_0 >= PROTECTED && LA169_0 <= INTERNAL)) )
            	{
            	    alt169 = 1;
            	}
            	switch (alt169) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:829:2: accessor_modifier
            	        {
            	        	PushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration7231);
            	        	accessor_modifier603 = accessor_modifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_modifier603.Tree);

            	        }
            	        break;

            	}

            	string_literal604=(IToken)Match(input,247,FOLLOW_247_in_get_accessor_declaration7236); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal604_tree = (object)adaptor.Create(string_literal604);
            		adaptor.AddChild(root_0, string_literal604_tree);
            	}
            	PushFollow(FOLLOW_accessor_body_in_get_accessor_declaration7240);
            	accessor_body605 = accessor_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_body605.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 173, get_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "get_accessor_declaration"

    public class set_accessor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "set_accessor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:830:8: public set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
    public csParser.set_accessor_declaration_return set_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.set_accessor_declaration_return retval = new csParser.set_accessor_declaration_return();
        retval.start = input.LT(1);
        int set_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal607 = null;
        csParser.accessor_modifier_return accessor_modifier606 = default(csParser.accessor_modifier_return);

        csParser.accessor_body_return accessor_body608 = default(csParser.accessor_body_return);


        object string_literal607_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 174) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:830:32: ( ( accessor_modifier )? 'set' accessor_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:831:2: ( accessor_modifier )? 'set' accessor_body
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:831:2: ( accessor_modifier )?
            	int alt170 = 2;
            	int LA170_0 = input.LA(1);

            	if ( ((LA170_0 >= PROTECTED && LA170_0 <= INTERNAL)) )
            	{
            	    alt170 = 1;
            	}
            	switch (alt170) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:831:2: accessor_modifier
            	        {
            	        	PushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration7250);
            	        	accessor_modifier606 = accessor_modifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_modifier606.Tree);

            	        }
            	        break;

            	}

            	string_literal607=(IToken)Match(input,248,FOLLOW_248_in_set_accessor_declaration7255); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal607_tree = (object)adaptor.Create(string_literal607);
            		adaptor.AddChild(root_0, string_literal607_tree);
            	}
            	PushFollow(FOLLOW_accessor_body_in_set_accessor_declaration7259);
            	accessor_body608 = accessor_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_body608.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 174, set_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "set_accessor_declaration"

    public class accessor_modifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "accessor_modifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:832:8: public accessor_modifier : ( 'protected' ( 'internal' )? | 'private' | 'internal' ( 'protected' )? );
    public csParser.accessor_modifier_return accessor_modifier() // throws RecognitionException [1]
    {   
        csParser.accessor_modifier_return retval = new csParser.accessor_modifier_return();
        retval.start = input.LT(1);
        int accessor_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal609 = null;
        IToken string_literal610 = null;
        IToken string_literal611 = null;
        IToken string_literal612 = null;
        IToken string_literal613 = null;

        object string_literal609_tree=null;
        object string_literal610_tree=null;
        object string_literal611_tree=null;
        object string_literal612_tree=null;
        object string_literal613_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 175) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:832:25: ( 'protected' ( 'internal' )? | 'private' | 'internal' ( 'protected' )? )
            int alt173 = 3;
            switch ( input.LA(1) ) 
            {
            case PROTECTED:
            	{
                alt173 = 1;
                }
                break;
            case PRIVATE:
            	{
                alt173 = 2;
                }
                break;
            case INTERNAL:
            	{
                alt173 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d173s0 =
            	        new NoViableAltException("", 173, 0, input);

            	    throw nvae_d173s0;
            }

            switch (alt173) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:833:2: 'protected' ( 'internal' )?
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal609=(IToken)Match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier7269); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal609_tree = (object)adaptor.Create(string_literal609);
                    		adaptor.AddChild(root_0, string_literal609_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:833:14: ( 'internal' )?
                    	int alt171 = 2;
                    	int LA171_0 = input.LA(1);

                    	if ( (LA171_0 == INTERNAL) )
                    	{
                    	    alt171 = 1;
                    	}
                    	switch (alt171) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:833:14: 'internal'
                    	        {
                    	        	string_literal610=(IToken)Match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier7271); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal610_tree = (object)adaptor.Create(string_literal610);
                    	        		adaptor.AddChild(root_0, string_literal610_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:833:28: 'private'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal611=(IToken)Match(input,PRIVATE,FOLLOW_PRIVATE_in_accessor_modifier7276); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal611_tree = (object)adaptor.Create(string_literal611);
                    		adaptor.AddChild(root_0, string_literal611_tree);
                    	}

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:833:40: 'internal' ( 'protected' )?
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal612=(IToken)Match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier7280); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal612_tree = (object)adaptor.Create(string_literal612);
                    		adaptor.AddChild(root_0, string_literal612_tree);
                    	}
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:833:51: ( 'protected' )?
                    	int alt172 = 2;
                    	int LA172_0 = input.LA(1);

                    	if ( (LA172_0 == PROTECTED) )
                    	{
                    	    alt172 = 1;
                    	}
                    	switch (alt172) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:833:51: 'protected'
                    	        {
                    	        	string_literal613=(IToken)Match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier7282); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal613_tree = (object)adaptor.Create(string_literal613);
                    	        		adaptor.AddChild(root_0, string_literal613_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 175, accessor_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "accessor_modifier"

    public class accessor_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "accessor_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:834:8: public accessor_body : block ;
    public csParser.accessor_body_return accessor_body() // throws RecognitionException [1]
    {   
        csParser.accessor_body_return retval = new csParser.accessor_body_return();
        retval.start = input.LT(1);
        int accessor_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block614 = default(csParser.block_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 176) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:834:21: ( block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:835:2: block
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_block_in_accessor_body7293);
            	block614 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block614.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 176, accessor_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "accessor_body"

    public class event_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "event_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:838:8: public event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
    public csParser.event_declaration_return event_declaration() // throws RecognitionException [1]
    {   
        csParser.event_declaration_return retval = new csParser.event_declaration_return();
        retval.start = input.LT(1);
        int event_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal615 = null;
        IToken char_literal618 = null;
        IToken char_literal620 = null;
        IToken char_literal622 = null;
        csParser.type_return type616 = default(csParser.type_return);

        csParser.member_name_return member_name617 = default(csParser.member_name_return);

        csParser.event_accessor_declarations_return event_accessor_declarations619 = default(csParser.event_accessor_declarations_return);

        csParser.variable_declarators_return variable_declarators621 = default(csParser.variable_declarators_return);


        object string_literal615_tree=null;
        object char_literal618_tree=null;
        object char_literal620_tree=null;
        object char_literal622_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 177) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:838:25: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:839:2: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal615=(IToken)Match(input,240,FOLLOW_240_in_event_declaration7305); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal615_tree = (object)adaptor.Create(string_literal615);
            		adaptor.AddChild(root_0, string_literal615_tree);
            	}
            	PushFollow(FOLLOW_type_in_event_declaration7309);
            	type616 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type616.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:840:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
            	int alt174 = 2;
            	int LA174_0 = input.LA(1);

            	if ( (LA174_0 == OBJECT || (LA174_0 >= BOOL && LA174_0 <= DOUBLE) || (LA174_0 >= 251 && LA174_0 <= 254) || (LA174_0 >= 275 && LA174_0 <= 276)) && (synpred27_cs()) )
            	{
            	    alt174 = 1;
            	}
            	else if ( (LA174_0 == IDENTIFIER) )
            	{
            	    int LA174_2 = input.LA(2);

            	    if ( (synpred27_cs()) )
            	    {
            	        alt174 = 1;
            	    }
            	    else if ( (true) )
            	    {
            	        alt174 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d174s2 =
            	            new NoViableAltException("", 174, 2, input);

            	        throw nvae_d174s2;
            	    }
            	}
            	else if ( ((LA174_0 >= ELIF && LA174_0 <= UNDEF) || LA174_0 == 195 || LA174_0 == 221 || (LA174_0 >= 224 && LA174_0 <= 239) || (LA174_0 >= 241 && LA174_0 <= 244) || (LA174_0 >= 247 && LA174_0 <= 250) || LA174_0 == 256 || (LA174_0 >= 263 && LA174_0 <= 264) || LA174_0 == 274 || LA174_0 == 277) )
            	{
            	    int LA174_3 = input.LA(2);

            	    if ( (synpred27_cs()) )
            	    {
            	        alt174 = 1;
            	    }
            	    else if ( (true) )
            	    {
            	        alt174 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d174s3 =
            	            new NoViableAltException("", 174, 3, input);

            	        throw nvae_d174s3;
            	    }
            	}
            	else if ( ((LA174_0 >= Real_literal && LA174_0 <= NULL)) && (synpred27_cs()) )
            	{
            	    alt174 = 1;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d174s0 =
            	        new NoViableAltException("", 174, 0, input);

            	    throw nvae_d174s0;
            	}
            	switch (alt174) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:840:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
            	        {
            	        	PushFollow(FOLLOW_member_name_in_event_declaration7324);
            	        	member_name617 = member_name();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_name617.Tree);
            	        	char_literal618=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_event_declaration7328); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal618_tree = (object)adaptor.Create(char_literal618);
            	        		adaptor.AddChild(root_0, char_literal618_tree);
            	        	}
            	        	PushFollow(FOLLOW_event_accessor_declarations_in_event_declaration7332);
            	        	event_accessor_declarations619 = event_accessor_declarations();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_accessor_declarations619.Tree);
            	        	char_literal620=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_event_declaration7336); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal620_tree = (object)adaptor.Create(char_literal620);
            	        		adaptor.AddChild(root_0, char_literal620_tree);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:841:5: variable_declarators ';'
            	        {
            	        	PushFollow(FOLLOW_variable_declarators_in_event_declaration7342);
            	        	variable_declarators621 = variable_declarators();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarators621.Tree);
            	        	char_literal622=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_event_declaration7346); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal622_tree = (object)adaptor.Create(char_literal622);
            	        		adaptor.AddChild(root_0, char_literal622_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 177, event_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "event_declaration"

    public class event_modifiers_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "event_modifiers"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:843:8: public event_modifiers : ( modifier )+ ;
    public csParser.event_modifiers_return event_modifiers() // throws RecognitionException [1]
    {   
        csParser.event_modifiers_return retval = new csParser.event_modifiers_return();
        retval.start = input.LT(1);
        int event_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.modifier_return modifier623 = default(csParser.modifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 178) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:843:23: ( ( modifier )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:844:2: ( modifier )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:844:2: ( modifier )+
            	int cnt175 = 0;
            	do 
            	{
            	    int alt175 = 2;
            	    int LA175_0 = input.LA(1);

            	    if ( ((LA175_0 >= PUBLIC && LA175_0 <= STATIC) || LA175_0 == 194 || (LA175_0 >= 197 && LA175_0 <= 204)) )
            	    {
            	        alt175 = 1;
            	    }


            	    switch (alt175) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:844:2: modifier
            			    {
            			    	PushFollow(FOLLOW_modifier_in_event_modifiers7360);
            			    	modifier623 = modifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifier623.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt175 >= 1 ) goto loop175;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee175 =
            		                new EarlyExitException(175, input);
            		            throw eee175;
            	    }
            	    cnt175++;
            	} while (true);

            	loop175:
            		;	// Stops C# compiler whining that label 'loop175' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 178, event_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "event_modifiers"

    public class event_accessor_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "event_accessor_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:845:8: public event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
    public csParser.event_accessor_declarations_return event_accessor_declarations() // throws RecognitionException [1]
    {   
        csParser.event_accessor_declarations_return retval = new csParser.event_accessor_declarations_return();
        retval.start = input.LT(1);
        int event_accessor_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes624 = default(csParser.attributes_return);

        csParser.add_accessor_declaration_return add_accessor_declaration625 = default(csParser.add_accessor_declaration_return);

        csParser.attributes_return attributes626 = default(csParser.attributes_return);

        csParser.remove_accessor_declaration_return remove_accessor_declaration627 = default(csParser.remove_accessor_declaration_return);

        csParser.remove_accessor_declaration_return remove_accessor_declaration628 = default(csParser.remove_accessor_declaration_return);

        csParser.attributes_return attributes629 = default(csParser.attributes_return);

        csParser.add_accessor_declaration_return add_accessor_declaration630 = default(csParser.add_accessor_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 179) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:845:35: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:2: ( attributes )?
            	int alt176 = 2;
            	int LA176_0 = input.LA(1);

            	if ( (LA176_0 == OPEN_BRACKET) )
            	{
            	    alt176 = 1;
            	}
            	switch (alt176) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations7371);
            	        	attributes624 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes624.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
            	int alt179 = 2;
            	int LA179_0 = input.LA(1);

            	if ( (LA179_0 == 249) )
            	{
            	    alt179 = 1;
            	}
            	else if ( (LA179_0 == 250) )
            	{
            	    alt179 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d179s0 =
            	        new NoViableAltException("", 179, 0, input);

            	    throw nvae_d179s0;
            	}
            	switch (alt179) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
            	        {
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
            	        	{
            	        		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations7378);
            	        		add_accessor_declaration625 = add_accessor_declaration();
            	        		state._fsp--;
            	        		if (state.failed) return retval;
            	        		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, add_accessor_declaration625.Tree);
            	        		// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:45: ( attributes )?
            	        		int alt177 = 2;
            	        		int LA177_0 = input.LA(1);

            	        		if ( (LA177_0 == OPEN_BRACKET) )
            	        		{
            	        		    alt177 = 1;
            	        		}
            	        		switch (alt177) 
            	        		{
            	        		    case 1 :
            	        		        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:846:45: attributes
            	        		        {
            	        		        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations7382);
            	        		        	attributes626 = attributes();
            	        		        	state._fsp--;
            	        		        	if (state.failed) return retval;
            	        		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes626.Tree);

            	        		        }
            	        		        break;

            	        		}

            	        		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7387);
            	        		remove_accessor_declaration627 = remove_accessor_declaration();
            	        		state._fsp--;
            	        		if (state.failed) return retval;
            	        		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, remove_accessor_declaration627.Tree);

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:847:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
            	        {
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:847:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:847:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
            	        	{
            	        		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7408);
            	        		remove_accessor_declaration628 = remove_accessor_declaration();
            	        		state._fsp--;
            	        		if (state.failed) return retval;
            	        		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, remove_accessor_declaration628.Tree);
            	        		// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:847:49: ( attributes )?
            	        		int alt178 = 2;
            	        		int LA178_0 = input.LA(1);

            	        		if ( (LA178_0 == OPEN_BRACKET) )
            	        		{
            	        		    alt178 = 1;
            	        		}
            	        		switch (alt178) 
            	        		{
            	        		    case 1 :
            	        		        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:847:49: attributes
            	        		        {
            	        		        	PushFollow(FOLLOW_attributes_in_event_accessor_declarations7412);
            	        		        	attributes629 = attributes();
            	        		        	state._fsp--;
            	        		        	if (state.failed) return retval;
            	        		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes629.Tree);

            	        		        }
            	        		        break;

            	        		}

            	        		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations7417);
            	        		add_accessor_declaration630 = add_accessor_declaration();
            	        		state._fsp--;
            	        		if (state.failed) return retval;
            	        		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, add_accessor_declaration630.Tree);

            	        	}


            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 179, event_accessor_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations"

    public class add_accessor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "add_accessor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:848:8: public add_accessor_declaration : 'add' block ;
    public csParser.add_accessor_declaration_return add_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.add_accessor_declaration_return retval = new csParser.add_accessor_declaration_return();
        retval.start = input.LT(1);
        int add_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal631 = null;
        csParser.block_return block632 = default(csParser.block_return);


        object string_literal631_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 180) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:848:32: ( 'add' block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:849:2: 'add' block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal631=(IToken)Match(input,249,FOLLOW_249_in_add_accessor_declaration7429); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal631_tree = (object)adaptor.Create(string_literal631);
            		adaptor.AddChild(root_0, string_literal631_tree);
            	}
            	PushFollow(FOLLOW_block_in_add_accessor_declaration7433);
            	block632 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block632.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 180, add_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "add_accessor_declaration"

    public class remove_accessor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "remove_accessor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:850:8: public remove_accessor_declaration : 'remove' block ;
    public csParser.remove_accessor_declaration_return remove_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.remove_accessor_declaration_return retval = new csParser.remove_accessor_declaration_return();
        retval.start = input.LT(1);
        int remove_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal633 = null;
        csParser.block_return block634 = default(csParser.block_return);


        object string_literal633_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 181) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:850:35: ( 'remove' block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:851:2: 'remove' block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal633=(IToken)Match(input,250,FOLLOW_250_in_remove_accessor_declaration7443); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal633_tree = (object)adaptor.Create(string_literal633);
            		adaptor.AddChild(root_0, string_literal633_tree);
            	}
            	PushFollow(FOLLOW_block_in_remove_accessor_declaration7447);
            	block634 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block634.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 181, remove_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "remove_accessor_declaration"

    public class enum_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "enum_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:856:8: public enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
    public csParser.enum_declaration_return enum_declaration() // throws RecognitionException [1]
    {   
        csParser.enum_declaration_return retval = new csParser.enum_declaration_return();
        retval.start = input.LT(1);
        int enum_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal635 = null;
        IToken char_literal639 = null;
        csParser.identifier_return identifier636 = default(csParser.identifier_return);

        csParser.enum_base_return enum_base637 = default(csParser.enum_base_return);

        csParser.enum_body_return enum_body638 = default(csParser.enum_body_return);


        object string_literal635_tree=null;
        object char_literal639_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 182) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:856:24: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:857:2: 'enum' identifier ( enum_base )? enum_body ( ';' )?
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal635=(IToken)Match(input,ENUM,FOLLOW_ENUM_in_enum_declaration7461); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal635_tree = (object)adaptor.Create(string_literal635);
            		adaptor.AddChild(root_0, string_literal635_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_enum_declaration7465);
            	identifier636 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier636.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:857:24: ( enum_base )?
            	int alt180 = 2;
            	int LA180_0 = input.LA(1);

            	if ( (LA180_0 == 211) )
            	{
            	    alt180 = 1;
            	}
            	switch (alt180) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:857:24: enum_base
            	        {
            	        	PushFollow(FOLLOW_enum_base_in_enum_declaration7469);
            	        	enum_base637 = enum_base();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_base637.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_enum_body_in_enum_declaration7474);
            	enum_body638 = enum_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_body638.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:857:49: ( ';' )?
            	int alt181 = 2;
            	int LA181_0 = input.LA(1);

            	if ( (LA181_0 == SEMI) )
            	{
            	    alt181 = 1;
            	}
            	switch (alt181) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:857:49: ';'
            	        {
            	        	char_literal639=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_enum_declaration7478); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal639_tree = (object)adaptor.Create(char_literal639);
            	        		adaptor.AddChild(root_0, char_literal639_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 182, enum_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"

    public class enum_base_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "enum_base"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:858:8: public enum_base : ':' integral_type ;
    public csParser.enum_base_return enum_base() // throws RecognitionException [1]
    {   
        csParser.enum_base_return retval = new csParser.enum_base_return();
        retval.start = input.LT(1);
        int enum_base_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal640 = null;
        csParser.integral_type_return integral_type641 = default(csParser.integral_type_return);


        object char_literal640_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 183) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:858:17: ( ':' integral_type )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:859:2: ':' integral_type
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal640=(IToken)Match(input,211,FOLLOW_211_in_enum_base7489); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal640_tree = (object)adaptor.Create(char_literal640);
            		adaptor.AddChild(root_0, char_literal640_tree);
            	}
            	PushFollow(FOLLOW_integral_type_in_enum_base7493);
            	integral_type641 = integral_type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, integral_type641.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 183, enum_base_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_base"

    public class enum_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "enum_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:860:8: public enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
    public csParser.enum_body_return enum_body() // throws RecognitionException [1]
    {   
        csParser.enum_body_return retval = new csParser.enum_body_return();
        retval.start = input.LT(1);
        int enum_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal642 = null;
        IToken char_literal644 = null;
        IToken char_literal645 = null;
        csParser.enum_member_declarations_return enum_member_declarations643 = default(csParser.enum_member_declarations_return);


        object char_literal642_tree=null;
        object char_literal644_tree=null;
        object char_literal645_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 184) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:860:17: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:861:2: '{' ( enum_member_declarations ( ',' )? )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal642=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_enum_body7503); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal642_tree = (object)adaptor.Create(char_literal642);
            		adaptor.AddChild(root_0, char_literal642_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:861:6: ( enum_member_declarations ( ',' )? )?
            	int alt183 = 2;
            	int LA183_0 = input.LA(1);

            	if ( (LA183_0 == OPEN_BRACKET || LA183_0 == IDENTIFIER || (LA183_0 >= ELIF && LA183_0 <= UNDEF) || LA183_0 == 195 || LA183_0 == 221 || (LA183_0 >= 224 && LA183_0 <= 239) || (LA183_0 >= 241 && LA183_0 <= 244) || (LA183_0 >= 247 && LA183_0 <= 250) || LA183_0 == 256 || (LA183_0 >= 263 && LA183_0 <= 264) || LA183_0 == 274 || LA183_0 == 277) )
            	{
            	    alt183 = 1;
            	}
            	switch (alt183) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:861:7: enum_member_declarations ( ',' )?
            	        {
            	        	PushFollow(FOLLOW_enum_member_declarations_in_enum_body7506);
            	        	enum_member_declarations643 = enum_member_declarations();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_member_declarations643.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:861:32: ( ',' )?
            	        	int alt182 = 2;
            	        	int LA182_0 = input.LA(1);

            	        	if ( (LA182_0 == COMMA) )
            	        	{
            	        	    alt182 = 1;
            	        	}
            	        	switch (alt182) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:861:32: ','
            	        	        {
            	        	        	char_literal644=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_enum_body7508); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{char_literal644_tree = (object)adaptor.Create(char_literal644);
            	        	        		adaptor.AddChild(root_0, char_literal644_tree);
            	        	        	}

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}

            	char_literal645=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_enum_body7515); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal645_tree = (object)adaptor.Create(char_literal645);
            		adaptor.AddChild(root_0, char_literal645_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 184, enum_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_body"

    public class enum_member_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "enum_member_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:862:8: public enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
    public csParser.enum_member_declarations_return enum_member_declarations() // throws RecognitionException [1]
    {   
        csParser.enum_member_declarations_return retval = new csParser.enum_member_declarations_return();
        retval.start = input.LT(1);
        int enum_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal647 = null;
        csParser.enum_member_declaration_return enum_member_declaration646 = default(csParser.enum_member_declaration_return);

        csParser.enum_member_declaration_return enum_member_declaration648 = default(csParser.enum_member_declaration_return);


        object char_literal647_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 185) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:862:32: ( enum_member_declaration ( ',' enum_member_declaration )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:863:2: enum_member_declaration ( ',' enum_member_declaration )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations7525);
            	enum_member_declaration646 = enum_member_declaration();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_member_declaration646.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:863:26: ( ',' enum_member_declaration )*
            	do 
            	{
            	    int alt184 = 2;
            	    int LA184_0 = input.LA(1);

            	    if ( (LA184_0 == COMMA) )
            	    {
            	        int LA184_1 = input.LA(2);

            	        if ( (LA184_1 == OPEN_BRACKET || LA184_1 == IDENTIFIER || (LA184_1 >= ELIF && LA184_1 <= UNDEF) || LA184_1 == 195 || LA184_1 == 221 || (LA184_1 >= 224 && LA184_1 <= 239) || (LA184_1 >= 241 && LA184_1 <= 244) || (LA184_1 >= 247 && LA184_1 <= 250) || LA184_1 == 256 || (LA184_1 >= 263 && LA184_1 <= 264) || LA184_1 == 274 || LA184_1 == 277) )
            	        {
            	            alt184 = 1;
            	        }


            	    }


            	    switch (alt184) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:863:27: ',' enum_member_declaration
            			    {
            			    	char_literal647=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_enum_member_declarations7528); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal647_tree = (object)adaptor.Create(char_literal647);
            			    		adaptor.AddChild(root_0, char_literal647_tree);
            			    	}
            			    	PushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations7530);
            			    	enum_member_declaration648 = enum_member_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_member_declaration648.Tree);

            			    }
            			    break;

            			default:
            			    goto loop184;
            	    }
            	} while (true);

            	loop184:
            		;	// Stops C# compiler whining that label 'loop184' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 185, enum_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_member_declarations"

    public class enum_member_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "enum_member_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:864:8: public enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
    public csParser.enum_member_declaration_return enum_member_declaration() // throws RecognitionException [1]
    {   
        csParser.enum_member_declaration_return retval = new csParser.enum_member_declaration_return();
        retval.start = input.LT(1);
        int enum_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal651 = null;
        csParser.attributes_return attributes649 = default(csParser.attributes_return);

        csParser.identifier_return identifier650 = default(csParser.identifier_return);

        csParser.expression_return expression652 = default(csParser.expression_return);


        object char_literal651_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 186) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:864:31: ( ( attributes )? identifier ( '=' expression )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:865:2: ( attributes )? identifier ( '=' expression )?
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:865:2: ( attributes )?
            	int alt185 = 2;
            	int LA185_0 = input.LA(1);

            	if ( (LA185_0 == OPEN_BRACKET) )
            	{
            	    alt185 = 1;
            	}
            	switch (alt185) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:865:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_enum_member_declaration7542);
            	        	attributes649 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes649.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_identifier_in_enum_member_declaration7547);
            	identifier650 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier650.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:865:29: ( '=' expression )?
            	int alt186 = 2;
            	int LA186_0 = input.LA(1);

            	if ( (LA186_0 == ASSIGN) )
            	{
            	    alt186 = 1;
            	}
            	switch (alt186) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:865:30: '=' expression
            	        {
            	        	char_literal651=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_enum_member_declaration7552); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal651_tree = (object)adaptor.Create(char_literal651);
            	        		adaptor.AddChild(root_0, char_literal651_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_enum_member_declaration7556);
            	        	expression652 = expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression652.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 186, enum_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_member_declaration"

    public class integral_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "integral_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:870:8: public integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
    public csParser.integral_type_return integral_type() // throws RecognitionException [1]
    {   
        csParser.integral_type_return retval = new csParser.integral_type_return();
        retval.start = input.LT(1);
        int integral_type_StartIndex = input.Index;
        object root_0 = null;

        IToken set653 = null;

        object set653_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 187) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:870:21: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set653 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= BYTE && input.LA(1) <= LONG) || (input.LA(1) >= 251 && input.LA(1) <= 254) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set653));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 187, integral_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "integral_type"

    public class delegate_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "delegate_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:874:8: public delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    public csParser.delegate_declaration_return delegate_declaration() // throws RecognitionException [1]
    {   
        csParser.delegate_declaration_return retval = new csParser.delegate_declaration_return();
        retval.start = input.LT(1);
        int delegate_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal654 = null;
        IToken char_literal658 = null;
        IToken char_literal660 = null;
        IToken char_literal662 = null;
        csParser.return_type_return return_type655 = default(csParser.return_type_return);

        csParser.identifier_return identifier656 = default(csParser.identifier_return);

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list657 = default(csParser.variant_generic_parameter_list_return);

        csParser.formal_parameter_list_return formal_parameter_list659 = default(csParser.formal_parameter_list_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses661 = default(csParser.type_parameter_constraints_clauses_return);


        object string_literal654_tree=null;
        object char_literal658_tree=null;
        object char_literal660_tree=null;
        object char_literal662_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 188) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:874:28: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:875:2: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal654=(IToken)Match(input,218,FOLLOW_218_in_delegate_declaration7617); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal654_tree = (object)adaptor.Create(string_literal654);
            		adaptor.AddChild(root_0, string_literal654_tree);
            	}
            	PushFollow(FOLLOW_return_type_in_delegate_declaration7621);
            	return_type655 = return_type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, return_type655.Tree);
            	PushFollow(FOLLOW_identifier_in_delegate_declaration7625);
            	identifier656 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier656.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:875:41: ( variant_generic_parameter_list )?
            	int alt187 = 2;
            	int LA187_0 = input.LA(1);

            	if ( (LA187_0 == LTHAN) )
            	{
            	    alt187 = 1;
            	}
            	switch (alt187) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:875:41: variant_generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_variant_generic_parameter_list_in_delegate_declaration7628);
            	        	variant_generic_parameter_list657 = variant_generic_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_generic_parameter_list657.Tree);

            	        }
            	        break;

            	}

            	char_literal658=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_delegate_declaration7636); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal658_tree = (object)adaptor.Create(char_literal658);
            		adaptor.AddChild(root_0, char_literal658_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:876:9: ( formal_parameter_list )?
            	int alt188 = 2;
            	int LA188_0 = input.LA(1);

            	if ( ((LA188_0 >= OBJECT && LA188_0 <= THIS) || LA188_0 == OPEN_BRACKET || (LA188_0 >= BOOL && LA188_0 <= IDENTIFIER) || (LA188_0 >= ELIF && LA188_0 <= UNDEF) || LA188_0 == 195 || LA188_0 == 206 || (LA188_0 >= 212 && LA188_0 <= 213) || LA188_0 == 221 || (LA188_0 >= 224 && LA188_0 <= 239) || (LA188_0 >= 241 && LA188_0 <= 244) || (LA188_0 >= 247 && LA188_0 <= 254) || (LA188_0 >= 256 && LA188_0 <= 257) || (LA188_0 >= 263 && LA188_0 <= 264) || (LA188_0 >= 274 && LA188_0 <= 277)) )
            	{
            	    alt188 = 1;
            	}
            	switch (alt188) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:876:9: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration7640);
            	        	formal_parameter_list659 = formal_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list659.Tree);

            	        }
            	        break;

            	}

            	char_literal660=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_delegate_declaration7645); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal660_tree = (object)adaptor.Create(char_literal660);
            		adaptor.AddChild(root_0, char_literal660_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:876:40: ( type_parameter_constraints_clauses )?
            	int alt189 = 2;
            	int LA189_0 = input.LA(1);

            	if ( (LA189_0 == 236) )
            	{
            	    alt189 = 1;
            	}
            	switch (alt189) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:876:40: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration7649);
            	        	type_parameter_constraints_clauses661 = type_parameter_constraints_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses661.Tree);

            	        }
            	        break;

            	}

            	char_literal662=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_delegate_declaration7654); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal662_tree = (object)adaptor.Create(char_literal662);
            		adaptor.AddChild(root_0, char_literal662_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 188, delegate_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration"

    public class delegate_modifiers_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "delegate_modifiers"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:877:8: public delegate_modifiers : ( modifier )+ ;
    public csParser.delegate_modifiers_return delegate_modifiers() // throws RecognitionException [1]
    {   
        csParser.delegate_modifiers_return retval = new csParser.delegate_modifiers_return();
        retval.start = input.LT(1);
        int delegate_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.modifier_return modifier663 = default(csParser.modifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 189) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:877:26: ( ( modifier )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:878:2: ( modifier )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:878:2: ( modifier )+
            	int cnt190 = 0;
            	do 
            	{
            	    int alt190 = 2;
            	    int LA190_0 = input.LA(1);

            	    if ( ((LA190_0 >= PUBLIC && LA190_0 <= STATIC) || LA190_0 == 194 || (LA190_0 >= 197 && LA190_0 <= 204)) )
            	    {
            	        alt190 = 1;
            	    }


            	    switch (alt190) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:878:2: modifier
            			    {
            			    	PushFollow(FOLLOW_modifier_in_delegate_modifiers7664);
            			    	modifier663 = modifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifier663.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt190 >= 1 ) goto loop190;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee190 =
            		                new EarlyExitException(190, input);
            		            throw eee190;
            	    }
            	    cnt190++;
            	} while (true);

            	loop190:
            		;	// Stops C# compiler whining that label 'loop190' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 189, delegate_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_modifiers"

    public class variant_generic_parameter_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variant_generic_parameter_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:880:8: public variant_generic_parameter_list : '<' variant_type_parameters '>' ;
    public csParser.variant_generic_parameter_list_return variant_generic_parameter_list() // throws RecognitionException [1]
    {   
        csParser.variant_generic_parameter_list_return retval = new csParser.variant_generic_parameter_list_return();
        retval.start = input.LT(1);
        int variant_generic_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal664 = null;
        IToken char_literal666 = null;
        csParser.variant_type_parameters_return variant_type_parameters665 = default(csParser.variant_type_parameters_return);


        object char_literal664_tree=null;
        object char_literal666_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 190) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:880:38: ( '<' variant_type_parameters '>' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:881:2: '<' variant_type_parameters '>'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal664=(IToken)Match(input,LTHAN,FOLLOW_LTHAN_in_variant_generic_parameter_list7676); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal664_tree = (object)adaptor.Create(char_literal664);
            		adaptor.AddChild(root_0, char_literal664_tree);
            	}
            	PushFollow(FOLLOW_variant_type_parameters_in_variant_generic_parameter_list7680);
            	variant_type_parameters665 = variant_type_parameters();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_type_parameters665.Tree);
            	char_literal666=(IToken)Match(input,GT,FOLLOW_GT_in_variant_generic_parameter_list7684); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal666_tree = (object)adaptor.Create(char_literal666);
            		adaptor.AddChild(root_0, char_literal666_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 190, variant_generic_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variant_generic_parameter_list"

    public class variant_type_parameters_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variant_type_parameters"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:882:8: public variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
    public csParser.variant_type_parameters_return variant_type_parameters() // throws RecognitionException [1]
    {   
        csParser.variant_type_parameters_return retval = new csParser.variant_type_parameters_return();
        retval.start = input.LT(1);
        int variant_type_parameters_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal668 = null;
        csParser.variant_type_variable_name_return variant_type_variable_name667 = default(csParser.variant_type_variable_name_return);

        csParser.variant_type_variable_name_return variant_type_variable_name669 = default(csParser.variant_type_variable_name_return);


        object char_literal668_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 191) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:882:31: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:883:2: variant_type_variable_name ( ',' variant_type_variable_name )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters7694);
            	variant_type_variable_name667 = variant_type_variable_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_type_variable_name667.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:883:29: ( ',' variant_type_variable_name )*
            	do 
            	{
            	    int alt191 = 2;
            	    int LA191_0 = input.LA(1);

            	    if ( (LA191_0 == COMMA) )
            	    {
            	        alt191 = 1;
            	    }


            	    switch (alt191) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:883:30: ',' variant_type_variable_name
            			    {
            			    	char_literal668=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_variant_type_parameters7697); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal668_tree = (object)adaptor.Create(char_literal668);
            			    		adaptor.AddChild(root_0, char_literal668_tree);
            			    	}
            			    	PushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters7699);
            			    	variant_type_variable_name669 = variant_type_variable_name();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_type_variable_name669.Tree);

            			    }
            			    break;

            			default:
            			    goto loop191;
            	    }
            	} while (true);

            	loop191:
            		;	// Stops C# compiler whining that label 'loop191' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 191, variant_type_parameters_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variant_type_parameters"

    public class variant_type_variable_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variant_type_variable_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:884:8: public variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
    public csParser.variant_type_variable_name_return variant_type_variable_name() // throws RecognitionException [1]
    {   
        csParser.variant_type_variable_name_return retval = new csParser.variant_type_variable_name_return();
        retval.start = input.LT(1);
        int variant_type_variable_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes670 = default(csParser.attributes_return);

        csParser.variance_annotation_return variance_annotation671 = default(csParser.variance_annotation_return);

        csParser.type_variable_name_return type_variable_name672 = default(csParser.type_variable_name_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 192) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:884:34: ( ( attributes )? ( variance_annotation )? type_variable_name )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:885:2: ( attributes )? ( variance_annotation )? type_variable_name
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:885:2: ( attributes )?
            	int alt192 = 2;
            	int LA192_0 = input.LA(1);

            	if ( (LA192_0 == OPEN_BRACKET) )
            	{
            	    alt192 = 1;
            	}
            	switch (alt192) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:885:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_variant_type_variable_name7711);
            	        	attributes670 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes670.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:885:16: ( variance_annotation )?
            	int alt193 = 2;
            	int LA193_0 = input.LA(1);

            	if ( (LA193_0 == IN || LA193_0 == 212) )
            	{
            	    alt193 = 1;
            	}
            	switch (alt193) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:885:16: variance_annotation
            	        {
            	        	PushFollow(FOLLOW_variance_annotation_in_variant_type_variable_name7716);
            	        	variance_annotation671 = variance_annotation();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variance_annotation671.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_variable_name_in_variant_type_variable_name7721);
            	type_variable_name672 = type_variable_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_variable_name672.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 192, variant_type_variable_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variant_type_variable_name"

    public class variance_annotation_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "variance_annotation"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:886:8: public variance_annotation : ( 'in' | 'out' );
    public csParser.variance_annotation_return variance_annotation() // throws RecognitionException [1]
    {   
        csParser.variance_annotation_return retval = new csParser.variance_annotation_return();
        retval.start = input.LT(1);
        int variance_annotation_StartIndex = input.Index;
        object root_0 = null;

        IToken set673 = null;

        object set673_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 193) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:886:27: ( 'in' | 'out' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set673 = (IToken)input.LT(1);
            	if ( input.LA(1) == IN || input.LA(1) == 212 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set673));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 193, variance_annotation_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variance_annotation"

    public class type_parameter_constraints_clauses_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_parameter_constraints_clauses"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:889:8: public type_parameter_constraints_clauses : ( type_parameter_constraints_clause )+ ;
    public csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() // throws RecognitionException [1]
    {   
        csParser.type_parameter_constraints_clauses_return retval = new csParser.type_parameter_constraints_clauses_return();
        retval.start = input.LT(1);
        int type_parameter_constraints_clauses_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause674 = default(csParser.type_parameter_constraints_clause_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 194) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:889:42: ( ( type_parameter_constraints_clause )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:890:2: ( type_parameter_constraints_clause )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:890:2: ( type_parameter_constraints_clause )+
            	int cnt194 = 0;
            	do 
            	{
            	    int alt194 = 2;
            	    int LA194_0 = input.LA(1);

            	    if ( (LA194_0 == 236) )
            	    {
            	        alt194 = 1;
            	    }


            	    switch (alt194) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:890:2: type_parameter_constraints_clause
            			    {
            			    	PushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses7746);
            			    	type_parameter_constraints_clause674 = type_parameter_constraints_clause();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clause674.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt194 >= 1 ) goto loop194;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee194 =
            		                new EarlyExitException(194, input);
            		            throw eee194;
            	    }
            	    cnt194++;
            	} while (true);

            	loop194:
            		;	// Stops C# compiler whining that label 'loop194' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 194, type_parameter_constraints_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clauses"

    public class type_parameter_constraints_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_parameter_constraints_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:891:8: public type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
    public csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause() // throws RecognitionException [1]
    {   
        csParser.type_parameter_constraints_clause_return retval = new csParser.type_parameter_constraints_clause_return();
        retval.start = input.LT(1);
        int type_parameter_constraints_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal675 = null;
        IToken char_literal677 = null;
        csParser.type_variable_name_return type_variable_name676 = default(csParser.type_variable_name_return);

        csParser.type_parameter_constraint_list_return type_parameter_constraint_list678 = default(csParser.type_parameter_constraint_list_return);


        object string_literal675_tree=null;
        object char_literal677_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 195) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:891:41: ( 'where' type_variable_name ':' type_parameter_constraint_list )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:892:2: 'where' type_variable_name ':' type_parameter_constraint_list
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal675=(IToken)Match(input,236,FOLLOW_236_in_type_parameter_constraints_clause7757); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal675_tree = (object)adaptor.Create(string_literal675);
            		adaptor.AddChild(root_0, string_literal675_tree);
            	}
            	PushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause7761);
            	type_variable_name676 = type_variable_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_variable_name676.Tree);
            	char_literal677=(IToken)Match(input,211,FOLLOW_211_in_type_parameter_constraints_clause7765); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal677_tree = (object)adaptor.Create(char_literal677);
            		adaptor.AddChild(root_0, char_literal677_tree);
            	}
            	PushFollow(FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause7769);
            	type_parameter_constraint_list678 = type_parameter_constraint_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraint_list678.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 195, type_parameter_constraints_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clause"

    public class type_parameter_constraint_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_parameter_constraint_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:894:8: public type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
    public csParser.type_parameter_constraint_list_return type_parameter_constraint_list() // throws RecognitionException [1]
    {   
        csParser.type_parameter_constraint_list_return retval = new csParser.type_parameter_constraint_list_return();
        retval.start = input.LT(1);
        int type_parameter_constraint_list_StartIndex = input.Index;
        object root_0 = null;

        IToken set679 = null;
        IToken char_literal680 = null;
        IToken char_literal682 = null;
        IToken char_literal685 = null;
        csParser.secondary_constraint_list_return secondary_constraint_list681 = default(csParser.secondary_constraint_list_return);

        csParser.constructor_constraint_return constructor_constraint683 = default(csParser.constructor_constraint_return);

        csParser.secondary_constraint_list_return secondary_constraint_list684 = default(csParser.secondary_constraint_list_return);

        csParser.constructor_constraint_return constructor_constraint686 = default(csParser.constructor_constraint_return);

        csParser.constructor_constraint_return constructor_constraint687 = default(csParser.constructor_constraint_return);


        object set679_tree=null;
        object char_literal680_tree=null;
        object char_literal682_tree=null;
        object char_literal685_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 196) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:894:38: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )
            int alt198 = 3;
            switch ( input.LA(1) ) 
            {
            case 245:
            case 255:
            	{
                alt198 = 1;
                }
                break;
            case IDENTIFIER:
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 221:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 256:
            case 263:
            case 264:
            case 274:
            case 277:
            	{
                alt198 = 2;
                }
                break;
            case 197:
            	{
                alt198 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d198s0 =
            	        new NoViableAltException("", 198, 0, input);

            	    throw nvae_d198s0;
            }

            switch (alt198) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:895:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
                    {
                    	root_0 = (object)adaptor.Nil;

                    	set679 = (IToken)input.LT(1);
                    	if ( input.LA(1) == 245 || input.LA(1) == 255 ) 
                    	{
                    	    input.Consume();
                    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set679));
                    	    state.errorRecovery = false;state.failed = false;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    MismatchedSetException mse = new MismatchedSetException(null,input);
                    	    throw mse;
                    	}

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:895:28: ( ',' secondary_constraint_list )?
                    	int alt195 = 2;
                    	int LA195_0 = input.LA(1);

                    	if ( (LA195_0 == COMMA) )
                    	{
                    	    int LA195_1 = input.LA(2);

                    	    if ( (LA195_1 == IDENTIFIER || (LA195_1 >= ELIF && LA195_1 <= UNDEF) || LA195_1 == 195 || LA195_1 == 221 || (LA195_1 >= 224 && LA195_1 <= 239) || (LA195_1 >= 241 && LA195_1 <= 244) || (LA195_1 >= 247 && LA195_1 <= 250) || LA195_1 == 256 || (LA195_1 >= 263 && LA195_1 <= 264) || LA195_1 == 274 || LA195_1 == 277) )
                    	    {
                    	        alt195 = 1;
                    	    }
                    	}
                    	switch (alt195) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:895:29: ',' secondary_constraint_list
                    	        {
                    	        	char_literal680=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraint_list7845); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{char_literal680_tree = (object)adaptor.Create(char_literal680);
                    	        		adaptor.AddChild(root_0, char_literal680_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7849);
                    	        	secondary_constraint_list681 = secondary_constraint_list();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint_list681.Tree);

                    	        }
                    	        break;

                    	}

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:895:65: ( ',' constructor_constraint )?
                    	int alt196 = 2;
                    	int LA196_0 = input.LA(1);

                    	if ( (LA196_0 == COMMA) )
                    	{
                    	    alt196 = 1;
                    	}
                    	switch (alt196) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:895:66: ',' constructor_constraint
                    	        {
                    	        	char_literal682=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraint_list7856); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{char_literal682_tree = (object)adaptor.Create(char_literal682);
                    	        		adaptor.AddChild(root_0, char_literal682_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list7860);
                    	        	constructor_constraint683 = constructor_constraint();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_constraint683.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:896:4: secondary_constraint_list ( ',' constructor_constraint )?
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7867);
                    	secondary_constraint_list684 = secondary_constraint_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint_list684.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:896:32: ( ',' constructor_constraint )?
                    	int alt197 = 2;
                    	int LA197_0 = input.LA(1);

                    	if ( (LA197_0 == COMMA) )
                    	{
                    	    alt197 = 1;
                    	}
                    	switch (alt197) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:896:33: ',' constructor_constraint
                    	        {
                    	        	char_literal685=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraint_list7872); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{char_literal685_tree = (object)adaptor.Create(char_literal685);
                    	        		adaptor.AddChild(root_0, char_literal685_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list7876);
                    	        	constructor_constraint686 = constructor_constraint();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_constraint686.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:897:4: constructor_constraint
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list7883);
                    	constructor_constraint687 = constructor_constraint();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_constraint687.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 196, type_parameter_constraint_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraint_list"

    public class secondary_constraint_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "secondary_constraint_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:902:8: public secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
    public csParser.secondary_constraint_list_return secondary_constraint_list() // throws RecognitionException [1]
    {   
        csParser.secondary_constraint_list_return retval = new csParser.secondary_constraint_list_return();
        retval.start = input.LT(1);
        int secondary_constraint_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal689 = null;
        csParser.secondary_constraint_return secondary_constraint688 = default(csParser.secondary_constraint_return);

        csParser.secondary_constraint_return secondary_constraint690 = default(csParser.secondary_constraint_return);


        object char_literal689_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 197) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:902:33: ( secondary_constraint ( ',' secondary_constraint )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:903:2: secondary_constraint ( ',' secondary_constraint )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list7897);
            	secondary_constraint688 = secondary_constraint();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint688.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:903:23: ( ',' secondary_constraint )*
            	do 
            	{
            	    int alt199 = 2;
            	    int LA199_0 = input.LA(1);

            	    if ( (LA199_0 == COMMA) )
            	    {
            	        int LA199_1 = input.LA(2);

            	        if ( (LA199_1 == IDENTIFIER || (LA199_1 >= ELIF && LA199_1 <= UNDEF) || LA199_1 == 195 || LA199_1 == 221 || (LA199_1 >= 224 && LA199_1 <= 239) || (LA199_1 >= 241 && LA199_1 <= 244) || (LA199_1 >= 247 && LA199_1 <= 250) || LA199_1 == 256 || (LA199_1 >= 263 && LA199_1 <= 264) || LA199_1 == 274 || LA199_1 == 277) )
            	        {
            	            alt199 = 1;
            	        }


            	    }


            	    switch (alt199) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:903:24: ',' secondary_constraint
            			    {
            			    	char_literal689=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_secondary_constraint_list7900); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal689_tree = (object)adaptor.Create(char_literal689);
            			    		adaptor.AddChild(root_0, char_literal689_tree);
            			    	}
            			    	PushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list7902);
            			    	secondary_constraint690 = secondary_constraint();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint690.Tree);

            			    }
            			    break;

            			default:
            			    goto loop199;
            	    }
            	} while (true);

            	loop199:
            		;	// Stops C# compiler whining that label 'loop199' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 197, secondary_constraint_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "secondary_constraint_list"

    public class secondary_constraint_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "secondary_constraint"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:904:8: public secondary_constraint : type_name ;
    public csParser.secondary_constraint_return secondary_constraint() // throws RecognitionException [1]
    {   
        csParser.secondary_constraint_return retval = new csParser.secondary_constraint_return();
        retval.start = input.LT(1);
        int secondary_constraint_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_name_return type_name691 = default(csParser.type_name_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 198) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:904:28: ( type_name )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:905:2: type_name
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_type_name_in_secondary_constraint7914);
            	type_name691 = type_name();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name691.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 198, secondary_constraint_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "secondary_constraint"

    public class type_variable_name_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "type_variable_name"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:906:8: public type_variable_name : identifier ;
    public csParser.type_variable_name_return type_variable_name() // throws RecognitionException [1]
    {   
        csParser.type_variable_name_return retval = new csParser.type_variable_name_return();
        retval.start = input.LT(1);
        int type_variable_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.identifier_return identifier692 = default(csParser.identifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 199) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:906:26: ( identifier )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:907:2: identifier
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_type_variable_name7926);
            	identifier692 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier692.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 199, type_variable_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_variable_name"

    public class constructor_constraint_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constructor_constraint"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:908:8: public constructor_constraint : 'new' '(' ')' ;
    public csParser.constructor_constraint_return constructor_constraint() // throws RecognitionException [1]
    {   
        csParser.constructor_constraint_return retval = new csParser.constructor_constraint_return();
        retval.start = input.LT(1);
        int constructor_constraint_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal693 = null;
        IToken char_literal694 = null;
        IToken char_literal695 = null;

        object string_literal693_tree=null;
        object char_literal694_tree=null;
        object char_literal695_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 200) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:908:30: ( 'new' '(' ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:909:2: 'new' '(' ')'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal693=(IToken)Match(input,197,FOLLOW_197_in_constructor_constraint7936); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal693_tree = (object)adaptor.Create(string_literal693);
            		adaptor.AddChild(root_0, string_literal693_tree);
            	}
            	char_literal694=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_constraint7940); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal694_tree = (object)adaptor.Create(char_literal694);
            		adaptor.AddChild(root_0, char_literal694_tree);
            	}
            	char_literal695=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_constraint7944); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal695_tree = (object)adaptor.Create(char_literal695);
            		adaptor.AddChild(root_0, char_literal695_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 200, constructor_constraint_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_constraint"

    public class return_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "return_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:910:8: public return_type : ( type | 'void' );
    public csParser.return_type_return return_type() // throws RecognitionException [1]
    {   
        csParser.return_type_return retval = new csParser.return_type_return();
        retval.start = input.LT(1);
        int return_type_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal697 = null;
        csParser.type_return type696 = default(csParser.type_return);


        object string_literal697_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 201) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:910:19: ( type | 'void' )
            int alt200 = 2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0 == OBJECT || (LA200_0 >= BOOL && LA200_0 <= IDENTIFIER) || (LA200_0 >= ELIF && LA200_0 <= UNDEF) || LA200_0 == 195 || LA200_0 == 221 || (LA200_0 >= 224 && LA200_0 <= 239) || (LA200_0 >= 241 && LA200_0 <= 244) || (LA200_0 >= 247 && LA200_0 <= 254) || LA200_0 == 256 || (LA200_0 >= 263 && LA200_0 <= 264) || (LA200_0 >= 274 && LA200_0 <= 277)) )
            {
                alt200 = 1;
            }
            else if ( (LA200_0 == 206) )
            {
                int LA200_2 = input.LA(2);

                if ( (LA200_2 == IDENTIFIER || (LA200_2 >= ELIF && LA200_2 <= UNDEF) || LA200_2 == 195 || LA200_2 == 221 || (LA200_2 >= 224 && LA200_2 <= 239) || (LA200_2 >= 241 && LA200_2 <= 244) || (LA200_2 >= 247 && LA200_2 <= 250) || LA200_2 == 256 || (LA200_2 >= 263 && LA200_2 <= 264) || LA200_2 == 274 || LA200_2 == 277) )
                {
                    alt200 = 2;
                }
                else if ( (LA200_2 == STAR) )
                {
                    alt200 = 1;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d200s2 =
                        new NoViableAltException("", 200, 2, input);

                    throw nvae_d200s2;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d200s0 =
                    new NoViableAltException("", 200, 0, input);

                throw nvae_d200s0;
            }
            switch (alt200) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:911:2: type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_type_in_return_type7954);
                    	type696 = type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type696.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:912:5: 'void'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal697=(IToken)Match(input,206,FOLLOW_206_in_return_type7960); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal697_tree = (object)adaptor.Create(string_literal697);
                    		adaptor.AddChild(root_0, string_literal697_tree);
                    	}

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 201, return_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "return_type"

    public class formal_parameter_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "formal_parameter_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:913:8: public formal_parameter_list : formal_parameter ( ',' formal_parameter )* ;
    public csParser.formal_parameter_list_return formal_parameter_list() // throws RecognitionException [1]
    {   
        csParser.formal_parameter_list_return retval = new csParser.formal_parameter_list_return();
        retval.start = input.LT(1);
        int formal_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal699 = null;
        csParser.formal_parameter_return formal_parameter698 = default(csParser.formal_parameter_return);

        csParser.formal_parameter_return formal_parameter700 = default(csParser.formal_parameter_return);


        object char_literal699_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 202) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:913:29: ( formal_parameter ( ',' formal_parameter )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:914:2: formal_parameter ( ',' formal_parameter )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_formal_parameter_in_formal_parameter_list7969);
            	formal_parameter698 = formal_parameter();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter698.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:914:19: ( ',' formal_parameter )*
            	do 
            	{
            	    int alt201 = 2;
            	    int LA201_0 = input.LA(1);

            	    if ( (LA201_0 == COMMA) )
            	    {
            	        alt201 = 1;
            	    }


            	    switch (alt201) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:914:20: ',' formal_parameter
            			    {
            			    	char_literal699=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_formal_parameter_list7972); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal699_tree = (object)adaptor.Create(char_literal699);
            			    		adaptor.AddChild(root_0, char_literal699_tree);
            			    	}
            			    	PushFollow(FOLLOW_formal_parameter_in_formal_parameter_list7974);
            			    	formal_parameter700 = formal_parameter();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter700.Tree);

            			    }
            			    break;

            			default:
            			    goto loop201;
            	    }
            	} while (true);

            	loop201:
            		;	// Stops C# compiler whining that label 'loop201' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 202, formal_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list"

    public class formal_parameter_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "formal_parameter"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:915:8: public formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
    public csParser.formal_parameter_return formal_parameter() // throws RecognitionException [1]
    {   
        csParser.formal_parameter_return retval = new csParser.formal_parameter_return();
        retval.start = input.LT(1);
        int formal_parameter_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal704 = null;
        csParser.attributes_return attributes701 = default(csParser.attributes_return);

        csParser.fixed_parameter_return fixed_parameter702 = default(csParser.fixed_parameter_return);

        csParser.parameter_array_return parameter_array703 = default(csParser.parameter_array_return);


        object string_literal704_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 203) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:915:24: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )
            int alt204 = 2;
            int LA204_0 = input.LA(1);

            if ( ((LA204_0 >= OBJECT && LA204_0 <= THIS) || LA204_0 == OPEN_BRACKET || (LA204_0 >= BOOL && LA204_0 <= IDENTIFIER) || (LA204_0 >= ELIF && LA204_0 <= UNDEF) || LA204_0 == 195 || LA204_0 == 206 || (LA204_0 >= 212 && LA204_0 <= 213) || LA204_0 == 221 || (LA204_0 >= 224 && LA204_0 <= 239) || (LA204_0 >= 241 && LA204_0 <= 244) || (LA204_0 >= 247 && LA204_0 <= 254) || LA204_0 == 257 || (LA204_0 >= 263 && LA204_0 <= 264) || (LA204_0 >= 274 && LA204_0 <= 277)) )
            {
                alt204 = 1;
            }
            else if ( (LA204_0 == 256) )
            {
                int LA204_2 = input.LA(2);

                if ( (LA204_2 == OPEN_BRACKET || LA204_2 == LTHAN || LA204_2 == STAR || LA204_2 == IDENTIFIER || LA204_2 == DOT || (LA204_2 >= ELIF && LA204_2 <= UNDEF) || LA204_2 == 195 || LA204_2 == 208 || (LA204_2 >= 220 && LA204_2 <= 221) || (LA204_2 >= 224 && LA204_2 <= 239) || (LA204_2 >= 241 && LA204_2 <= 244) || (LA204_2 >= 247 && LA204_2 <= 250) || LA204_2 == 256 || (LA204_2 >= 263 && LA204_2 <= 264) || LA204_2 == 274 || LA204_2 == 277) )
                {
                    alt204 = 1;
                }
                else if ( (LA204_2 == CLOSE_BRACKET || LA204_2 == COMMA || LA204_2 == RPAREN) )
                {
                    alt204 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d204s2 =
                        new NoViableAltException("", 204, 2, input);

                    throw nvae_d204s2;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d204s0 =
                    new NoViableAltException("", 204, 0, input);

                throw nvae_d204s0;
            }
            switch (alt204) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:916:2: ( attributes )? ( fixed_parameter | parameter_array )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:916:2: ( attributes )?
                    	int alt202 = 2;
                    	int LA202_0 = input.LA(1);

                    	if ( (LA202_0 == OPEN_BRACKET) )
                    	{
                    	    alt202 = 1;
                    	}
                    	switch (alt202) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:916:2: attributes
                    	        {
                    	        	PushFollow(FOLLOW_attributes_in_formal_parameter7986);
                    	        	attributes701 = attributes();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes701.Tree);

                    	        }
                    	        break;

                    	}

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:916:16: ( fixed_parameter | parameter_array )
                    	int alt203 = 2;
                    	int LA203_0 = input.LA(1);

                    	if ( ((LA203_0 >= OBJECT && LA203_0 <= THIS) || (LA203_0 >= BOOL && LA203_0 <= IDENTIFIER) || (LA203_0 >= ELIF && LA203_0 <= UNDEF) || LA203_0 == 195 || LA203_0 == 206 || (LA203_0 >= 212 && LA203_0 <= 213) || LA203_0 == 221 || (LA203_0 >= 224 && LA203_0 <= 239) || (LA203_0 >= 241 && LA203_0 <= 244) || (LA203_0 >= 247 && LA203_0 <= 254) || LA203_0 == 256 || (LA203_0 >= 263 && LA203_0 <= 264) || (LA203_0 >= 274 && LA203_0 <= 277)) )
                    	{
                    	    alt203 = 1;
                    	}
                    	else if ( (LA203_0 == 257) )
                    	{
                    	    alt203 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d203s0 =
                    	        new NoViableAltException("", 203, 0, input);

                    	    throw nvae_d203s0;
                    	}
                    	switch (alt203) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:916:17: fixed_parameter
                    	        {
                    	        	PushFollow(FOLLOW_fixed_parameter_in_formal_parameter7992);
                    	        	fixed_parameter702 = fixed_parameter();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_parameter702.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:916:35: parameter_array
                    	        {
                    	        	PushFollow(FOLLOW_parameter_array_in_formal_parameter7996);
                    	        	parameter_array703 = parameter_array();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, parameter_array703.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:917:4: '__arglist'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal704=(IToken)Match(input,256,FOLLOW_256_in_formal_parameter8003); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal704_tree = (object)adaptor.Create(string_literal704);
                    		adaptor.AddChild(root_0, string_literal704_tree);
                    	}

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 203, formal_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "formal_parameter"

    public class fixed_parameters_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "fixed_parameters"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:918:8: public fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
    public csParser.fixed_parameters_return fixed_parameters() // throws RecognitionException [1]
    {   
        csParser.fixed_parameters_return retval = new csParser.fixed_parameters_return();
        retval.start = input.LT(1);
        int fixed_parameters_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal706 = null;
        csParser.fixed_parameter_return fixed_parameter705 = default(csParser.fixed_parameter_return);

        csParser.fixed_parameter_return fixed_parameter707 = default(csParser.fixed_parameter_return);


        object char_literal706_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 204) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:918:24: ( fixed_parameter ( ',' fixed_parameter )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:919:2: fixed_parameter ( ',' fixed_parameter )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_fixed_parameter_in_fixed_parameters8013);
            	fixed_parameter705 = fixed_parameter();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_parameter705.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:919:20: ( ',' fixed_parameter )*
            	do 
            	{
            	    int alt205 = 2;
            	    int LA205_0 = input.LA(1);

            	    if ( (LA205_0 == COMMA) )
            	    {
            	        alt205 = 1;
            	    }


            	    switch (alt205) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:919:21: ',' fixed_parameter
            			    {
            			    	char_literal706=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_fixed_parameters8018); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal706_tree = (object)adaptor.Create(char_literal706);
            			    		adaptor.AddChild(root_0, char_literal706_tree);
            			    	}
            			    	PushFollow(FOLLOW_fixed_parameter_in_fixed_parameters8022);
            			    	fixed_parameter707 = fixed_parameter();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_parameter707.Tree);

            			    }
            			    break;

            			default:
            			    goto loop205;
            	    }
            	} while (true);

            	loop205:
            		;	// Stops C# compiler whining that label 'loop205' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 204, fixed_parameters_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_parameters"

    public class fixed_parameter_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "fixed_parameter"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:921:8: public fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
    public csParser.fixed_parameter_return fixed_parameter() // throws RecognitionException [1]
    {   
        csParser.fixed_parameter_return retval = new csParser.fixed_parameter_return();
        retval.start = input.LT(1);
        int fixed_parameter_StartIndex = input.Index;
        object root_0 = null;

        csParser.parameter_modifier_return parameter_modifier708 = default(csParser.parameter_modifier_return);

        csParser.type_return type709 = default(csParser.type_return);

        csParser.identifier_return identifier710 = default(csParser.identifier_return);

        csParser.default_argument_return default_argument711 = default(csParser.default_argument_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 205) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:921:23: ( ( parameter_modifier )? type identifier ( default_argument )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:922:2: ( parameter_modifier )? type identifier ( default_argument )?
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:922:2: ( parameter_modifier )?
            	int alt206 = 2;
            	int LA206_0 = input.LA(1);

            	if ( (LA206_0 == THIS || (LA206_0 >= 212 && LA206_0 <= 213)) )
            	{
            	    alt206 = 1;
            	}
            	switch (alt206) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:922:2: parameter_modifier
            	        {
            	        	PushFollow(FOLLOW_parameter_modifier_in_fixed_parameter8035);
            	        	parameter_modifier708 = parameter_modifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, parameter_modifier708.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_fixed_parameter8040);
            	type709 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type709.Tree);
            	PushFollow(FOLLOW_identifier_in_fixed_parameter8044);
            	identifier710 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier710.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:922:44: ( default_argument )?
            	int alt207 = 2;
            	int LA207_0 = input.LA(1);

            	if ( (LA207_0 == ASSIGN) )
            	{
            	    alt207 = 1;
            	}
            	switch (alt207) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:922:44: default_argument
            	        {
            	        	PushFollow(FOLLOW_default_argument_in_fixed_parameter8048);
            	        	default_argument711 = default_argument();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, default_argument711.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 205, fixed_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_parameter"

    public class default_argument_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "default_argument"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:924:8: public default_argument : '=' expression ;
    public csParser.default_argument_return default_argument() // throws RecognitionException [1]
    {   
        csParser.default_argument_return retval = new csParser.default_argument_return();
        retval.start = input.LT(1);
        int default_argument_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal712 = null;
        csParser.expression_return expression713 = default(csParser.expression_return);


        object char_literal712_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 206) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:924:24: ( '=' expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:925:2: '=' expression
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal712=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_default_argument8060); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal712_tree = (object)adaptor.Create(char_literal712);
            		adaptor.AddChild(root_0, char_literal712_tree);
            	}
            	PushFollow(FOLLOW_expression_in_default_argument8062);
            	expression713 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression713.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 206, default_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "default_argument"

    public class parameter_modifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "parameter_modifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:926:8: public parameter_modifier : ( 'ref' | 'out' | 'this' );
    public csParser.parameter_modifier_return parameter_modifier() // throws RecognitionException [1]
    {   
        csParser.parameter_modifier_return retval = new csParser.parameter_modifier_return();
        retval.start = input.LT(1);
        int parameter_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set714 = null;

        object set714_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 207) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:926:26: ( 'ref' | 'out' | 'this' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set714 = (IToken)input.LT(1);
            	if ( input.LA(1) == THIS || (input.LA(1) >= 212 && input.LA(1) <= 213) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set714));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 207, parameter_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "parameter_modifier"

    public class parameter_array_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "parameter_array"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:928:8: public parameter_array : 'params' type identifier ;
    public csParser.parameter_array_return parameter_array() // throws RecognitionException [1]
    {   
        csParser.parameter_array_return retval = new csParser.parameter_array_return();
        retval.start = input.LT(1);
        int parameter_array_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal715 = null;
        csParser.type_return type716 = default(csParser.type_return);

        csParser.identifier_return identifier717 = default(csParser.identifier_return);


        object string_literal715_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 208) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:928:23: ( 'params' type identifier )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:929:2: 'params' type identifier
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal715=(IToken)Match(input,257,FOLLOW_257_in_parameter_array8089); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal715_tree = (object)adaptor.Create(string_literal715);
            		adaptor.AddChild(root_0, string_literal715_tree);
            	}
            	PushFollow(FOLLOW_type_in_parameter_array8093);
            	type716 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type716.Tree);
            	PushFollow(FOLLOW_identifier_in_parameter_array8097);
            	identifier717 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier717.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 208, parameter_array_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "parameter_array"

    public class interface_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:932:8: public interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
    public csParser.interface_declaration_return interface_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_declaration_return retval = new csParser.interface_declaration_return();
        retval.start = input.LT(1);
        int interface_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal718 = null;
        IToken char_literal724 = null;
        csParser.identifier_return identifier719 = default(csParser.identifier_return);

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list720 = default(csParser.variant_generic_parameter_list_return);

        csParser.interface_base_return interface_base721 = default(csParser.interface_base_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses722 = default(csParser.type_parameter_constraints_clauses_return);

        csParser.interface_body_return interface_body723 = default(csParser.interface_body_return);


        object string_literal718_tree=null;
        object char_literal724_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 209) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:932:29: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:933:2: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal718=(IToken)Match(input,258,FOLLOW_258_in_interface_declaration8109); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal718_tree = (object)adaptor.Create(string_literal718);
            		adaptor.AddChild(root_0, string_literal718_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_interface_declaration8113);
            	identifier719 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier719.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:933:29: ( variant_generic_parameter_list )?
            	int alt208 = 2;
            	int LA208_0 = input.LA(1);

            	if ( (LA208_0 == LTHAN) )
            	{
            	    alt208 = 1;
            	}
            	switch (alt208) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:933:29: variant_generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_variant_generic_parameter_list_in_interface_declaration8117);
            	        	variant_generic_parameter_list720 = variant_generic_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_generic_parameter_list720.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:934:6: ( interface_base )?
            	int alt209 = 2;
            	int LA209_0 = input.LA(1);

            	if ( (LA209_0 == 211) )
            	{
            	    alt209 = 1;
            	}
            	switch (alt209) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:934:6: interface_base
            	        {
            	        	PushFollow(FOLLOW_interface_base_in_interface_declaration8126);
            	        	interface_base721 = interface_base();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_base721.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:934:24: ( type_parameter_constraints_clauses )?
            	int alt210 = 2;
            	int LA210_0 = input.LA(1);

            	if ( (LA210_0 == 236) )
            	{
            	    alt210 = 1;
            	}
            	switch (alt210) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:934:24: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration8131);
            	        	type_parameter_constraints_clauses722 = type_parameter_constraints_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses722.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_interface_body_in_interface_declaration8136);
            	interface_body723 = interface_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_body723.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:934:79: ( ';' )?
            	int alt211 = 2;
            	int LA211_0 = input.LA(1);

            	if ( (LA211_0 == SEMI) )
            	{
            	    alt211 = 1;
            	}
            	switch (alt211) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:934:79: ';'
            	        {
            	        	char_literal724=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_declaration8140); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal724_tree = (object)adaptor.Create(char_literal724);
            	        		adaptor.AddChild(root_0, char_literal724_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 209, interface_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"

    public class interface_modifiers_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_modifiers"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:935:8: public interface_modifiers : ( modifier )+ ;
    public csParser.interface_modifiers_return interface_modifiers() // throws RecognitionException [1]
    {   
        csParser.interface_modifiers_return retval = new csParser.interface_modifiers_return();
        retval.start = input.LT(1);
        int interface_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.modifier_return modifier725 = default(csParser.modifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 210) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:935:27: ( ( modifier )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:936:2: ( modifier )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:936:2: ( modifier )+
            	int cnt212 = 0;
            	do 
            	{
            	    int alt212 = 2;
            	    int LA212_0 = input.LA(1);

            	    if ( ((LA212_0 >= PUBLIC && LA212_0 <= STATIC) || LA212_0 == 194 || (LA212_0 >= 197 && LA212_0 <= 204)) )
            	    {
            	        alt212 = 1;
            	    }


            	    switch (alt212) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:936:2: modifier
            			    {
            			    	PushFollow(FOLLOW_modifier_in_interface_modifiers8152);
            			    	modifier725 = modifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifier725.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt212 >= 1 ) goto loop212;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee212 =
            		                new EarlyExitException(212, input);
            		            throw eee212;
            	    }
            	    cnt212++;
            	} while (true);

            	loop212:
            		;	// Stops C# compiler whining that label 'loop212' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 210, interface_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_modifiers"

    public class interface_base_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_base"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:937:8: public interface_base : ':' interface_type_list ;
    public csParser.interface_base_return interface_base() // throws RecognitionException [1]
    {   
        csParser.interface_base_return retval = new csParser.interface_base_return();
        retval.start = input.LT(1);
        int interface_base_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal726 = null;
        csParser.interface_type_list_return interface_type_list727 = default(csParser.interface_type_list_return);


        object char_literal726_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 211) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:937:22: ( ':' interface_type_list )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:938:5: ':' interface_type_list
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal726=(IToken)Match(input,211,FOLLOW_211_in_interface_base8167); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal726_tree = (object)adaptor.Create(char_literal726);
            		adaptor.AddChild(root_0, char_literal726_tree);
            	}
            	PushFollow(FOLLOW_interface_type_list_in_interface_base8169);
            	interface_type_list727 = interface_type_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_type_list727.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 211, interface_base_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_base"

    public class interface_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:939:8: public interface_body : '{' ( interface_member_declarations )? '}' ;
    public csParser.interface_body_return interface_body() // throws RecognitionException [1]
    {   
        csParser.interface_body_return retval = new csParser.interface_body_return();
        retval.start = input.LT(1);
        int interface_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal728 = null;
        IToken char_literal730 = null;
        csParser.interface_member_declarations_return interface_member_declarations729 = default(csParser.interface_member_declarations_return);


        object char_literal728_tree=null;
        object char_literal730_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 212) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:939:22: ( '{' ( interface_member_declarations )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:940:2: '{' ( interface_member_declarations )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal728=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_body8179); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal728_tree = (object)adaptor.Create(char_literal728);
            		adaptor.AddChild(root_0, char_literal728_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:940:8: ( interface_member_declarations )?
            	int alt213 = 2;
            	int LA213_0 = input.LA(1);

            	if ( ((LA213_0 >= PUBLIC && LA213_0 <= STATIC) || LA213_0 == OBJECT || LA213_0 == OPEN_BRACKET || (LA213_0 >= BOOL && LA213_0 <= IDENTIFIER) || (LA213_0 >= ELIF && LA213_0 <= UNDEF) || (LA213_0 >= 194 && LA213_0 <= 195) || (LA213_0 >= 197 && LA213_0 <= 204) || LA213_0 == 206 || LA213_0 == 221 || (LA213_0 >= 224 && LA213_0 <= 244) || (LA213_0 >= 247 && LA213_0 <= 254) || LA213_0 == 256 || (LA213_0 >= 263 && LA213_0 <= 264) || (LA213_0 >= 274 && LA213_0 <= 277)) )
            	{
            	    alt213 = 1;
            	}
            	switch (alt213) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:940:8: interface_member_declarations
            	        {
            	        	PushFollow(FOLLOW_interface_member_declarations_in_interface_body8183);
            	        	interface_member_declarations729 = interface_member_declarations();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_member_declarations729.Tree);

            	        }
            	        break;

            	}

            	char_literal730=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_body8188); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal730_tree = (object)adaptor.Create(char_literal730);
            		adaptor.AddChild(root_0, char_literal730_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 212, interface_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_body"

    public class interface_member_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_member_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:941:8: public interface_member_declarations : ( interface_member_declaration )+ ;
    public csParser.interface_member_declarations_return interface_member_declarations() // throws RecognitionException [1]
    {   
        csParser.interface_member_declarations_return retval = new csParser.interface_member_declarations_return();
        retval.start = input.LT(1);
        int interface_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.interface_member_declaration_return interface_member_declaration731 = default(csParser.interface_member_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 213) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:941:37: ( ( interface_member_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:942:2: ( interface_member_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:942:2: ( interface_member_declaration )+
            	int cnt214 = 0;
            	do 
            	{
            	    int alt214 = 2;
            	    int LA214_0 = input.LA(1);

            	    if ( ((LA214_0 >= PUBLIC && LA214_0 <= STATIC) || LA214_0 == OBJECT || LA214_0 == OPEN_BRACKET || (LA214_0 >= BOOL && LA214_0 <= IDENTIFIER) || (LA214_0 >= ELIF && LA214_0 <= UNDEF) || (LA214_0 >= 194 && LA214_0 <= 195) || (LA214_0 >= 197 && LA214_0 <= 204) || LA214_0 == 206 || LA214_0 == 221 || (LA214_0 >= 224 && LA214_0 <= 244) || (LA214_0 >= 247 && LA214_0 <= 254) || LA214_0 == 256 || (LA214_0 >= 263 && LA214_0 <= 264) || (LA214_0 >= 274 && LA214_0 <= 277)) )
            	    {
            	        alt214 = 1;
            	    }


            	    switch (alt214) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:942:2: interface_member_declaration
            			    {
            			    	PushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations8198);
            			    	interface_member_declaration731 = interface_member_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_member_declaration731.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt214 >= 1 ) goto loop214;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee214 =
            		                new EarlyExitException(214, input);
            		            throw eee214;
            	    }
            	    cnt214++;
            	} while (true);

            	loop214:
            		;	// Stops C# compiler whining that label 'loop214' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 213, interface_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_member_declarations"

    public class interface_member_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_member_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:943:8: public interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
    public csParser.interface_member_declaration_return interface_member_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_member_declaration_return retval = new csParser.interface_member_declaration_return();
        retval.start = input.LT(1);
        int interface_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal734 = null;
        csParser.attributes_return attributes732 = default(csParser.attributes_return);

        csParser.modifiers_return modifiers733 = default(csParser.modifiers_return);

        csParser.interface_method_declaration_return interface_method_declaration735 = default(csParser.interface_method_declaration_return);

        csParser.interface_event_declaration_return interface_event_declaration736 = default(csParser.interface_event_declaration_return);

        csParser.type_return type737 = default(csParser.type_return);

        csParser.interface_method_declaration_return interface_method_declaration738 = default(csParser.interface_method_declaration_return);

        csParser.interface_property_declaration_return interface_property_declaration739 = default(csParser.interface_property_declaration_return);

        csParser.interface_indexer_declaration_return interface_indexer_declaration740 = default(csParser.interface_indexer_declaration_return);


        object string_literal734_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 214) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:943:36: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:944:2: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:944:2: ( attributes )?
            	int alt215 = 2;
            	int LA215_0 = input.LA(1);

            	if ( (LA215_0 == OPEN_BRACKET) )
            	{
            	    alt215 = 1;
            	}
            	switch (alt215) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:944:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_member_declaration8209);
            	        	attributes732 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes732.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:944:17: ( modifiers )?
            	int alt216 = 2;
            	int LA216_0 = input.LA(1);

            	if ( ((LA216_0 >= PUBLIC && LA216_0 <= STATIC) || LA216_0 == 194 || (LA216_0 >= 197 && LA216_0 <= 204)) )
            	{
            	    alt216 = 1;
            	}
            	switch (alt216) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:944:17: modifiers
            	        {
            	        	PushFollow(FOLLOW_modifiers_in_interface_member_declaration8215);
            	        	modifiers733 = modifiers();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifiers733.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:945:3: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
            	int alt218 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case 206:
            		{
            	    int LA218_1 = input.LA(2);

            	    if ( (LA218_1 == STAR) )
            	    {
            	        alt218 = 3;
            	    }
            	    else if ( (LA218_1 == IDENTIFIER || (LA218_1 >= ELIF && LA218_1 <= UNDEF) || LA218_1 == 195 || LA218_1 == 221 || (LA218_1 >= 224 && LA218_1 <= 239) || (LA218_1 >= 241 && LA218_1 <= 244) || (LA218_1 >= 247 && LA218_1 <= 250) || LA218_1 == 256 || (LA218_1 >= 263 && LA218_1 <= 264) || LA218_1 == 274 || LA218_1 == 277) )
            	    {
            	        alt218 = 1;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d218s1 =
            	            new NoViableAltException("", 218, 1, input);

            	        throw nvae_d218s1;
            	    }
            	    }
            	    break;
            	case 240:
            		{
            	    alt218 = 2;
            	    }
            	    break;
            	case OBJECT:
            	case BOOL:
            	case BYTE:
            	case CHAR:
            	case SHORT:
            	case INT:
            	case LONG:
            	case FLOAT:
            	case DOUBLE:
            	case IDENTIFIER:
            	case ELIF:
            	case ENDIF:
            	case DEFINE:
            	case UNDEF:
            	case 195:
            	case 221:
            	case 224:
            	case 225:
            	case 226:
            	case 227:
            	case 228:
            	case 229:
            	case 230:
            	case 231:
            	case 232:
            	case 233:
            	case 234:
            	case 235:
            	case 236:
            	case 237:
            	case 238:
            	case 239:
            	case 241:
            	case 242:
            	case 243:
            	case 244:
            	case 247:
            	case 248:
            	case 249:
            	case 250:
            	case 251:
            	case 252:
            	case 253:
            	case 254:
            	case 256:
            	case 263:
            	case 264:
            	case 274:
            	case 275:
            	case 276:
            	case 277:
            		{
            	    alt218 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d218s0 =
            		        new NoViableAltException("", 218, 0, input);

            		    throw nvae_d218s0;
            	}

            	switch (alt218) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:945:4: 'void' interface_method_declaration
            	        {
            	        	string_literal734=(IToken)Match(input,206,FOLLOW_206_in_interface_member_declaration8221); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal734_tree = (object)adaptor.Create(string_literal734);
            	        		adaptor.AddChild(root_0, string_literal734_tree);
            	        	}
            	        	PushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration8225);
            	        	interface_method_declaration735 = interface_method_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_method_declaration735.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:946:5: interface_event_declaration
            	        {
            	        	PushFollow(FOLLOW_interface_event_declaration_in_interface_member_declaration8231);
            	        	interface_event_declaration736 = interface_event_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_event_declaration736.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:947:5: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
            	        {
            	        	PushFollow(FOLLOW_type_in_interface_member_declaration8237);
            	        	type737 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type737.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:947:12: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
            	        	int alt217 = 3;
            	        	switch ( input.LA(1) ) 
            	        	{
            	        	case IDENTIFIER:
            	        		{
            	        	    int LA217_1 = input.LA(2);

            	        	    if ( (LA217_1 == LTHAN) && (synpred28_cs()) )
            	        	    {
            	        	        alt217 = 1;
            	        	    }
            	        	    else if ( (LA217_1 == LPAREN) && (synpred28_cs()) )
            	        	    {
            	        	        alt217 = 1;
            	        	    }
            	        	    else if ( (LA217_1 == OPEN_BRACE) && (synpred29_cs()) )
            	        	    {
            	        	        alt217 = 2;
            	        	    }
            	        	    else 
            	        	    {
            	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	        NoViableAltException nvae_d217s1 =
            	        	            new NoViableAltException("", 217, 1, input);

            	        	        throw nvae_d217s1;
            	        	    }
            	        	    }
            	        	    break;
            	        	case ELIF:
            	        	case ENDIF:
            	        	case DEFINE:
            	        	case UNDEF:
            	        	case 195:
            	        	case 221:
            	        	case 224:
            	        	case 225:
            	        	case 226:
            	        	case 227:
            	        	case 228:
            	        	case 229:
            	        	case 230:
            	        	case 231:
            	        	case 232:
            	        	case 233:
            	        	case 234:
            	        	case 235:
            	        	case 236:
            	        	case 237:
            	        	case 238:
            	        	case 239:
            	        	case 241:
            	        	case 242:
            	        	case 243:
            	        	case 244:
            	        	case 247:
            	        	case 248:
            	        	case 249:
            	        	case 250:
            	        	case 256:
            	        	case 263:
            	        	case 264:
            	        	case 274:
            	        	case 277:
            	        		{
            	        	    int LA217_2 = input.LA(2);

            	        	    if ( (LA217_2 == OPEN_BRACE) && (synpred29_cs()) )
            	        	    {
            	        	        alt217 = 2;
            	        	    }
            	        	    else if ( (LA217_2 == LTHAN) && (synpred28_cs()) )
            	        	    {
            	        	        alt217 = 1;
            	        	    }
            	        	    else if ( (LA217_2 == LPAREN) && (synpred28_cs()) )
            	        	    {
            	        	        alt217 = 1;
            	        	    }
            	        	    else 
            	        	    {
            	        	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	        NoViableAltException nvae_d217s2 =
            	        	            new NoViableAltException("", 217, 2, input);

            	        	        throw nvae_d217s2;
            	        	    }
            	        	    }
            	        	    break;
            	        	case THIS:
            	        		{
            	        	    alt217 = 3;
            	        	    }
            	        	    break;
            	        		default:
            	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        		    NoViableAltException nvae_d217s0 =
            	        		        new NoViableAltException("", 217, 0, input);

            	        		    throw nvae_d217s0;
            	        	}

            	        	switch (alt217) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:947:14: ( member_name '(' )=> interface_method_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration8253);
            	        	        	interface_method_declaration738 = interface_method_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_method_declaration738.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:948:14: ( member_name '{' )=> interface_property_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_interface_property_declaration_in_interface_member_declaration8278);
            	        	        	interface_property_declaration739 = interface_property_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_property_declaration739.Tree);

            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:949:8: interface_indexer_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_interface_indexer_declaration_in_interface_member_declaration8288);
            	        	        	interface_indexer_declaration740 = interface_indexer_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_indexer_declaration740.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 214, interface_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration"

    public class interface_property_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_property_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:952:8: public interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
    public csParser.interface_property_declaration_return interface_property_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_property_declaration_return retval = new csParser.interface_property_declaration_return();
        retval.start = input.LT(1);
        int interface_property_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal742 = null;
        IToken char_literal744 = null;
        csParser.identifier_return identifier741 = default(csParser.identifier_return);

        csParser.interface_accessor_declarations_return interface_accessor_declarations743 = default(csParser.interface_accessor_declarations_return);


        object char_literal742_tree=null;
        object char_literal744_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 215) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:952:38: ( identifier '{' interface_accessor_declarations '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:953:2: identifier '{' interface_accessor_declarations '}'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_interface_property_declaration8307);
            	identifier741 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier741.Tree);
            	char_literal742=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_property_declaration8311); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal742_tree = (object)adaptor.Create(char_literal742);
            		adaptor.AddChild(root_0, char_literal742_tree);
            	}
            	PushFollow(FOLLOW_interface_accessor_declarations_in_interface_property_declaration8315);
            	interface_accessor_declarations743 = interface_accessor_declarations();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_accessor_declarations743.Tree);
            	char_literal744=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_property_declaration8319); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal744_tree = (object)adaptor.Create(char_literal744);
            		adaptor.AddChild(root_0, char_literal744_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 215, interface_property_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration"

    public class interface_method_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_method_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:954:8: public interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    public csParser.interface_method_declaration_return interface_method_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_method_declaration_return retval = new csParser.interface_method_declaration_return();
        retval.start = input.LT(1);
        int interface_method_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal747 = null;
        IToken char_literal749 = null;
        IToken char_literal751 = null;
        csParser.identifier_return identifier745 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list746 = default(csParser.generic_argument_list_return);

        csParser.formal_parameter_list_return formal_parameter_list748 = default(csParser.formal_parameter_list_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses750 = default(csParser.type_parameter_constraints_clauses_return);


        object char_literal747_tree=null;
        object char_literal749_tree=null;
        object char_literal751_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 216) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:954:36: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:955:2: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_interface_method_declaration8329);
            	identifier745 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier745.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:955:15: ( generic_argument_list )?
            	int alt219 = 2;
            	int LA219_0 = input.LA(1);

            	if ( (LA219_0 == LTHAN) )
            	{
            	    alt219 = 1;
            	}
            	switch (alt219) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:955:15: generic_argument_list
            	        {
            	        	PushFollow(FOLLOW_generic_argument_list_in_interface_method_declaration8333);
            	        	generic_argument_list746 = generic_argument_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list746.Tree);

            	        }
            	        break;

            	}

            	char_literal747=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_interface_method_declaration8341); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal747_tree = (object)adaptor.Create(char_literal747);
            		adaptor.AddChild(root_0, char_literal747_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:956:12: ( formal_parameter_list )?
            	int alt220 = 2;
            	int LA220_0 = input.LA(1);

            	if ( ((LA220_0 >= OBJECT && LA220_0 <= THIS) || LA220_0 == OPEN_BRACKET || (LA220_0 >= BOOL && LA220_0 <= IDENTIFIER) || (LA220_0 >= ELIF && LA220_0 <= UNDEF) || LA220_0 == 195 || LA220_0 == 206 || (LA220_0 >= 212 && LA220_0 <= 213) || LA220_0 == 221 || (LA220_0 >= 224 && LA220_0 <= 239) || (LA220_0 >= 241 && LA220_0 <= 244) || (LA220_0 >= 247 && LA220_0 <= 254) || (LA220_0 >= 256 && LA220_0 <= 257) || (LA220_0 >= 263 && LA220_0 <= 264) || (LA220_0 >= 274 && LA220_0 <= 277)) )
            	{
            	    alt220 = 1;
            	}
            	switch (alt220) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:956:12: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration8345);
            	        	formal_parameter_list748 = formal_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list748.Tree);

            	        }
            	        break;

            	}

            	char_literal749=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_interface_method_declaration8350); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal749_tree = (object)adaptor.Create(char_literal749);
            		adaptor.AddChild(root_0, char_literal749_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:956:43: ( type_parameter_constraints_clauses )?
            	int alt221 = 2;
            	int LA221_0 = input.LA(1);

            	if ( (LA221_0 == 236) )
            	{
            	    alt221 = 1;
            	}
            	switch (alt221) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:956:43: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration8354);
            	        	type_parameter_constraints_clauses750 = type_parameter_constraints_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses750.Tree);

            	        }
            	        break;

            	}

            	char_literal751=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_method_declaration8359); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal751_tree = (object)adaptor.Create(char_literal751);
            		adaptor.AddChild(root_0, char_literal751_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 216, interface_method_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration"

    public class interface_event_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_event_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:957:8: public interface_event_declaration : 'event' type identifier ';' ;
    public csParser.interface_event_declaration_return interface_event_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_event_declaration_return retval = new csParser.interface_event_declaration_return();
        retval.start = input.LT(1);
        int interface_event_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal752 = null;
        IToken char_literal755 = null;
        csParser.type_return type753 = default(csParser.type_return);

        csParser.identifier_return identifier754 = default(csParser.identifier_return);


        object string_literal752_tree=null;
        object char_literal755_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 217) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:957:35: ( 'event' type identifier ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:959:2: 'event' type identifier ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal752=(IToken)Match(input,240,FOLLOW_240_in_interface_event_declaration8372); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal752_tree = (object)adaptor.Create(string_literal752);
            		adaptor.AddChild(root_0, string_literal752_tree);
            	}
            	PushFollow(FOLLOW_type_in_interface_event_declaration8376);
            	type753 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type753.Tree);
            	PushFollow(FOLLOW_identifier_in_interface_event_declaration8380);
            	identifier754 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier754.Tree);
            	char_literal755=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_event_declaration8384); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal755_tree = (object)adaptor.Create(char_literal755);
            		adaptor.AddChild(root_0, char_literal755_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 217, interface_event_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration"

    public class interface_indexer_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_indexer_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:960:8: public interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
    public csParser.interface_indexer_declaration_return interface_indexer_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_indexer_declaration_return retval = new csParser.interface_indexer_declaration_return();
        retval.start = input.LT(1);
        int interface_indexer_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal756 = null;
        IToken char_literal757 = null;
        IToken char_literal759 = null;
        IToken char_literal760 = null;
        IToken char_literal762 = null;
        csParser.formal_parameter_list_return formal_parameter_list758 = default(csParser.formal_parameter_list_return);

        csParser.interface_accessor_declarations_return interface_accessor_declarations761 = default(csParser.interface_accessor_declarations_return);


        object string_literal756_tree=null;
        object char_literal757_tree=null;
        object char_literal759_tree=null;
        object char_literal760_tree=null;
        object char_literal762_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 218) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:960:37: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:962:2: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal756=(IToken)Match(input,THIS,FOLLOW_THIS_in_interface_indexer_declaration8398); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal756_tree = (object)adaptor.Create(string_literal756);
            		adaptor.AddChild(root_0, string_literal756_tree);
            	}
            	char_literal757=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration8402); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal757_tree = (object)adaptor.Create(char_literal757);
            		adaptor.AddChild(root_0, char_literal757_tree);
            	}
            	PushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration8406);
            	formal_parameter_list758 = formal_parameter_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list758.Tree);
            	char_literal759=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration8410); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal759_tree = (object)adaptor.Create(char_literal759);
            		adaptor.AddChild(root_0, char_literal759_tree);
            	}
            	char_literal760=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_indexer_declaration8414); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal760_tree = (object)adaptor.Create(char_literal760);
            		adaptor.AddChild(root_0, char_literal760_tree);
            	}
            	PushFollow(FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration8418);
            	interface_accessor_declarations761 = interface_accessor_declarations();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_accessor_declarations761.Tree);
            	char_literal762=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration8422); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal762_tree = (object)adaptor.Create(char_literal762);
            		adaptor.AddChild(root_0, char_literal762_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 218, interface_indexer_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration"

    public class interface_accessor_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_accessor_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:963:8: public interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
    public csParser.interface_accessor_declarations_return interface_accessor_declarations() // throws RecognitionException [1]
    {   
        csParser.interface_accessor_declarations_return retval = new csParser.interface_accessor_declarations_return();
        retval.start = input.LT(1);
        int interface_accessor_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes763 = default(csParser.attributes_return);

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration764 = default(csParser.interface_get_accessor_declaration_return);

        csParser.attributes_return attributes765 = default(csParser.attributes_return);

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration766 = default(csParser.interface_set_accessor_declaration_return);

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration767 = default(csParser.interface_set_accessor_declaration_return);

        csParser.attributes_return attributes768 = default(csParser.attributes_return);

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration769 = default(csParser.interface_get_accessor_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 219) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:963:39: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:964:2: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:964:2: ( attributes )?
            	int alt222 = 2;
            	int LA222_0 = input.LA(1);

            	if ( (LA222_0 == OPEN_BRACKET) )
            	{
            	    alt222 = 1;
            	}
            	switch (alt222) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:964:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_accessor_declarations8432);
            	        	attributes763 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes763.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:965:3: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
            	int alt227 = 2;
            	int LA227_0 = input.LA(1);

            	if ( (LA227_0 == 247) )
            	{
            	    alt227 = 1;
            	}
            	else if ( (LA227_0 == 248) )
            	{
            	    alt227 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d227s0 =
            	        new NoViableAltException("", 227, 0, input);

            	    throw nvae_d227s0;
            	}
            	switch (alt227) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:965:4: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
            	        {
            	        	PushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations8441);
            	        	interface_get_accessor_declaration764 = interface_get_accessor_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_get_accessor_declaration764.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:965:41: ( attributes )?
            	        	int alt223 = 2;
            	        	int LA223_0 = input.LA(1);

            	        	if ( (LA223_0 == OPEN_BRACKET) )
            	        	{
            	        	    alt223 = 1;
            	        	}
            	        	switch (alt223) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:965:41: attributes
            	        	        {
            	        	        	PushFollow(FOLLOW_attributes_in_interface_accessor_declarations8445);
            	        	        	attributes765 = attributes();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes765.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:965:55: ( interface_set_accessor_declaration )?
            	        	int alt224 = 2;
            	        	int LA224_0 = input.LA(1);

            	        	if ( (LA224_0 == 248) )
            	        	{
            	        	    alt224 = 1;
            	        	}
            	        	switch (alt224) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:965:55: interface_set_accessor_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations8450);
            	        	        	interface_set_accessor_declaration766 = interface_set_accessor_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_set_accessor_declaration766.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:966:5: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
            	        {
            	        	PushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations8457);
            	        	interface_set_accessor_declaration767 = interface_set_accessor_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_set_accessor_declaration767.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:966:42: ( attributes )?
            	        	int alt225 = 2;
            	        	int LA225_0 = input.LA(1);

            	        	if ( (LA225_0 == OPEN_BRACKET) )
            	        	{
            	        	    alt225 = 1;
            	        	}
            	        	switch (alt225) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:966:42: attributes
            	        	        {
            	        	        	PushFollow(FOLLOW_attributes_in_interface_accessor_declarations8461);
            	        	        	attributes768 = attributes();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes768.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:966:56: ( interface_get_accessor_declaration )?
            	        	int alt226 = 2;
            	        	int LA226_0 = input.LA(1);

            	        	if ( (LA226_0 == 247) )
            	        	{
            	        	    alt226 = 1;
            	        	}
            	        	switch (alt226) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:966:56: interface_get_accessor_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations8466);
            	        	        	interface_get_accessor_declaration769 = interface_get_accessor_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_get_accessor_declaration769.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 219, interface_accessor_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_accessor_declarations"

    public class interface_get_accessor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_get_accessor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:967:8: public interface_get_accessor_declaration : 'get' ';' ;
    public csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_get_accessor_declaration_return retval = new csParser.interface_get_accessor_declaration_return();
        retval.start = input.LT(1);
        int interface_get_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal770 = null;
        IToken char_literal771 = null;

        object string_literal770_tree=null;
        object char_literal771_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 220) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:967:42: ( 'get' ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:968:2: 'get' ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal770=(IToken)Match(input,247,FOLLOW_247_in_interface_get_accessor_declaration8478); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal770_tree = (object)adaptor.Create(string_literal770);
            		adaptor.AddChild(root_0, string_literal770_tree);
            	}
            	char_literal771=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_get_accessor_declaration8482); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal771_tree = (object)adaptor.Create(char_literal771);
            		adaptor.AddChild(root_0, char_literal771_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 220, interface_get_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_get_accessor_declaration"

    public class interface_set_accessor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "interface_set_accessor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:969:8: public interface_set_accessor_declaration : 'set' ';' ;
    public csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_set_accessor_declaration_return retval = new csParser.interface_set_accessor_declaration_return();
        retval.start = input.LT(1);
        int interface_set_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal772 = null;
        IToken char_literal773 = null;

        object string_literal772_tree=null;
        object char_literal773_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 221) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:969:42: ( 'set' ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:970:2: 'set' ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal772=(IToken)Match(input,248,FOLLOW_248_in_interface_set_accessor_declaration8494); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal772_tree = (object)adaptor.Create(string_literal772);
            		adaptor.AddChild(root_0, string_literal772_tree);
            	}
            	char_literal773=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_set_accessor_declaration8498); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal773_tree = (object)adaptor.Create(char_literal773);
            		adaptor.AddChild(root_0, char_literal773_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 221, interface_set_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_set_accessor_declaration"

    public class method_modifiers_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "method_modifiers"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:971:8: public method_modifiers : ( modifier )+ ;
    public csParser.method_modifiers_return method_modifiers() // throws RecognitionException [1]
    {   
        csParser.method_modifiers_return retval = new csParser.method_modifiers_return();
        retval.start = input.LT(1);
        int method_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.modifier_return modifier774 = default(csParser.modifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 222) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:971:24: ( ( modifier )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:972:2: ( modifier )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:972:2: ( modifier )+
            	int cnt228 = 0;
            	do 
            	{
            	    int alt228 = 2;
            	    int LA228_0 = input.LA(1);

            	    if ( ((LA228_0 >= PUBLIC && LA228_0 <= STATIC) || LA228_0 == 194 || (LA228_0 >= 197 && LA228_0 <= 204)) )
            	    {
            	        alt228 = 1;
            	    }


            	    switch (alt228) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:972:2: modifier
            			    {
            			    	PushFollow(FOLLOW_modifier_in_method_modifiers8510);
            			    	modifier774 = modifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifier774.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt228 >= 1 ) goto loop228;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee228 =
            		                new EarlyExitException(228, input);
            		            throw eee228;
            	    }
            	    cnt228++;
            	} while (true);

            	loop228:
            		;	// Stops C# compiler whining that label 'loop228' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 222, method_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_modifiers"

    public class struct_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "struct_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:975:8: public struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
    public csParser.struct_declaration_return struct_declaration() // throws RecognitionException [1]
    {   
        csParser.struct_declaration_return retval = new csParser.struct_declaration_return();
        retval.start = input.LT(1);
        int struct_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal775 = null;
        IToken char_literal780 = null;
        csParser.type_or_generic_return type_or_generic776 = default(csParser.type_or_generic_return);

        csParser.struct_interfaces_return struct_interfaces777 = default(csParser.struct_interfaces_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses778 = default(csParser.type_parameter_constraints_clauses_return);

        csParser.struct_body_return struct_body779 = default(csParser.struct_body_return);


        object string_literal775_tree=null;
        object char_literal780_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 223) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:975:26: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:976:2: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal775=(IToken)Match(input,255,FOLLOW_255_in_struct_declaration8524); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal775_tree = (object)adaptor.Create(string_literal775);
            		adaptor.AddChild(root_0, string_literal775_tree);
            	}
            	PushFollow(FOLLOW_type_or_generic_in_struct_declaration8528);
            	type_or_generic776 = type_or_generic();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_or_generic776.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:976:31: ( struct_interfaces )?
            	int alt229 = 2;
            	int LA229_0 = input.LA(1);

            	if ( (LA229_0 == 211) )
            	{
            	    alt229 = 1;
            	}
            	switch (alt229) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:976:31: struct_interfaces
            	        {
            	        	PushFollow(FOLLOW_struct_interfaces_in_struct_declaration8532);
            	        	struct_interfaces777 = struct_interfaces();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_interfaces777.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:976:52: ( type_parameter_constraints_clauses )?
            	int alt230 = 2;
            	int LA230_0 = input.LA(1);

            	if ( (LA230_0 == 236) )
            	{
            	    alt230 = 1;
            	}
            	switch (alt230) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:976:52: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration8537);
            	        	type_parameter_constraints_clauses778 = type_parameter_constraints_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses778.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_struct_body_in_struct_declaration8542);
            	struct_body779 = struct_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_body779.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:976:104: ( ';' )?
            	int alt231 = 2;
            	int LA231_0 = input.LA(1);

            	if ( (LA231_0 == SEMI) )
            	{
            	    alt231 = 1;
            	}
            	switch (alt231) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:976:104: ';'
            	        {
            	        	char_literal780=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_struct_declaration8546); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal780_tree = (object)adaptor.Create(char_literal780);
            	        		adaptor.AddChild(root_0, char_literal780_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 223, struct_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_declaration"

    public class struct_modifiers_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "struct_modifiers"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:977:8: public struct_modifiers : ( struct_modifier )+ ;
    public csParser.struct_modifiers_return struct_modifiers() // throws RecognitionException [1]
    {   
        csParser.struct_modifiers_return retval = new csParser.struct_modifiers_return();
        retval.start = input.LT(1);
        int struct_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.struct_modifier_return struct_modifier781 = default(csParser.struct_modifier_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 224) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:977:24: ( ( struct_modifier )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:978:2: ( struct_modifier )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:978:2: ( struct_modifier )+
            	int cnt232 = 0;
            	do 
            	{
            	    int alt232 = 2;
            	    int LA232_0 = input.LA(1);

            	    if ( ((LA232_0 >= PUBLIC && LA232_0 <= INTERNAL) || (LA232_0 >= 197 && LA232_0 <= 198)) )
            	    {
            	        alt232 = 1;
            	    }


            	    switch (alt232) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:978:2: struct_modifier
            			    {
            			    	PushFollow(FOLLOW_struct_modifier_in_struct_modifiers8557);
            			    	struct_modifier781 = struct_modifier();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_modifier781.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt232 >= 1 ) goto loop232;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee232 =
            		                new EarlyExitException(232, input);
            		            throw eee232;
            	    }
            	    cnt232++;
            	} while (true);

            	loop232:
            		;	// Stops C# compiler whining that label 'loop232' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 224, struct_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_modifiers"

    public class struct_modifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "struct_modifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:979:8: public struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    public csParser.struct_modifier_return struct_modifier() // throws RecognitionException [1]
    {   
        csParser.struct_modifier_return retval = new csParser.struct_modifier_return();
        retval.start = input.LT(1);
        int struct_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set782 = null;

        object set782_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 225) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:979:23: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set782 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= PUBLIC && input.LA(1) <= INTERNAL) || (input.LA(1) >= 197 && input.LA(1) <= 198) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set782));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 225, struct_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_modifier"

    public class struct_interfaces_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "struct_interfaces"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:981:8: public struct_interfaces : ':' interface_type_list ;
    public csParser.struct_interfaces_return struct_interfaces() // throws RecognitionException [1]
    {   
        csParser.struct_interfaces_return retval = new csParser.struct_interfaces_return();
        retval.start = input.LT(1);
        int struct_interfaces_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal783 = null;
        csParser.interface_type_list_return interface_type_list784 = default(csParser.interface_type_list_return);


        object char_literal783_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 226) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:981:25: ( ':' interface_type_list )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:982:2: ':' interface_type_list
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal783=(IToken)Match(input,211,FOLLOW_211_in_struct_interfaces8598); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal783_tree = (object)adaptor.Create(char_literal783);
            		adaptor.AddChild(root_0, char_literal783_tree);
            	}
            	PushFollow(FOLLOW_interface_type_list_in_struct_interfaces8602);
            	interface_type_list784 = interface_type_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_type_list784.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 226, struct_interfaces_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_interfaces"

    public class struct_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "struct_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:983:8: public struct_body : '{' ( struct_member_declarations )? '}' ;
    public csParser.struct_body_return struct_body() // throws RecognitionException [1]
    {   
        csParser.struct_body_return retval = new csParser.struct_body_return();
        retval.start = input.LT(1);
        int struct_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal785 = null;
        IToken char_literal787 = null;
        csParser.struct_member_declarations_return struct_member_declarations786 = default(csParser.struct_member_declarations_return);


        object char_literal785_tree=null;
        object char_literal787_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 227) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:983:19: ( '{' ( struct_member_declarations )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:984:2: '{' ( struct_member_declarations )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal785=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_struct_body8611); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal785_tree = (object)adaptor.Create(char_literal785);
            		adaptor.AddChild(root_0, char_literal785_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:984:8: ( struct_member_declarations )?
            	int alt233 = 2;
            	int LA233_0 = input.LA(1);

            	if ( (LA233_0 == ENUM || (LA233_0 >= PUBLIC && LA233_0 <= STATIC) || LA233_0 == OBJECT || LA233_0 == OPEN_BRACKET || (LA233_0 >= BOOL && LA233_0 <= IDENTIFIER) || (LA233_0 >= ELIF && LA233_0 <= UNDEF) || (LA233_0 >= 194 && LA233_0 <= 206) || LA233_0 == 218 || LA233_0 == 221 || (LA233_0 >= 224 && LA233_0 <= 245) || (LA233_0 >= 247 && LA233_0 <= 256) || LA233_0 == 258 || (LA233_0 >= 260 && LA233_0 <= 261) || (LA233_0 >= 263 && LA233_0 <= 264) || (LA233_0 >= 274 && LA233_0 <= 277)) )
            	{
            	    alt233 = 1;
            	}
            	switch (alt233) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:984:8: struct_member_declarations
            	        {
            	        	PushFollow(FOLLOW_struct_member_declarations_in_struct_body8615);
            	        	struct_member_declarations786 = struct_member_declarations();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_member_declarations786.Tree);

            	        }
            	        break;

            	}

            	char_literal787=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_struct_body8620); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal787_tree = (object)adaptor.Create(char_literal787);
            		adaptor.AddChild(root_0, char_literal787_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 227, struct_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_body"

    public class struct_member_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "struct_member_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:985:8: public struct_member_declarations : ( struct_member_declaration )+ ;
    public csParser.struct_member_declarations_return struct_member_declarations() // throws RecognitionException [1]
    {   
        csParser.struct_member_declarations_return retval = new csParser.struct_member_declarations_return();
        retval.start = input.LT(1);
        int struct_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.struct_member_declaration_return struct_member_declaration788 = default(csParser.struct_member_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 228) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:985:34: ( ( struct_member_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:986:2: ( struct_member_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:986:2: ( struct_member_declaration )+
            	int cnt234 = 0;
            	do 
            	{
            	    int alt234 = 2;
            	    int LA234_0 = input.LA(1);

            	    if ( (LA234_0 == ENUM || (LA234_0 >= PUBLIC && LA234_0 <= STATIC) || LA234_0 == OBJECT || LA234_0 == OPEN_BRACKET || (LA234_0 >= BOOL && LA234_0 <= IDENTIFIER) || (LA234_0 >= ELIF && LA234_0 <= UNDEF) || (LA234_0 >= 194 && LA234_0 <= 206) || LA234_0 == 218 || LA234_0 == 221 || (LA234_0 >= 224 && LA234_0 <= 245) || (LA234_0 >= 247 && LA234_0 <= 256) || LA234_0 == 258 || (LA234_0 >= 260 && LA234_0 <= 261) || (LA234_0 >= 263 && LA234_0 <= 264) || (LA234_0 >= 274 && LA234_0 <= 277)) )
            	    {
            	        alt234 = 1;
            	    }


            	    switch (alt234) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:986:2: struct_member_declaration
            			    {
            			    	PushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations8629);
            			    	struct_member_declaration788 = struct_member_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_member_declaration788.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt234 >= 1 ) goto loop234;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee234 =
            		                new EarlyExitException(234, input);
            		            throw eee234;
            	    }
            	    cnt234++;
            	} while (true);

            	loop234:
            		;	// Stops C# compiler whining that label 'loop234' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 228, struct_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_member_declarations"

    public class struct_member_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "struct_member_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:987:8: public struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
    public csParser.struct_member_declaration_return struct_member_declaration() // throws RecognitionException [1]
    {   
        csParser.struct_member_declaration_return retval = new csParser.struct_member_declaration_return();
        retval.start = input.LT(1);
        int struct_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal790 = null;
        IToken char_literal793 = null;
        IToken string_literal795 = null;
        IToken string_literal802 = null;
        IToken char_literal808 = null;
        csParser.modifiers_return m = default(csParser.modifiers_return);

        csParser.attributes_return attributes789 = default(csParser.attributes_return);

        csParser.type_return type791 = default(csParser.type_return);

        csParser.constant_declarators_return constant_declarators792 = default(csParser.constant_declarators_return);

        csParser.event_declaration_return event_declaration794 = default(csParser.event_declaration_return);

        csParser.method_declaration_return method_declaration796 = default(csParser.method_declaration_return);

        csParser.interface_declaration_return interface_declaration797 = default(csParser.interface_declaration_return);

        csParser.class_declaration_return class_declaration798 = default(csParser.class_declaration_return);

        csParser.struct_declaration_return struct_declaration799 = default(csParser.struct_declaration_return);

        csParser.interface_declaration_return interface_declaration800 = default(csParser.interface_declaration_return);

        csParser.class_declaration_return class_declaration801 = default(csParser.class_declaration_return);

        csParser.method_declaration_return method_declaration803 = default(csParser.method_declaration_return);

        csParser.type_return type804 = default(csParser.type_return);

        csParser.method_declaration_return method_declaration805 = default(csParser.method_declaration_return);

        csParser.property_declaration_return property_declaration806 = default(csParser.property_declaration_return);

        csParser.type_name_return type_name807 = default(csParser.type_name_return);

        csParser.indexer_declaration_return indexer_declaration809 = default(csParser.indexer_declaration_return);

        csParser.indexer_declaration_return indexer_declaration810 = default(csParser.indexer_declaration_return);

        csParser.field_declaration_return field_declaration811 = default(csParser.field_declaration_return);

        csParser.operator_declaration_return operator_declaration812 = default(csParser.operator_declaration_return);

        csParser.struct_declaration_return struct_declaration813 = default(csParser.struct_declaration_return);

        csParser.enum_declaration_return enum_declaration814 = default(csParser.enum_declaration_return);

        csParser.delegate_declaration_return delegate_declaration815 = default(csParser.delegate_declaration_return);

        csParser.conversion_operator_declaration_return conversion_operator_declaration816 = default(csParser.conversion_operator_declaration_return);

        csParser.constructor_declaration_return constructor_declaration817 = default(csParser.constructor_declaration_return);


        object string_literal790_tree=null;
        object char_literal793_tree=null;
        object string_literal795_tree=null;
        object string_literal802_tree=null;
        object char_literal808_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 229) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:987:33: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:988:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:988:2: ( attributes )?
            	int alt235 = 2;
            	int LA235_0 = input.LA(1);

            	if ( (LA235_0 == OPEN_BRACKET) )
            	{
            	    alt235 = 1;
            	}
            	switch (alt235) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:988:2: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_struct_member_declaration8640);
            	        	attributes789 = attributes();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes789.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:988:17: (m= modifiers )?
            	int alt236 = 2;
            	int LA236_0 = input.LA(1);

            	if ( ((LA236_0 >= PUBLIC && LA236_0 <= STATIC) || LA236_0 == 194 || (LA236_0 >= 197 && LA236_0 <= 204)) )
            	{
            	    alt236 = 1;
            	}
            	switch (alt236) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:988:17: m= modifiers
            	        {
            	        	PushFollow(FOLLOW_modifiers_in_struct_member_declaration8647);
            	        	m = modifiers();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, m.Tree);

            	        }
            	        break;

            	}

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:989:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
            	int alt239 = 12;
            	alt239 = dfa239.Predict(input);
            	switch (alt239) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:989:4: 'const' type constant_declarators ';'
            	        {
            	        	string_literal790=(IToken)Match(input,205,FOLLOW_205_in_struct_member_declaration8653); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal790_tree = (object)adaptor.Create(string_literal790);
            	        		adaptor.AddChild(root_0, string_literal790_tree);
            	        	}
            	        	PushFollow(FOLLOW_type_in_struct_member_declaration8657);
            	        	type791 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type791.Tree);
            	        	PushFollow(FOLLOW_constant_declarators_in_struct_member_declaration8661);
            	        	constant_declarators792 = constant_declarators();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarators792.Tree);
            	        	char_literal793=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_struct_member_declaration8665); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal793_tree = (object)adaptor.Create(char_literal793);
            	        		adaptor.AddChild(root_0, char_literal793_tree);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:990:4: event_declaration
            	        {
            	        	PushFollow(FOLLOW_event_declaration_in_struct_member_declaration8670);
            	        	event_declaration794 = event_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_declaration794.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:991:4: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
            	        {
            	        	string_literal795=(IToken)Match(input,196,FOLLOW_196_in_struct_member_declaration8677); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal795_tree = (object)adaptor.Create(string_literal795);
            	        		adaptor.AddChild(root_0, string_literal795_tree);
            	        	}
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:991:14: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
            	        	int alt237 = 4;
            	        	switch ( input.LA(1) ) 
            	        	{
            	        	case OBJECT:
            	        	case BOOL:
            	        	case BYTE:
            	        	case CHAR:
            	        	case SHORT:
            	        	case INT:
            	        	case LONG:
            	        	case FLOAT:
            	        	case DOUBLE:
            	        	case IDENTIFIER:
            	        	case Real_literal:
            	        	case NUMBER:
            	        	case Hex_number:
            	        	case Character_literal:
            	        	case STRINGLITERAL:
            	        	case Verbatim_string_literal:
            	        	case TRUE:
            	        	case FALSE:
            	        	case NULL:
            	        	case ELIF:
            	        	case ENDIF:
            	        	case DEFINE:
            	        	case UNDEF:
            	        	case 195:
            	        	case 221:
            	        	case 224:
            	        	case 225:
            	        	case 226:
            	        	case 227:
            	        	case 228:
            	        	case 229:
            	        	case 230:
            	        	case 231:
            	        	case 232:
            	        	case 233:
            	        	case 234:
            	        	case 235:
            	        	case 236:
            	        	case 237:
            	        	case 238:
            	        	case 239:
            	        	case 241:
            	        	case 242:
            	        	case 243:
            	        	case 244:
            	        	case 247:
            	        	case 248:
            	        	case 249:
            	        	case 250:
            	        	case 251:
            	        	case 252:
            	        	case 253:
            	        	case 254:
            	        	case 256:
            	        	case 263:
            	        	case 264:
            	        	case 274:
            	        	case 275:
            	        	case 276:
            	        	case 277:
            	        		{
            	        	    alt237 = 1;
            	        	    }
            	        	    break;
            	        	case 258:
            	        		{
            	        	    alt237 = 2;
            	        	    }
            	        	    break;
            	        	case 245:
            	        		{
            	        	    alt237 = 3;
            	        	    }
            	        	    break;
            	        	case 255:
            	        		{
            	        	    alt237 = 4;
            	        	    }
            	        	    break;
            	        		default:
            	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        		    NoViableAltException nvae_d237s0 =
            	        		        new NoViableAltException("", 237, 0, input);

            	        		    throw nvae_d237s0;
            	        	}

            	        	switch (alt237) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:991:15: method_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_method_declaration_in_struct_member_declaration8680);
            	        	        	method_declaration796 = method_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration796.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:992:9: interface_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_interface_declaration_in_struct_member_declaration8691);
            	        	        	interface_declaration797 = interface_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_declaration797.Tree);

            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:993:9: class_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_class_declaration_in_struct_member_declaration8702);
            	        	        	class_declaration798 = class_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration798.Tree);

            	        	        }
            	        	        break;
            	        	    case 4 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:994:9: struct_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_struct_declaration_in_struct_member_declaration8713);
            	        	        	struct_declaration799 = struct_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_declaration799.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 4 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:996:4: interface_declaration
            	        {
            	        	PushFollow(FOLLOW_interface_declaration_in_struct_member_declaration8720);
            	        	interface_declaration800 = interface_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_declaration800.Tree);

            	        }
            	        break;
            	    case 5 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:997:4: class_declaration
            	        {
            	        	PushFollow(FOLLOW_class_declaration_in_struct_member_declaration8726);
            	        	class_declaration801 = class_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration801.Tree);

            	        }
            	        break;
            	    case 6 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:998:4: 'void' method_declaration
            	        {
            	        	string_literal802=(IToken)Match(input,206,FOLLOW_206_in_struct_member_declaration8733); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal802_tree = (object)adaptor.Create(string_literal802);
            	        		adaptor.AddChild(root_0, string_literal802_tree);
            	        	}
            	        	PushFollow(FOLLOW_method_declaration_in_struct_member_declaration8737);
            	        	method_declaration803 = method_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration803.Tree);

            	        }
            	        break;
            	    case 7 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:999:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	        {
            	        	PushFollow(FOLLOW_type_in_struct_member_declaration8742);
            	        	type804 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type804.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:999:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	        	int alt238 = 6;
            	        	alt238 = dfa238.Predict(input);
            	        	switch (alt238) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:999:11: ( member_name '(' )=> method_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_method_declaration_in_struct_member_declaration8756);
            	        	        	method_declaration805 = method_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration805.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1000:8: ( member_name '{' )=> property_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_property_declaration_in_struct_member_declaration8775);
            	        	        	property_declaration806 = property_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_declaration806.Tree);

            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1001:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_type_name_in_struct_member_declaration8798);
            	        	        	type_name807 = type_name();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name807.Tree);
            	        	        	char_literal808=(IToken)Match(input,DOT,FOLLOW_DOT_in_struct_member_declaration8800); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{char_literal808_tree = (object)adaptor.Create(char_literal808);
            	        	        		adaptor.AddChild(root_0, char_literal808_tree);
            	        	        	}
            	        	        	PushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration8802);
            	        	        	indexer_declaration809 = indexer_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declaration809.Tree);

            	        	        }
            	        	        break;
            	        	    case 4 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1002:8: indexer_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration8811);
            	        	        	indexer_declaration810 = indexer_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declaration810.Tree);

            	        	        }
            	        	        break;
            	        	    case 5 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1003:11: field_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_field_declaration_in_struct_member_declaration8824);
            	        	        	field_declaration811 = field_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_declaration811.Tree);

            	        	        }
            	        	        break;
            	        	    case 6 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1004:11: operator_declaration
            	        	        {
            	        	        	PushFollow(FOLLOW_operator_declaration_in_struct_member_declaration8842);
            	        	        	operator_declaration812 = operator_declaration();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_declaration812.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 8 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1008:4: struct_declaration
            	        {
            	        	PushFollow(FOLLOW_struct_declaration_in_struct_member_declaration8860);
            	        	struct_declaration813 = struct_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_declaration813.Tree);

            	        }
            	        break;
            	    case 9 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1009:4: enum_declaration
            	        {
            	        	PushFollow(FOLLOW_enum_declaration_in_struct_member_declaration8866);
            	        	enum_declaration814 = enum_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_declaration814.Tree);

            	        }
            	        break;
            	    case 10 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1010:4: delegate_declaration
            	        {
            	        	PushFollow(FOLLOW_delegate_declaration_in_struct_member_declaration8873);
            	        	delegate_declaration815 = delegate_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_declaration815.Tree);

            	        }
            	        break;
            	    case 11 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1011:4: conversion_operator_declaration
            	        {
            	        	PushFollow(FOLLOW_conversion_operator_declaration_in_struct_member_declaration8879);
            	        	conversion_operator_declaration816 = conversion_operator_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conversion_operator_declaration816.Tree);

            	        }
            	        break;
            	    case 12 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1012:4: constructor_declaration
            	        {
            	        	PushFollow(FOLLOW_constructor_declaration_in_struct_member_declaration8884);
            	        	constructor_declaration817 = constructor_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_declaration817.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 229, struct_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration"

    public class indexer_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "indexer_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1018:8: public indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
    public csParser.indexer_declaration_return indexer_declaration() // throws RecognitionException [1]
    {   
        csParser.indexer_declaration_return retval = new csParser.indexer_declaration_return();
        retval.start = input.LT(1);
        int indexer_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal819 = null;
        IToken char_literal821 = null;
        csParser.indexer_declarator_return indexer_declarator818 = default(csParser.indexer_declarator_return);

        csParser.accessor_declarations_return accessor_declarations820 = default(csParser.accessor_declarations_return);


        object char_literal819_tree=null;
        object char_literal821_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 230) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1018:27: ( indexer_declarator '{' accessor_declarations '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1019:2: indexer_declarator '{' accessor_declarations '}'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_indexer_declarator_in_indexer_declaration8903);
            	indexer_declarator818 = indexer_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declarator818.Tree);
            	char_literal819=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_indexer_declaration8907); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal819_tree = (object)adaptor.Create(char_literal819);
            		adaptor.AddChild(root_0, char_literal819_tree);
            	}
            	PushFollow(FOLLOW_accessor_declarations_in_indexer_declaration8911);
            	accessor_declarations820 = accessor_declarations();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_declarations820.Tree);
            	char_literal821=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_indexer_declaration8915); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal821_tree = (object)adaptor.Create(char_literal821);
            		adaptor.AddChild(root_0, char_literal821_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 230, indexer_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "indexer_declaration"

    public class indexer_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "indexer_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1020:8: public indexer_declarator : 'this' '[' formal_parameter_list ']' ;
    public csParser.indexer_declarator_return indexer_declarator() // throws RecognitionException [1]
    {   
        csParser.indexer_declarator_return retval = new csParser.indexer_declarator_return();
        retval.start = input.LT(1);
        int indexer_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal822 = null;
        IToken char_literal823 = null;
        IToken char_literal825 = null;
        csParser.formal_parameter_list_return formal_parameter_list824 = default(csParser.formal_parameter_list_return);


        object string_literal822_tree=null;
        object char_literal823_tree=null;
        object char_literal825_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 231) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1020:26: ( 'this' '[' formal_parameter_list ']' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1022:2: 'this' '[' formal_parameter_list ']'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal822=(IToken)Match(input,THIS,FOLLOW_THIS_in_indexer_declarator8927); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal822_tree = (object)adaptor.Create(string_literal822);
            		adaptor.AddChild(root_0, string_literal822_tree);
            	}
            	char_literal823=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_indexer_declarator8931); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal823_tree = (object)adaptor.Create(char_literal823);
            		adaptor.AddChild(root_0, char_literal823_tree);
            	}
            	PushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator8935);
            	formal_parameter_list824 = formal_parameter_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list824.Tree);
            	char_literal825=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_indexer_declarator8939); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal825_tree = (object)adaptor.Create(char_literal825);
            		adaptor.AddChild(root_0, char_literal825_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 231, indexer_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "indexer_declarator"

    public class operator_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "operator_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1025:8: public operator_declaration : operator_declarator operator_body ;
    public csParser.operator_declaration_return operator_declaration() // throws RecognitionException [1]
    {   
        csParser.operator_declaration_return retval = new csParser.operator_declaration_return();
        retval.start = input.LT(1);
        int operator_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.operator_declarator_return operator_declarator826 = default(csParser.operator_declarator_return);

        csParser.operator_body_return operator_body827 = default(csParser.operator_body_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 232) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1025:28: ( operator_declarator operator_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1026:2: operator_declarator operator_body
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_operator_declarator_in_operator_declaration8952);
            	operator_declarator826 = operator_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_declarator826.Tree);
            	PushFollow(FOLLOW_operator_body_in_operator_declaration8956);
            	operator_body827 = operator_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_body827.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 232, operator_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_declaration"

    public class operator_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "operator_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1027:8: public operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) ;
    public csParser.operator_declarator_return operator_declarator() // throws RecognitionException [1]
    {   
        csParser.operator_declarator_return retval = new csParser.operator_declarator_return();
        retval.start = input.LT(1);
        int operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal828 = null;
        IToken set829 = null;
        IToken char_literal830 = null;
        IToken char_literal836 = null;
        IToken char_literal841 = null;
        csParser.type_return type831 = default(csParser.type_return);

        csParser.identifier_return identifier832 = default(csParser.identifier_return);

        csParser.binary_operator_declarator_return binary_operator_declarator833 = default(csParser.binary_operator_declarator_return);

        csParser.unary_operator_declarator_return unary_operator_declarator834 = default(csParser.unary_operator_declarator_return);

        csParser.overloadable_unary_operator_return overloadable_unary_operator835 = default(csParser.overloadable_unary_operator_return);

        csParser.type_return type837 = default(csParser.type_return);

        csParser.identifier_return identifier838 = default(csParser.identifier_return);

        csParser.unary_operator_declarator_return unary_operator_declarator839 = default(csParser.unary_operator_declarator_return);

        csParser.overloadable_binary_operator_return overloadable_binary_operator840 = default(csParser.overloadable_binary_operator_return);

        csParser.type_return type842 = default(csParser.type_return);

        csParser.identifier_return identifier843 = default(csParser.identifier_return);

        csParser.binary_operator_declarator_return binary_operator_declarator844 = default(csParser.binary_operator_declarator_return);


        object string_literal828_tree=null;
        object set829_tree=null;
        object char_literal830_tree=null;
        object char_literal836_tree=null;
        object char_literal841_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 233) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1027:27: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1028:2: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal828=(IToken)Match(input,259,FOLLOW_259_in_operator_declarator8966); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal828_tree = (object)adaptor.Create(string_literal828);
            		adaptor.AddChild(root_0, string_literal828_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1029:2: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
            	int alt241 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case PLUS:
            	case MINUS:
            		{
            	    alt241 = 1;
            	    }
            	    break;
            	case MONONOT:
            	case MONOTWIDDLE:
            	case TRUE:
            	case FALSE:
            	case 209:
            	case 210:
            		{
            	    alt241 = 2;
            	    }
            	    break;
            	case BIT_OR:
            	case BIT_XOR:
            	case BIT_AND:
            	case NOT_EQUAL:
            	case EQUAL:
            	case LTHAN:
            	case LTE:
            	case GTE:
            	case LEFT_SHIFT:
            	case DIV:
            	case MOD:
            	case STAR:
            	case GT:
            		{
            	    alt241 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d241s0 =
            		        new NoViableAltException("", 241, 0, input);

            		    throw nvae_d241s0;
            	}

            	switch (alt241) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1029:3: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
            	        {
            	        	set829 = (IToken)input.LT(1);
            	        	if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) 
            	        	{
            	        	    input.Consume();
            	        	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set829));
            	        	    state.errorRecovery = false;state.failed = false;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	        	    throw mse;
            	        	}

            	        	char_literal830=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator8981); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal830_tree = (object)adaptor.Create(char_literal830);
            	        		adaptor.AddChild(root_0, char_literal830_tree);
            	        	}
            	        	PushFollow(FOLLOW_type_in_operator_declarator8985);
            	        	type831 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type831.Tree);
            	        	PushFollow(FOLLOW_identifier_in_operator_declarator8989);
            	        	identifier832 = identifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier832.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1029:43: ( binary_operator_declarator | unary_operator_declarator )
            	        	int alt240 = 2;
            	        	int LA240_0 = input.LA(1);

            	        	if ( (LA240_0 == COMMA) )
            	        	{
            	        	    alt240 = 1;
            	        	}
            	        	else if ( (LA240_0 == RPAREN) )
            	        	{
            	        	    alt240 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d240s0 =
            	        	        new NoViableAltException("", 240, 0, input);

            	        	    throw nvae_d240s0;
            	        	}
            	        	switch (alt240) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1029:44: binary_operator_declarator
            	        	        {
            	        	        	PushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator8994);
            	        	        	binary_operator_declarator833 = binary_operator_declarator();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, binary_operator_declarator833.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1029:73: unary_operator_declarator
            	        	        {
            	        	        	PushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator8998);
            	        	        	unary_operator_declarator834 = unary_operator_declarator();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_operator_declarator834.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1030:5: overloadable_unary_operator '(' type identifier unary_operator_declarator
            	        {
            	        	PushFollow(FOLLOW_overloadable_unary_operator_in_operator_declarator9005);
            	        	overloadable_unary_operator835 = overloadable_unary_operator();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, overloadable_unary_operator835.Tree);
            	        	char_literal836=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator9009); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal836_tree = (object)adaptor.Create(char_literal836);
            	        		adaptor.AddChild(root_0, char_literal836_tree);
            	        	}
            	        	PushFollow(FOLLOW_type_in_operator_declarator9013);
            	        	type837 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type837.Tree);
            	        	PushFollow(FOLLOW_identifier_in_operator_declarator9015);
            	        	identifier838 = identifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier838.Tree);
            	        	PushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator9019);
            	        	unary_operator_declarator839 = unary_operator_declarator();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_operator_declarator839.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1031:5: overloadable_binary_operator '(' type identifier binary_operator_declarator
            	        {
            	        	PushFollow(FOLLOW_overloadable_binary_operator_in_operator_declarator9025);
            	        	overloadable_binary_operator840 = overloadable_binary_operator();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, overloadable_binary_operator840.Tree);
            	        	char_literal841=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_operator_declarator9029); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal841_tree = (object)adaptor.Create(char_literal841);
            	        		adaptor.AddChild(root_0, char_literal841_tree);
            	        	}
            	        	PushFollow(FOLLOW_type_in_operator_declarator9033);
            	        	type842 = type();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type842.Tree);
            	        	PushFollow(FOLLOW_identifier_in_operator_declarator9035);
            	        	identifier843 = identifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier843.Tree);
            	        	PushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator9039);
            	        	binary_operator_declarator844 = binary_operator_declarator();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, binary_operator_declarator844.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 233, operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_declarator"

    public class unary_operator_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unary_operator_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1032:8: public unary_operator_declarator : ')' ;
    public csParser.unary_operator_declarator_return unary_operator_declarator() // throws RecognitionException [1]
    {   
        csParser.unary_operator_declarator_return retval = new csParser.unary_operator_declarator_return();
        retval.start = input.LT(1);
        int unary_operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal845 = null;

        object char_literal845_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 234) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1032:33: ( ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1033:5: ')'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal845=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_unary_operator_declarator9053); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal845_tree = (object)adaptor.Create(char_literal845);
            		adaptor.AddChild(root_0, char_literal845_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 234, unary_operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unary_operator_declarator"

    public class overloadable_unary_operator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "overloadable_unary_operator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1034:8: public overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
    public csParser.overloadable_unary_operator_return overloadable_unary_operator() // throws RecognitionException [1]
    {   
        csParser.overloadable_unary_operator_return retval = new csParser.overloadable_unary_operator_return();
        retval.start = input.LT(1);
        int overloadable_unary_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken set846 = null;

        object set846_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 235) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1034:35: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set846 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= MONONOT && input.LA(1) <= MONOTWIDDLE) || (input.LA(1) >= TRUE && input.LA(1) <= FALSE) || (input.LA(1) >= 209 && input.LA(1) <= 210) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set846));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 235, overloadable_unary_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "overloadable_unary_operator"

    public class binary_operator_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "binary_operator_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1036:8: public binary_operator_declarator : ',' type identifier ')' ;
    public csParser.binary_operator_declarator_return binary_operator_declarator() // throws RecognitionException [1]
    {   
        csParser.binary_operator_declarator_return retval = new csParser.binary_operator_declarator_return();
        retval.start = input.LT(1);
        int binary_operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal847 = null;
        IToken char_literal850 = null;
        csParser.type_return type848 = default(csParser.type_return);

        csParser.identifier_return identifier849 = default(csParser.identifier_return);


        object char_literal847_tree=null;
        object char_literal850_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 236) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1036:34: ( ',' type identifier ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1037:2: ',' type identifier ')'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal847=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_binary_operator_declarator9100); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal847_tree = (object)adaptor.Create(char_literal847);
            		adaptor.AddChild(root_0, char_literal847_tree);
            	}
            	PushFollow(FOLLOW_type_in_binary_operator_declarator9104);
            	type848 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type848.Tree);
            	PushFollow(FOLLOW_identifier_in_binary_operator_declarator9108);
            	identifier849 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier849.Tree);
            	char_literal850=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_binary_operator_declarator9112); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal850_tree = (object)adaptor.Create(char_literal850);
            		adaptor.AddChild(root_0, char_literal850_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 236, binary_operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "binary_operator_declarator"

    public class overloadable_binary_operator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "overloadable_binary_operator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1039:8: public overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
    public csParser.overloadable_binary_operator_return overloadable_binary_operator() // throws RecognitionException [1]
    {   
        csParser.overloadable_binary_operator_return retval = new csParser.overloadable_binary_operator_return();
        retval.start = input.LT(1);
        int overloadable_binary_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal851 = null;
        IToken char_literal852 = null;
        IToken char_literal853 = null;
        IToken char_literal854 = null;
        IToken char_literal855 = null;
        IToken char_literal856 = null;
        IToken string_literal857 = null;
        IToken char_literal858 = null;
        IToken char_literal859 = null;
        IToken string_literal860 = null;
        IToken string_literal861 = null;
        IToken char_literal862 = null;
        IToken char_literal863 = null;
        IToken string_literal864 = null;
        IToken string_literal865 = null;

        object char_literal851_tree=null;
        object char_literal852_tree=null;
        object char_literal853_tree=null;
        object char_literal854_tree=null;
        object char_literal855_tree=null;
        object char_literal856_tree=null;
        object string_literal857_tree=null;
        object char_literal858_tree=null;
        object char_literal859_tree=null;
        object string_literal860_tree=null;
        object string_literal861_tree=null;
        object char_literal862_tree=null;
        object char_literal863_tree=null;
        object string_literal864_tree=null;
        object string_literal865_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 237) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1039:36: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
            int alt242 = 14;
            alt242 = dfa242.Predict(input);
            switch (alt242) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:19: '*'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal851=(IToken)Match(input,STAR,FOLLOW_STAR_in_overloadable_binary_operator9125); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal851_tree = (object)adaptor.Create(char_literal851);
                    		adaptor.AddChild(root_0, char_literal851_tree);
                    	}

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:25: '/'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal852=(IToken)Match(input,DIV,FOLLOW_DIV_in_overloadable_binary_operator9129); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal852_tree = (object)adaptor.Create(char_literal852);
                    		adaptor.AddChild(root_0, char_literal852_tree);
                    	}

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:31: '%'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal853=(IToken)Match(input,MOD,FOLLOW_MOD_in_overloadable_binary_operator9133); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal853_tree = (object)adaptor.Create(char_literal853);
                    		adaptor.AddChild(root_0, char_literal853_tree);
                    	}

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:37: '&'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal854=(IToken)Match(input,BIT_AND,FOLLOW_BIT_AND_in_overloadable_binary_operator9137); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal854_tree = (object)adaptor.Create(char_literal854);
                    		adaptor.AddChild(root_0, char_literal854_tree);
                    	}

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:43: '|'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal855=(IToken)Match(input,BIT_OR,FOLLOW_BIT_OR_in_overloadable_binary_operator9141); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal855_tree = (object)adaptor.Create(char_literal855);
                    		adaptor.AddChild(root_0, char_literal855_tree);
                    	}

                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:49: '^'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal856=(IToken)Match(input,BIT_XOR,FOLLOW_BIT_XOR_in_overloadable_binary_operator9145); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal856_tree = (object)adaptor.Create(char_literal856);
                    		adaptor.AddChild(root_0, char_literal856_tree);
                    	}

                    }
                    break;
                case 7 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:55: '<<'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal857=(IToken)Match(input,LEFT_SHIFT,FOLLOW_LEFT_SHIFT_in_overloadable_binary_operator9149); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal857_tree = (object)adaptor.Create(string_literal857);
                    		adaptor.AddChild(root_0, string_literal857_tree);
                    	}

                    }
                    break;
                case 8 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:62: '>' '>'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal858=(IToken)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator9153); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal858_tree = (object)adaptor.Create(char_literal858);
                    		adaptor.AddChild(root_0, char_literal858_tree);
                    	}
                    	char_literal859=(IToken)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator9155); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal859_tree = (object)adaptor.Create(char_literal859);
                    		adaptor.AddChild(root_0, char_literal859_tree);
                    	}

                    }
                    break;
                case 9 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:72: '=='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal860=(IToken)Match(input,EQUAL,FOLLOW_EQUAL_in_overloadable_binary_operator9159); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal860_tree = (object)adaptor.Create(string_literal860);
                    		adaptor.AddChild(root_0, string_literal860_tree);
                    	}

                    }
                    break;
                case 10 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:79: '!='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal861=(IToken)Match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_overloadable_binary_operator9163); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal861_tree = (object)adaptor.Create(string_literal861);
                    		adaptor.AddChild(root_0, string_literal861_tree);
                    	}

                    }
                    break;
                case 11 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:86: '>'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal862=(IToken)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator9167); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal862_tree = (object)adaptor.Create(char_literal862);
                    		adaptor.AddChild(root_0, char_literal862_tree);
                    	}

                    }
                    break;
                case 12 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:92: '<'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	char_literal863=(IToken)Match(input,LTHAN,FOLLOW_LTHAN_in_overloadable_binary_operator9171); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal863_tree = (object)adaptor.Create(char_literal863);
                    		adaptor.AddChild(root_0, char_literal863_tree);
                    	}

                    }
                    break;
                case 13 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:98: '>='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal864=(IToken)Match(input,GTE,FOLLOW_GTE_in_overloadable_binary_operator9175); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal864_tree = (object)adaptor.Create(string_literal864);
                    		adaptor.AddChild(root_0, string_literal864_tree);
                    	}

                    }
                    break;
                case 14 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1040:105: '<='
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal865=(IToken)Match(input,LTE,FOLLOW_LTE_in_overloadable_binary_operator9179); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal865_tree = (object)adaptor.Create(string_literal865);
                    		adaptor.AddChild(root_0, string_literal865_tree);
                    	}

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 237, overloadable_binary_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "overloadable_binary_operator"

    public class conversion_operator_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "conversion_operator_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1042:8: public conversion_operator_declaration : conversion_operator_declarator operator_body ;
    public csParser.conversion_operator_declaration_return conversion_operator_declaration() // throws RecognitionException [1]
    {   
        csParser.conversion_operator_declaration_return retval = new csParser.conversion_operator_declaration_return();
        retval.start = input.LT(1);
        int conversion_operator_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.conversion_operator_declarator_return conversion_operator_declarator866 = default(csParser.conversion_operator_declarator_return);

        csParser.operator_body_return operator_body867 = default(csParser.operator_body_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 238) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1042:39: ( conversion_operator_declarator operator_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1043:2: conversion_operator_declarator operator_body
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration9191);
            	conversion_operator_declarator866 = conversion_operator_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conversion_operator_declarator866.Tree);
            	PushFollow(FOLLOW_operator_body_in_conversion_operator_declaration9195);
            	operator_body867 = operator_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_body867.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 238, conversion_operator_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declaration"

    public class conversion_operator_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "conversion_operator_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1044:8: public conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
    public csParser.conversion_operator_declarator_return conversion_operator_declarator() // throws RecognitionException [1]
    {   
        csParser.conversion_operator_declarator_return retval = new csParser.conversion_operator_declarator_return();
        retval.start = input.LT(1);
        int conversion_operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken set868 = null;
        IToken string_literal869 = null;
        IToken char_literal871 = null;
        IToken char_literal874 = null;
        csParser.type_return type870 = default(csParser.type_return);

        csParser.type_return type872 = default(csParser.type_return);

        csParser.identifier_return identifier873 = default(csParser.identifier_return);


        object set868_tree=null;
        object string_literal869_tree=null;
        object char_literal871_tree=null;
        object char_literal874_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 239) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1044:38: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1045:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
            {
            	root_0 = (object)adaptor.Nil;

            	set868 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 260 && input.LA(1) <= 261) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set868));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}

            	string_literal869=(IToken)Match(input,259,FOLLOW_259_in_conversion_operator_declarator9214); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal869_tree = (object)adaptor.Create(string_literal869);
            		adaptor.AddChild(root_0, string_literal869_tree);
            	}
            	PushFollow(FOLLOW_type_in_conversion_operator_declarator9218);
            	type870 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type870.Tree);
            	char_literal871=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_conversion_operator_declarator9222); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal871_tree = (object)adaptor.Create(char_literal871);
            		adaptor.AddChild(root_0, char_literal871_tree);
            	}
            	PushFollow(FOLLOW_type_in_conversion_operator_declarator9226);
            	type872 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type872.Tree);
            	PushFollow(FOLLOW_identifier_in_conversion_operator_declarator9230);
            	identifier873 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier873.Tree);
            	char_literal874=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_conversion_operator_declarator9234); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal874_tree = (object)adaptor.Create(char_literal874);
            		adaptor.AddChild(root_0, char_literal874_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 239, conversion_operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declarator"

    public class operator_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "operator_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1046:8: public operator_body : block ;
    public csParser.operator_body_return operator_body() // throws RecognitionException [1]
    {   
        csParser.operator_body_return retval = new csParser.operator_body_return();
        retval.start = input.LT(1);
        int operator_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block875 = default(csParser.block_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 240) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1046:21: ( block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1047:2: block
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_block_in_operator_body9244);
            	block875 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block875.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 240, operator_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_body"

    public class constructor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constructor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1050:8: public constructor_declaration : constructor_declarator constructor_body ;
    public csParser.constructor_declaration_return constructor_declaration() // throws RecognitionException [1]
    {   
        csParser.constructor_declaration_return retval = new csParser.constructor_declaration_return();
        retval.start = input.LT(1);
        int constructor_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.constructor_declarator_return constructor_declarator876 = default(csParser.constructor_declarator_return);

        csParser.constructor_body_return constructor_body877 = default(csParser.constructor_body_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 241) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1050:31: ( constructor_declarator constructor_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1051:2: constructor_declarator constructor_body
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_constructor_declarator_in_constructor_declaration9256);
            	constructor_declarator876 = constructor_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_declarator876.Tree);
            	PushFollow(FOLLOW_constructor_body_in_constructor_declaration9260);
            	constructor_body877 = constructor_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_body877.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 241, constructor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public class constructor_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constructor_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1052:8: public constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
    public csParser.constructor_declarator_return constructor_declarator() // throws RecognitionException [1]
    {   
        csParser.constructor_declarator_return retval = new csParser.constructor_declarator_return();
        retval.start = input.LT(1);
        int constructor_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal879 = null;
        IToken char_literal881 = null;
        csParser.identifier_return identifier878 = default(csParser.identifier_return);

        csParser.formal_parameter_list_return formal_parameter_list880 = default(csParser.formal_parameter_list_return);

        csParser.constructor_initializer_return constructor_initializer882 = default(csParser.constructor_initializer_return);


        object char_literal879_tree=null;
        object char_literal881_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 242) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1052:30: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1053:2: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_constructor_declarator9270);
            	identifier878 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier878.Tree);
            	char_literal879=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_declarator9274); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal879_tree = (object)adaptor.Create(char_literal879);
            		adaptor.AddChild(root_0, char_literal879_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1053:21: ( formal_parameter_list )?
            	int alt243 = 2;
            	int LA243_0 = input.LA(1);

            	if ( ((LA243_0 >= OBJECT && LA243_0 <= THIS) || LA243_0 == OPEN_BRACKET || (LA243_0 >= BOOL && LA243_0 <= IDENTIFIER) || (LA243_0 >= ELIF && LA243_0 <= UNDEF) || LA243_0 == 195 || LA243_0 == 206 || (LA243_0 >= 212 && LA243_0 <= 213) || LA243_0 == 221 || (LA243_0 >= 224 && LA243_0 <= 239) || (LA243_0 >= 241 && LA243_0 <= 244) || (LA243_0 >= 247 && LA243_0 <= 254) || (LA243_0 >= 256 && LA243_0 <= 257) || (LA243_0 >= 263 && LA243_0 <= 264) || (LA243_0 >= 274 && LA243_0 <= 277)) )
            	{
            	    alt243 = 1;
            	}
            	switch (alt243) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1053:21: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator9278);
            	        	formal_parameter_list880 = formal_parameter_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list880.Tree);

            	        }
            	        break;

            	}

            	char_literal881=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_declarator9283); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal881_tree = (object)adaptor.Create(char_literal881);
            		adaptor.AddChild(root_0, char_literal881_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1053:52: ( constructor_initializer )?
            	int alt244 = 2;
            	int LA244_0 = input.LA(1);

            	if ( (LA244_0 == 211) )
            	{
            	    alt244 = 1;
            	}
            	switch (alt244) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1053:52: constructor_initializer
            	        {
            	        	PushFollow(FOLLOW_constructor_initializer_in_constructor_declarator9287);
            	        	constructor_initializer882 = constructor_initializer();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_initializer882.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 242, constructor_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_declarator"

    public class constructor_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constructor_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1054:8: public constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
    public csParser.constructor_initializer_return constructor_initializer() // throws RecognitionException [1]
    {   
        csParser.constructor_initializer_return retval = new csParser.constructor_initializer_return();
        retval.start = input.LT(1);
        int constructor_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal883 = null;
        IToken set884 = null;
        IToken char_literal885 = null;
        IToken char_literal887 = null;
        csParser.argument_list_return argument_list886 = default(csParser.argument_list_return);


        object char_literal883_tree=null;
        object set884_tree=null;
        object char_literal885_tree=null;
        object char_literal887_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 243) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1054:31: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1055:2: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal883=(IToken)Match(input,211,FOLLOW_211_in_constructor_initializer9298); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal883_tree = (object)adaptor.Create(char_literal883);
            		adaptor.AddChild(root_0, char_literal883_tree);
            	}
            	set884 = (IToken)input.LT(1);
            	if ( input.LA(1) == THIS || input.LA(1) == 207 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set884));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}

            	char_literal885=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_constructor_initializer9312); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal885_tree = (object)adaptor.Create(char_literal885);
            		adaptor.AddChild(root_0, char_literal885_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1055:34: ( argument_list )?
            	int alt245 = 2;
            	int LA245_0 = input.LA(1);

            	if ( ((LA245_0 >= MONONOT && LA245_0 <= MONOTWIDDLE) || (LA245_0 >= OBJECT && LA245_0 <= THIS) || LA245_0 == LPAREN || LA245_0 == BIT_AND || (LA245_0 >= PLUS && LA245_0 <= MINUS) || LA245_0 == STAR || (LA245_0 >= BOOL && LA245_0 <= NULL) || (LA245_0 >= ELIF && LA245_0 <= UNDEF) || LA245_0 == 195 || LA245_0 == 197 || LA245_0 == 207 || (LA245_0 >= 209 && LA245_0 <= 210) || (LA245_0 >= 212 && LA245_0 <= 219) || LA245_0 == 221 || (LA245_0 >= 224 && LA245_0 <= 239) || (LA245_0 >= 241 && LA245_0 <= 244) || (LA245_0 >= 247 && LA245_0 <= 254) || LA245_0 == 256 || (LA245_0 >= 263 && LA245_0 <= 264) || (LA245_0 >= 274 && LA245_0 <= 277)) )
            	{
            	    alt245 = 1;
            	}
            	switch (alt245) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1055:34: argument_list
            	        {
            	        	PushFollow(FOLLOW_argument_list_in_constructor_initializer9316);
            	        	argument_list886 = argument_list();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_list886.Tree);

            	        }
            	        break;

            	}

            	char_literal887=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_initializer9321); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal887_tree = (object)adaptor.Create(char_literal887);
            		adaptor.AddChild(root_0, char_literal887_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 243, constructor_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_initializer"

    public class constructor_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constructor_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1056:8: public constructor_body : block ;
    public csParser.constructor_body_return constructor_body() // throws RecognitionException [1]
    {   
        csParser.constructor_body_return retval = new csParser.constructor_body_return();
        retval.start = input.LT(1);
        int constructor_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block888 = default(csParser.block_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 244) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1056:24: ( block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1057:2: block
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_block_in_constructor_body9331);
            	block888 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block888.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 244, constructor_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_body"

    public class destructor_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "destructor_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1066:8: public destructor_declaration : '~' identifier '(' ')' destructor_body ;
    public csParser.destructor_declaration_return destructor_declaration() // throws RecognitionException [1]
    {   
        csParser.destructor_declaration_return retval = new csParser.destructor_declaration_return();
        retval.start = input.LT(1);
        int destructor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal889 = null;
        IToken char_literal891 = null;
        IToken char_literal892 = null;
        csParser.identifier_return identifier890 = default(csParser.identifier_return);

        csParser.destructor_body_return destructor_body893 = default(csParser.destructor_body_return);


        object char_literal889_tree=null;
        object char_literal891_tree=null;
        object char_literal892_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 245) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1066:30: ( '~' identifier '(' ')' destructor_body )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1067:2: '~' identifier '(' ')' destructor_body
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal889=(IToken)Match(input,MONOTWIDDLE,FOLLOW_MONOTWIDDLE_in_destructor_declaration9349); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal889_tree = (object)adaptor.Create(char_literal889);
            		adaptor.AddChild(root_0, char_literal889_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_destructor_declaration9352);
            	identifier890 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier890.Tree);
            	char_literal891=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_destructor_declaration9356); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal891_tree = (object)adaptor.Create(char_literal891);
            		adaptor.AddChild(root_0, char_literal891_tree);
            	}
            	char_literal892=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_destructor_declaration9360); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal892_tree = (object)adaptor.Create(char_literal892);
            		adaptor.AddChild(root_0, char_literal892_tree);
            	}
            	PushFollow(FOLLOW_destructor_body_in_destructor_declaration9365);
            	destructor_body893 = destructor_body();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, destructor_body893.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 245, destructor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "destructor_declaration"

    public class destructor_body_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "destructor_body"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1068:8: public destructor_body : block ;
    public csParser.destructor_body_return destructor_body() // throws RecognitionException [1]
    {   
        csParser.destructor_body_return retval = new csParser.destructor_body_return();
        retval.start = input.LT(1);
        int destructor_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block894 = default(csParser.block_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 246) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1068:23: ( block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1069:2: block
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_block_in_destructor_body9375);
            	block894 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block894.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 246, destructor_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "destructor_body"

    public class invocation_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "invocation_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1072:8: public invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
    public csParser.invocation_expression_return invocation_expression() // throws RecognitionException [1]
    {   
        csParser.invocation_expression_return retval = new csParser.invocation_expression_return();
        retval.start = input.LT(1);
        int invocation_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.invocation_start_return invocation_start895 = default(csParser.invocation_start_return);

        csParser.arguments_return arguments896 = default(csParser.arguments_return);

        csParser.invocation_part_return invocation_part897 = default(csParser.invocation_part_return);

        csParser.invocation_part_return invocation_part898 = default(csParser.invocation_part_return);

        csParser.arguments_return arguments899 = default(csParser.arguments_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 247) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1072:29: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1073:2: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_invocation_start_in_invocation_expression9387);
            	invocation_start895 = invocation_start();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_start895.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1073:21: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
            	do 
            	{
            	    int alt246 = 3;
            	    int LA246_0 = input.LA(1);

            	    if ( (LA246_0 == LPAREN) )
            	    {
            	        int LA246_1 = input.LA(2);

            	        if ( (synpred33_cs()) )
            	        {
            	            alt246 = 1;
            	        }


            	    }
            	    else if ( (LA246_0 == OPEN_BRACKET || (LA246_0 >= DOT && LA246_0 <= PTR)) )
            	    {
            	        alt246 = 2;
            	    }


            	    switch (alt246) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1073:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1073:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1073:23: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
            			    	{
            			    		PushFollow(FOLLOW_arguments_in_invocation_expression9409);
            			    		arguments896 = arguments();
            			    		state._fsp--;
            			    		if (state.failed) return retval;
            			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments896.Tree);
            			    		PushFollow(FOLLOW_invocation_part_in_invocation_expression9413);
            			    		invocation_part897 = invocation_part();
            			    		state._fsp--;
            			    		if (state.failed) return retval;
            			    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_part897.Tree);

            			    	}


            			    }
            			    break;
            			case 2 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1074:9: invocation_part
            			    {
            			    	PushFollow(FOLLOW_invocation_part_in_invocation_expression9424);
            			    	invocation_part898 = invocation_part();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_part898.Tree);

            			    }
            			    break;

            			default:
            			    goto loop246;
            	    }
            	} while (true);

            	loop246:
            		;	// Stops C# compiler whining that label 'loop246' has no statements

            	PushFollow(FOLLOW_arguments_in_invocation_expression9430);
            	arguments899 = arguments();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments899.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 247, invocation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "invocation_expression"

    public class invocation_start_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "invocation_start"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1075:8: public invocation_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
    public csParser.invocation_start_return invocation_start() // throws RecognitionException [1]
    {   
        csParser.invocation_start_return retval = new csParser.invocation_start_return();
        retval.start = input.LT(1);
        int invocation_start_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal903 = null;
        IToken string_literal904 = null;
        IToken string_literal906 = null;
        csParser.predefined_type_return predefined_type900 = default(csParser.predefined_type_return);

        csParser.identifier_return identifier901 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list902 = default(csParser.generic_argument_list_return);

        csParser.identifier_return identifier905 = default(csParser.identifier_return);

        csParser.identifier_return identifier907 = default(csParser.identifier_return);

        csParser.typeof_expression_return typeof_expression908 = default(csParser.typeof_expression_return);


        object string_literal903_tree=null;
        object string_literal904_tree=null;
        object string_literal906_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 248) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1075:24: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )
            int alt248 = 6;
            switch ( input.LA(1) ) 
            {
            case OBJECT:
            case BOOL:
            case BYTE:
            case CHAR:
            case SHORT:
            case INT:
            case LONG:
            case FLOAT:
            case DOUBLE:
            case 251:
            case 252:
            case 253:
            case 254:
            case 275:
            case 276:
            	{
                alt248 = 1;
                }
                break;
            case IDENTIFIER:
            	{
                int LA248_2 = input.LA(2);

                if ( (LA248_2 == OPEN_BRACKET || LA248_2 == LPAREN || (LA248_2 >= DOT && LA248_2 <= PTR) || LA248_2 == 208) )
                {
                    alt248 = 5;
                }
                else if ( (LA248_2 == LTHAN) && (synpred34_cs()) )
                {
                    alt248 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d248s2 =
                        new NoViableAltException("", 248, 2, input);

                    throw nvae_d248s2;
                }
                }
                break;
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 221:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 256:
            case 263:
            case 264:
            case 274:
            case 277:
            	{
                int LA248_3 = input.LA(2);

                if ( (LA248_3 == OPEN_BRACKET || LA248_3 == LPAREN || (LA248_3 >= DOT && LA248_3 <= PTR) || LA248_3 == 208) )
                {
                    alt248 = 5;
                }
                else if ( (LA248_3 == LTHAN) && (synpred34_cs()) )
                {
                    alt248 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d248s3 =
                        new NoViableAltException("", 248, 3, input);

                    throw nvae_d248s3;
                }
                }
                break;
            case THIS:
            	{
                alt248 = 3;
                }
                break;
            case 207:
            	{
                alt248 = 4;
                }
                break;
            case 219:
            	{
                alt248 = 6;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d248s0 =
            	        new NoViableAltException("", 248, 0, input);

            	    throw nvae_d248s0;
            }

            switch (alt248) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1076:2: predefined_type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_predefined_type_in_invocation_start9440);
                    	predefined_type900 = predefined_type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type900.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1077:4: ( identifier generic_argument_list )=> identifier generic_argument_list
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_invocation_start9457);
                    	identifier901 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier901.Tree);
                    	PushFollow(FOLLOW_generic_argument_list_in_invocation_start9461);
                    	generic_argument_list902 = generic_argument_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list902.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1078:4: 'this'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal903=(IToken)Match(input,THIS,FOLLOW_THIS_in_invocation_start9466); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal903_tree = (object)adaptor.Create(string_literal903);
                    		adaptor.AddChild(root_0, string_literal903_tree);
                    	}

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1079:4: 'base'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal904=(IToken)Match(input,207,FOLLOW_207_in_invocation_start9472); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal904_tree = (object)adaptor.Create(string_literal904);
                    		adaptor.AddChild(root_0, string_literal904_tree);
                    	}

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1080:4: identifier ( '::' identifier )?
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_identifier_in_invocation_start9477);
                    	identifier905 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier905.Tree);
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1080:17: ( '::' identifier )?
                    	int alt247 = 2;
                    	int LA247_0 = input.LA(1);

                    	if ( (LA247_0 == 208) )
                    	{
                    	    alt247 = 1;
                    	}
                    	switch (alt247) 
                    	{
                    	    case 1 :
                    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1080:18: '::' identifier
                    	        {
                    	        	string_literal906=(IToken)Match(input,208,FOLLOW_208_in_invocation_start9482); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal906_tree = (object)adaptor.Create(string_literal906);
                    	        		adaptor.AddChild(root_0, string_literal906_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_identifier_in_invocation_start9486);
                    	        	identifier907 = identifier();
                    	        	state._fsp--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier907.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1081:4: typeof_expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_typeof_expression_in_invocation_start9493);
                    	typeof_expression908 = typeof_expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, typeof_expression908.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 248, invocation_start_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "invocation_start"

    public class invocation_part_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "invocation_part"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1083:8: public invocation_part : ( access_identifier | brackets );
    public csParser.invocation_part_return invocation_part() // throws RecognitionException [1]
    {   
        csParser.invocation_part_return retval = new csParser.invocation_part_return();
        retval.start = input.LT(1);
        int invocation_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_identifier_return access_identifier909 = default(csParser.access_identifier_return);

        csParser.brackets_return brackets910 = default(csParser.brackets_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 249) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1083:23: ( access_identifier | brackets )
            int alt249 = 2;
            int LA249_0 = input.LA(1);

            if ( ((LA249_0 >= DOT && LA249_0 <= PTR)) )
            {
                alt249 = 1;
            }
            else if ( (LA249_0 == OPEN_BRACKET) )
            {
                alt249 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d249s0 =
                    new NoViableAltException("", 249, 0, input);

                throw nvae_d249s0;
            }
            switch (alt249) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1084:3: access_identifier
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_access_identifier_in_invocation_part9518);
                    	access_identifier909 = access_identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_identifier909.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1085:4: brackets
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_brackets_in_invocation_part9523);
                    	brackets910 = brackets();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets910.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 249, invocation_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "invocation_part"

    public class statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1089:8: public statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );
    public csParser.statement_return statement() // throws RecognitionException [1]
    {   
        csParser.statement_return retval = new csParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.declaration_statement_return declaration_statement911 = default(csParser.declaration_statement_return);

        csParser.labeled_statement_return labeled_statement912 = default(csParser.labeled_statement_return);

        csParser.embedded_statement_return embedded_statement913 = default(csParser.embedded_statement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 250) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1089:17: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement )
            int alt250 = 3;
            alt250 = dfa250.Predict(input);
            switch (alt250) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1090:2: ( declaration_statement )=> declaration_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_declaration_statement_in_statement9542);
                    	declaration_statement911 = declaration_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, declaration_statement911.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1091:4: ( identifier ':' )=> labeled_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_labeled_statement_in_statement9557);
                    	labeled_statement912 = labeled_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, labeled_statement912.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1092:4: embedded_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_embedded_statement_in_statement9562);
                    	embedded_statement913 = embedded_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement913.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 250, statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public class embedded_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "embedded_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1094:8: public embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );
    public csParser.embedded_statement_return embedded_statement() // throws RecognitionException [1]
    {   
        csParser.embedded_statement_return retval = new csParser.embedded_statement_return();
        retval.start = input.LT(1);
        int embedded_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block914 = default(csParser.block_return);

        csParser.selection_statement_return selection_statement915 = default(csParser.selection_statement_return);

        csParser.iteration_statement_return iteration_statement916 = default(csParser.iteration_statement_return);

        csParser.jump_statement_return jump_statement917 = default(csParser.jump_statement_return);

        csParser.try_statement_return try_statement918 = default(csParser.try_statement_return);

        csParser.checked_statement_return checked_statement919 = default(csParser.checked_statement_return);

        csParser.unchecked_statement_return unchecked_statement920 = default(csParser.unchecked_statement_return);

        csParser.lock_statement_return lock_statement921 = default(csParser.lock_statement_return);

        csParser.using_statement_return using_statement922 = default(csParser.using_statement_return);

        csParser.yield_statement_return yield_statement923 = default(csParser.yield_statement_return);

        csParser.unsafe_statement_return unsafe_statement924 = default(csParser.unsafe_statement_return);

        csParser.fixed_statement_return fixed_statement925 = default(csParser.fixed_statement_return);

        csParser.expression_statement_return expression_statement926 = default(csParser.expression_statement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 251) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1094:26: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement )
            int alt251 = 13;
            alt251 = dfa251.Predict(input);
            switch (alt251) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1095:2: block
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_block_in_embedded_statement9574);
                    	block914 = block();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block914.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1096:4: selection_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_selection_statement_in_embedded_statement9579);
                    	selection_statement915 = selection_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, selection_statement915.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1097:4: iteration_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_iteration_statement_in_embedded_statement9585);
                    	iteration_statement916 = iteration_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, iteration_statement916.Tree);

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1098:4: jump_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_jump_statement_in_embedded_statement9591);
                    	jump_statement917 = jump_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, jump_statement917.Tree);

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1099:4: try_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_try_statement_in_embedded_statement9598);
                    	try_statement918 = try_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, try_statement918.Tree);

                    }
                    break;
                case 6 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1100:4: checked_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_checked_statement_in_embedded_statement9603);
                    	checked_statement919 = checked_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, checked_statement919.Tree);

                    }
                    break;
                case 7 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1101:4: unchecked_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_unchecked_statement_in_embedded_statement9608);
                    	unchecked_statement920 = unchecked_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unchecked_statement920.Tree);

                    }
                    break;
                case 8 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1102:4: lock_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_lock_statement_in_embedded_statement9613);
                    	lock_statement921 = lock_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, lock_statement921.Tree);

                    }
                    break;
                case 9 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1103:4: using_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_using_statement_in_embedded_statement9618);
                    	using_statement922 = using_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_statement922.Tree);

                    }
                    break;
                case 10 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1104:4: yield_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_yield_statement_in_embedded_statement9624);
                    	yield_statement923 = yield_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, yield_statement923.Tree);

                    }
                    break;
                case 11 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1105:4: unsafe_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_unsafe_statement_in_embedded_statement9630);
                    	unsafe_statement924 = unsafe_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unsafe_statement924.Tree);

                    }
                    break;
                case 12 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1106:4: fixed_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_fixed_statement_in_embedded_statement9635);
                    	fixed_statement925 = fixed_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_statement925.Tree);

                    }
                    break;
                case 13 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1107:4: expression_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_expression_statement_in_embedded_statement9640);
                    	expression_statement926 = expression_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_statement926.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 251, embedded_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "embedded_statement"

    public class fixed_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "fixed_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1109:8: public fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
    public csParser.fixed_statement_return fixed_statement() // throws RecognitionException [1]
    {   
        csParser.fixed_statement_return retval = new csParser.fixed_statement_return();
        retval.start = input.LT(1);
        int fixed_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal927 = null;
        IToken char_literal928 = null;
        IToken char_literal931 = null;
        csParser.pointer_type_return pointer_type929 = default(csParser.pointer_type_return);

        csParser.fixed_pointer_declarators_return fixed_pointer_declarators930 = default(csParser.fixed_pointer_declarators_return);

        csParser.embedded_statement_return embedded_statement932 = default(csParser.embedded_statement_return);


        object string_literal927_tree=null;
        object char_literal928_tree=null;
        object char_literal931_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 252) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1109:23: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1110:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal927=(IToken)Match(input,262,FOLLOW_262_in_fixed_statement9652); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal927_tree = (object)adaptor.Create(string_literal927);
            		adaptor.AddChild(root_0, string_literal927_tree);
            	}
            	char_literal928=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_fixed_statement9656); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal928_tree = (object)adaptor.Create(char_literal928);
            		adaptor.AddChild(root_0, char_literal928_tree);
            	}
            	PushFollow(FOLLOW_pointer_type_in_fixed_statement9660);
            	pointer_type929 = pointer_type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pointer_type929.Tree);
            	PushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement9662);
            	fixed_pointer_declarators930 = fixed_pointer_declarators();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_declarators930.Tree);
            	char_literal931=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_fixed_statement9666); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal931_tree = (object)adaptor.Create(char_literal931);
            		adaptor.AddChild(root_0, char_literal931_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_fixed_statement9670);
            	embedded_statement932 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement932.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 252, fixed_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_statement"

    public class fixed_pointer_declarators_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "fixed_pointer_declarators"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1111:8: public fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
    public csParser.fixed_pointer_declarators_return fixed_pointer_declarators() // throws RecognitionException [1]
    {   
        csParser.fixed_pointer_declarators_return retval = new csParser.fixed_pointer_declarators_return();
        retval.start = input.LT(1);
        int fixed_pointer_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal934 = null;
        csParser.fixed_pointer_declarator_return fixed_pointer_declarator933 = default(csParser.fixed_pointer_declarator_return);

        csParser.fixed_pointer_declarator_return fixed_pointer_declarator935 = default(csParser.fixed_pointer_declarator_return);


        object char_literal934_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 253) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1111:33: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1112:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9680);
            	fixed_pointer_declarator933 = fixed_pointer_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_declarator933.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1112:29: ( ',' fixed_pointer_declarator )*
            	do 
            	{
            	    int alt252 = 2;
            	    int LA252_0 = input.LA(1);

            	    if ( (LA252_0 == COMMA) )
            	    {
            	        alt252 = 1;
            	    }


            	    switch (alt252) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1112:30: ',' fixed_pointer_declarator
            			    {
            			    	char_literal934=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_fixed_pointer_declarators9685); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal934_tree = (object)adaptor.Create(char_literal934);
            			    		adaptor.AddChild(root_0, char_literal934_tree);
            			    	}
            			    	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9689);
            			    	fixed_pointer_declarator935 = fixed_pointer_declarator();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_declarator935.Tree);

            			    }
            			    break;

            			default:
            			    goto loop252;
            	    }
            	} while (true);

            	loop252:
            		;	// Stops C# compiler whining that label 'loop252' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 253, fixed_pointer_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarators"

    public class fixed_pointer_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "fixed_pointer_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1113:8: public fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
    public csParser.fixed_pointer_declarator_return fixed_pointer_declarator() // throws RecognitionException [1]
    {   
        csParser.fixed_pointer_declarator_return retval = new csParser.fixed_pointer_declarator_return();
        retval.start = input.LT(1);
        int fixed_pointer_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal937 = null;
        csParser.identifier_return identifier936 = default(csParser.identifier_return);

        csParser.fixed_pointer_initializer_return fixed_pointer_initializer938 = default(csParser.fixed_pointer_initializer_return);


        object char_literal937_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 254) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1113:32: ( identifier '=' fixed_pointer_initializer )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1114:2: identifier '=' fixed_pointer_initializer
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_fixed_pointer_declarator9701);
            	identifier936 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier936.Tree);
            	char_literal937=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_fixed_pointer_declarator9705); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal937_tree = (object)adaptor.Create(char_literal937);
            		adaptor.AddChild(root_0, char_literal937_tree);
            	}
            	PushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator9709);
            	fixed_pointer_initializer938 = fixed_pointer_initializer();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_initializer938.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 254, fixed_pointer_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarator"

    public class fixed_pointer_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "fixed_pointer_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1115:8: public fixed_pointer_initializer : expression ;
    public csParser.fixed_pointer_initializer_return fixed_pointer_initializer() // throws RecognitionException [1]
    {   
        csParser.fixed_pointer_initializer_return retval = new csParser.fixed_pointer_initializer_return();
        retval.start = input.LT(1);
        int fixed_pointer_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression939 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 255) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1115:33: ( expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1117:2: expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_fixed_pointer_initializer9721);
            	expression939 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression939.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 255, fixed_pointer_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_initializer"

    public class unsafe_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unsafe_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1118:8: public unsafe_statement : 'unsafe' block ;
    public csParser.unsafe_statement_return unsafe_statement() // throws RecognitionException [1]
    {   
        csParser.unsafe_statement_return retval = new csParser.unsafe_statement_return();
        retval.start = input.LT(1);
        int unsafe_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal940 = null;
        csParser.block_return block941 = default(csParser.block_return);


        object string_literal940_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 256) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1118:24: ( 'unsafe' block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1119:2: 'unsafe' block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal940=(IToken)Match(input,198,FOLLOW_198_in_unsafe_statement9730); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal940_tree = (object)adaptor.Create(string_literal940);
            		adaptor.AddChild(root_0, string_literal940_tree);
            	}
            	PushFollow(FOLLOW_block_in_unsafe_statement9734);
            	block941 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block941.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 256, unsafe_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unsafe_statement"

    public class labeled_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "labeled_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1120:8: public labeled_statement : identifier ':' statement ;
    public csParser.labeled_statement_return labeled_statement() // throws RecognitionException [1]
    {   
        csParser.labeled_statement_return retval = new csParser.labeled_statement_return();
        retval.start = input.LT(1);
        int labeled_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal943 = null;
        csParser.identifier_return identifier942 = default(csParser.identifier_return);

        csParser.statement_return statement944 = default(csParser.statement_return);


        object char_literal943_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 257) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1120:25: ( identifier ':' statement )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1121:2: identifier ':' statement
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_labeled_statement9743);
            	identifier942 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier942.Tree);
            	char_literal943=(IToken)Match(input,211,FOLLOW_211_in_labeled_statement9747); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal943_tree = (object)adaptor.Create(char_literal943);
            		adaptor.AddChild(root_0, char_literal943_tree);
            	}
            	PushFollow(FOLLOW_statement_in_labeled_statement9751);
            	statement944 = statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement944.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 257, labeled_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "labeled_statement"

    public class declaration_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "declaration_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1122:8: public declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
    public csParser.declaration_statement_return declaration_statement() // throws RecognitionException [1]
    {   
        csParser.declaration_statement_return retval = new csParser.declaration_statement_return();
        retval.start = input.LT(1);
        int declaration_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal947 = null;
        csParser.local_variable_declaration_return local_variable_declaration945 = default(csParser.local_variable_declaration_return);

        csParser.local_constant_declaration_return local_constant_declaration946 = default(csParser.local_constant_declaration_return);


        object char_literal947_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 258) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1122:29: ( ( local_variable_declaration | local_constant_declaration ) ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1123:2: ( local_variable_declaration | local_constant_declaration ) ';'
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1123:2: ( local_variable_declaration | local_constant_declaration )
            	int alt253 = 2;
            	int LA253_0 = input.LA(1);

            	if ( (LA253_0 == OBJECT || (LA253_0 >= BOOL && LA253_0 <= IDENTIFIER) || (LA253_0 >= ELIF && LA253_0 <= UNDEF) || LA253_0 == 195 || LA253_0 == 206 || LA253_0 == 221 || (LA253_0 >= 224 && LA253_0 <= 239) || (LA253_0 >= 241 && LA253_0 <= 244) || (LA253_0 >= 247 && LA253_0 <= 254) || LA253_0 == 256 || (LA253_0 >= 263 && LA253_0 <= 264) || (LA253_0 >= 274 && LA253_0 <= 277)) )
            	{
            	    alt253 = 1;
            	}
            	else if ( (LA253_0 == 205) )
            	{
            	    alt253 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d253s0 =
            	        new NoViableAltException("", 253, 0, input);

            	    throw nvae_d253s0;
            	}
            	switch (alt253) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1123:3: local_variable_declaration
            	        {
            	        	PushFollow(FOLLOW_local_variable_declaration_in_declaration_statement9762);
            	        	local_variable_declaration945 = local_variable_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration945.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1124:4: local_constant_declaration
            	        {
            	        	PushFollow(FOLLOW_local_constant_declaration_in_declaration_statement9768);
            	        	local_constant_declaration946 = local_constant_declaration();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_constant_declaration946.Tree);

            	        }
            	        break;

            	}

            	char_literal947=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_declaration_statement9771); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal947_tree = (object)adaptor.Create(char_literal947);
            		adaptor.AddChild(root_0, char_literal947_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 258, declaration_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "declaration_statement"

    public class local_variable_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_variable_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1125:8: public local_variable_declaration : local_variable_type local_variable_declarators ;
    public csParser.local_variable_declaration_return local_variable_declaration() // throws RecognitionException [1]
    {   
        csParser.local_variable_declaration_return retval = new csParser.local_variable_declaration_return();
        retval.start = input.LT(1);
        int local_variable_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.local_variable_type_return local_variable_type948 = default(csParser.local_variable_type_return);

        csParser.local_variable_declarators_return local_variable_declarators949 = default(csParser.local_variable_declarators_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 259) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1125:34: ( local_variable_type local_variable_declarators )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1126:2: local_variable_type local_variable_declarators
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_local_variable_type_in_local_variable_declaration9781);
            	local_variable_type948 = local_variable_type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_type948.Tree);
            	PushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration9785);
            	local_variable_declarators949 = local_variable_declarators();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declarators949.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 259, local_variable_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration"

    public class local_variable_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_variable_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1127:8: public local_variable_type : ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type );
    public csParser.local_variable_type_return local_variable_type() // throws RecognitionException [1]
    {   
        csParser.local_variable_type_return retval = new csParser.local_variable_type_return();
        retval.start = input.LT(1);
        int local_variable_type_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal950 = null;
        IToken string_literal951 = null;
        csParser.type_return type952 = default(csParser.type_return);


        object string_literal950_tree=null;
        object string_literal951_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 260) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1127:27: ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type )
            int alt254 = 3;
            switch ( input.LA(1) ) 
            {
            case 263:
            	{
                int LA254_1 = input.LA(2);

                if ( (synpred37_cs()) )
                {
                    alt254 = 1;
                }
                else if ( (true) )
                {
                    alt254 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d254s1 =
                        new NoViableAltException("", 254, 1, input);

                    throw nvae_d254s1;
                }
                }
                break;
            case 264:
            	{
                int LA254_2 = input.LA(2);

                if ( (synpred38_cs()) )
                {
                    alt254 = 2;
                }
                else if ( (true) )
                {
                    alt254 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d254s2 =
                        new NoViableAltException("", 254, 2, input);

                    throw nvae_d254s2;
                }
                }
                break;
            case OBJECT:
            case BOOL:
            case BYTE:
            case CHAR:
            case SHORT:
            case INT:
            case LONG:
            case FLOAT:
            case DOUBLE:
            case IDENTIFIER:
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 206:
            case 221:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 256:
            case 274:
            case 275:
            case 276:
            case 277:
            	{
                alt254 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d254s0 =
            	        new NoViableAltException("", 254, 0, input);

            	    throw nvae_d254s0;
            }

            switch (alt254) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1128:2: ( 'var' )=> 'var'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal950=(IToken)Match(input,263,FOLLOW_263_in_local_variable_type9801); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal950_tree = (object)adaptor.Create(string_literal950);
                    		adaptor.AddChild(root_0, string_literal950_tree);
                    	}

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1129:4: ( 'dynamic' )=> 'dynamic'
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal951=(IToken)Match(input,264,FOLLOW_264_in_local_variable_type9812); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal951_tree = (object)adaptor.Create(string_literal951);
                    		adaptor.AddChild(root_0, string_literal951_tree);
                    	}

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1130:4: type
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_type_in_local_variable_type9817);
                    	type952 = type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type952.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 260, local_variable_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_type"

    public class local_variable_declarators_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_variable_declarators"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1131:8: public local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* ;
    public csParser.local_variable_declarators_return local_variable_declarators() // throws RecognitionException [1]
    {   
        csParser.local_variable_declarators_return retval = new csParser.local_variable_declarators_return();
        retval.start = input.LT(1);
        int local_variable_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal954 = null;
        csParser.local_variable_declarator_return local_variable_declarator953 = default(csParser.local_variable_declarator_return);

        csParser.local_variable_declarator_return local_variable_declarator955 = default(csParser.local_variable_declarator_return);


        object char_literal954_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 261) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1131:34: ( local_variable_declarator ( ',' local_variable_declarator )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1132:2: local_variable_declarator ( ',' local_variable_declarator )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators9827);
            	local_variable_declarator953 = local_variable_declarator();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declarator953.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1132:28: ( ',' local_variable_declarator )*
            	do 
            	{
            	    int alt255 = 2;
            	    int LA255_0 = input.LA(1);

            	    if ( (LA255_0 == COMMA) )
            	    {
            	        alt255 = 1;
            	    }


            	    switch (alt255) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1132:29: ',' local_variable_declarator
            			    {
            			    	char_literal954=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_local_variable_declarators9830); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal954_tree = (object)adaptor.Create(char_literal954);
            			    		adaptor.AddChild(root_0, char_literal954_tree);
            			    	}
            			    	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators9832);
            			    	local_variable_declarator955 = local_variable_declarator();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declarator955.Tree);

            			    }
            			    break;

            			default:
            			    goto loop255;
            	    }
            	} while (true);

            	loop255:
            		;	// Stops C# compiler whining that label 'loop255' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 261, local_variable_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators"

    public class local_variable_declarator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_variable_declarator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1133:8: public local_variable_declarator : identifier ( '=' local_variable_initializer )? ;
    public csParser.local_variable_declarator_return local_variable_declarator() // throws RecognitionException [1]
    {   
        csParser.local_variable_declarator_return retval = new csParser.local_variable_declarator_return();
        retval.start = input.LT(1);
        int local_variable_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal957 = null;
        csParser.identifier_return identifier956 = default(csParser.identifier_return);

        csParser.local_variable_initializer_return local_variable_initializer958 = default(csParser.local_variable_initializer_return);


        object char_literal957_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 262) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1133:33: ( identifier ( '=' local_variable_initializer )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1134:2: identifier ( '=' local_variable_initializer )?
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_identifier_in_local_variable_declarator9844);
            	identifier956 = identifier();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier956.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1134:13: ( '=' local_variable_initializer )?
            	int alt256 = 2;
            	int LA256_0 = input.LA(1);

            	if ( (LA256_0 == ASSIGN) )
            	{
            	    alt256 = 1;
            	}
            	switch (alt256) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1134:14: '=' local_variable_initializer
            	        {
            	        	char_literal957=(IToken)Match(input,ASSIGN,FOLLOW_ASSIGN_in_local_variable_declarator9847); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal957_tree = (object)adaptor.Create(char_literal957);
            	        		adaptor.AddChild(root_0, char_literal957_tree);
            	        	}
            	        	PushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator9851);
            	        	local_variable_initializer958 = local_variable_initializer();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_initializer958.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 262, local_variable_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarator"

    public class local_variable_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_variable_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1135:8: public local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
    public csParser.local_variable_initializer_return local_variable_initializer() // throws RecognitionException [1]
    {   
        csParser.local_variable_initializer_return retval = new csParser.local_variable_initializer_return();
        retval.start = input.LT(1);
        int local_variable_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression959 = default(csParser.expression_return);

        csParser.array_initializer_return array_initializer960 = default(csParser.array_initializer_return);

        csParser.stackalloc_initializer_return stackalloc_initializer961 = default(csParser.stackalloc_initializer_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 263) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1135:34: ( expression | array_initializer | stackalloc_initializer )
            int alt257 = 3;
            switch ( input.LA(1) ) 
            {
            case MONONOT:
            case MONOTWIDDLE:
            case OBJECT:
            case THIS:
            case LPAREN:
            case BIT_AND:
            case PLUS:
            case MINUS:
            case STAR:
            case BOOL:
            case BYTE:
            case CHAR:
            case SHORT:
            case INT:
            case LONG:
            case FLOAT:
            case DOUBLE:
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case ELIF:
            case ENDIF:
            case DEFINE:
            case UNDEF:
            case 195:
            case 197:
            case 207:
            case 209:
            case 210:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 221:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 256:
            case 263:
            case 264:
            case 274:
            case 275:
            case 276:
            case 277:
            	{
                alt257 = 1;
                }
                break;
            case OPEN_BRACE:
            	{
                alt257 = 2;
                }
                break;
            case 265:
            	{
                alt257 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d257s0 =
            	        new NoViableAltException("", 257, 0, input);

            	    throw nvae_d257s0;
            }

            switch (alt257) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1136:2: expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_expression_in_local_variable_initializer9864);
                    	expression959 = expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression959.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1137:4: array_initializer
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_array_initializer_in_local_variable_initializer9869);
                    	array_initializer960 = array_initializer();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer960.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1138:4: stackalloc_initializer
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer9875);
                    	stackalloc_initializer961 = stackalloc_initializer();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, stackalloc_initializer961.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 263, local_variable_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer"

    public class stackalloc_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "stackalloc_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1139:8: public stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
    public csParser.stackalloc_initializer_return stackalloc_initializer() // throws RecognitionException [1]
    {   
        csParser.stackalloc_initializer_return retval = new csParser.stackalloc_initializer_return();
        retval.start = input.LT(1);
        int stackalloc_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal962 = null;
        IToken char_literal964 = null;
        IToken char_literal966 = null;
        csParser.unmanaged_type_return unmanaged_type963 = default(csParser.unmanaged_type_return);

        csParser.expression_return expression965 = default(csParser.expression_return);


        object string_literal962_tree=null;
        object char_literal964_tree=null;
        object char_literal966_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 264) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1139:30: ( 'stackalloc' unmanaged_type '[' expression ']' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1140:2: 'stackalloc' unmanaged_type '[' expression ']'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal962=(IToken)Match(input,265,FOLLOW_265_in_stackalloc_initializer9884); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal962_tree = (object)adaptor.Create(string_literal962);
            		adaptor.AddChild(root_0, string_literal962_tree);
            	}
            	PushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer9888);
            	unmanaged_type963 = unmanaged_type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unmanaged_type963.Tree);
            	char_literal964=(IToken)Match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_stackalloc_initializer9892); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal964_tree = (object)adaptor.Create(char_literal964);
            		adaptor.AddChild(root_0, char_literal964_tree);
            	}
            	PushFollow(FOLLOW_expression_in_stackalloc_initializer9896);
            	expression965 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression965.Tree);
            	char_literal966=(IToken)Match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer9900); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal966_tree = (object)adaptor.Create(char_literal966);
            		adaptor.AddChild(root_0, char_literal966_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 264, stackalloc_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "stackalloc_initializer"

    public class local_constant_declaration_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_constant_declaration"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1141:8: public local_constant_declaration : 'const' type constant_declarators ;
    public csParser.local_constant_declaration_return local_constant_declaration() // throws RecognitionException [1]
    {   
        csParser.local_constant_declaration_return retval = new csParser.local_constant_declaration_return();
        retval.start = input.LT(1);
        int local_constant_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal967 = null;
        csParser.type_return type968 = default(csParser.type_return);

        csParser.constant_declarators_return constant_declarators969 = default(csParser.constant_declarators_return);


        object string_literal967_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 265) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1141:34: ( 'const' type constant_declarators )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1142:2: 'const' type constant_declarators
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal967=(IToken)Match(input,205,FOLLOW_205_in_local_constant_declaration9910); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal967_tree = (object)adaptor.Create(string_literal967);
            		adaptor.AddChild(root_0, string_literal967_tree);
            	}
            	PushFollow(FOLLOW_type_in_local_constant_declaration9914);
            	type968 = type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type968.Tree);
            	PushFollow(FOLLOW_constant_declarators_in_local_constant_declaration9918);
            	constant_declarators969 = constant_declarators();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarators969.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 265, local_constant_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_constant_declaration"

    public class expression_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "expression_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1143:8: public expression_statement : expression ';' ;
    public csParser.expression_statement_return expression_statement() // throws RecognitionException [1]
    {   
        csParser.expression_statement_return retval = new csParser.expression_statement_return();
        retval.start = input.LT(1);
        int expression_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal971 = null;
        csParser.expression_return expression970 = default(csParser.expression_return);


        object char_literal971_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 266) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1143:28: ( expression ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1144:2: expression ';'
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_expression_statement9928);
            	expression970 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression970.Tree);
            	char_literal971=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_expression_statement9932); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal971_tree = (object)adaptor.Create(char_literal971);
            		adaptor.AddChild(root_0, char_literal971_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 266, expression_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression_statement"

    public class statement_expression_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "statement_expression"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1147:8: public statement_expression : expression ;
    public csParser.statement_expression_return statement_expression() // throws RecognitionException [1]
    {   
        csParser.statement_expression_return retval = new csParser.statement_expression_return();
        retval.start = input.LT(1);
        int statement_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression972 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 267) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1147:28: ( expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1148:2: expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_expression_in_statement_expression9944);
            	expression972 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression972.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 267, statement_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement_expression"

    public class selection_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "selection_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1150:8: public selection_statement : ( if_statement | switch_statement );
    public csParser.selection_statement_return selection_statement() // throws RecognitionException [1]
    {   
        csParser.selection_statement_return retval = new csParser.selection_statement_return();
        retval.start = input.LT(1);
        int selection_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.if_statement_return if_statement973 = default(csParser.if_statement_return);

        csParser.switch_statement_return switch_statement974 = default(csParser.switch_statement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 268) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1150:27: ( if_statement | switch_statement )
            int alt258 = 2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0 == IF) )
            {
                alt258 = 1;
            }
            else if ( (LA258_0 == 266) )
            {
                alt258 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d258s0 =
                    new NoViableAltException("", 258, 0, input);

                throw nvae_d258s0;
            }
            switch (alt258) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1151:2: if_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_if_statement_in_selection_statement9955);
                    	if_statement973 = if_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, if_statement973.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1152:4: switch_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_switch_statement_in_selection_statement9960);
                    	switch_statement974 = switch_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_statement974.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 268, selection_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public class if_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "if_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1153:8: public if_statement : 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? ;
    public csParser.if_statement_return if_statement() // throws RecognitionException [1]
    {   
        csParser.if_statement_return retval = new csParser.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal975 = null;
        IToken char_literal976 = null;
        IToken char_literal978 = null;
        csParser.boolean_expression_return boolean_expression977 = default(csParser.boolean_expression_return);

        csParser.embedded_statement_return embedded_statement979 = default(csParser.embedded_statement_return);

        csParser.else_statement_return else_statement980 = default(csParser.else_statement_return);


        object string_literal975_tree=null;
        object char_literal976_tree=null;
        object char_literal978_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 269) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1153:20: ( 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1155:2: 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )?
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal975=(IToken)Match(input,IF,FOLLOW_IF_in_if_statement9972); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal975_tree = (object)adaptor.Create(string_literal975);
            		adaptor.AddChild(root_0, string_literal975_tree);
            	}
            	char_literal976=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_if_statement9976); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal976_tree = (object)adaptor.Create(char_literal976);
            		adaptor.AddChild(root_0, char_literal976_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_if_statement9980);
            	boolean_expression977 = boolean_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression977.Tree);
            	char_literal978=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_if_statement9984); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal978_tree = (object)adaptor.Create(char_literal978);
            		adaptor.AddChild(root_0, char_literal978_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_if_statement9988);
            	embedded_statement979 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement979.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1155:61: ( ( 'else' )=> else_statement )?
            	int alt259 = 2;
            	int LA259_0 = input.LA(1);

            	if ( (LA259_0 == ELSE) )
            	{
            	    int LA259_1 = input.LA(2);

            	    if ( (synpred39_cs()) )
            	    {
            	        alt259 = 1;
            	    }
            	}
            	switch (alt259) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1155:62: ( 'else' )=> else_statement
            	        {
            	        	PushFollow(FOLLOW_else_statement_in_if_statement9997);
            	        	else_statement980 = else_statement();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, else_statement980.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 269, if_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public class else_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "else_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1157:8: public else_statement : 'else' embedded_statement ;
    public csParser.else_statement_return else_statement() // throws RecognitionException [1]
    {   
        csParser.else_statement_return retval = new csParser.else_statement_return();
        retval.start = input.LT(1);
        int else_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal981 = null;
        csParser.embedded_statement_return embedded_statement982 = default(csParser.embedded_statement_return);


        object string_literal981_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 270) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1157:22: ( 'else' embedded_statement )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1158:2: 'else' embedded_statement
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal981=(IToken)Match(input,ELSE,FOLLOW_ELSE_in_else_statement10010); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal981_tree = (object)adaptor.Create(string_literal981);
            		adaptor.AddChild(root_0, string_literal981_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_else_statement10014);
            	embedded_statement982 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement982.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 270, else_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "else_statement"

    public class switch_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "switch_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1159:8: public switch_statement : 'switch' '(' expression ')' switch_block ;
    public csParser.switch_statement_return switch_statement() // throws RecognitionException [1]
    {   
        csParser.switch_statement_return retval = new csParser.switch_statement_return();
        retval.start = input.LT(1);
        int switch_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal983 = null;
        IToken char_literal984 = null;
        IToken char_literal986 = null;
        csParser.expression_return expression985 = default(csParser.expression_return);

        csParser.switch_block_return switch_block987 = default(csParser.switch_block_return);


        object string_literal983_tree=null;
        object char_literal984_tree=null;
        object char_literal986_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 271) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1159:24: ( 'switch' '(' expression ')' switch_block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1160:2: 'switch' '(' expression ')' switch_block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal983=(IToken)Match(input,266,FOLLOW_266_in_switch_statement10024); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal983_tree = (object)adaptor.Create(string_literal983);
            		adaptor.AddChild(root_0, string_literal983_tree);
            	}
            	char_literal984=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_switch_statement10028); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal984_tree = (object)adaptor.Create(char_literal984);
            		adaptor.AddChild(root_0, char_literal984_tree);
            	}
            	PushFollow(FOLLOW_expression_in_switch_statement10032);
            	expression985 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression985.Tree);
            	char_literal986=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_switch_statement10036); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal986_tree = (object)adaptor.Create(char_literal986);
            		adaptor.AddChild(root_0, char_literal986_tree);
            	}
            	PushFollow(FOLLOW_switch_block_in_switch_statement10040);
            	switch_block987 = switch_block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_block987.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 271, switch_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_statement"

    public class switch_block_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "switch_block"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1161:8: public switch_block : '{' ( switch_sections )? '}' ;
    public csParser.switch_block_return switch_block() // throws RecognitionException [1]
    {   
        csParser.switch_block_return retval = new csParser.switch_block_return();
        retval.start = input.LT(1);
        int switch_block_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal988 = null;
        IToken char_literal990 = null;
        csParser.switch_sections_return switch_sections989 = default(csParser.switch_sections_return);


        object char_literal988_tree=null;
        object char_literal990_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 272) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1161:20: ( '{' ( switch_sections )? '}' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1162:2: '{' ( switch_sections )? '}'
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal988=(IToken)Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_switch_block10050); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal988_tree = (object)adaptor.Create(char_literal988);
            		adaptor.AddChild(root_0, char_literal988_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1162:8: ( switch_sections )?
            	int alt260 = 2;
            	int LA260_0 = input.LA(1);

            	if ( (LA260_0 == 217 || LA260_0 == 267) )
            	{
            	    alt260 = 1;
            	}
            	switch (alt260) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1162:8: switch_sections
            	        {
            	        	PushFollow(FOLLOW_switch_sections_in_switch_block10054);
            	        	switch_sections989 = switch_sections();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_sections989.Tree);

            	        }
            	        break;

            	}

            	char_literal990=(IToken)Match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_switch_block10059); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal990_tree = (object)adaptor.Create(char_literal990);
            		adaptor.AddChild(root_0, char_literal990_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 272, switch_block_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_block"

    public class switch_sections_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "switch_sections"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1163:8: public switch_sections : ( switch_section )+ ;
    public csParser.switch_sections_return switch_sections() // throws RecognitionException [1]
    {   
        csParser.switch_sections_return retval = new csParser.switch_sections_return();
        retval.start = input.LT(1);
        int switch_sections_StartIndex = input.Index;
        object root_0 = null;

        csParser.switch_section_return switch_section991 = default(csParser.switch_section_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 273) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1163:23: ( ( switch_section )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1164:2: ( switch_section )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1164:2: ( switch_section )+
            	int cnt261 = 0;
            	do 
            	{
            	    int alt261 = 2;
            	    int LA261_0 = input.LA(1);

            	    if ( (LA261_0 == 217 || LA261_0 == 267) )
            	    {
            	        alt261 = 1;
            	    }


            	    switch (alt261) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1164:2: switch_section
            			    {
            			    	PushFollow(FOLLOW_switch_section_in_switch_sections10069);
            			    	switch_section991 = switch_section();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_section991.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt261 >= 1 ) goto loop261;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee261 =
            		                new EarlyExitException(261, input);
            		            throw eee261;
            	    }
            	    cnt261++;
            	} while (true);

            	loop261:
            		;	// Stops C# compiler whining that label 'loop261' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 273, switch_sections_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_sections"

    public class switch_section_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "switch_section"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1165:8: public switch_section : switch_labels statement_list ;
    public csParser.switch_section_return switch_section() // throws RecognitionException [1]
    {   
        csParser.switch_section_return retval = new csParser.switch_section_return();
        retval.start = input.LT(1);
        int switch_section_StartIndex = input.Index;
        object root_0 = null;

        csParser.switch_labels_return switch_labels992 = default(csParser.switch_labels_return);

        csParser.statement_list_return statement_list993 = default(csParser.statement_list_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 274) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1165:22: ( switch_labels statement_list )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1166:2: switch_labels statement_list
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_switch_labels_in_switch_section10080);
            	switch_labels992 = switch_labels();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_labels992.Tree);
            	PushFollow(FOLLOW_statement_list_in_switch_section10084);
            	statement_list993 = statement_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_list993.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 274, switch_section_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_section"

    public class switch_labels_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "switch_labels"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1167:8: public switch_labels : ( switch_label )+ ;
    public csParser.switch_labels_return switch_labels() // throws RecognitionException [1]
    {   
        csParser.switch_labels_return retval = new csParser.switch_labels_return();
        retval.start = input.LT(1);
        int switch_labels_StartIndex = input.Index;
        object root_0 = null;

        csParser.switch_label_return switch_label994 = default(csParser.switch_label_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 275) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1167:21: ( ( switch_label )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1168:2: ( switch_label )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1168:2: ( switch_label )+
            	int cnt262 = 0;
            	do 
            	{
            	    int alt262 = 2;
            	    int LA262_0 = input.LA(1);

            	    if ( (LA262_0 == 217) )
            	    {
            	        int LA262_2 = input.LA(2);

            	        if ( (LA262_2 == 211) )
            	        {
            	            alt262 = 1;
            	        }


            	    }
            	    else if ( (LA262_0 == 267) )
            	    {
            	        alt262 = 1;
            	    }


            	    switch (alt262) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1168:2: switch_label
            			    {
            			    	PushFollow(FOLLOW_switch_label_in_switch_labels10094);
            			    	switch_label994 = switch_label();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_label994.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt262 >= 1 ) goto loop262;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee262 =
            		                new EarlyExitException(262, input);
            		            throw eee262;
            	    }
            	    cnt262++;
            	} while (true);

            	loop262:
            		;	// Stops C# compiler whining that label 'loop262' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 275, switch_labels_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_labels"

    public class switch_label_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "switch_label"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1169:8: public switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
    public csParser.switch_label_return switch_label() // throws RecognitionException [1]
    {   
        csParser.switch_label_return retval = new csParser.switch_label_return();
        retval.start = input.LT(1);
        int switch_label_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal995 = null;
        IToken char_literal997 = null;
        IToken string_literal998 = null;
        IToken char_literal999 = null;
        csParser.constant_expression_return constant_expression996 = default(csParser.constant_expression_return);


        object string_literal995_tree=null;
        object char_literal997_tree=null;
        object string_literal998_tree=null;
        object char_literal999_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 276) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1169:20: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
            int alt263 = 2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0 == 267) )
            {
                alt263 = 1;
            }
            else if ( (LA263_0 == 217) )
            {
                alt263 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d263s0 =
                    new NoViableAltException("", 263, 0, input);

                throw nvae_d263s0;
            }
            switch (alt263) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1170:2: ( 'case' constant_expression ':' )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1170:2: ( 'case' constant_expression ':' )
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1170:3: 'case' constant_expression ':'
                    	{
                    		string_literal995=(IToken)Match(input,267,FOLLOW_267_in_switch_label10106); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal995_tree = (object)adaptor.Create(string_literal995);
                    			adaptor.AddChild(root_0, string_literal995_tree);
                    		}
                    		PushFollow(FOLLOW_constant_expression_in_switch_label10110);
                    		constant_expression996 = constant_expression();
                    		state._fsp--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_expression996.Tree);
                    		char_literal997=(IToken)Match(input,211,FOLLOW_211_in_switch_label10114); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal997_tree = (object)adaptor.Create(char_literal997);
                    			adaptor.AddChild(root_0, char_literal997_tree);
                    		}

                    	}


                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1171:4: ( 'default' ':' )
                    {
                    	root_0 = (object)adaptor.Nil;

                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1171:4: ( 'default' ':' )
                    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1171:5: 'default' ':'
                    	{
                    		string_literal998=(IToken)Match(input,217,FOLLOW_217_in_switch_label10121); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal998_tree = (object)adaptor.Create(string_literal998);
                    			adaptor.AddChild(root_0, string_literal998_tree);
                    		}
                    		char_literal999=(IToken)Match(input,211,FOLLOW_211_in_switch_label10125); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal999_tree = (object)adaptor.Create(char_literal999);
                    			adaptor.AddChild(root_0, char_literal999_tree);
                    		}

                    	}


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 276, switch_label_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_label"

    public class iteration_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "iteration_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1172:8: public iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
    public csParser.iteration_statement_return iteration_statement() // throws RecognitionException [1]
    {   
        csParser.iteration_statement_return retval = new csParser.iteration_statement_return();
        retval.start = input.LT(1);
        int iteration_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.while_statement_return while_statement1000 = default(csParser.while_statement_return);

        csParser.do_statement_return do_statement1001 = default(csParser.do_statement_return);

        csParser.for_statement_return for_statement1002 = default(csParser.for_statement_return);

        csParser.foreach_statement_return foreach_statement1003 = default(csParser.foreach_statement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 277) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1172:27: ( while_statement | do_statement | for_statement | foreach_statement )
            int alt264 = 4;
            switch ( input.LA(1) ) 
            {
            case 268:
            	{
                alt264 = 1;
                }
                break;
            case 269:
            	{
                alt264 = 2;
                }
                break;
            case 270:
            	{
                int LA264_3 = input.LA(2);

                if ( (!(((this.IsJavaish)))) )
                {
                    alt264 = 3;
                }
                else if ( ((this.IsJavaish)) )
                {
                    alt264 = 4;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d264s3 =
                        new NoViableAltException("", 264, 3, input);

                    throw nvae_d264s3;
                }
                }
                break;
            case FOREACH:
            	{
                alt264 = 4;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d264s0 =
            	        new NoViableAltException("", 264, 0, input);

            	    throw nvae_d264s0;
            }

            switch (alt264) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1173:2: while_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_while_statement_in_iteration_statement10136);
                    	while_statement1000 = while_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, while_statement1000.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1174:4: do_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_do_statement_in_iteration_statement10141);
                    	do_statement1001 = do_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, do_statement1001.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1175:4: for_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_for_statement_in_iteration_statement10146);
                    	for_statement1002 = for_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_statement1002.Tree);

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1176:4: foreach_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_foreach_statement_in_iteration_statement10151);
                    	foreach_statement1003 = foreach_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, foreach_statement1003.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 277, iteration_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "iteration_statement"

    public class while_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "while_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1177:8: public while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
    public csParser.while_statement_return while_statement() // throws RecognitionException [1]
    {   
        csParser.while_statement_return retval = new csParser.while_statement_return();
        retval.start = input.LT(1);
        int while_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1004 = null;
        IToken char_literal1005 = null;
        IToken char_literal1007 = null;
        csParser.boolean_expression_return boolean_expression1006 = default(csParser.boolean_expression_return);

        csParser.embedded_statement_return embedded_statement1008 = default(csParser.embedded_statement_return);


        object string_literal1004_tree=null;
        object char_literal1005_tree=null;
        object char_literal1007_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 278) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1177:23: ( 'while' '(' boolean_expression ')' embedded_statement )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1178:2: 'while' '(' boolean_expression ')' embedded_statement
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1004=(IToken)Match(input,268,FOLLOW_268_in_while_statement10161); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1004_tree = (object)adaptor.Create(string_literal1004);
            		adaptor.AddChild(root_0, string_literal1004_tree);
            	}
            	char_literal1005=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_while_statement10165); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1005_tree = (object)adaptor.Create(char_literal1005);
            		adaptor.AddChild(root_0, char_literal1005_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_while_statement10169);
            	boolean_expression1006 = boolean_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression1006.Tree);
            	char_literal1007=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_while_statement10173); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1007_tree = (object)adaptor.Create(char_literal1007);
            		adaptor.AddChild(root_0, char_literal1007_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_while_statement10177);
            	embedded_statement1008 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1008.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 278, while_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "while_statement"

    public class do_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "do_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1179:8: public do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
    public csParser.do_statement_return do_statement() // throws RecognitionException [1]
    {   
        csParser.do_statement_return retval = new csParser.do_statement_return();
        retval.start = input.LT(1);
        int do_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1009 = null;
        IToken string_literal1011 = null;
        IToken char_literal1012 = null;
        IToken char_literal1014 = null;
        IToken char_literal1015 = null;
        csParser.embedded_statement_return embedded_statement1010 = default(csParser.embedded_statement_return);

        csParser.boolean_expression_return boolean_expression1013 = default(csParser.boolean_expression_return);


        object string_literal1009_tree=null;
        object string_literal1011_tree=null;
        object char_literal1012_tree=null;
        object char_literal1014_tree=null;
        object char_literal1015_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 279) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1179:20: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1180:2: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1009=(IToken)Match(input,269,FOLLOW_269_in_do_statement10187); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1009_tree = (object)adaptor.Create(string_literal1009);
            		adaptor.AddChild(root_0, string_literal1009_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_do_statement10191);
            	embedded_statement1010 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1010.Tree);
            	string_literal1011=(IToken)Match(input,268,FOLLOW_268_in_do_statement10195); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1011_tree = (object)adaptor.Create(string_literal1011);
            		adaptor.AddChild(root_0, string_literal1011_tree);
            	}
            	char_literal1012=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_do_statement10199); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1012_tree = (object)adaptor.Create(char_literal1012);
            		adaptor.AddChild(root_0, char_literal1012_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_do_statement10203);
            	boolean_expression1013 = boolean_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression1013.Tree);
            	char_literal1014=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_do_statement10207); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1014_tree = (object)adaptor.Create(char_literal1014);
            		adaptor.AddChild(root_0, char_literal1014_tree);
            	}
            	char_literal1015=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_do_statement10211); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1015_tree = (object)adaptor.Create(char_literal1015);
            		adaptor.AddChild(root_0, char_literal1015_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 279, do_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "do_statement"

    public class for_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "for_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1181:8: public for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
    public csParser.for_statement_return for_statement() // throws RecognitionException [1]
    {   
        csParser.for_statement_return retval = new csParser.for_statement_return();
        retval.start = input.LT(1);
        int for_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1016 = null;
        IToken char_literal1017 = null;
        IToken char_literal1019 = null;
        IToken char_literal1021 = null;
        IToken char_literal1023 = null;
        csParser.for_initializer_return for_initializer1018 = default(csParser.for_initializer_return);

        csParser.for_condition_return for_condition1020 = default(csParser.for_condition_return);

        csParser.for_iterator_return for_iterator1022 = default(csParser.for_iterator_return);

        csParser.embedded_statement_return embedded_statement1024 = default(csParser.embedded_statement_return);


        object string_literal1016_tree=null;
        object char_literal1017_tree=null;
        object char_literal1019_tree=null;
        object char_literal1021_tree=null;
        object char_literal1023_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 280) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1181:21: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1182:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1016=(IToken)Match(input,270,FOLLOW_270_in_for_statement10221); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1016_tree = (object)adaptor.Create(string_literal1016);
            		adaptor.AddChild(root_0, string_literal1016_tree);
            	}
            	char_literal1017=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_for_statement10225); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1017_tree = (object)adaptor.Create(char_literal1017);
            		adaptor.AddChild(root_0, char_literal1017_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1182:16: ( for_initializer )?
            	int alt265 = 2;
            	int LA265_0 = input.LA(1);

            	if ( ((LA265_0 >= MONONOT && LA265_0 <= MONOTWIDDLE) || (LA265_0 >= OBJECT && LA265_0 <= THIS) || LA265_0 == LPAREN || LA265_0 == BIT_AND || (LA265_0 >= PLUS && LA265_0 <= MINUS) || LA265_0 == STAR || (LA265_0 >= BOOL && LA265_0 <= NULL) || (LA265_0 >= ELIF && LA265_0 <= UNDEF) || LA265_0 == 195 || LA265_0 == 197 || (LA265_0 >= 206 && LA265_0 <= 207) || (LA265_0 >= 209 && LA265_0 <= 210) || (LA265_0 >= 214 && LA265_0 <= 219) || LA265_0 == 221 || (LA265_0 >= 224 && LA265_0 <= 239) || (LA265_0 >= 241 && LA265_0 <= 244) || (LA265_0 >= 247 && LA265_0 <= 254) || LA265_0 == 256 || (LA265_0 >= 263 && LA265_0 <= 264) || (LA265_0 >= 274 && LA265_0 <= 277)) )
            	{
            	    alt265 = 1;
            	}
            	switch (alt265) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1182:16: for_initializer
            	        {
            	        	PushFollow(FOLLOW_for_initializer_in_for_statement10229);
            	        	for_initializer1018 = for_initializer();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_initializer1018.Tree);

            	        }
            	        break;

            	}

            	char_literal1019=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_for_statement10234); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1019_tree = (object)adaptor.Create(char_literal1019);
            		adaptor.AddChild(root_0, char_literal1019_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1182:41: ( for_condition )?
            	int alt266 = 2;
            	int LA266_0 = input.LA(1);

            	if ( ((LA266_0 >= MONONOT && LA266_0 <= MONOTWIDDLE) || (LA266_0 >= OBJECT && LA266_0 <= THIS) || LA266_0 == LPAREN || LA266_0 == BIT_AND || (LA266_0 >= PLUS && LA266_0 <= MINUS) || LA266_0 == STAR || (LA266_0 >= BOOL && LA266_0 <= NULL) || (LA266_0 >= ELIF && LA266_0 <= UNDEF) || LA266_0 == 195 || LA266_0 == 197 || LA266_0 == 207 || (LA266_0 >= 209 && LA266_0 <= 210) || (LA266_0 >= 214 && LA266_0 <= 219) || LA266_0 == 221 || (LA266_0 >= 224 && LA266_0 <= 239) || (LA266_0 >= 241 && LA266_0 <= 244) || (LA266_0 >= 247 && LA266_0 <= 254) || LA266_0 == 256 || (LA266_0 >= 263 && LA266_0 <= 264) || (LA266_0 >= 274 && LA266_0 <= 277)) )
            	{
            	    alt266 = 1;
            	}
            	switch (alt266) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1182:41: for_condition
            	        {
            	        	PushFollow(FOLLOW_for_condition_in_for_statement10238);
            	        	for_condition1020 = for_condition();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_condition1020.Tree);

            	        }
            	        break;

            	}

            	char_literal1021=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_for_statement10243); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1021_tree = (object)adaptor.Create(char_literal1021);
            		adaptor.AddChild(root_0, char_literal1021_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1182:64: ( for_iterator )?
            	int alt267 = 2;
            	int LA267_0 = input.LA(1);

            	if ( ((LA267_0 >= MONONOT && LA267_0 <= MONOTWIDDLE) || (LA267_0 >= OBJECT && LA267_0 <= THIS) || LA267_0 == LPAREN || LA267_0 == BIT_AND || (LA267_0 >= PLUS && LA267_0 <= MINUS) || LA267_0 == STAR || (LA267_0 >= BOOL && LA267_0 <= NULL) || (LA267_0 >= ELIF && LA267_0 <= UNDEF) || LA267_0 == 195 || LA267_0 == 197 || LA267_0 == 207 || (LA267_0 >= 209 && LA267_0 <= 210) || (LA267_0 >= 214 && LA267_0 <= 219) || LA267_0 == 221 || (LA267_0 >= 224 && LA267_0 <= 239) || (LA267_0 >= 241 && LA267_0 <= 244) || (LA267_0 >= 247 && LA267_0 <= 254) || LA267_0 == 256 || (LA267_0 >= 263 && LA267_0 <= 264) || (LA267_0 >= 274 && LA267_0 <= 277)) )
            	{
            	    alt267 = 1;
            	}
            	switch (alt267) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1182:64: for_iterator
            	        {
            	        	PushFollow(FOLLOW_for_iterator_in_for_statement10247);
            	        	for_iterator1022 = for_iterator();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_iterator1022.Tree);

            	        }
            	        break;

            	}

            	char_literal1023=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_for_statement10252); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1023_tree = (object)adaptor.Create(char_literal1023);
            		adaptor.AddChild(root_0, char_literal1023_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_for_statement10256);
            	embedded_statement1024 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1024.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 280, for_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_statement"

    public class for_initializer_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "for_initializer"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1183:8: public for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
    public csParser.for_initializer_return for_initializer() // throws RecognitionException [1]
    {   
        csParser.for_initializer_return retval = new csParser.for_initializer_return();
        retval.start = input.LT(1);
        int for_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1025 = default(csParser.local_variable_declaration_return);

        csParser.statement_expression_list_return statement_expression_list1026 = default(csParser.statement_expression_list_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 281) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1183:23: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
            int alt268 = 2;
            alt268 = dfa268.Predict(input);
            switch (alt268) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1184:2: ( local_variable_declaration )=> local_variable_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_local_variable_declaration_in_for_initializer10272);
                    	local_variable_declaration1025 = local_variable_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration1025.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1185:4: statement_expression_list
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_statement_expression_list_in_for_initializer10277);
                    	statement_expression_list1026 = statement_expression_list();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression_list1026.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 281, for_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_initializer"

    public class for_condition_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "for_condition"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1187:8: public for_condition : boolean_expression ;
    public csParser.for_condition_return for_condition() // throws RecognitionException [1]
    {   
        csParser.for_condition_return retval = new csParser.for_condition_return();
        retval.start = input.LT(1);
        int for_condition_StartIndex = input.Index;
        object root_0 = null;

        csParser.boolean_expression_return boolean_expression1027 = default(csParser.boolean_expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 282) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1187:21: ( boolean_expression )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1188:2: boolean_expression
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_boolean_expression_in_for_condition10289);
            	boolean_expression1027 = boolean_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression1027.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 282, for_condition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_condition"

    public class for_iterator_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "for_iterator"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1189:8: public for_iterator : statement_expression_list ;
    public csParser.for_iterator_return for_iterator() // throws RecognitionException [1]
    {   
        csParser.for_iterator_return retval = new csParser.for_iterator_return();
        retval.start = input.LT(1);
        int for_iterator_StartIndex = input.Index;
        object root_0 = null;

        csParser.statement_expression_list_return statement_expression_list1028 = default(csParser.statement_expression_list_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 283) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1189:20: ( statement_expression_list )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1190:2: statement_expression_list
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_statement_expression_list_in_for_iterator10299);
            	statement_expression_list1028 = statement_expression_list();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression_list1028.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 283, for_iterator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_iterator"

    public class statement_expression_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "statement_expression_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1191:8: public statement_expression_list : statement_expression ( ',' statement_expression )* ;
    public csParser.statement_expression_list_return statement_expression_list() // throws RecognitionException [1]
    {   
        csParser.statement_expression_list_return retval = new csParser.statement_expression_list_return();
        retval.start = input.LT(1);
        int statement_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1030 = null;
        csParser.statement_expression_return statement_expression1029 = default(csParser.statement_expression_return);

        csParser.statement_expression_return statement_expression1031 = default(csParser.statement_expression_return);


        object char_literal1030_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 284) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1191:33: ( statement_expression ( ',' statement_expression )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1192:2: statement_expression ( ',' statement_expression )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_statement_expression_in_statement_expression_list10309);
            	statement_expression1029 = statement_expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression1029.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1192:23: ( ',' statement_expression )*
            	do 
            	{
            	    int alt269 = 2;
            	    int LA269_0 = input.LA(1);

            	    if ( (LA269_0 == COMMA) )
            	    {
            	        alt269 = 1;
            	    }


            	    switch (alt269) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1192:24: ',' statement_expression
            			    {
            			    	char_literal1030=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_statement_expression_list10312); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1030_tree = (object)adaptor.Create(char_literal1030);
            			    		adaptor.AddChild(root_0, char_literal1030_tree);
            			    	}
            			    	PushFollow(FOLLOW_statement_expression_in_statement_expression_list10314);
            			    	statement_expression1031 = statement_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression1031.Tree);

            			    }
            			    break;

            			default:
            			    goto loop269;
            	    }
            	} while (true);

            	loop269:
            		;	// Stops C# compiler whining that label 'loop269' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 284, statement_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement_expression_list"

    public class foreach_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "foreach_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1193:8: public foreach_statement : ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement | {...}?f= 'for' '(' local_variable_type identifier i= ':' expression ')' embedded_statement -> FOREACH[$f,\"foreach\"] '(' local_variable_type identifier IN[$i,\"in\"] expression ')' embedded_statement );
    public csParser.foreach_statement_return foreach_statement() // throws RecognitionException [1]
    {   
        csParser.foreach_statement_return retval = new csParser.foreach_statement_return();
        retval.start = input.LT(1);
        int foreach_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken f = null;
        IToken i = null;
        IToken string_literal1032 = null;
        IToken char_literal1033 = null;
        IToken string_literal1036 = null;
        IToken char_literal1038 = null;
        IToken char_literal1040 = null;
        IToken char_literal1044 = null;
        csParser.local_variable_type_return local_variable_type1034 = default(csParser.local_variable_type_return);

        csParser.identifier_return identifier1035 = default(csParser.identifier_return);

        csParser.expression_return expression1037 = default(csParser.expression_return);

        csParser.embedded_statement_return embedded_statement1039 = default(csParser.embedded_statement_return);

        csParser.local_variable_type_return local_variable_type1041 = default(csParser.local_variable_type_return);

        csParser.identifier_return identifier1042 = default(csParser.identifier_return);

        csParser.expression_return expression1043 = default(csParser.expression_return);

        csParser.embedded_statement_return embedded_statement1045 = default(csParser.embedded_statement_return);


        object f_tree=null;
        object i_tree=null;
        object string_literal1032_tree=null;
        object char_literal1033_tree=null;
        object string_literal1036_tree=null;
        object char_literal1038_tree=null;
        object char_literal1040_tree=null;
        object char_literal1044_tree=null;
        RewriteRuleTokenStream stream_211 = new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_270 = new RewriteRuleTokenStream(adaptor,"token 270");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_embedded_statement = new RewriteRuleSubtreeStream(adaptor,"rule embedded_statement");
        RewriteRuleSubtreeStream stream_local_variable_type = new RewriteRuleSubtreeStream(adaptor,"rule local_variable_type");
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 285) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1193:25: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement | {...}?f= 'for' '(' local_variable_type identifier i= ':' expression ')' embedded_statement -> FOREACH[$f,\"foreach\"] '(' local_variable_type identifier IN[$i,\"in\"] expression ')' embedded_statement )
            int alt270 = 2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0 == FOREACH) )
            {
                alt270 = 1;
            }
            else if ( (LA270_0 == 270) )
            {
                alt270 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d270s0 =
                    new NoViableAltException("", 270, 0, input);

                throw nvae_d270s0;
            }
            switch (alt270) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1194:2: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	string_literal1032=(IToken)Match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement10326); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal1032_tree = (object)adaptor.Create(string_literal1032);
                    		adaptor.AddChild(root_0, string_literal1032_tree);
                    	}
                    	char_literal1033=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_foreach_statement10330); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal1033_tree = (object)adaptor.Create(char_literal1033);
                    		adaptor.AddChild(root_0, char_literal1033_tree);
                    	}
                    	PushFollow(FOLLOW_local_variable_type_in_foreach_statement10334);
                    	local_variable_type1034 = local_variable_type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_type1034.Tree);
                    	PushFollow(FOLLOW_identifier_in_foreach_statement10338);
                    	identifier1035 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1035.Tree);
                    	string_literal1036=(IToken)Match(input,IN,FOLLOW_IN_in_foreach_statement10342); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal1036_tree = (object)adaptor.Create(string_literal1036);
                    		adaptor.AddChild(root_0, string_literal1036_tree);
                    	}
                    	PushFollow(FOLLOW_expression_in_foreach_statement10346);
                    	expression1037 = expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1037.Tree);
                    	char_literal1038=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_foreach_statement10350); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal1038_tree = (object)adaptor.Create(char_literal1038);
                    		adaptor.AddChild(root_0, char_literal1038_tree);
                    	}
                    	PushFollow(FOLLOW_embedded_statement_in_foreach_statement10354);
                    	embedded_statement1039 = embedded_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1039.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1195:6: {...}?f= 'for' '(' local_variable_type identifier i= ':' expression ')' embedded_statement
                    {
                    	if ( !((this.IsJavaish)) ) 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    throw new FailedPredicateException(input, "foreach_statement", "this.IsJavaish");
                    	}
                    	f=(IToken)Match(input,270,FOLLOW_270_in_foreach_statement10366); if (state.failed) return retval; 
                    	if ( (state.backtracking==0) ) stream_270.Add(f);

                    	char_literal1040=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_foreach_statement10370); if (state.failed) return retval; 
                    	if ( (state.backtracking==0) ) stream_LPAREN.Add(char_literal1040);

                    	PushFollow(FOLLOW_local_variable_type_in_foreach_statement10374);
                    	local_variable_type1041 = local_variable_type();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( (state.backtracking==0) ) stream_local_variable_type.Add(local_variable_type1041.Tree);
                    	PushFollow(FOLLOW_identifier_in_foreach_statement10378);
                    	identifier1042 = identifier();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( (state.backtracking==0) ) stream_identifier.Add(identifier1042.Tree);
                    	i=(IToken)Match(input,211,FOLLOW_211_in_foreach_statement10384); if (state.failed) return retval; 
                    	if ( (state.backtracking==0) ) stream_211.Add(i);

                    	PushFollow(FOLLOW_expression_in_foreach_statement10388);
                    	expression1043 = expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( (state.backtracking==0) ) stream_expression.Add(expression1043.Tree);
                    	char_literal1044=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_foreach_statement10392); if (state.failed) return retval; 
                    	if ( (state.backtracking==0) ) stream_RPAREN.Add(char_literal1044);

                    	PushFollow(FOLLOW_embedded_statement_in_foreach_statement10396);
                    	embedded_statement1045 = embedded_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( (state.backtracking==0) ) stream_embedded_statement.Add(embedded_statement1045.Tree);


                    	// AST REWRITE
                    	// elements:          LPAREN, local_variable_type, expression, RPAREN, embedded_statement, identifier
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	// wildcard labels: 
                    	if ( (state.backtracking==0) ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval!=null ? retval.Tree : null);

                    	root_0 = (object)adaptor.Nil;
                    	// 1196:11: -> FOREACH[$f,\"foreach\"] '(' local_variable_type identifier IN[$i,\"in\"] expression ')' embedded_statement
                    	{
                    	    adaptor.AddChild(root_0, (object)adaptor.Create(FOREACH, f, "foreach"));
                    	    adaptor.AddChild(root_0, stream_LPAREN.NextNode());
                    	    adaptor.AddChild(root_0, stream_local_variable_type.NextTree());
                    	    adaptor.AddChild(root_0, stream_identifier.NextTree());
                    	    adaptor.AddChild(root_0, (object)adaptor.Create(IN, i, "in"));
                    	    adaptor.AddChild(root_0, stream_expression.NextTree());
                    	    adaptor.AddChild(root_0, stream_RPAREN.NextNode());
                    	    adaptor.AddChild(root_0, stream_embedded_statement.NextTree());

                    	}

                    	retval.tree = root_0;retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 285, foreach_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"

    public class jump_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "jump_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1198:8: public jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
    public csParser.jump_statement_return jump_statement() // throws RecognitionException [1]
    {   
        csParser.jump_statement_return retval = new csParser.jump_statement_return();
        retval.start = input.LT(1);
        int jump_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.break_statement_return break_statement1046 = default(csParser.break_statement_return);

        csParser.continue_statement_return continue_statement1047 = default(csParser.continue_statement_return);

        csParser.goto_statement_return goto_statement1048 = default(csParser.goto_statement_return);

        csParser.return_statement_return return_statement1049 = default(csParser.return_statement_return);

        csParser.throw_statement_return throw_statement1050 = default(csParser.throw_statement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 286) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1198:22: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
            int alt271 = 5;
            switch ( input.LA(1) ) 
            {
            case BREAK:
            	{
                alt271 = 1;
                }
                break;
            case 271:
            	{
                alt271 = 2;
                }
                break;
            case 272:
            	{
                alt271 = 3;
                }
                break;
            case RETURN:
            	{
                alt271 = 4;
                }
                break;
            case THROW:
            	{
                alt271 = 5;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d271s0 =
            	        new NoViableAltException("", 271, 0, input);

            	    throw nvae_d271s0;
            }

            switch (alt271) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1199:2: break_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_break_statement_in_jump_statement10446);
                    	break_statement1046 = break_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, break_statement1046.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1200:4: continue_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_continue_statement_in_jump_statement10451);
                    	continue_statement1047 = continue_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, continue_statement1047.Tree);

                    }
                    break;
                case 3 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1201:4: goto_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_goto_statement_in_jump_statement10456);
                    	goto_statement1048 = goto_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, goto_statement1048.Tree);

                    }
                    break;
                case 4 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1202:4: return_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_return_statement_in_jump_statement10461);
                    	return_statement1049 = return_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, return_statement1049.Tree);

                    }
                    break;
                case 5 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1203:4: throw_statement
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_throw_statement_in_jump_statement10466);
                    	throw_statement1050 = throw_statement();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, throw_statement1050.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 286, jump_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "jump_statement"

    public class break_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "break_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1204:8: public break_statement : 'break' ';' ;
    public csParser.break_statement_return break_statement() // throws RecognitionException [1]
    {   
        csParser.break_statement_return retval = new csParser.break_statement_return();
        retval.start = input.LT(1);
        int break_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1051 = null;
        IToken char_literal1052 = null;

        object string_literal1051_tree=null;
        object char_literal1052_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 287) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1204:23: ( 'break' ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1205:2: 'break' ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1051=(IToken)Match(input,BREAK,FOLLOW_BREAK_in_break_statement10476); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1051_tree = (object)adaptor.Create(string_literal1051);
            		adaptor.AddChild(root_0, string_literal1051_tree);
            	}
            	char_literal1052=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_break_statement10480); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1052_tree = (object)adaptor.Create(char_literal1052);
            		adaptor.AddChild(root_0, char_literal1052_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 287, break_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "break_statement"

    public class continue_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "continue_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1206:8: public continue_statement : 'continue' ';' ;
    public csParser.continue_statement_return continue_statement() // throws RecognitionException [1]
    {   
        csParser.continue_statement_return retval = new csParser.continue_statement_return();
        retval.start = input.LT(1);
        int continue_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1053 = null;
        IToken char_literal1054 = null;

        object string_literal1053_tree=null;
        object char_literal1054_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 288) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1206:26: ( 'continue' ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1207:2: 'continue' ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1053=(IToken)Match(input,271,FOLLOW_271_in_continue_statement10490); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1053_tree = (object)adaptor.Create(string_literal1053);
            		adaptor.AddChild(root_0, string_literal1053_tree);
            	}
            	char_literal1054=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_continue_statement10494); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1054_tree = (object)adaptor.Create(char_literal1054);
            		adaptor.AddChild(root_0, char_literal1054_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 288, continue_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public class goto_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "goto_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1208:8: public goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
    public csParser.goto_statement_return goto_statement() // throws RecognitionException [1]
    {   
        csParser.goto_statement_return retval = new csParser.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1055 = null;
        IToken string_literal1057 = null;
        IToken string_literal1059 = null;
        IToken char_literal1060 = null;
        csParser.identifier_return identifier1056 = default(csParser.identifier_return);

        csParser.constant_expression_return constant_expression1058 = default(csParser.constant_expression_return);


        object string_literal1055_tree=null;
        object string_literal1057_tree=null;
        object string_literal1059_tree=null;
        object char_literal1060_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 289) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1208:22: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1209:2: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1055=(IToken)Match(input,272,FOLLOW_272_in_goto_statement10504); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1055_tree = (object)adaptor.Create(string_literal1055);
            		adaptor.AddChild(root_0, string_literal1055_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1209:11: ( identifier | 'case' constant_expression | 'default' )
            	int alt272 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case IDENTIFIER:
            	case ELIF:
            	case ENDIF:
            	case DEFINE:
            	case UNDEF:
            	case 195:
            	case 221:
            	case 224:
            	case 225:
            	case 226:
            	case 227:
            	case 228:
            	case 229:
            	case 230:
            	case 231:
            	case 232:
            	case 233:
            	case 234:
            	case 235:
            	case 236:
            	case 237:
            	case 238:
            	case 239:
            	case 241:
            	case 242:
            	case 243:
            	case 244:
            	case 247:
            	case 248:
            	case 249:
            	case 250:
            	case 256:
            	case 263:
            	case 264:
            	case 274:
            	case 277:
            		{
            	    alt272 = 1;
            	    }
            	    break;
            	case 267:
            		{
            	    alt272 = 2;
            	    }
            	    break;
            	case 217:
            		{
            	    alt272 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d272s0 =
            		        new NoViableAltException("", 272, 0, input);

            		    throw nvae_d272s0;
            	}

            	switch (alt272) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1209:13: identifier
            	        {
            	        	PushFollow(FOLLOW_identifier_in_goto_statement10510);
            	        	identifier1056 = identifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1056.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1210:7: 'case' constant_expression
            	        {
            	        	string_literal1057=(IToken)Match(input,267,FOLLOW_267_in_goto_statement10518); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal1057_tree = (object)adaptor.Create(string_literal1057);
            	        		adaptor.AddChild(root_0, string_literal1057_tree);
            	        	}
            	        	PushFollow(FOLLOW_constant_expression_in_goto_statement10522);
            	        	constant_expression1058 = constant_expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_expression1058.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1211:7: 'default'
            	        {
            	        	string_literal1059=(IToken)Match(input,217,FOLLOW_217_in_goto_statement10530); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal1059_tree = (object)adaptor.Create(string_literal1059);
            	        		adaptor.AddChild(root_0, string_literal1059_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal1060=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_goto_statement10535); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1060_tree = (object)adaptor.Create(char_literal1060);
            		adaptor.AddChild(root_0, char_literal1060_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 289, goto_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public class return_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "return_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1212:8: public return_statement : 'return' ( expression )? ';' ;
    public csParser.return_statement_return return_statement() // throws RecognitionException [1]
    {   
        csParser.return_statement_return retval = new csParser.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1061 = null;
        IToken char_literal1063 = null;
        csParser.expression_return expression1062 = default(csParser.expression_return);


        object string_literal1061_tree=null;
        object char_literal1063_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 290) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1212:24: ( 'return' ( expression )? ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1213:2: 'return' ( expression )? ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1061=(IToken)Match(input,RETURN,FOLLOW_RETURN_in_return_statement10545); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1061_tree = (object)adaptor.Create(string_literal1061);
            		adaptor.AddChild(root_0, string_literal1061_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1213:13: ( expression )?
            	int alt273 = 2;
            	int LA273_0 = input.LA(1);

            	if ( ((LA273_0 >= MONONOT && LA273_0 <= MONOTWIDDLE) || (LA273_0 >= OBJECT && LA273_0 <= THIS) || LA273_0 == LPAREN || LA273_0 == BIT_AND || (LA273_0 >= PLUS && LA273_0 <= MINUS) || LA273_0 == STAR || (LA273_0 >= BOOL && LA273_0 <= NULL) || (LA273_0 >= ELIF && LA273_0 <= UNDEF) || LA273_0 == 195 || LA273_0 == 197 || LA273_0 == 207 || (LA273_0 >= 209 && LA273_0 <= 210) || (LA273_0 >= 214 && LA273_0 <= 219) || LA273_0 == 221 || (LA273_0 >= 224 && LA273_0 <= 239) || (LA273_0 >= 241 && LA273_0 <= 244) || (LA273_0 >= 247 && LA273_0 <= 254) || LA273_0 == 256 || (LA273_0 >= 263 && LA273_0 <= 264) || (LA273_0 >= 274 && LA273_0 <= 277)) )
            	{
            	    alt273 = 1;
            	}
            	switch (alt273) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1213:13: expression
            	        {
            	        	PushFollow(FOLLOW_expression_in_return_statement10549);
            	        	expression1062 = expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1062.Tree);

            	        }
            	        break;

            	}

            	char_literal1063=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_return_statement10554); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1063_tree = (object)adaptor.Create(char_literal1063);
            		adaptor.AddChild(root_0, char_literal1063_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 290, return_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public class throw_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "throw_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1214:8: public throw_statement : 'throw' ( expression )? ';' ;
    public csParser.throw_statement_return throw_statement() // throws RecognitionException [1]
    {   
        csParser.throw_statement_return retval = new csParser.throw_statement_return();
        retval.start = input.LT(1);
        int throw_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1064 = null;
        IToken char_literal1066 = null;
        csParser.expression_return expression1065 = default(csParser.expression_return);


        object string_literal1064_tree=null;
        object char_literal1066_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 291) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1214:23: ( 'throw' ( expression )? ';' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1215:2: 'throw' ( expression )? ';'
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1064=(IToken)Match(input,THROW,FOLLOW_THROW_in_throw_statement10564); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1064_tree = (object)adaptor.Create(string_literal1064);
            		adaptor.AddChild(root_0, string_literal1064_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1215:12: ( expression )?
            	int alt274 = 2;
            	int LA274_0 = input.LA(1);

            	if ( ((LA274_0 >= MONONOT && LA274_0 <= MONOTWIDDLE) || (LA274_0 >= OBJECT && LA274_0 <= THIS) || LA274_0 == LPAREN || LA274_0 == BIT_AND || (LA274_0 >= PLUS && LA274_0 <= MINUS) || LA274_0 == STAR || (LA274_0 >= BOOL && LA274_0 <= NULL) || (LA274_0 >= ELIF && LA274_0 <= UNDEF) || LA274_0 == 195 || LA274_0 == 197 || LA274_0 == 207 || (LA274_0 >= 209 && LA274_0 <= 210) || (LA274_0 >= 214 && LA274_0 <= 219) || LA274_0 == 221 || (LA274_0 >= 224 && LA274_0 <= 239) || (LA274_0 >= 241 && LA274_0 <= 244) || (LA274_0 >= 247 && LA274_0 <= 254) || LA274_0 == 256 || (LA274_0 >= 263 && LA274_0 <= 264) || (LA274_0 >= 274 && LA274_0 <= 277)) )
            	{
            	    alt274 = 1;
            	}
            	switch (alt274) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1215:12: expression
            	        {
            	        	PushFollow(FOLLOW_expression_in_throw_statement10568);
            	        	expression1065 = expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1065.Tree);

            	        }
            	        break;

            	}

            	char_literal1066=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_throw_statement10573); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1066_tree = (object)adaptor.Create(char_literal1066);
            		adaptor.AddChild(root_0, char_literal1066_tree);
            	}

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 291, throw_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "throw_statement"

    public class try_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "try_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1216:8: public try_statement : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
    public csParser.try_statement_return try_statement() // throws RecognitionException [1]
    {   
        csParser.try_statement_return retval = new csParser.try_statement_return();
        retval.start = input.LT(1);
        int try_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1067 = null;
        csParser.block_return block1068 = default(csParser.block_return);

        csParser.catch_clauses_return catch_clauses1069 = default(csParser.catch_clauses_return);

        csParser.finally_clause_return finally_clause1070 = default(csParser.finally_clause_return);

        csParser.finally_clause_return finally_clause1071 = default(csParser.finally_clause_return);


        object string_literal1067_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 292) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1216:21: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1217:7: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1067=(IToken)Match(input,TRY,FOLLOW_TRY_in_try_statement10588); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1067_tree = (object)adaptor.Create(string_literal1067);
            		adaptor.AddChild(root_0, string_literal1067_tree);
            	}
            	PushFollow(FOLLOW_block_in_try_statement10592);
            	block1068 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1068.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1217:23: ( catch_clauses ( finally_clause )? | finally_clause )
            	int alt276 = 2;
            	int LA276_0 = input.LA(1);

            	if ( (LA276_0 == CATCH) )
            	{
            	    alt276 = 1;
            	}
            	else if ( (LA276_0 == FINALLY) )
            	{
            	    alt276 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d276s0 =
            	        new NoViableAltException("", 276, 0, input);

            	    throw nvae_d276s0;
            	}
            	switch (alt276) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1217:25: catch_clauses ( finally_clause )?
            	        {
            	        	PushFollow(FOLLOW_catch_clauses_in_try_statement10598);
            	        	catch_clauses1069 = catch_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, catch_clauses1069.Tree);
            	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1217:41: ( finally_clause )?
            	        	int alt275 = 2;
            	        	int LA275_0 = input.LA(1);

            	        	if ( (LA275_0 == FINALLY) )
            	        	{
            	        	    alt275 = 1;
            	        	}
            	        	switch (alt275) 
            	        	{
            	        	    case 1 :
            	        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1217:41: finally_clause
            	        	        {
            	        	        	PushFollow(FOLLOW_finally_clause_in_try_statement10602);
            	        	        	finally_clause1070 = finally_clause();
            	        	        	state._fsp--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finally_clause1070.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1218:10: finally_clause
            	        {
            	        	PushFollow(FOLLOW_finally_clause_in_try_statement10614);
            	        	finally_clause1071 = finally_clause();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finally_clause1071.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 292, try_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "try_statement"

    public class catch_clauses_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "catch_clauses"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1220:8: public catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
    public csParser.catch_clauses_return catch_clauses() // throws RecognitionException [1]
    {   
        csParser.catch_clauses_return retval = new csParser.catch_clauses_return();
        retval.start = input.LT(1);
        int catch_clauses_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1072 = null;
        csParser.specific_catch_clauses_return specific_catch_clauses1073 = default(csParser.specific_catch_clauses_return);

        csParser.general_catch_clause_return general_catch_clause1074 = default(csParser.general_catch_clause_return);


        object string_literal1072_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 293) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1220:21: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1221:2: 'catch' ( specific_catch_clauses | general_catch_clause )
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1072=(IToken)Match(input,CATCH,FOLLOW_CATCH_in_catch_clauses10625); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1072_tree = (object)adaptor.Create(string_literal1072);
            		adaptor.AddChild(root_0, string_literal1072_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1221:12: ( specific_catch_clauses | general_catch_clause )
            	int alt277 = 2;
            	int LA277_0 = input.LA(1);

            	if ( (LA277_0 == LPAREN) )
            	{
            	    alt277 = 1;
            	}
            	else if ( (LA277_0 == OPEN_BRACE || LA277_0 == SEMI) )
            	{
            	    alt277 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d277s0 =
            	        new NoViableAltException("", 277, 0, input);

            	    throw nvae_d277s0;
            	}
            	switch (alt277) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1221:13: specific_catch_clauses
            	        {
            	        	PushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses10630);
            	        	specific_catch_clauses1073 = specific_catch_clauses();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, specific_catch_clauses1073.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1221:38: general_catch_clause
            	        {
            	        	PushFollow(FOLLOW_general_catch_clause_in_catch_clauses10634);
            	        	general_catch_clause1074 = general_catch_clause();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, general_catch_clause1074.Tree);

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 293, catch_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "catch_clauses"

    public class specific_catch_clauses_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "specific_catch_clauses"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1222:8: public specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
    public csParser.specific_catch_clauses_return specific_catch_clauses() // throws RecognitionException [1]
    {   
        csParser.specific_catch_clauses_return retval = new csParser.specific_catch_clauses_return();
        retval.start = input.LT(1);
        int specific_catch_clauses_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1076 = null;
        csParser.specific_catch_clause_return specific_catch_clause1075 = default(csParser.specific_catch_clause_return);

        csParser.specific_catch_clause_return specific_catch_clause1077 = default(csParser.specific_catch_clause_return);

        csParser.general_catch_clause_return general_catch_clause1078 = default(csParser.general_catch_clause_return);


        object string_literal1076_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 294) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1222:30: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1223:2: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses10645);
            	specific_catch_clause1075 = specific_catch_clause();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, specific_catch_clause1075.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1223:26: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
            	do 
            	{
            	    int alt279 = 2;
            	    int LA279_0 = input.LA(1);

            	    if ( (LA279_0 == CATCH) )
            	    {
            	        alt279 = 1;
            	    }


            	    switch (alt279) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1223:27: 'catch' ( specific_catch_clause | general_catch_clause )
            			    {
            			    	string_literal1076=(IToken)Match(input,CATCH,FOLLOW_CATCH_in_specific_catch_clauses10650); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal1076_tree = (object)adaptor.Create(string_literal1076);
            			    		adaptor.AddChild(root_0, string_literal1076_tree);
            			    	}
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1223:37: ( specific_catch_clause | general_catch_clause )
            			    	int alt278 = 2;
            			    	int LA278_0 = input.LA(1);

            			    	if ( (LA278_0 == LPAREN) )
            			    	{
            			    	    alt278 = 1;
            			    	}
            			    	else if ( (LA278_0 == OPEN_BRACE || LA278_0 == SEMI) )
            			    	{
            			    	    alt278 = 2;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    NoViableAltException nvae_d278s0 =
            			    	        new NoViableAltException("", 278, 0, input);

            			    	    throw nvae_d278s0;
            			    	}
            			    	switch (alt278) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1223:38: specific_catch_clause
            			    	        {
            			    	        	PushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses10655);
            			    	        	specific_catch_clause1077 = specific_catch_clause();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, specific_catch_clause1077.Tree);

            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1223:62: general_catch_clause
            			    	        {
            			    	        	PushFollow(FOLLOW_general_catch_clause_in_specific_catch_clauses10659);
            			    	        	general_catch_clause1078 = general_catch_clause();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, general_catch_clause1078.Tree);

            			    	        }
            			    	        break;

            			    	}


            			    }
            			    break;

            			default:
            			    goto loop279;
            	    }
            	} while (true);

            	loop279:
            		;	// Stops C# compiler whining that label 'loop279' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 294, specific_catch_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clauses"

    public class specific_catch_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "specific_catch_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1224:8: public specific_catch_clause : '(' class_type ( identifier )? ')' block ;
    public csParser.specific_catch_clause_return specific_catch_clause() // throws RecognitionException [1]
    {   
        csParser.specific_catch_clause_return retval = new csParser.specific_catch_clause_return();
        retval.start = input.LT(1);
        int specific_catch_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1079 = null;
        IToken char_literal1082 = null;
        csParser.class_type_return class_type1080 = default(csParser.class_type_return);

        csParser.identifier_return identifier1081 = default(csParser.identifier_return);

        csParser.block_return block1083 = default(csParser.block_return);


        object char_literal1079_tree=null;
        object char_literal1082_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 295) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1224:29: ( '(' class_type ( identifier )? ')' block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1225:2: '(' class_type ( identifier )? ')' block
            {
            	root_0 = (object)adaptor.Nil;

            	char_literal1079=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_specific_catch_clause10671); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1079_tree = (object)adaptor.Create(char_literal1079);
            		adaptor.AddChild(root_0, char_literal1079_tree);
            	}
            	PushFollow(FOLLOW_class_type_in_specific_catch_clause10675);
            	class_type1080 = class_type();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_type1080.Tree);
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1225:21: ( identifier )?
            	int alt280 = 2;
            	int LA280_0 = input.LA(1);

            	if ( (LA280_0 == IDENTIFIER || (LA280_0 >= ELIF && LA280_0 <= UNDEF) || LA280_0 == 195 || LA280_0 == 221 || (LA280_0 >= 224 && LA280_0 <= 239) || (LA280_0 >= 241 && LA280_0 <= 244) || (LA280_0 >= 247 && LA280_0 <= 250) || LA280_0 == 256 || (LA280_0 >= 263 && LA280_0 <= 264) || LA280_0 == 274 || LA280_0 == 277) )
            	{
            	    alt280 = 1;
            	}
            	switch (alt280) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1225:21: identifier
            	        {
            	        	PushFollow(FOLLOW_identifier_in_specific_catch_clause10679);
            	        	identifier1081 = identifier();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1081.Tree);

            	        }
            	        break;

            	}

            	char_literal1082=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_specific_catch_clause10684); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1082_tree = (object)adaptor.Create(char_literal1082);
            		adaptor.AddChild(root_0, char_literal1082_tree);
            	}
            	PushFollow(FOLLOW_block_in_specific_catch_clause10688);
            	block1083 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1083.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 295, specific_catch_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clause"

    public class general_catch_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "general_catch_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1226:8: public general_catch_clause : block ;
    public csParser.general_catch_clause_return general_catch_clause() // throws RecognitionException [1]
    {   
        csParser.general_catch_clause_return retval = new csParser.general_catch_clause_return();
        retval.start = input.LT(1);
        int general_catch_clause_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block1084 = default(csParser.block_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 296) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1226:28: ( block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1227:2: block
            {
            	root_0 = (object)adaptor.Nil;

            	PushFollow(FOLLOW_block_in_general_catch_clause10698);
            	block1084 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1084.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 296, general_catch_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "general_catch_clause"

    public class finally_clause_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "finally_clause"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1228:8: public finally_clause : 'finally' block ;
    public csParser.finally_clause_return finally_clause() // throws RecognitionException [1]
    {   
        csParser.finally_clause_return retval = new csParser.finally_clause_return();
        retval.start = input.LT(1);
        int finally_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1085 = null;
        csParser.block_return block1086 = default(csParser.block_return);


        object string_literal1085_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 297) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1228:22: ( 'finally' block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1229:2: 'finally' block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1085=(IToken)Match(input,FINALLY,FOLLOW_FINALLY_in_finally_clause10708); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1085_tree = (object)adaptor.Create(string_literal1085);
            		adaptor.AddChild(root_0, string_literal1085_tree);
            	}
            	PushFollow(FOLLOW_block_in_finally_clause10712);
            	block1086 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1086.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 297, finally_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "finally_clause"

    public class checked_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "checked_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1230:8: public checked_statement : 'checked' block ;
    public csParser.checked_statement_return checked_statement() // throws RecognitionException [1]
    {   
        csParser.checked_statement_return retval = new csParser.checked_statement_return();
        retval.start = input.LT(1);
        int checked_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1087 = null;
        csParser.block_return block1088 = default(csParser.block_return);


        object string_literal1087_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 298) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1230:25: ( 'checked' block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1231:2: 'checked' block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1087=(IToken)Match(input,215,FOLLOW_215_in_checked_statement10722); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1087_tree = (object)adaptor.Create(string_literal1087);
            		adaptor.AddChild(root_0, string_literal1087_tree);
            	}
            	PushFollow(FOLLOW_block_in_checked_statement10726);
            	block1088 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1088.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 298, checked_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "checked_statement"

    public class unchecked_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unchecked_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1232:8: public unchecked_statement : 'unchecked' block ;
    public csParser.unchecked_statement_return unchecked_statement() // throws RecognitionException [1]
    {   
        csParser.unchecked_statement_return retval = new csParser.unchecked_statement_return();
        retval.start = input.LT(1);
        int unchecked_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1089 = null;
        csParser.block_return block1090 = default(csParser.block_return);


        object string_literal1089_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 299) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1232:27: ( 'unchecked' block )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1233:2: 'unchecked' block
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1089=(IToken)Match(input,216,FOLLOW_216_in_unchecked_statement10736); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1089_tree = (object)adaptor.Create(string_literal1089);
            		adaptor.AddChild(root_0, string_literal1089_tree);
            	}
            	PushFollow(FOLLOW_block_in_unchecked_statement10740);
            	block1090 = block();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1090.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 299, unchecked_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unchecked_statement"

    public class lock_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "lock_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1234:8: public lock_statement : 'lock' '(' expression ')' embedded_statement ;
    public csParser.lock_statement_return lock_statement() // throws RecognitionException [1]
    {   
        csParser.lock_statement_return retval = new csParser.lock_statement_return();
        retval.start = input.LT(1);
        int lock_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1091 = null;
        IToken char_literal1092 = null;
        IToken char_literal1094 = null;
        csParser.expression_return expression1093 = default(csParser.expression_return);

        csParser.embedded_statement_return embedded_statement1095 = default(csParser.embedded_statement_return);


        object string_literal1091_tree=null;
        object char_literal1092_tree=null;
        object char_literal1094_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 300) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1234:22: ( 'lock' '(' expression ')' embedded_statement )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1235:2: 'lock' '(' expression ')' embedded_statement
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1091=(IToken)Match(input,273,FOLLOW_273_in_lock_statement10750); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1091_tree = (object)adaptor.Create(string_literal1091);
            		adaptor.AddChild(root_0, string_literal1091_tree);
            	}
            	char_literal1092=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_lock_statement10754); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1092_tree = (object)adaptor.Create(char_literal1092);
            		adaptor.AddChild(root_0, char_literal1092_tree);
            	}
            	PushFollow(FOLLOW_expression_in_lock_statement10757);
            	expression1093 = expression();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1093.Tree);
            	char_literal1094=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_lock_statement10761); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1094_tree = (object)adaptor.Create(char_literal1094);
            		adaptor.AddChild(root_0, char_literal1094_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_lock_statement10765);
            	embedded_statement1095 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1095.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 300, lock_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "lock_statement"

    public class using_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "using_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1236:8: public using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
    public csParser.using_statement_return using_statement() // throws RecognitionException [1]
    {   
        csParser.using_statement_return retval = new csParser.using_statement_return();
        retval.start = input.LT(1);
        int using_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1096 = null;
        IToken char_literal1097 = null;
        IToken char_literal1099 = null;
        csParser.resource_acquisition_return resource_acquisition1098 = default(csParser.resource_acquisition_return);

        csParser.embedded_statement_return embedded_statement1100 = default(csParser.embedded_statement_return);


        object string_literal1096_tree=null;
        object char_literal1097_tree=null;
        object char_literal1099_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 301) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1236:23: ( 'using' '(' resource_acquisition ')' embedded_statement )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1237:2: 'using' '(' resource_acquisition ')' embedded_statement
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1096=(IToken)Match(input,USING,FOLLOW_USING_in_using_statement10775); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1096_tree = (object)adaptor.Create(string_literal1096);
            		adaptor.AddChild(root_0, string_literal1096_tree);
            	}
            	char_literal1097=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_using_statement10779); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1097_tree = (object)adaptor.Create(char_literal1097);
            		adaptor.AddChild(root_0, char_literal1097_tree);
            	}
            	PushFollow(FOLLOW_resource_acquisition_in_using_statement10784);
            	resource_acquisition1098 = resource_acquisition();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, resource_acquisition1098.Tree);
            	char_literal1099=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_using_statement10788); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1099_tree = (object)adaptor.Create(char_literal1099);
            		adaptor.AddChild(root_0, char_literal1099_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_using_statement10793);
            	embedded_statement1100 = embedded_statement();
            	state._fsp--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1100.Tree);

            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 301, using_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_statement"

    public class resource_acquisition_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "resource_acquisition"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1238:8: public resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
    public csParser.resource_acquisition_return resource_acquisition() // throws RecognitionException [1]
    {   
        csParser.resource_acquisition_return retval = new csParser.resource_acquisition_return();
        retval.start = input.LT(1);
        int resource_acquisition_StartIndex = input.Index;
        object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1101 = default(csParser.local_variable_declaration_return);

        csParser.expression_return expression1102 = default(csParser.expression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 302) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1238:28: ( ( local_variable_declaration )=> local_variable_declaration | expression )
            int alt281 = 2;
            alt281 = dfa281.Predict(input);
            switch (alt281) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1239:2: ( local_variable_declaration )=> local_variable_declaration
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition10809);
                    	local_variable_declaration1101 = local_variable_declaration();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration1101.Tree);

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1240:4: expression
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_expression_in_resource_acquisition10814);
                    	expression1102 = expression();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1102.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 302, resource_acquisition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "resource_acquisition"

    public class yield_statement_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "yield_statement"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1241:8: public yield_statement : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
    public csParser.yield_statement_return yield_statement() // throws RecognitionException [1]
    {   
        csParser.yield_statement_return retval = new csParser.yield_statement_return();
        retval.start = input.LT(1);
        int yield_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1103 = null;
        IToken string_literal1104 = null;
        IToken char_literal1106 = null;
        IToken string_literal1107 = null;
        IToken char_literal1108 = null;
        csParser.expression_return expression1105 = default(csParser.expression_return);


        object string_literal1103_tree=null;
        object string_literal1104_tree=null;
        object char_literal1106_tree=null;
        object string_literal1107_tree=null;
        object char_literal1108_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 303) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1241:23: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1242:2: 'yield' ( 'return' expression ';' | 'break' ';' )
            {
            	root_0 = (object)adaptor.Nil;

            	string_literal1103=(IToken)Match(input,274,FOLLOW_274_in_yield_statement10824); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1103_tree = (object)adaptor.Create(string_literal1103);
            		adaptor.AddChild(root_0, string_literal1103_tree);
            	}
            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1242:12: ( 'return' expression ';' | 'break' ';' )
            	int alt282 = 2;
            	int LA282_0 = input.LA(1);

            	if ( (LA282_0 == RETURN) )
            	{
            	    alt282 = 1;
            	}
            	else if ( (LA282_0 == BREAK) )
            	{
            	    alt282 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d282s0 =
            	        new NoViableAltException("", 282, 0, input);

            	    throw nvae_d282s0;
            	}
            	switch (alt282) 
            	{
            	    case 1 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1242:13: 'return' expression ';'
            	        {
            	        	string_literal1104=(IToken)Match(input,RETURN,FOLLOW_RETURN_in_yield_statement10829); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal1104_tree = (object)adaptor.Create(string_literal1104);
            	        		adaptor.AddChild(root_0, string_literal1104_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_yield_statement10833);
            	        	expression1105 = expression();
            	        	state._fsp--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1105.Tree);
            	        	char_literal1106=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_yield_statement10837); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal1106_tree = (object)adaptor.Create(char_literal1106);
            	        		adaptor.AddChild(root_0, char_literal1106_tree);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1243:14: 'break' ';'
            	        {
            	        	string_literal1107=(IToken)Match(input,BREAK,FOLLOW_BREAK_in_yield_statement10852); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal1107_tree = (object)adaptor.Create(string_literal1107);
            	        		adaptor.AddChild(root_0, string_literal1107_tree);
            	        	}
            	        	char_literal1108=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_yield_statement10856); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal1108_tree = (object)adaptor.Create(char_literal1108);
            	        		adaptor.AddChild(root_0, char_literal1108_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 303, yield_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "yield_statement"

    public class predefined_type_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "predefined_type"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1249:8: public predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
    public csParser.predefined_type_return predefined_type() // throws RecognitionException [1]
    {   
        csParser.predefined_type_return retval = new csParser.predefined_type_return();
        retval.start = input.LT(1);
        int predefined_type_StartIndex = input.Index;
        object root_0 = null;

        IToken set1109 = null;

        object set1109_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 304) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1249:23: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set1109 = (IToken)input.LT(1);
            	if ( input.LA(1) == OBJECT || (input.LA(1) >= BOOL && input.LA(1) <= DOUBLE) || (input.LA(1) >= 251 && input.LA(1) <= 254) || (input.LA(1) >= 275 && input.LA(1) <= 276) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1109));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 304, predefined_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "predefined_type"

    public class identifier_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "identifier"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1253:8: public identifier : ( IDENTIFIER | also_keyword );
    public csParser.identifier_return identifier() // throws RecognitionException [1]
    {   
        csParser.identifier_return retval = new csParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.Index;
        object root_0 = null;

        IToken IDENTIFIER1110 = null;
        csParser.also_keyword_return also_keyword1111 = default(csParser.also_keyword_return);


        object IDENTIFIER1110_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 305) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1253:18: ( IDENTIFIER | also_keyword )
            int alt283 = 2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0 == IDENTIFIER) )
            {
                alt283 = 1;
            }
            else if ( ((LA283_0 >= ELIF && LA283_0 <= UNDEF) || LA283_0 == 195 || LA283_0 == 221 || (LA283_0 >= 224 && LA283_0 <= 239) || (LA283_0 >= 241 && LA283_0 <= 244) || (LA283_0 >= 247 && LA283_0 <= 250) || LA283_0 == 256 || (LA283_0 >= 263 && LA283_0 <= 264) || LA283_0 == 274 || LA283_0 == 277) )
            {
                alt283 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d283s0 =
                    new NoViableAltException("", 283, 0, input);

                throw nvae_d283s0;
            }
            switch (alt283) 
            {
                case 1 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1254:3: IDENTIFIER
                    {
                    	root_0 = (object)adaptor.Nil;

                    	IDENTIFIER1110=(IToken)Match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier10959); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{IDENTIFIER1110_tree = (object)adaptor.Create(IDENTIFIER1110);
                    		adaptor.AddChild(root_0, IDENTIFIER1110_tree);
                    	}

                    }
                    break;
                case 2 :
                    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1254:16: also_keyword
                    {
                    	root_0 = (object)adaptor.Nil;

                    	PushFollow(FOLLOW_also_keyword_in_identifier10963);
                    	also_keyword1111 = also_keyword();
                    	state._fsp--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, also_keyword1111.Tree);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 305, identifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public class keyword_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "keyword"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1256:8: public keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
    public csParser.keyword_return keyword() // throws RecognitionException [1]
    {   
        csParser.keyword_return retval = new csParser.keyword_return();
        retval.start = input.LT(1);
        int keyword_StartIndex = input.Index;
        object root_0 = null;

        IToken set1112 = null;

        object set1112_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 306) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1256:15: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set1112 = (IToken)input.LT(1);
            	if ( input.LA(1) == ENUM || (input.LA(1) >= PUBLIC && input.LA(1) <= IN) || input.LA(1) == IF || (input.LA(1) >= BOOL && input.LA(1) <= DOUBLE) || (input.LA(1) >= TRUE && input.LA(1) <= NULL) || input.LA(1) == USING || (input.LA(1) >= 193 && input.LA(1) <= 194) || (input.LA(1) >= 197 && input.LA(1) <= 207) || (input.LA(1) >= 212 && input.LA(1) <= 219) || (input.LA(1) >= 222 && input.LA(1) <= 223) || input.LA(1) == 240 || input.LA(1) == 245 || (input.LA(1) >= 251 && input.LA(1) <= 255) || (input.LA(1) >= 257 && input.LA(1) <= 262) || (input.LA(1) >= 265 && input.LA(1) <= 267) || (input.LA(1) >= 269 && input.LA(1) <= 273) || (input.LA(1) >= 275 && input.LA(1) <= 276) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1112));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 306, keyword_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "keyword"

    public class also_keyword_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "also_keyword"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1259:8: public also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' | 'extends' );
    public csParser.also_keyword_return also_keyword() // throws RecognitionException [1]
    {   
        csParser.also_keyword_return retval = new csParser.also_keyword_return();
        retval.start = input.LT(1);
        int also_keyword_StartIndex = input.Index;
        object root_0 = null;

        IToken set1113 = null;

        object set1113_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 307) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1259:20: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' | 'extends' )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set1113 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= ELIF && input.LA(1) <= UNDEF) || input.LA(1) == 195 || input.LA(1) == 221 || (input.LA(1) >= 224 && input.LA(1) <= 239) || (input.LA(1) >= 241 && input.LA(1) <= 244) || (input.LA(1) >= 247 && input.LA(1) <= 250) || input.LA(1) == 256 || (input.LA(1) >= 263 && input.LA(1) <= 264) || input.LA(1) == 274 || input.LA(1) == 277 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1113));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 307, also_keyword_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "also_keyword"

    public class literal_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "literal"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1265:8: public literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
    public csParser.literal_return literal() // throws RecognitionException [1]
    {   
        csParser.literal_return retval = new csParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.Index;
        object root_0 = null;

        IToken set1114 = null;

        object set1114_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 308) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1265:15: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:
            {
            	root_0 = (object)adaptor.Nil;

            	set1114 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= Real_literal && input.LA(1) <= NULL) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1114));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 308, literal_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public class assignment_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "assignment_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1625:8: public assignment_list : ( assignment ';' )+ ;
    public csParser.assignment_list_return assignment_list() // throws RecognitionException [1]
    {   
        csParser.assignment_list_return retval = new csParser.assignment_list_return();
        retval.start = input.LT(1);
        int assignment_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1116 = null;
        csParser.assignment_return assignment1115 = default(csParser.assignment_return);


        object char_literal1116_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 309) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1625:23: ( ( assignment ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1626:2: ( assignment ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1626:2: ( assignment ';' )+
            	int cnt284 = 0;
            	do 
            	{
            	    int alt284 = 2;
            	    int LA284_0 = input.LA(1);

            	    if ( ((LA284_0 >= MONONOT && LA284_0 <= MONOTWIDDLE) || (LA284_0 >= OBJECT && LA284_0 <= THIS) || LA284_0 == LPAREN || LA284_0 == BIT_AND || (LA284_0 >= PLUS && LA284_0 <= MINUS) || LA284_0 == STAR || (LA284_0 >= BOOL && LA284_0 <= NULL) || (LA284_0 >= ELIF && LA284_0 <= UNDEF) || LA284_0 == 195 || LA284_0 == 197 || LA284_0 == 207 || (LA284_0 >= 209 && LA284_0 <= 210) || (LA284_0 >= 214 && LA284_0 <= 219) || LA284_0 == 221 || (LA284_0 >= 224 && LA284_0 <= 239) || (LA284_0 >= 241 && LA284_0 <= 244) || (LA284_0 >= 247 && LA284_0 <= 254) || LA284_0 == 256 || (LA284_0 >= 263 && LA284_0 <= 264) || (LA284_0 >= 274 && LA284_0 <= 277)) )
            	    {
            	        alt284 = 1;
            	    }


            	    switch (alt284) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1626:3: assignment ';'
            			    {
            			    	PushFollow(FOLLOW_assignment_in_assignment_list15467);
            			    	assignment1115 = assignment();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignment1115.Tree);
            			    	char_literal1116=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_assignment_list15469); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1116_tree = (object)adaptor.Create(char_literal1116);
            			    		adaptor.AddChild(root_0, char_literal1116_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt284 >= 1 ) goto loop284;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee284 =
            		                new EarlyExitException(284, input);
            		            throw eee284;
            	    }
            	    cnt284++;
            	} while (true);

            	loop284:
            		;	// Stops C# compiler whining that label 'loop284' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 309, assignment_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignment_list"

    public class field_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "field_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1627:8: public field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
    public csParser.field_declarations_return field_declarations() // throws RecognitionException [1]
    {   
        csParser.field_declarations_return retval = new csParser.field_declarations_return();
        retval.start = input.LT(1);
        int field_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes1117 = default(csParser.attributes_return);

        csParser.modifiers_return modifiers1118 = default(csParser.modifiers_return);

        csParser.type_return type1119 = default(csParser.type_return);

        csParser.field_declaration_return field_declaration1120 = default(csParser.field_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 310) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1627:26: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1628:2: ( ( attributes )? ( modifiers )? type field_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1628:2: ( ( attributes )? ( modifiers )? type field_declaration )+
            	int cnt287 = 0;
            	do 
            	{
            	    int alt287 = 2;
            	    int LA287_0 = input.LA(1);

            	    if ( ((LA287_0 >= PUBLIC && LA287_0 <= STATIC) || LA287_0 == OBJECT || LA287_0 == OPEN_BRACKET || (LA287_0 >= BOOL && LA287_0 <= IDENTIFIER) || (LA287_0 >= ELIF && LA287_0 <= UNDEF) || (LA287_0 >= 194 && LA287_0 <= 195) || (LA287_0 >= 197 && LA287_0 <= 204) || LA287_0 == 206 || LA287_0 == 221 || (LA287_0 >= 224 && LA287_0 <= 239) || (LA287_0 >= 241 && LA287_0 <= 244) || (LA287_0 >= 247 && LA287_0 <= 254) || LA287_0 == 256 || (LA287_0 >= 263 && LA287_0 <= 264) || (LA287_0 >= 274 && LA287_0 <= 277)) )
            	    {
            	        alt287 = 1;
            	    }


            	    switch (alt287) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1628:3: ( attributes )? ( modifiers )? type field_declaration
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1628:3: ( attributes )?
            			    	int alt285 = 2;
            			    	int LA285_0 = input.LA(1);

            			    	if ( (LA285_0 == OPEN_BRACKET) )
            			    	{
            			    	    alt285 = 1;
            			    	}
            			    	switch (alt285) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1628:3: attributes
            			    	        {
            			    	        	PushFollow(FOLLOW_attributes_in_field_declarations15482);
            			    	        	attributes1117 = attributes();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes1117.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1628:17: ( modifiers )?
            			    	int alt286 = 2;
            			    	int LA286_0 = input.LA(1);

            			    	if ( ((LA286_0 >= PUBLIC && LA286_0 <= STATIC) || LA286_0 == 194 || (LA286_0 >= 197 && LA286_0 <= 204)) )
            			    	{
            			    	    alt286 = 1;
            			    	}
            			    	switch (alt286) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1628:17: modifiers
            			    	        {
            			    	        	PushFollow(FOLLOW_modifiers_in_field_declarations15487);
            			    	        	modifiers1118 = modifiers();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifiers1118.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_type_in_field_declarations15492);
            			    	type1119 = type();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type1119.Tree);
            			    	PushFollow(FOLLOW_field_declaration_in_field_declarations15496);
            			    	field_declaration1120 = field_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_declaration1120.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt287 >= 1 ) goto loop287;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee287 =
            		                new EarlyExitException(287, input);
            		            throw eee287;
            	    }
            	    cnt287++;
            	} while (true);

            	loop287:
            		;	// Stops C# compiler whining that label 'loop287' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 310, field_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "field_declarations"

    public class property_declaration_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "property_declaration_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1629:8: public property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
    public csParser.property_declaration_list_return property_declaration_list() // throws RecognitionException [1]
    {   
        csParser.property_declaration_list_return retval = new csParser.property_declaration_list_return();
        retval.start = input.LT(1);
        int property_declaration_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes1121 = default(csParser.attributes_return);

        csParser.modifiers_return modifiers1122 = default(csParser.modifiers_return);

        csParser.type_return type1123 = default(csParser.type_return);

        csParser.property_declaration_return property_declaration1124 = default(csParser.property_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 311) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1629:33: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1630:2: ( ( attributes )? ( modifiers )? type property_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1630:2: ( ( attributes )? ( modifiers )? type property_declaration )+
            	int cnt290 = 0;
            	do 
            	{
            	    int alt290 = 2;
            	    int LA290_0 = input.LA(1);

            	    if ( ((LA290_0 >= PUBLIC && LA290_0 <= STATIC) || LA290_0 == OBJECT || LA290_0 == OPEN_BRACKET || (LA290_0 >= BOOL && LA290_0 <= IDENTIFIER) || (LA290_0 >= ELIF && LA290_0 <= UNDEF) || (LA290_0 >= 194 && LA290_0 <= 195) || (LA290_0 >= 197 && LA290_0 <= 204) || LA290_0 == 206 || LA290_0 == 221 || (LA290_0 >= 224 && LA290_0 <= 239) || (LA290_0 >= 241 && LA290_0 <= 244) || (LA290_0 >= 247 && LA290_0 <= 254) || LA290_0 == 256 || (LA290_0 >= 263 && LA290_0 <= 264) || (LA290_0 >= 274 && LA290_0 <= 277)) )
            	    {
            	        alt290 = 1;
            	    }


            	    switch (alt290) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1630:3: ( attributes )? ( modifiers )? type property_declaration
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1630:3: ( attributes )?
            			    	int alt288 = 2;
            			    	int LA288_0 = input.LA(1);

            			    	if ( (LA288_0 == OPEN_BRACKET) )
            			    	{
            			    	    alt288 = 1;
            			    	}
            			    	switch (alt288) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1630:3: attributes
            			    	        {
            			    	        	PushFollow(FOLLOW_attributes_in_property_declaration_list15509);
            			    	        	attributes1121 = attributes();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes1121.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1630:17: ( modifiers )?
            			    	int alt289 = 2;
            			    	int LA289_0 = input.LA(1);

            			    	if ( ((LA289_0 >= PUBLIC && LA289_0 <= STATIC) || LA289_0 == 194 || (LA289_0 >= 197 && LA289_0 <= 204)) )
            			    	{
            			    	    alt289 = 1;
            			    	}
            			    	switch (alt289) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1630:17: modifiers
            			    	        {
            			    	        	PushFollow(FOLLOW_modifiers_in_property_declaration_list15514);
            			    	        	modifiers1122 = modifiers();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifiers1122.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_type_in_property_declaration_list15519);
            			    	type1123 = type();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type1123.Tree);
            			    	PushFollow(FOLLOW_property_declaration_in_property_declaration_list15523);
            			    	property_declaration1124 = property_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_declaration1124.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt290 >= 1 ) goto loop290;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee290 =
            		                new EarlyExitException(290, input);
            		            throw eee290;
            	    }
            	    cnt290++;
            	} while (true);

            	loop290:
            		;	// Stops C# compiler whining that label 'loop290' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 311, property_declaration_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "property_declaration_list"

    public class constant_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "constant_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1631:8: public constant_declarations : ( constant_declaration )+ ;
    public csParser.constant_declarations_return constant_declarations() // throws RecognitionException [1]
    {   
        csParser.constant_declarations_return retval = new csParser.constant_declarations_return();
        retval.start = input.LT(1);
        int constant_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.constant_declaration_return constant_declaration1125 = default(csParser.constant_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 312) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1631:29: ( ( constant_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1632:2: ( constant_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1632:2: ( constant_declaration )+
            	int cnt291 = 0;
            	do 
            	{
            	    int alt291 = 2;
            	    int LA291_0 = input.LA(1);

            	    if ( (LA291_0 == 205) )
            	    {
            	        alt291 = 1;
            	    }


            	    switch (alt291) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1632:2: constant_declaration
            			    {
            			    	PushFollow(FOLLOW_constant_declaration_in_constant_declarations15535);
            			    	constant_declaration1125 = constant_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declaration1125.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt291 >= 1 ) goto loop291;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee291 =
            		                new EarlyExitException(291, input);
            		            throw eee291;
            	    }
            	    cnt291++;
            	} while (true);

            	loop291:
            		;	// Stops C# compiler whining that label 'loop291' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 312, constant_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declarations"

    public class literals_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "literals"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1633:8: public literals : ( literal )+ ;
    public csParser.literals_return literals() // throws RecognitionException [1]
    {   
        csParser.literals_return retval = new csParser.literals_return();
        retval.start = input.LT(1);
        int literals_StartIndex = input.Index;
        object root_0 = null;

        csParser.literal_return literal1126 = default(csParser.literal_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 313) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1633:16: ( ( literal )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1634:2: ( literal )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1634:2: ( literal )+
            	int cnt292 = 0;
            	do 
            	{
            	    int alt292 = 2;
            	    int LA292_0 = input.LA(1);

            	    if ( ((LA292_0 >= Real_literal && LA292_0 <= NULL)) )
            	    {
            	        alt292 = 1;
            	    }


            	    switch (alt292) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1634:2: literal
            			    {
            			    	PushFollow(FOLLOW_literal_in_literals15545);
            			    	literal1126 = literal();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, literal1126.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt292 >= 1 ) goto loop292;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee292 =
            		                new EarlyExitException(292, input);
            		            throw eee292;
            	    }
            	    cnt292++;
            	} while (true);

            	loop292:
            		;	// Stops C# compiler whining that label 'loop292' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 313, literals_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "literals"

    public class delegate_declaration_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "delegate_declaration_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1635:8: public delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
    public csParser.delegate_declaration_list_return delegate_declaration_list() // throws RecognitionException [1]
    {   
        csParser.delegate_declaration_list_return retval = new csParser.delegate_declaration_list_return();
        retval.start = input.LT(1);
        int delegate_declaration_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes1127 = default(csParser.attributes_return);

        csParser.modifiers_return modifiers1128 = default(csParser.modifiers_return);

        csParser.delegate_declaration_return delegate_declaration1129 = default(csParser.delegate_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 314) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1635:33: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1636:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1636:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
            	int cnt295 = 0;
            	do 
            	{
            	    int alt295 = 2;
            	    int LA295_0 = input.LA(1);

            	    if ( ((LA295_0 >= PUBLIC && LA295_0 <= STATIC) || LA295_0 == OPEN_BRACKET || LA295_0 == 194 || (LA295_0 >= 197 && LA295_0 <= 204) || LA295_0 == 218) )
            	    {
            	        alt295 = 1;
            	    }


            	    switch (alt295) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1636:3: ( attributes )? ( modifiers )? delegate_declaration
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1636:3: ( attributes )?
            			    	int alt293 = 2;
            			    	int LA293_0 = input.LA(1);

            			    	if ( (LA293_0 == OPEN_BRACKET) )
            			    	{
            			    	    alt293 = 1;
            			    	}
            			    	switch (alt293) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1636:3: attributes
            			    	        {
            			    	        	PushFollow(FOLLOW_attributes_in_delegate_declaration_list15557);
            			    	        	attributes1127 = attributes();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes1127.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1636:17: ( modifiers )?
            			    	int alt294 = 2;
            			    	int LA294_0 = input.LA(1);

            			    	if ( ((LA294_0 >= PUBLIC && LA294_0 <= STATIC) || LA294_0 == 194 || (LA294_0 >= 197 && LA294_0 <= 204)) )
            			    	{
            			    	    alt294 = 1;
            			    	}
            			    	switch (alt294) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1636:17: modifiers
            			    	        {
            			    	        	PushFollow(FOLLOW_modifiers_in_delegate_declaration_list15562);
            			    	        	modifiers1128 = modifiers();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifiers1128.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_delegate_declaration_in_delegate_declaration_list15567);
            			    	delegate_declaration1129 = delegate_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_declaration1129.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt295 >= 1 ) goto loop295;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee295 =
            		                new EarlyExitException(295, input);
            		            throw eee295;
            	    }
            	    cnt295++;
            	} while (true);

            	loop295:
            		;	// Stops C# compiler whining that label 'loop295' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 314, delegate_declaration_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration_list"

    public class local_variable_declaration_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_variable_declaration_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1637:8: public local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
    public csParser.local_variable_declaration_list_return local_variable_declaration_list() // throws RecognitionException [1]
    {   
        csParser.local_variable_declaration_list_return retval = new csParser.local_variable_declaration_list_return();
        retval.start = input.LT(1);
        int local_variable_declaration_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1131 = null;
        csParser.local_variable_declaration_return local_variable_declaration1130 = default(csParser.local_variable_declaration_return);


        object char_literal1131_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 315) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1637:39: ( ( local_variable_declaration ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1638:2: ( local_variable_declaration ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1638:2: ( local_variable_declaration ';' )+
            	int cnt296 = 0;
            	do 
            	{
            	    int alt296 = 2;
            	    int LA296_0 = input.LA(1);

            	    if ( (LA296_0 == OBJECT || (LA296_0 >= BOOL && LA296_0 <= IDENTIFIER) || (LA296_0 >= ELIF && LA296_0 <= UNDEF) || LA296_0 == 195 || LA296_0 == 206 || LA296_0 == 221 || (LA296_0 >= 224 && LA296_0 <= 239) || (LA296_0 >= 241 && LA296_0 <= 244) || (LA296_0 >= 247 && LA296_0 <= 254) || LA296_0 == 256 || (LA296_0 >= 263 && LA296_0 <= 264) || (LA296_0 >= 274 && LA296_0 <= 277)) )
            	    {
            	        alt296 = 1;
            	    }


            	    switch (alt296) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1638:3: local_variable_declaration ';'
            			    {
            			    	PushFollow(FOLLOW_local_variable_declaration_in_local_variable_declaration_list15580);
            			    	local_variable_declaration1130 = local_variable_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration1130.Tree);
            			    	char_literal1131=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_local_variable_declaration_list15582); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1131_tree = (object)adaptor.Create(char_literal1131);
            			    		adaptor.AddChild(root_0, char_literal1131_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt296 >= 1 ) goto loop296;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee296 =
            		                new EarlyExitException(296, input);
            		            throw eee296;
            	    }
            	    cnt296++;
            	} while (true);

            	loop296:
            		;	// Stops C# compiler whining that label 'loop296' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 315, local_variable_declaration_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration_list"

    public class local_variable_initializer_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "local_variable_initializer_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1639:8: public local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
    public csParser.local_variable_initializer_list_return local_variable_initializer_list() // throws RecognitionException [1]
    {   
        csParser.local_variable_initializer_list_return retval = new csParser.local_variable_initializer_list_return();
        retval.start = input.LT(1);
        int local_variable_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1133 = null;
        csParser.local_variable_initializer_return local_variable_initializer1132 = default(csParser.local_variable_initializer_return);


        object char_literal1133_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 316) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1639:39: ( ( local_variable_initializer ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1640:2: ( local_variable_initializer ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1640:2: ( local_variable_initializer ';' )+
            	int cnt297 = 0;
            	do 
            	{
            	    int alt297 = 2;
            	    int LA297_0 = input.LA(1);

            	    if ( ((LA297_0 >= MONONOT && LA297_0 <= MONOTWIDDLE) || (LA297_0 >= OBJECT && LA297_0 <= THIS) || LA297_0 == OPEN_BRACE || LA297_0 == LPAREN || LA297_0 == BIT_AND || (LA297_0 >= PLUS && LA297_0 <= MINUS) || LA297_0 == STAR || (LA297_0 >= BOOL && LA297_0 <= NULL) || (LA297_0 >= ELIF && LA297_0 <= UNDEF) || LA297_0 == 195 || LA297_0 == 197 || LA297_0 == 207 || (LA297_0 >= 209 && LA297_0 <= 210) || (LA297_0 >= 214 && LA297_0 <= 219) || LA297_0 == 221 || (LA297_0 >= 224 && LA297_0 <= 239) || (LA297_0 >= 241 && LA297_0 <= 244) || (LA297_0 >= 247 && LA297_0 <= 254) || LA297_0 == 256 || (LA297_0 >= 263 && LA297_0 <= 265) || (LA297_0 >= 274 && LA297_0 <= 277)) )
            	    {
            	        alt297 = 1;
            	    }


            	    switch (alt297) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1640:3: local_variable_initializer ';'
            			    {
            			    	PushFollow(FOLLOW_local_variable_initializer_in_local_variable_initializer_list15595);
            			    	local_variable_initializer1132 = local_variable_initializer();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_initializer1132.Tree);
            			    	char_literal1133=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_local_variable_initializer_list15597); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1133_tree = (object)adaptor.Create(char_literal1133);
            			    		adaptor.AddChild(root_0, char_literal1133_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt297 >= 1 ) goto loop297;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee297 =
            		                new EarlyExitException(297, input);
            		            throw eee297;
            	    }
            	    cnt297++;
            	} while (true);

            	loop297:
            		;	// Stops C# compiler whining that label 'loop297' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 316, local_variable_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer_list"

    public class expression_list_test_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "expression_list_test"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1641:8: public expression_list_test : ( expression ';' )+ ;
    public csParser.expression_list_test_return expression_list_test() // throws RecognitionException [1]
    {   
        csParser.expression_list_test_return retval = new csParser.expression_list_test_return();
        retval.start = input.LT(1);
        int expression_list_test_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1135 = null;
        csParser.expression_return expression1134 = default(csParser.expression_return);


        object char_literal1135_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 317) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1641:28: ( ( expression ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1642:2: ( expression ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1642:2: ( expression ';' )+
            	int cnt298 = 0;
            	do 
            	{
            	    int alt298 = 2;
            	    int LA298_0 = input.LA(1);

            	    if ( ((LA298_0 >= MONONOT && LA298_0 <= MONOTWIDDLE) || (LA298_0 >= OBJECT && LA298_0 <= THIS) || LA298_0 == LPAREN || LA298_0 == BIT_AND || (LA298_0 >= PLUS && LA298_0 <= MINUS) || LA298_0 == STAR || (LA298_0 >= BOOL && LA298_0 <= NULL) || (LA298_0 >= ELIF && LA298_0 <= UNDEF) || LA298_0 == 195 || LA298_0 == 197 || LA298_0 == 207 || (LA298_0 >= 209 && LA298_0 <= 210) || (LA298_0 >= 214 && LA298_0 <= 219) || LA298_0 == 221 || (LA298_0 >= 224 && LA298_0 <= 239) || (LA298_0 >= 241 && LA298_0 <= 244) || (LA298_0 >= 247 && LA298_0 <= 254) || LA298_0 == 256 || (LA298_0 >= 263 && LA298_0 <= 264) || (LA298_0 >= 274 && LA298_0 <= 277)) )
            	    {
            	        alt298 = 1;
            	    }


            	    switch (alt298) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1642:3: expression ';'
            			    {
            			    	PushFollow(FOLLOW_expression_in_expression_list_test15610);
            			    	expression1134 = expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1134.Tree);
            			    	char_literal1135=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_expression_list_test15612); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1135_tree = (object)adaptor.Create(char_literal1135);
            			    		adaptor.AddChild(root_0, char_literal1135_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt298 >= 1 ) goto loop298;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee298 =
            		                new EarlyExitException(298, input);
            		            throw eee298;
            	    }
            	    cnt298++;
            	} while (true);

            	loop298:
            		;	// Stops C# compiler whining that label 'loop298' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 317, expression_list_test_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression_list_test"

    public class unary_expression_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "unary_expression_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1643:8: public unary_expression_list : ( unary_expression ';' )+ ;
    public csParser.unary_expression_list_return unary_expression_list() // throws RecognitionException [1]
    {   
        csParser.unary_expression_list_return retval = new csParser.unary_expression_list_return();
        retval.start = input.LT(1);
        int unary_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1137 = null;
        csParser.unary_expression_return unary_expression1136 = default(csParser.unary_expression_return);


        object char_literal1137_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 318) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1643:29: ( ( unary_expression ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1644:2: ( unary_expression ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1644:2: ( unary_expression ';' )+
            	int cnt299 = 0;
            	do 
            	{
            	    int alt299 = 2;
            	    int LA299_0 = input.LA(1);

            	    if ( ((LA299_0 >= MONONOT && LA299_0 <= MONOTWIDDLE) || (LA299_0 >= OBJECT && LA299_0 <= THIS) || LA299_0 == LPAREN || LA299_0 == BIT_AND || (LA299_0 >= PLUS && LA299_0 <= MINUS) || LA299_0 == STAR || (LA299_0 >= BOOL && LA299_0 <= NULL) || (LA299_0 >= ELIF && LA299_0 <= UNDEF) || LA299_0 == 195 || LA299_0 == 197 || LA299_0 == 207 || (LA299_0 >= 209 && LA299_0 <= 210) || (LA299_0 >= 214 && LA299_0 <= 219) || LA299_0 == 221 || (LA299_0 >= 224 && LA299_0 <= 239) || (LA299_0 >= 241 && LA299_0 <= 244) || (LA299_0 >= 247 && LA299_0 <= 254) || LA299_0 == 256 || (LA299_0 >= 263 && LA299_0 <= 264) || (LA299_0 >= 274 && LA299_0 <= 277)) )
            	    {
            	        alt299 = 1;
            	    }


            	    switch (alt299) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1644:3: unary_expression ';'
            			    {
            			    	PushFollow(FOLLOW_unary_expression_in_unary_expression_list15625);
            			    	unary_expression1136 = unary_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression1136.Tree);
            			    	char_literal1137=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_unary_expression_list15627); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1137_tree = (object)adaptor.Create(char_literal1137);
            			    		adaptor.AddChild(root_0, char_literal1137_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt299 >= 1 ) goto loop299;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee299 =
            		                new EarlyExitException(299, input);
            		            throw eee299;
            	    }
            	    cnt299++;
            	} while (true);

            	loop299:
            		;	// Stops C# compiler whining that label 'loop299' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 318, unary_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unary_expression_list"

    public class invocation_expression_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "invocation_expression_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1645:8: public invocation_expression_list : ( invocation_expression ';' )+ ;
    public csParser.invocation_expression_list_return invocation_expression_list() // throws RecognitionException [1]
    {   
        csParser.invocation_expression_list_return retval = new csParser.invocation_expression_list_return();
        retval.start = input.LT(1);
        int invocation_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1139 = null;
        csParser.invocation_expression_return invocation_expression1138 = default(csParser.invocation_expression_return);


        object char_literal1139_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 319) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1645:34: ( ( invocation_expression ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1646:2: ( invocation_expression ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1646:2: ( invocation_expression ';' )+
            	int cnt300 = 0;
            	do 
            	{
            	    int alt300 = 2;
            	    int LA300_0 = input.LA(1);

            	    if ( ((LA300_0 >= OBJECT && LA300_0 <= THIS) || (LA300_0 >= BOOL && LA300_0 <= IDENTIFIER) || (LA300_0 >= ELIF && LA300_0 <= UNDEF) || LA300_0 == 195 || LA300_0 == 207 || LA300_0 == 219 || LA300_0 == 221 || (LA300_0 >= 224 && LA300_0 <= 239) || (LA300_0 >= 241 && LA300_0 <= 244) || (LA300_0 >= 247 && LA300_0 <= 254) || LA300_0 == 256 || (LA300_0 >= 263 && LA300_0 <= 264) || (LA300_0 >= 274 && LA300_0 <= 277)) )
            	    {
            	        alt300 = 1;
            	    }


            	    switch (alt300) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1646:3: invocation_expression ';'
            			    {
            			    	PushFollow(FOLLOW_invocation_expression_in_invocation_expression_list15640);
            			    	invocation_expression1138 = invocation_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_expression1138.Tree);
            			    	char_literal1139=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_invocation_expression_list15642); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1139_tree = (object)adaptor.Create(char_literal1139);
            			    		adaptor.AddChild(root_0, char_literal1139_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt300 >= 1 ) goto loop300;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee300 =
            		                new EarlyExitException(300, input);
            		            throw eee300;
            	    }
            	    cnt300++;
            	} while (true);

            	loop300:
            		;	// Stops C# compiler whining that label 'loop300' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 319, invocation_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "invocation_expression_list"

    public class primary_expression_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "primary_expression_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1647:8: public primary_expression_list : ( primary_expression ';' )+ ;
    public csParser.primary_expression_list_return primary_expression_list() // throws RecognitionException [1]
    {   
        csParser.primary_expression_list_return retval = new csParser.primary_expression_list_return();
        retval.start = input.LT(1);
        int primary_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1141 = null;
        csParser.primary_expression_return primary_expression1140 = default(csParser.primary_expression_return);


        object char_literal1141_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 320) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1647:31: ( ( primary_expression ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1648:2: ( primary_expression ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1648:2: ( primary_expression ';' )+
            	int cnt301 = 0;
            	do 
            	{
            	    int alt301 = 2;
            	    int LA301_0 = input.LA(1);

            	    if ( ((LA301_0 >= OBJECT && LA301_0 <= THIS) || LA301_0 == LPAREN || (LA301_0 >= BOOL && LA301_0 <= NULL) || (LA301_0 >= ELIF && LA301_0 <= UNDEF) || LA301_0 == 195 || LA301_0 == 197 || LA301_0 == 207 || (LA301_0 >= 214 && LA301_0 <= 219) || LA301_0 == 221 || (LA301_0 >= 224 && LA301_0 <= 239) || (LA301_0 >= 241 && LA301_0 <= 244) || (LA301_0 >= 247 && LA301_0 <= 254) || LA301_0 == 256 || (LA301_0 >= 263 && LA301_0 <= 264) || (LA301_0 >= 274 && LA301_0 <= 277)) )
            	    {
            	        alt301 = 1;
            	    }


            	    switch (alt301) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1648:3: primary_expression ';'
            			    {
            			    	PushFollow(FOLLOW_primary_expression_in_primary_expression_list15655);
            			    	primary_expression1140 = primary_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression1140.Tree);
            			    	char_literal1141=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_primary_expression_list15657); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1141_tree = (object)adaptor.Create(char_literal1141);
            			    		adaptor.AddChild(root_0, char_literal1141_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt301 >= 1 ) goto loop301;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee301 =
            		                new EarlyExitException(301, input);
            		            throw eee301;
            	    }
            	    cnt301++;
            	} while (true);

            	loop301:
            		;	// Stops C# compiler whining that label 'loop301' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 320, primary_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_list"

    public class non_assignment_expression_list_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "non_assignment_expression_list"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1649:8: public non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
    public csParser.non_assignment_expression_list_return non_assignment_expression_list() // throws RecognitionException [1]
    {   
        csParser.non_assignment_expression_list_return retval = new csParser.non_assignment_expression_list_return();
        retval.start = input.LT(1);
        int non_assignment_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1143 = null;
        csParser.non_assignment_expression_return non_assignment_expression1142 = default(csParser.non_assignment_expression_return);


        object char_literal1143_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 321) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1649:38: ( ( non_assignment_expression ';' )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1650:2: ( non_assignment_expression ';' )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1650:2: ( non_assignment_expression ';' )+
            	int cnt302 = 0;
            	do 
            	{
            	    int alt302 = 2;
            	    int LA302_0 = input.LA(1);

            	    if ( ((LA302_0 >= MONONOT && LA302_0 <= MONOTWIDDLE) || (LA302_0 >= OBJECT && LA302_0 <= THIS) || LA302_0 == LPAREN || LA302_0 == BIT_AND || (LA302_0 >= PLUS && LA302_0 <= MINUS) || LA302_0 == STAR || (LA302_0 >= BOOL && LA302_0 <= NULL) || (LA302_0 >= ELIF && LA302_0 <= UNDEF) || LA302_0 == 195 || LA302_0 == 197 || LA302_0 == 207 || (LA302_0 >= 209 && LA302_0 <= 210) || (LA302_0 >= 214 && LA302_0 <= 219) || LA302_0 == 221 || (LA302_0 >= 224 && LA302_0 <= 239) || (LA302_0 >= 241 && LA302_0 <= 244) || (LA302_0 >= 247 && LA302_0 <= 254) || LA302_0 == 256 || (LA302_0 >= 263 && LA302_0 <= 264) || (LA302_0 >= 274 && LA302_0 <= 277)) )
            	    {
            	        alt302 = 1;
            	    }


            	    switch (alt302) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1650:3: non_assignment_expression ';'
            			    {
            			    	PushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression_list15670);
            			    	non_assignment_expression1142 = non_assignment_expression();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_assignment_expression1142.Tree);
            			    	char_literal1143=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_non_assignment_expression_list15672); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1143_tree = (object)adaptor.Create(char_literal1143);
            			    		adaptor.AddChild(root_0, char_literal1143_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt302 >= 1 ) goto loop302;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee302 =
            		                new EarlyExitException(302, input);
            		            throw eee302;
            	    }
            	    cnt302++;
            	} while (true);

            	loop302:
            		;	// Stops C# compiler whining that label 'loop302' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 321, non_assignment_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression_list"

    public class method_declarations_return : ParserRuleReturnScope
    {
        internal object tree;
        public override object Tree { get { return tree; } }
    };

    // $ANTLR start "method_declarations"
    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1651:8: public method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
    public csParser.method_declarations_return method_declarations() // throws RecognitionException [1]
    {   
        csParser.method_declarations_return retval = new csParser.method_declarations_return();
        retval.start = input.LT(1);
        int method_declarations_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1145 = null;
        csParser.modifiers_return modifiers1144 = default(csParser.modifiers_return);

        csParser.type_return type1146 = default(csParser.type_return);

        csParser.method_declaration_return method_declaration1147 = default(csParser.method_declaration_return);


        object string_literal1145_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 322) ) 
    	    {
    	    	return retval; 
    	    }
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1651:27: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
            // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
            {
            	root_0 = (object)adaptor.Nil;

            	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
            	int cnt305 = 0;
            	do 
            	{
            	    int alt305 = 2;
            	    int LA305_0 = input.LA(1);

            	    if ( ((LA305_0 >= PUBLIC && LA305_0 <= STATIC) || LA305_0 == OBJECT || (LA305_0 >= BOOL && LA305_0 <= IDENTIFIER) || (LA305_0 >= ELIF && LA305_0 <= UNDEF) || (LA305_0 >= 194 && LA305_0 <= 195) || (LA305_0 >= 197 && LA305_0 <= 204) || LA305_0 == 206 || LA305_0 == 221 || (LA305_0 >= 224 && LA305_0 <= 239) || (LA305_0 >= 241 && LA305_0 <= 244) || (LA305_0 >= 247 && LA305_0 <= 254) || LA305_0 == 256 || (LA305_0 >= 263 && LA305_0 <= 264) || (LA305_0 >= 274 && LA305_0 <= 277)) )
            	    {
            	        alt305 = 1;
            	    }


            	    switch (alt305) 
            		{
            			case 1 :
            			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:3: ( modifiers )? ( 'void' | type ) method_declaration
            			    {
            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:3: ( modifiers )?
            			    	int alt303 = 2;
            			    	int LA303_0 = input.LA(1);

            			    	if ( ((LA303_0 >= PUBLIC && LA303_0 <= STATIC) || LA303_0 == 194 || (LA303_0 >= 197 && LA303_0 <= 204)) )
            			    	{
            			    	    alt303 = 1;
            			    	}
            			    	switch (alt303) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:3: modifiers
            			    	        {
            			    	        	PushFollow(FOLLOW_modifiers_in_method_declarations15685);
            			    	        	modifiers1144 = modifiers();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, modifiers1144.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:14: ( 'void' | type )
            			    	int alt304 = 2;
            			    	int LA304_0 = input.LA(1);

            			    	if ( (LA304_0 == 206) )
            			    	{
            			    	    int LA304_1 = input.LA(2);

            			    	    if ( (LA304_1 == STAR) )
            			    	    {
            			    	        alt304 = 2;
            			    	    }
            			    	    else if ( (LA304_1 == OBJECT || (LA304_1 >= BOOL && LA304_1 <= NULL) || (LA304_1 >= ELIF && LA304_1 <= UNDEF) || LA304_1 == 195 || LA304_1 == 221 || (LA304_1 >= 224 && LA304_1 <= 239) || (LA304_1 >= 241 && LA304_1 <= 244) || (LA304_1 >= 247 && LA304_1 <= 254) || LA304_1 == 256 || (LA304_1 >= 263 && LA304_1 <= 264) || (LA304_1 >= 274 && LA304_1 <= 277)) )
            			    	    {
            			    	        alt304 = 1;
            			    	    }
            			    	    else 
            			    	    {
            			    	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	        NoViableAltException nvae_d304s1 =
            			    	            new NoViableAltException("", 304, 1, input);

            			    	        throw nvae_d304s1;
            			    	    }
            			    	}
            			    	else if ( (LA304_0 == OBJECT || (LA304_0 >= BOOL && LA304_0 <= IDENTIFIER) || (LA304_0 >= ELIF && LA304_0 <= UNDEF) || LA304_0 == 195 || LA304_0 == 221 || (LA304_0 >= 224 && LA304_0 <= 239) || (LA304_0 >= 241 && LA304_0 <= 244) || (LA304_0 >= 247 && LA304_0 <= 254) || LA304_0 == 256 || (LA304_0 >= 263 && LA304_0 <= 264) || (LA304_0 >= 274 && LA304_0 <= 277)) )
            			    	{
            			    	    alt304 = 2;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    NoViableAltException nvae_d304s0 =
            			    	        new NoViableAltException("", 304, 0, input);

            			    	    throw nvae_d304s0;
            			    	}
            			    	switch (alt304) 
            			    	{
            			    	    case 1 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:15: 'void'
            			    	        {
            			    	        	string_literal1145=(IToken)Match(input,206,FOLLOW_206_in_method_declarations15689); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{string_literal1145_tree = (object)adaptor.Create(string_literal1145);
            			    	        		adaptor.AddChild(root_0, string_literal1145_tree);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1652:24: type
            			    	        {
            			    	        	PushFollow(FOLLOW_type_in_method_declarations15693);
            			    	        	type1146 = type();
            			    	        	state._fsp--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type1146.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_method_declaration_in_method_declarations15696);
            			    	method_declaration1147 = method_declaration();
            			    	state._fsp--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration1147.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt305 >= 1 ) goto loop305;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee305 =
            		                new EarlyExitException(305, input);
            		            throw eee305;
            	    }
            	    cnt305++;
            	} while (true);

            	loop305:
            		;	// Stops C# compiler whining that label 'loop305' has no statements


            }

            retval.stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 322, method_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_declarations"

    // $ANTLR start "synpred1_cs"
    public void synpred1_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:255:2: ( 'partial' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:255:3: 'partial'
        {
        	Match(input,196,FOLLOW_196_in_synpred1_cs2635); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred1_cs"

    // $ANTLR start "synpred2_cs"
    public void synpred2_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:286:11: ( member_name '(' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:286:12: member_name '('
        {
        	PushFollow(FOLLOW_member_name_in_synpred2_cs2909);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred2_cs2913); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred2_cs"

    // $ANTLR start "synpred3_cs"
    public void synpred3_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:287:8: ( member_name '{' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:287:9: member_name '{'
        {
        	PushFollow(FOLLOW_member_name_in_synpred3_cs2928);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred3_cs2932); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred3_cs"

    // $ANTLR start "synpred4_cs"
    public void synpred4_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:288:8: ( member_name '.' 'this' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:288:9: member_name '.' 'this'
        {
        	PushFollow(FOLLOW_member_name_in_synpred4_cs2947);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,DOT,FOLLOW_DOT_in_synpred4_cs2951); if (state.failed) return ;
        	Match(input,THIS,FOLLOW_THIS_in_synpred4_cs2955); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred4_cs"

    // $ANTLR start "synpred5_cs"
    public void synpred5_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:309:2: ( 'this' brackets )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:309:3: 'this' brackets
        {
        	Match(input,THIS,FOLLOW_THIS_in_synpred5_cs3103); if (state.failed) return ;
        	PushFollow(FOLLOW_brackets_in_synpred5_cs3108);
        	brackets();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred5_cs"

    // $ANTLR start "synpred6_cs"
    public void synpred6_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:310:4: ( 'base' brackets )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:310:5: 'base' brackets
        {
        	Match(input,207,FOLLOW_207_in_synpred6_cs3128); if (state.failed) return ;
        	PushFollow(FOLLOW_brackets_in_synpred6_cs3132);
        	brackets();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred6_cs"

    // $ANTLR start "synpred7_cs"
    public void synpred7_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:312:14: ( object_creation_expression ( '.' | '->' | '[' ) )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:312:15: object_creation_expression ( '.' | '->' | '[' )
        {
        	PushFollow(FOLLOW_object_creation_expression_in_synpred7_cs3168);
        	object_creation_expression();
        	state._fsp--;
        	if (state.failed) return ;
        	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}


        }
    }
    // $ANTLR end "synpred7_cs"

    // $ANTLR start "synpred8_cs"
    public void synpred8_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:318:7: ( object_creation_expression )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:318:8: object_creation_expression
        {
        	PushFollow(FOLLOW_object_creation_expression_in_synpred8_cs3250);
        	object_creation_expression();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred8_cs"

    // $ANTLR start "synpred9_cs"
    public void synpred9_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:330:4: ( identifier generic_argument_list )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:330:5: identifier generic_argument_list
        {
        	PushFollow(FOLLOW_identifier_in_synpred9_cs3378);
        	identifier();
        	state._fsp--;
        	if (state.failed) return ;
        	PushFollow(FOLLOW_generic_argument_list_in_synpred9_cs3383);
        	generic_argument_list();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred9_cs"

    // $ANTLR start "synpred10_cs"
    public void synpred10_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:370:4: ( '(' type ')' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:370:5: '(' type ')'
        {
        	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred10_cs3670); if (state.failed) return ;
        	PushFollow(FOLLOW_type_in_synpred10_cs3674);
        	type();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred10_cs3678); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred10_cs"

    // $ANTLR start "synpred11_cs"
    public void synpred11_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:396:2: ( array_creation_expression )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:396:3: array_creation_expression
        {
        	PushFollow(FOLLOW_array_creation_expression_in_synpred11_cs3919);
        	array_creation_expression();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred11_cs"

    // $ANTLR start "synpred12_cs"
    public void synpred12_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:405:11: ( arguments ( '[' | '.' | '->' ) )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:405:12: arguments ( '[' | '.' | '->' )
        {
        	PushFollow(FOLLOW_arguments_in_synpred12_cs4000);
        	arguments();
        	state._fsp--;
        	if (state.failed) return ;
        	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}


        }
    }
    // $ANTLR end "synpred12_cs"

    // $ANTLR start "synpred13_cs"
    public void synpred13_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:414:18: ( arguments ( '[' | '.' | '->' ) )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:414:19: arguments ( '[' | '.' | '->' )
        {
        	PushFollow(FOLLOW_arguments_in_synpred13_cs4126);
        	arguments();
        	state._fsp--;
        	if (state.failed) return ;
        	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}


        }
    }
    // $ANTLR end "synpred13_cs"

    // $ANTLR start "synpred14_cs"
    public void synpred14_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:482:20: ( unbound_type_name )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:482:21: unbound_type_name
        {
        	PushFollow(FOLLOW_unbound_type_name_in_synpred14_cs4682);
        	unbound_type_name();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred14_cs"

    // $ANTLR start "synpred15_cs"
    public void synpred15_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:492:5: ( generic_dimension_specifier '.' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:492:6: generic_dimension_specifier '.'
        {
        	PushFollow(FOLLOW_generic_dimension_specifier_in_synpred15_cs4742);
        	generic_dimension_specifier();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,DOT,FOLLOW_DOT_in_synpred15_cs4746); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred15_cs"

    // $ANTLR start "synpred16_cs"
    public void synpred16_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:515:2: ( identifier generic_argument_list )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:515:3: identifier generic_argument_list
        {
        	PushFollow(FOLLOW_identifier_in_synpred16_cs4892);
        	identifier();
        	state._fsp--;
        	if (state.failed) return ;
        	PushFollow(FOLLOW_generic_argument_list_in_synpred16_cs4896);
        	generic_argument_list();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred16_cs"

    // $ANTLR start "synpred17_cs"
    public void synpred17_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:523:4: ( identifier generic_argument_list )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:523:5: identifier generic_argument_list
        {
        	PushFollow(FOLLOW_identifier_in_synpred17_cs4945);
        	identifier();
        	state._fsp--;
        	if (state.failed) return ;
        	PushFollow(FOLLOW_generic_argument_list_in_synpred17_cs4949);
        	generic_argument_list();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred17_cs"

    // $ANTLR start "synpred18_cs"
    public void synpred18_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:543:7: ( '?' 'extends' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:543:8: '?' 'extends'
        {
        	Match(input,220,FOLLOW_220_in_synpred18_cs5074); if (state.failed) return ;
        	Match(input,221,FOLLOW_221_in_synpred18_cs5076); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred18_cs"

    // $ANTLR start "synpred19_cs"
    public void synpred19_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:4: ( ( predefined_type | type_name ) rank_specifiers )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:5: ( predefined_type | type_name ) rank_specifiers
        {
        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:5: ( predefined_type | type_name )
        	int alt306 = 2;
        	int LA306_0 = input.LA(1);

        	if ( (LA306_0 == OBJECT || (LA306_0 >= BOOL && LA306_0 <= DOUBLE) || (LA306_0 >= 251 && LA306_0 <= 254) || (LA306_0 >= 275 && LA306_0 <= 276)) )
        	{
        	    alt306 = 1;
        	}
        	else if ( (LA306_0 == IDENTIFIER || (LA306_0 >= ELIF && LA306_0 <= UNDEF) || LA306_0 == 195 || LA306_0 == 221 || (LA306_0 >= 224 && LA306_0 <= 239) || (LA306_0 >= 241 && LA306_0 <= 244) || (LA306_0 >= 247 && LA306_0 <= 250) || LA306_0 == 256 || (LA306_0 >= 263 && LA306_0 <= 264) || LA306_0 == 274 || LA306_0 == 277) )
        	{
        	    alt306 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d306s0 =
        	        new NoViableAltException("", 306, 0, input);

        	    throw nvae_d306s0;
        	}
        	switch (alt306) 
        	{
        	    case 1 :
        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:6: predefined_type
        	        {
        	        	PushFollow(FOLLOW_predefined_type_in_synpred19_cs5112);
        	        	predefined_type();
        	        	state._fsp--;
        	        	if (state.failed) return ;

        	        }
        	        break;
        	    case 2 :
        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:548:24: type_name
        	        {
        	        	PushFollow(FOLLOW_type_name_in_synpred19_cs5116);
        	        	type_name();
        	        	state._fsp--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	PushFollow(FOLLOW_rank_specifiers_in_synpred19_cs5120);
        	rank_specifiers();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred19_cs"

    // $ANTLR start "synpred20_cs"
    public void synpred20_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:5: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
        {
        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:5: ( predefined_type | type_name )
        	int alt307 = 2;
        	int LA307_0 = input.LA(1);

        	if ( (LA307_0 == OBJECT || (LA307_0 >= BOOL && LA307_0 <= DOUBLE) || (LA307_0 >= 251 && LA307_0 <= 254) || (LA307_0 >= 275 && LA307_0 <= 276)) )
        	{
        	    alt307 = 1;
        	}
        	else if ( (LA307_0 == IDENTIFIER || (LA307_0 >= ELIF && LA307_0 <= UNDEF) || LA307_0 == 195 || LA307_0 == 221 || (LA307_0 >= 224 && LA307_0 <= 239) || (LA307_0 >= 241 && LA307_0 <= 244) || (LA307_0 >= 247 && LA307_0 <= 250) || LA307_0 == 256 || (LA307_0 >= 263 && LA307_0 <= 264) || LA307_0 == 274 || LA307_0 == 277) )
        	{
        	    alt307 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d307s0 =
        	        new NoViableAltException("", 307, 0, input);

        	    throw nvae_d307s0;
        	}
        	switch (alt307) 
        	{
        	    case 1 :
        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:6: predefined_type
        	        {
        	        	PushFollow(FOLLOW_predefined_type_in_synpred20_cs5147);
        	        	predefined_type();
        	        	state._fsp--;
        	        	if (state.failed) return ;

        	        }
        	        break;
        	    case 2 :
        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:24: type_name
        	        {
        	        	PushFollow(FOLLOW_type_name_in_synpred20_cs5151);
        	        	type_name();
        	        	state._fsp--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:36: ( ( '*' )+ | '?' )
        	int alt309 = 2;
        	int LA309_0 = input.LA(1);

        	if ( (LA309_0 == STAR) )
        	{
        	    alt309 = 1;
        	}
        	else if ( (LA309_0 == 220) )
        	{
        	    alt309 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d309s0 =
        	        new NoViableAltException("", 309, 0, input);

        	    throw nvae_d309s0;
        	}
        	switch (alt309) 
        	{
        	    case 1 :
        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:37: ( '*' )+
        	        {
        	        	// /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:37: ( '*' )+
        	        	int cnt308 = 0;
        	        	do 
        	        	{
        	        	    int alt308 = 2;
        	        	    int LA308_0 = input.LA(1);

        	        	    if ( (LA308_0 == STAR) )
        	        	    {
        	        	        alt308 = 1;
        	        	    }


        	        	    switch (alt308) 
        	        		{
        	        			case 1 :
        	        			    // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:37: '*'
        	        			    {
        	        			    	Match(input,STAR,FOLLOW_STAR_in_synpred20_cs5156); if (state.failed) return ;

        	        			    }
        	        			    break;

        	        			default:
        	        			    if ( cnt308 >= 1 ) goto loop308;
        	        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	        		            EarlyExitException eee308 =
        	        		                new EarlyExitException(308, input);
        	        		            throw eee308;
        	        	    }
        	        	    cnt308++;
        	        	} while (true);

        	        	loop308:
        	        		;	// Stops C# compiler whining that label 'loop308' has no statements


        	        }
        	        break;
        	    case 2 :
        	        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:549:44: '?'
        	        {
        	        	Match(input,220,FOLLOW_220_in_synpred20_cs5161); if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred20_cs"

    // $ANTLR start "synpred21_cs"
    public void synpred21_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:585:2: ( unary_expression assignment_operator )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:585:3: unary_expression assignment_operator
        {
        	PushFollow(FOLLOW_unary_expression_in_synpred21_cs5361);
        	unary_expression();
        	state._fsp--;
        	if (state.failed) return ;
        	PushFollow(FOLLOW_assignment_operator_in_synpred21_cs5365);
        	assignment_operator();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred21_cs"

    // $ANTLR start "synpred22_cs"
    public void synpred22_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:594:2: ( cast_expression )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:594:3: cast_expression
        {
        	PushFollow(FOLLOW_cast_expression_in_synpred22_cs5429);
        	cast_expression();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred22_cs"

    // $ANTLR start "synpred23_cs"
    public void synpred23_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:620:2: ( anonymous_function_signature '=>' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:620:3: anonymous_function_signature '=>'
        {
        	PushFollow(FOLLOW_anonymous_function_signature_in_synpred23_cs5649);
        	anonymous_function_signature();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,LAMBDA,FOLLOW_LAMBDA_in_synpred23_cs5653); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred23_cs"

    // $ANTLR start "synpred24_cs"
    public void synpred24_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:621:4: ( query_expression )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:621:5: query_expression
        {
        	PushFollow(FOLLOW_query_expression_in_synpred24_cs5664);
        	query_expression();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred24_cs"

    // $ANTLR start "synpred25_cs"
    public void synpred25_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:685:50: ( 'into' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:685:51: 'into'
        {
        	Match(input,224,FOLLOW_224_in_synpred25_cs6125); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred25_cs"

    // $ANTLR start "synpred26_cs"
    public void synpred26_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:752:32: ( ',' identifier '=' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:752:33: ',' identifier '='
        {
        	Match(input,COMMA,FOLLOW_COMMA_in_synpred26_cs6682); if (state.failed) return ;
        	PushFollow(FOLLOW_identifier_in_synpred26_cs6686);
        	identifier();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred26_cs6690); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred26_cs"

    // $ANTLR start "synpred27_cs"
    public void synpred27_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:840:4: ( member_name '{' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:840:5: member_name '{'
        {
        	PushFollow(FOLLOW_member_name_in_synpred27_cs7315);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred27_cs7319); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred27_cs"

    // $ANTLR start "synpred28_cs"
    public void synpred28_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:947:14: ( member_name '(' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:947:15: member_name '('
        {
        	PushFollow(FOLLOW_member_name_in_synpred28_cs8244);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred28_cs8248); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred28_cs"

    // $ANTLR start "synpred29_cs"
    public void synpred29_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:948:14: ( member_name '{' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:948:15: member_name '{'
        {
        	PushFollow(FOLLOW_member_name_in_synpred29_cs8269);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred29_cs8273); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred29_cs"

    // $ANTLR start "synpred30_cs"
    public void synpred30_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:999:11: ( member_name '(' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:999:12: member_name '('
        {
        	PushFollow(FOLLOW_member_name_in_synpred30_cs8747);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,LPAREN,FOLLOW_LPAREN_in_synpred30_cs8751); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred30_cs"

    // $ANTLR start "synpred31_cs"
    public void synpred31_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1000:8: ( member_name '{' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1000:9: member_name '{'
        {
        	PushFollow(FOLLOW_member_name_in_synpred31_cs8766);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred31_cs8770); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred31_cs"

    // $ANTLR start "synpred32_cs"
    public void synpred32_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1001:8: ( member_name '.' 'this' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1001:9: member_name '.' 'this'
        {
        	PushFollow(FOLLOW_member_name_in_synpred32_cs8785);
        	member_name();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,DOT,FOLLOW_DOT_in_synpred32_cs8789); if (state.failed) return ;
        	Match(input,THIS,FOLLOW_THIS_in_synpred32_cs8793); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred32_cs"

    // $ANTLR start "synpred33_cs"
    public void synpred33_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1073:23: ( arguments ( '[' | '.' | '->' ) )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1073:24: arguments ( '[' | '.' | '->' )
        {
        	PushFollow(FOLLOW_arguments_in_synpred33_cs9394);
        	arguments();
        	state._fsp--;
        	if (state.failed) return ;
        	if ( input.LA(1) == OPEN_BRACKET || (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}


        }
    }
    // $ANTLR end "synpred33_cs"

    // $ANTLR start "synpred34_cs"
    public void synpred34_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1077:4: ( identifier generic_argument_list )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1077:5: identifier generic_argument_list
        {
        	PushFollow(FOLLOW_identifier_in_synpred34_cs9447);
        	identifier();
        	state._fsp--;
        	if (state.failed) return ;
        	PushFollow(FOLLOW_generic_argument_list_in_synpred34_cs9452);
        	generic_argument_list();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred34_cs"

    // $ANTLR start "synpred35_cs"
    public void synpred35_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1090:2: ( declaration_statement )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1090:3: declaration_statement
        {
        	PushFollow(FOLLOW_declaration_statement_in_synpred35_cs9537);
        	declaration_statement();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred35_cs"

    // $ANTLR start "synpred36_cs"
    public void synpred36_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1091:4: ( identifier ':' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1091:5: identifier ':'
        {
        	PushFollow(FOLLOW_identifier_in_synpred36_cs9548);
        	identifier();
        	state._fsp--;
        	if (state.failed) return ;
        	Match(input,211,FOLLOW_211_in_synpred36_cs9552); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred36_cs"

    // $ANTLR start "synpred37_cs"
    public void synpred37_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1128:2: ( 'var' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1128:3: 'var'
        {
        	Match(input,263,FOLLOW_263_in_synpred37_cs9796); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred37_cs"

    // $ANTLR start "synpred38_cs"
    public void synpred38_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1129:4: ( 'dynamic' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1129:5: 'dynamic'
        {
        	Match(input,264,FOLLOW_264_in_synpred38_cs9807); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred38_cs"

    // $ANTLR start "synpred39_cs"
    public void synpred39_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1155:62: ( 'else' )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1155:63: 'else'
        {
        	Match(input,ELSE,FOLLOW_ELSE_in_synpred39_cs9992); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred39_cs"

    // $ANTLR start "synpred40_cs"
    public void synpred40_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1184:2: ( local_variable_declaration )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1184:3: local_variable_declaration
        {
        	PushFollow(FOLLOW_local_variable_declaration_in_synpred40_cs10267);
        	local_variable_declaration();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred40_cs"

    // $ANTLR start "synpred41_cs"
    public void synpred41_cs_fragment() {
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1239:2: ( local_variable_declaration )
        // /Users/benclark/Projects/cs2j/CSharpTranslator/src/CSharpParser/cs.g:1239:3: local_variable_declaration
        {
        	PushFollow(FOLLOW_local_variable_declaration_in_synpred41_cs10804);
        	local_variable_declaration();
        	state._fsp--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred41_cs"

    // Delegated rules

   	public bool synpred28_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred28_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred30_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred30_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred9_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred9_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred11_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred11_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred34_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred34_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred32_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred32_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred18_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred18_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred36_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred36_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred38_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred38_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred2_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred2_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred17_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred17_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred15_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred15_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred40_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred40_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred13_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred13_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred8_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred8_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred21_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred21_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred6_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred6_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred23_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred23_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred4_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred4_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred25_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred25_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred27_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred27_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred29_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred29_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred31_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred31_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred10_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred10_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred35_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred35_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred12_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred12_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred33_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred33_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred19_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred19_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred37_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred37_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred39_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred39_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred16_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred16_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred41_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred41_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred1_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred1_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred3_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred3_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred14_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred14_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred20_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred20_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred7_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred7_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred24_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred24_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred5_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred5_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred22_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred22_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred26_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred26_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}


   	protected DFA21 dfa21;
   	protected DFA20 dfa20;
   	protected DFA27 dfa27;
   	protected DFA29 dfa29;
   	protected DFA38 dfa38;
   	protected DFA46 dfa46;
   	protected DFA50 dfa50;
   	protected DFA74 dfa74;
   	protected DFA75 dfa75;
   	protected DFA106 dfa106;
   	protected DFA108 dfa108;
   	protected DFA110 dfa110;
   	protected DFA239 dfa239;
   	protected DFA238 dfa238;
   	protected DFA242 dfa242;
   	protected DFA250 dfa250;
   	protected DFA251 dfa251;
   	protected DFA268 dfa268;
   	protected DFA281 dfa281;
	private void InitializeCyclicDFAs()
	{
    	this.dfa21 = new DFA21(this);
    	this.dfa20 = new DFA20(this);
    	this.dfa27 = new DFA27(this);
    	this.dfa29 = new DFA29(this);
    	this.dfa38 = new DFA38(this);
    	this.dfa46 = new DFA46(this);
    	this.dfa50 = new DFA50(this);
    	this.dfa74 = new DFA74(this);
    	this.dfa75 = new DFA75(this);
    	this.dfa106 = new DFA106(this);
    	this.dfa108 = new DFA108(this);
    	this.dfa110 = new DFA110(this);
    	this.dfa239 = new DFA239(this);
    	this.dfa238 = new DFA238(this);
    	this.dfa242 = new DFA242(this);
    	this.dfa250 = new DFA250(this);
    	this.dfa251 = new DFA251(this);
    	this.dfa268 = new DFA268(this);
    	this.dfa281 = new DFA281(this);
	    this.dfa20.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA20_SpecialStateTransition);
	    this.dfa27.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA27_SpecialStateTransition);
	    this.dfa29.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA29_SpecialStateTransition);
	    this.dfa38.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA38_SpecialStateTransition);
	    this.dfa46.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA46_SpecialStateTransition);
	    this.dfa74.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA74_SpecialStateTransition);
	    this.dfa75.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA75_SpecialStateTransition);
	    this.dfa106.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA106_SpecialStateTransition);
	    this.dfa108.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA108_SpecialStateTransition);
	    this.dfa110.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA110_SpecialStateTransition);
	    this.dfa238.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA238_SpecialStateTransition);
	    this.dfa250.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA250_SpecialStateTransition);
	    this.dfa268.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA268_SpecialStateTransition);
	    this.dfa281.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA281_SpecialStateTransition);
	}

    const string DFA21_eotS =
        "\x11\uffff";
    const string DFA21_eofS =
        "\x11\uffff";
    const string DFA21_minS =
        "\x01\x14\x04\uffff\x01\x41\x01\uffff\x02\x41\x08\uffff";
    const string DFA21_maxS =
        "\x01\u0115\x04\uffff\x01\u0115\x01\uffff\x02\u0115\x08\uffff";
    const string DFA21_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\uffff\x01\x06\x02"+
        "\uffff\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0d\x01\x05\x01"+
        "\x0c";
    const string DFA21_specialS =
        "\x11\uffff}>";
    static readonly string[] DFA21_transitionS = {
            "\x01\x0b\x10\uffff\x01\x0e\x1b\uffff\x01\x06\x40\uffff\x08\x06"+
            "\x01\x07\x0d\uffff\x04\x08\x27\uffff\x01\x08\x01\x03\x08\uffff"+
            "\x01\x01\x01\x05\x0b\uffff\x01\x0c\x02\uffff\x01\x08\x02\uffff"+
            "\x10\x08\x01\x02\x04\x08\x01\x09\x01\uffff\x04\x08\x04\x06\x01"+
            "\x0a\x01\x08\x01\uffff\x01\x04\x01\uffff\x02\x0d\x01\uffff\x02"+
            "\x08\x09\uffff\x01\x08\x02\x06\x01\x08",
            "",
            "",
            "",
            "",
            "\x01\x0f\x2b\uffff\x01\x06\x14\uffff\x12\x0f\x04\uffff\x04"+
            "\x0f\x27\uffff\x01\x0f\x19\uffff\x01\x0f\x02\uffff\x10\x0f\x01"+
            "\uffff\x04\x0f\x02\uffff\x08\x0f\x01\uffff\x01\x0f\x06\uffff"+
            "\x02\x0f\x09\uffff\x04\x0f",
            "",
            "\x02\x06\x02\uffff\x01\x06\x03\uffff\x01\x10\x18\uffff\x01"+
            "\x06\x0a\uffff\x01\x06\x14\uffff\x13\x06\x03\uffff\x04\x06\x27"+
            "\uffff\x01\x06\x0c\uffff\x01\x06\x0b\uffff\x02\x06\x02\uffff"+
            "\x10\x06\x01\uffff\x04\x06\x02\uffff\x08\x06\x01\uffff\x01\x06"+
            "\x02\uffff\x01\x06\x03\uffff\x02\x06\x09\uffff\x04\x06",
            "\x02\x06\x02\uffff\x01\x06\x03\uffff\x01\x10\x18\uffff\x01"+
            "\x06\x0a\uffff\x01\x06\x14\uffff\x13\x06\x03\uffff\x04\x06\x27"+
            "\uffff\x01\x06\x0c\uffff\x01\x06\x0b\uffff\x02\x06\x02\uffff"+
            "\x10\x06\x01\uffff\x04\x06\x02\uffff\x08\x06\x01\uffff\x01\x06"+
            "\x02\uffff\x01\x06\x03\uffff\x02\x06\x09\uffff\x04\x06",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
    static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
    static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
    static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
    static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
    static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
    static readonly short[][] DFA21_transition = DFA.UnpackEncodedStringArray(DFA21_transitionS);

    protected class DFA21 : DFA
    {
        public DFA21(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;

        }

        override public string Description
        {
            get { return "278:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )"; }
        }

    }

    const string DFA20_eotS =
        "\x0b\uffff";
    const string DFA20_eofS =
        "\x0b\uffff";
    const string DFA20_minS =
        "\x01\x41\x04\x00\x06\uffff";
    const string DFA20_maxS =
        "\x01\u0115\x04\x00\x06\uffff";
    const string DFA20_acceptS =
        "\x05\uffff\x01\x04\x01\x06\x01\x01\x01\x02\x01\x03\x01\x05";
    const string DFA20_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x06\uffff}>";
    static readonly string[] DFA20_transitionS = {
            "\x01\x01\x01\x05\x3f\uffff\x08\x01\x01\x02\x09\x04\x04\uffff"+
            "\x04\x03\x27\uffff\x01\x03\x19\uffff\x01\x03\x02\uffff\x10\x03"+
            "\x01\uffff\x04\x03\x02\uffff\x04\x03\x04\x01\x01\uffff\x01\x03"+
            "\x02\uffff\x01\x06\x03\uffff\x02\x03\x09\uffff\x01\x03\x02\x01"+
            "\x01\x03",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
    static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
    static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
    static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
    static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
    static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
    static readonly short[][] DFA20_transition = DFA.UnpackEncodedStringArray(DFA20_transitionS);

    protected class DFA20 : DFA
    {
        public DFA20(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;

        }

        override public string Description
        {
            get { return "286:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )"; }
        }

    }


    protected internal int DFA20_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA20_1 = input.LA(1);

                   	 
                   	int index20_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_cs()) ) { s = 7; }

                   	else if ( (synpred3_cs()) ) { s = 8; }

                   	 
                   	input.Seek(index20_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA20_2 = input.LA(1);

                   	 
                   	int index20_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_cs()) ) { s = 7; }

                   	else if ( (synpred3_cs()) ) { s = 8; }

                   	else if ( (synpred4_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index20_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA20_3 = input.LA(1);

                   	 
                   	int index20_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_cs()) ) { s = 7; }

                   	else if ( (synpred3_cs()) ) { s = 8; }

                   	else if ( (synpred4_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index20_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA20_4 = input.LA(1);

                   	 
                   	int index20_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_cs()) ) { s = 7; }

                   	else if ( (synpred3_cs()) ) { s = 8; }

                   	 
                   	input.Seek(index20_4);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae20 =
            new NoViableAltException(dfa.Description, 20, _s, input);
        dfa.Error(nvae20);
        throw nvae20;
    }
    const string DFA27_eotS =
        "\x11\uffff";
    const string DFA27_eofS =
        "\x11\uffff";
    const string DFA27_minS =
        "\x01\x41\x02\x00\x0e\uffff";
    const string DFA27_maxS =
        "\x01\u0115\x02\x00\x0e\uffff";
    const string DFA27_acceptS =
        "\x03\uffff\x01\x03\x05\uffff\x01\x04\x01\x05\x01\x06\x01\x07\x01"+
        "\x08\x01\x09\x01\x01\x01\x02";
    const string DFA27_specialS =
        "\x01\uffff\x01\x00\x01\x01\x0e\uffff}>";
    static readonly string[] DFA27_transitionS = {
            "\x01\x03\x01\x01\x06\uffff\x01\x03\x38\uffff\x12\x03\x04\uffff"+
            "\x04\x03\x27\uffff\x01\x03\x01\uffff\x01\x09\x09\uffff\x01\x02"+
            "\x06\uffff\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x01\x03\x01"+
            "\uffff\x01\x03\x02\uffff\x10\x03\x01\uffff\x04\x03\x02\uffff"+
            "\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09\uffff\x04\x03",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA27_eot = DFA.UnpackEncodedString(DFA27_eotS);
    static readonly short[] DFA27_eof = DFA.UnpackEncodedString(DFA27_eofS);
    static readonly char[] DFA27_min = DFA.UnpackEncodedStringToUnsignedChars(DFA27_minS);
    static readonly char[] DFA27_max = DFA.UnpackEncodedStringToUnsignedChars(DFA27_maxS);
    static readonly short[] DFA27_accept = DFA.UnpackEncodedString(DFA27_acceptS);
    static readonly short[] DFA27_special = DFA.UnpackEncodedString(DFA27_specialS);
    static readonly short[][] DFA27_transition = DFA.UnpackEncodedStringArray(DFA27_transitionS);

    protected class DFA27 : DFA
    {
        public DFA27(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;

        }

        override public string Description
        {
            get { return "308:8: public primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'base' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( object_creation_expression )=> object_creation_expression | delegate_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );"; }
        }

    }


    protected internal int DFA27_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA27_1 = input.LA(1);

                   	 
                   	int index27_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred5_cs()) ) { s = 15; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index27_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA27_2 = input.LA(1);

                   	 
                   	int index27_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred6_cs()) ) { s = 16; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index27_2);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae27 =
            new NoViableAltException(dfa.Description, 27, _s, input);
        dfa.Error(nvae27);
        throw nvae27;
    }
    const string DFA29_eotS =
        "\x0b\uffff";
    const string DFA29_eofS =
        "\x0b\uffff";
    const string DFA29_minS =
        "\x01\x41\x01\uffff\x02\x00\x07\uffff";
    const string DFA29_maxS =
        "\x01\u0115\x01\uffff\x02\x00\x07\uffff";
    const string DFA29_acceptS =
        "\x01\uffff\x01\x01\x02\uffff\x01\x04\x01\x05\x01\x06\x01\x07\x01"+
        "\x08\x01\x02\x01\x03";
    const string DFA29_specialS =
        "\x02\uffff\x01\x00\x01\x01\x07\uffff}>";
    static readonly string[] DFA29_transitionS = {
            "\x01\x01\x01\x04\x06\uffff\x01\x06\x38\uffff\x08\x01\x01\x02"+
            "\x09\x08\x04\uffff\x04\x03\x27\uffff\x01\x03\x0b\uffff\x01\x05"+
            "\x0b\uffff\x01\x07\x01\uffff\x01\x03\x02\uffff\x10\x03\x01\uffff"+
            "\x04\x03\x02\uffff\x04\x03\x04\x01\x01\uffff\x01\x03\x06\uffff"+
            "\x02\x03\x09\uffff\x01\x03\x02\x01\x01\x03",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
    static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
    static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
    static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
    static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
    static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
    static readonly short[][] DFA29_transition = DFA.UnpackEncodedStringArray(DFA29_transitionS);

    protected class DFA29 : DFA
    {
        public DFA29(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;

        }

        override public string Description
        {
            get { return "328:8: public primary_expression_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );"; }
        }

    }


    protected internal int DFA29_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA29_2 = input.LA(1);

                   	 
                   	int index29_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred9_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index29_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA29_3 = input.LA(1);

                   	 
                   	int index29_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred9_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index29_3);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae29 =
            new NoViableAltException(dfa.Description, 29, _s, input);
        dfa.Error(nvae29);
        throw nvae29;
    }
    const string DFA38_eotS =
        "\x19\uffff";
    const string DFA38_eofS =
        "\x19\uffff";
    const string DFA38_minS =
        "\x01\x24\x01\x00\x17\uffff";
    const string DFA38_maxS =
        "\x01\u0115\x01\x00\x17\uffff";
    const string DFA38_acceptS =
        "\x02\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA38_specialS =
        "\x01\uffff\x01\x00\x17\uffff}>";
    static readonly string[] DFA38_transitionS = {
            "\x02\x02\x1b\uffff\x02\x02\x06\uffff\x01\x01\x15\uffff\x01\x02"+
            "\x09\uffff\x02\x02\x02\uffff\x01\x02\x14\uffff\x12\x02\x04\uffff"+
            "\x04\x02\x27\uffff\x01\x02\x01\uffff\x01\x02\x09\uffff\x01\x02"+
            "\x01\uffff\x02\x02\x03\uffff\x06\x02\x01\uffff\x01\x02\x02\uffff"+
            "\x10\x02\x01\uffff\x04\x02\x02\uffff\x08\x02\x01\uffff\x01\x02"+
            "\x06\uffff\x02\x02\x09\uffff\x04\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
    static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
    static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
    static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
    static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
    static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
    static readonly short[][] DFA38_transition = DFA.UnpackEncodedStringArray(DFA38_transitionS);

    protected class DFA38 : DFA
    {
        public DFA38(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;

        }

        override public string Description
        {
            get { return "370:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )"; }
        }

    }


    protected internal int DFA38_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA38_1 = input.LA(1);

                   	 
                   	int index38_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred10_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index38_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae38 =
            new NoViableAltException(dfa.Description, 38, _s, input);
        dfa.Error(nvae38);
        throw nvae38;
    }
    const string DFA46_eotS =
        "\x10\uffff";
    const string DFA46_eofS =
        "\x10\uffff";
    const string DFA46_minS =
        "\x01\x41\x01\x00\x0e\uffff";
    const string DFA46_maxS =
        "\x01\u0115\x01\x00\x0e\uffff";
    const string DFA46_acceptS =
        "\x02\uffff\x01\x02\x0c\uffff\x01\x01";
    const string DFA46_specialS =
        "\x01\uffff\x01\x00\x0e\uffff}>";
    static readonly string[] DFA46_transitionS = {
            "\x02\x02\x06\uffff\x01\x02\x38\uffff\x12\x02\x04\uffff\x04\x02"+
            "\x27\uffff\x01\x02\x01\uffff\x01\x01\x09\uffff\x01\x02\x06\uffff"+
            "\x06\x02\x01\uffff\x01\x02\x02\uffff\x10\x02\x01\uffff\x04\x02"+
            "\x02\uffff\x08\x02\x01\uffff\x01\x02\x06\uffff\x02\x02\x09\uffff"+
            "\x04\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
    static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
    static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
    static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
    static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
    static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
    static readonly short[][] DFA46_transition = DFA.UnpackEncodedStringArray(DFA46_transitionS);

    protected class DFA46 : DFA
    {
        public DFA46(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;

        }

        override public string Description
        {
            get { return "395:8: public primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );"; }
        }

    }


    protected internal int DFA46_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA46_1 = input.LA(1);

                   	 
                   	int index46_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred11_cs()) ) { s = 15; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index46_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae46 =
            new NoViableAltException(dfa.Description, 46, _s, input);
        dfa.Error(nvae46);
        throw nvae46;
    }
    const string DFA50_eotS =
        "\x05\uffff";
    const string DFA50_eofS =
        "\x01\x02\x03\uffff\x01\x02";
    const string DFA50_minS =
        "\x01\x45\x01\x24\x02\uffff\x01\x45";
    const string DFA50_maxS =
        "\x02\u0115\x02\uffff\x01\u0115";
    const string DFA50_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x01\uffff";
    const string DFA50_specialS =
        "\x05\uffff}>";
    static readonly string[] DFA50_transitionS = {
            "\x01\x01\x03\x02\x01\x03\x01\x02\x01\uffff\x0a\x02\x05\uffff"+
            "\x0b\x02\x03\uffff\x05\x02\x01\uffff\x01\x02\x1a\uffff\x01\x02"+
            "\x09\uffff\x02\x03\x01\x02\x01\uffff\x06\x02\x25\uffff\x01\x02"+
            "\x0f\uffff\x01\x02\x08\uffff\x14\x02\x01\uffff\x04\x02\x02\uffff"+
            "\x04\x02\x05\uffff\x01\x02\x06\uffff\x02\x02\x09\uffff\x01\x02"+
            "\x02\uffff\x01\x02",
            "\x02\x03\x1b\uffff\x02\x03\x03\uffff\x01\x04\x02\uffff\x01"+
            "\x03\x15\uffff\x01\x03\x09\uffff\x02\x03\x02\uffff\x01\x03\x01"+
            "\uffff\x01\x02\x12\uffff\x12\x03\x04\uffff\x04\x03\x27\uffff"+
            "\x01\x03\x01\uffff\x01\x03\x09\uffff\x01\x03\x01\uffff\x02\x03"+
            "\x03\uffff\x06\x03\x01\uffff\x01\x03\x02\uffff\x10\x03\x01\uffff"+
            "\x04\x03\x02\uffff\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03"+
            "\x09\uffff\x04\x03",
            "",
            "",
            "\x01\x01\x03\x02\x01\x03\x01\x02\x01\uffff\x0a\x02\x05\uffff"+
            "\x0b\x02\x03\uffff\x05\x02\x01\uffff\x01\x02\x1a\uffff\x01\x02"+
            "\x09\uffff\x02\x03\x01\x02\x01\uffff\x06\x02\x25\uffff\x01\x02"+
            "\x0f\uffff\x01\x02\x08\uffff\x14\x02\x01\uffff\x04\x02\x02\uffff"+
            "\x04\x02\x05\uffff\x01\x02\x06\uffff\x02\x02\x09\uffff\x01\x02"+
            "\x02\uffff\x01\x02"
    };

    static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
    static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
    static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
    static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
    static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
    static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
    static readonly short[][] DFA50_transition = DFA.UnpackEncodedStringArray(DFA50_transitionS);

    protected class DFA50 : DFA
    {
        public DFA50(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;

        }

        override public string Description
        {
            get { return "403:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )"; }
        }

    }

    const string DFA74_eotS =
        "\x11\uffff";
    const string DFA74_eofS =
        "\x11\uffff";
    const string DFA74_minS =
        "\x01\x41\x02\x45\x01\uffff\x01\x6d\x02\u008a\x01\x41\x01\uffff\x04"+
        "\x45\x02\uffff\x02\x41";
    const string DFA74_maxS =
        "\x01\u0115\x02\u00dc\x01\uffff\x01\u009d\x03\u0115\x01\uffff\x04"+
        "\u00dc\x02\uffff\x02\u0115";
    const string DFA74_acceptS =
        "\x03\uffff\x01\x02\x04\uffff\x01\x03\x04\uffff\x02\x01\x02\uffff";
    const string DFA74_specialS =
        "\x07\uffff\x01\x00\x07\uffff\x01\x01\x01\x02}>";
    static readonly string[] DFA74_transitionS = {
            "\x01\x03\x40\uffff\x08\x03\x01\x01\x0d\uffff\x04\x02\x27\uffff"+
            "\x01\x02\x0a\uffff\x01\x04\x0e\uffff\x01\x02\x02\uffff\x10\x02"+
            "\x01\uffff\x04\x02\x02\uffff\x04\x02\x04\x03\x01\uffff\x01\x02"+
            "\x06\uffff\x02\x02\x09\uffff\x01\x02\x02\x03\x01\x02",
            "\x01\x03\x1c\uffff\x01\x07\x0a\uffff\x01\x03\x26\uffff\x01"+
            "\x06\x08\uffff\x01\x03\x32\uffff\x01\x05\x0b\uffff\x01\x03",
            "\x01\x03\x1c\uffff\x01\x07\x0a\uffff\x01\x03\x26\uffff\x01"+
            "\x06\x08\uffff\x01\x03\x32\uffff\x01\x05\x0b\uffff\x01\x03",
            "",
            "\x01\x03\x2f\uffff\x01\x08",
            "\x01\x09\x0d\uffff\x04\x0a\x27\uffff\x01\x0a\x19\uffff\x01"+
            "\x0a\x02\uffff\x10\x0a\x01\uffff\x04\x0a\x02\uffff\x04\x0a\x05"+
            "\uffff\x01\x0a\x06\uffff\x02\x0a\x09\uffff\x01\x0a\x02\uffff"+
            "\x01\x0a",
            "\x01\x0b\x0d\uffff\x04\x0c\x27\uffff\x01\x0c\x19\uffff\x01"+
            "\x0c\x02\uffff\x10\x0c\x01\uffff\x04\x0c\x02\uffff\x04\x0c\x05"+
            "\uffff\x01\x0c\x06\uffff\x02\x0c\x09\uffff\x01\x0c\x02\uffff"+
            "\x01\x0c",
            "\x01\x03\x2d\uffff\x01\x0d\x12\uffff\x09\x03\x0b\uffff\x01"+
            "\x0e\x01\uffff\x04\x03\x27\uffff\x01\x03\x0a\uffff\x01\x03\x0d"+
            "\uffff\x02\x03\x02\uffff\x10\x03\x01\uffff\x04\x03\x02\uffff"+
            "\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09\uffff\x04\x03",
            "",
            "\x01\x03\x1c\uffff\x01\x0f\x0a\uffff\x01\x03\x26\uffff\x01"+
            "\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
            "\x01\x03\x1c\uffff\x01\x0f\x0a\uffff\x01\x03\x26\uffff\x01"+
            "\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
            "\x01\x03\x1c\uffff\x01\x10\x0a\uffff\x01\x03\x26\uffff\x01"+
            "\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
            "\x01\x03\x1c\uffff\x01\x10\x0a\uffff\x01\x03\x26\uffff\x01"+
            "\x06\x08\uffff\x01\x03\x3e\uffff\x01\x03",
            "",
            "",
            "\x01\x03\x2d\uffff\x01\x0d\x12\uffff\x09\x03\x0b\uffff\x01"+
            "\x0e\x01\uffff\x04\x03\x27\uffff\x01\x03\x0a\uffff\x01\x03\x0d"+
            "\uffff\x02\x03\x02\uffff\x10\x03\x01\uffff\x04\x03\x02\uffff"+
            "\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09\uffff\x04\x03",
            "\x01\x03\x2d\uffff\x01\x0d\x12\uffff\x09\x03\x0b\uffff\x01"+
            "\x0e\x01\uffff\x04\x03\x27\uffff\x01\x03\x0a\uffff\x01\x03\x0d"+
            "\uffff\x02\x03\x02\uffff\x10\x03\x01\uffff\x04\x03\x02\uffff"+
            "\x08\x03\x01\uffff\x01\x03\x06\uffff\x02\x03\x09\uffff\x04\x03"
    };

    static readonly short[] DFA74_eot = DFA.UnpackEncodedString(DFA74_eotS);
    static readonly short[] DFA74_eof = DFA.UnpackEncodedString(DFA74_eofS);
    static readonly char[] DFA74_min = DFA.UnpackEncodedStringToUnsignedChars(DFA74_minS);
    static readonly char[] DFA74_max = DFA.UnpackEncodedStringToUnsignedChars(DFA74_maxS);
    static readonly short[] DFA74_accept = DFA.UnpackEncodedString(DFA74_acceptS);
    static readonly short[] DFA74_special = DFA.UnpackEncodedString(DFA74_specialS);
    static readonly short[][] DFA74_transition = DFA.UnpackEncodedStringArray(DFA74_transitionS);

    protected class DFA74 : DFA
    {
        public DFA74(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;

        }

        override public string Description
        {
            get { return "482:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )"; }
        }

    }


    protected internal int DFA74_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA74_7 = input.LA(1);

                   	 
                   	int index74_7 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA74_7 == OBJECT || (LA74_7 >= BOOL && LA74_7 <= IDENTIFIER) || (LA74_7 >= ELIF && LA74_7 <= UNDEF) || LA74_7 == 195 || LA74_7 == 206 || (LA74_7 >= 220 && LA74_7 <= 221) || (LA74_7 >= 224 && LA74_7 <= 239) || (LA74_7 >= 241 && LA74_7 <= 244) || (LA74_7 >= 247 && LA74_7 <= 254) || LA74_7 == 256 || (LA74_7 >= 263 && LA74_7 <= 264) || (LA74_7 >= 274 && LA74_7 <= 277)) ) { s = 3; }

                   	else if ( (LA74_7 == COMMA) && (synpred14_cs()) ) { s = 13; }

                   	else if ( (LA74_7 == GT) && (synpred14_cs()) ) { s = 14; }

                   	 
                   	input.Seek(index74_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA74_15 = input.LA(1);

                   	 
                   	int index74_15 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA74_15 == OBJECT || (LA74_15 >= BOOL && LA74_15 <= IDENTIFIER) || (LA74_15 >= ELIF && LA74_15 <= UNDEF) || LA74_15 == 195 || LA74_15 == 206 || (LA74_15 >= 220 && LA74_15 <= 221) || (LA74_15 >= 224 && LA74_15 <= 239) || (LA74_15 >= 241 && LA74_15 <= 244) || (LA74_15 >= 247 && LA74_15 <= 254) || LA74_15 == 256 || (LA74_15 >= 263 && LA74_15 <= 264) || (LA74_15 >= 274 && LA74_15 <= 277)) ) { s = 3; }

                   	else if ( (LA74_15 == COMMA) && (synpred14_cs()) ) { s = 13; }

                   	else if ( (LA74_15 == GT) && (synpred14_cs()) ) { s = 14; }

                   	 
                   	input.Seek(index74_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA74_16 = input.LA(1);

                   	 
                   	int index74_16 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA74_16 == OBJECT || (LA74_16 >= BOOL && LA74_16 <= IDENTIFIER) || (LA74_16 >= ELIF && LA74_16 <= UNDEF) || LA74_16 == 195 || LA74_16 == 206 || (LA74_16 >= 220 && LA74_16 <= 221) || (LA74_16 >= 224 && LA74_16 <= 239) || (LA74_16 >= 241 && LA74_16 <= 244) || (LA74_16 >= 247 && LA74_16 <= 254) || LA74_16 == 256 || (LA74_16 >= 263 && LA74_16 <= 264) || (LA74_16 >= 274 && LA74_16 <= 277)) ) { s = 3; }

                   	else if ( (LA74_16 == COMMA) && (synpred14_cs()) ) { s = 13; }

                   	else if ( (LA74_16 == GT) && (synpred14_cs()) ) { s = 14; }

                   	 
                   	input.Seek(index74_16);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae74 =
            new NoViableAltException(dfa.Description, 74, _s, input);
        dfa.Error(nvae74);
        throw nvae74;
    }
    const string DFA75_eotS =
        "\x07\uffff";
    const string DFA75_eofS =
        "\x04\uffff\x01\x05\x02\uffff";
    const string DFA75_minS =
        "\x01\x62\x01\x6f\x01\uffff\x01\x6f\x01\u0094\x02\uffff";
    const string DFA75_maxS =
        "\x01\u0094\x01\u0096\x01\uffff\x01\u0096\x01\u009d\x02\uffff";
    const string DFA75_acceptS =
        "\x02\uffff\x01\x02\x02\uffff\x01\x03\x01\x01";
    const string DFA75_specialS =
        "\x04\uffff\x01\x00\x02\uffff}>";
    static readonly string[] DFA75_transitionS = {
            "\x01\x01\x31\uffff\x01\x02",
            "\x01\x03\x26\uffff\x01\x04",
            "",
            "\x01\x03\x26\uffff\x01\x04",
            "\x01\x06\x08\uffff\x01\x05",
            "",
            ""
    };

    static readonly short[] DFA75_eot = DFA.UnpackEncodedString(DFA75_eotS);
    static readonly short[] DFA75_eof = DFA.UnpackEncodedString(DFA75_eofS);
    static readonly char[] DFA75_min = DFA.UnpackEncodedStringToUnsignedChars(DFA75_minS);
    static readonly char[] DFA75_max = DFA.UnpackEncodedStringToUnsignedChars(DFA75_maxS);
    static readonly short[] DFA75_accept = DFA.UnpackEncodedString(DFA75_acceptS);
    static readonly short[] DFA75_special = DFA.UnpackEncodedString(DFA75_specialS);
    static readonly short[][] DFA75_transition = DFA.UnpackEncodedStringArray(DFA75_transitionS);

    protected class DFA75 : DFA
    {
        public DFA75(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 492:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*"; }
        }

    }


    protected internal int DFA75_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA75_4 = input.LA(1);

                   	 
                   	int index75_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA75_4 == EOF || LA75_4 == RPAREN) ) { s = 5; }

                   	else if ( (LA75_4 == DOT) && (synpred15_cs()) ) { s = 6; }

                   	 
                   	input.Seek(index75_4);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae75 =
            new NoViableAltException(dfa.Description, 75, _s, input);
        dfa.Error(nvae75);
        throw nvae75;
    }
    const string DFA106_eotS =
        "\x1a\uffff";
    const string DFA106_eofS =
        "\x1a\uffff";
    const string DFA106_minS =
        "\x01\x24\x17\x00\x02\uffff";
    const string DFA106_maxS =
        "\x01\u0115\x17\x00\x02\uffff";
    const string DFA106_acceptS =
        "\x18\uffff\x01\x01\x01\x02";
    const string DFA106_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06"+
        "\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e"+
        "\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16"+
        "\x02\uffff}>";
    static readonly string[] DFA106_transitionS = {
            "\x01\x11\x01\x12\x1b\uffff\x01\x05\x01\x03\x06\uffff\x01\x01"+
            "\x15\uffff\x01\x16\x09\uffff\x01\x0f\x01\x10\x02\uffff\x01\x15"+
            "\x14\uffff\x08\x05\x01\x06\x09\x09\x04\uffff\x04\x17\x27\uffff"+
            "\x01\x17\x01\uffff\x01\x02\x09\uffff\x01\x04\x01\uffff\x01\x13"+
            "\x01\x14\x03\uffff\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x01"+
            "\x08\x01\uffff\x01\x17\x02\uffff\x01\x17\x01\x07\x0e\x17\x01"+
            "\uffff\x04\x17\x02\uffff\x04\x17\x04\x05\x01\uffff\x01\x17\x06"+
            "\uffff\x02\x17\x09\uffff\x01\x17\x02\x05\x01\x17",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            ""
    };

    static readonly short[] DFA106_eot = DFA.UnpackEncodedString(DFA106_eotS);
    static readonly short[] DFA106_eof = DFA.UnpackEncodedString(DFA106_eofS);
    static readonly char[] DFA106_min = DFA.UnpackEncodedStringToUnsignedChars(DFA106_minS);
    static readonly char[] DFA106_max = DFA.UnpackEncodedStringToUnsignedChars(DFA106_maxS);
    static readonly short[] DFA106_accept = DFA.UnpackEncodedString(DFA106_acceptS);
    static readonly short[] DFA106_special = DFA.UnpackEncodedString(DFA106_specialS);
    static readonly short[][] DFA106_transition = DFA.UnpackEncodedStringArray(DFA106_transitionS);

    protected class DFA106 : DFA
    {
        public DFA106(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;

        }

        override public string Description
        {
            get { return "584:8: public expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );"; }
        }

    }


    protected internal int DFA106_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA106_1 = input.LA(1);

                   	 
                   	int index106_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA106_2 = input.LA(1);

                   	 
                   	int index106_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA106_3 = input.LA(1);

                   	 
                   	int index106_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA106_4 = input.LA(1);

                   	 
                   	int index106_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA106_5 = input.LA(1);

                   	 
                   	int index106_5 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA106_6 = input.LA(1);

                   	 
                   	int index106_6 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA106_7 = input.LA(1);

                   	 
                   	int index106_7 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA106_8 = input.LA(1);

                   	 
                   	int index106_8 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA106_9 = input.LA(1);

                   	 
                   	int index106_9 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_9);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA106_10 = input.LA(1);

                   	 
                   	int index106_10 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA106_11 = input.LA(1);

                   	 
                   	int index106_11 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA106_12 = input.LA(1);

                   	 
                   	int index106_12 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA106_13 = input.LA(1);

                   	 
                   	int index106_13 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA106_14 = input.LA(1);

                   	 
                   	int index106_14 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_14);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA106_15 = input.LA(1);

                   	 
                   	int index106_15 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA106_16 = input.LA(1);

                   	 
                   	int index106_16 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_16);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA106_17 = input.LA(1);

                   	 
                   	int index106_17 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_17);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA106_18 = input.LA(1);

                   	 
                   	int index106_18 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_18);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA106_19 = input.LA(1);

                   	 
                   	int index106_19 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_19);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA106_20 = input.LA(1);

                   	 
                   	int index106_20 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_20);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA106_21 = input.LA(1);

                   	 
                   	int index106_21 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_21);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA106_22 = input.LA(1);

                   	 
                   	int index106_22 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_22);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA106_23 = input.LA(1);

                   	 
                   	int index106_23 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred21_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index106_23);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae106 =
            new NoViableAltException(dfa.Description, 106, _s, input);
        dfa.Error(nvae106);
        throw nvae106;
    }
    const string DFA108_eotS =
        "\x18\uffff";
    const string DFA108_eofS =
        "\x18\uffff";
    const string DFA108_minS =
        "\x01\x24\x01\x00\x16\uffff";
    const string DFA108_maxS =
        "\x01\u0115\x01\x00\x16\uffff";
    const string DFA108_acceptS =
        "\x02\uffff\x01\x02\x0c\uffff\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
        "\x07\x01\x08\x01\x09\x01\x0a\x01\x01";
    const string DFA108_specialS =
        "\x01\uffff\x01\x00\x16\uffff}>";
    static readonly string[] DFA108_transitionS = {
            "\x01\x11\x01\x12\x1b\uffff\x02\x02\x06\uffff\x01\x01\x15\uffff"+
            "\x01\x16\x09\uffff\x01\x0f\x01\x10\x02\uffff\x01\x15\x14\uffff"+
            "\x12\x02\x04\uffff\x04\x02\x27\uffff\x01\x02\x01\uffff\x01\x02"+
            "\x09\uffff\x01\x02\x01\uffff\x01\x13\x01\x14\x03\uffff\x06\x02"+
            "\x01\uffff\x01\x02\x02\uffff\x10\x02\x01\uffff\x04\x02\x02\uffff"+
            "\x08\x02\x01\uffff\x01\x02\x06\uffff\x02\x02\x09\uffff\x04\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
    static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
    static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
    static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
    static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
    static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
    static readonly short[][] DFA108_transition = DFA.UnpackEncodedStringArray(DFA108_transitionS);

    protected class DFA108 : DFA
    {
        public DFA108(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;

        }

        override public string Description
        {
            get { return "592:8: public unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );"; }
        }

    }


    protected internal int DFA108_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA108_1 = input.LA(1);

                   	 
                   	int index108_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred22_cs()) ) { s = 23; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index108_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae108 =
            new NoViableAltException(dfa.Description, 108, _s, input);
        dfa.Error(nvae108);
        throw nvae108;
    }
    const string DFA110_eotS =
        "\x1a\uffff";
    const string DFA110_eofS =
        "\x1a\uffff";
    const string DFA110_minS =
        "\x01\x24\x04\x00\x15\uffff";
    const string DFA110_maxS =
        "\x01\u0115\x04\x00\x15\uffff";
    const string DFA110_acceptS =
        "\x05\uffff\x01\x03\x12\uffff\x01\x01\x01\x02";
    const string DFA110_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x15\uffff}>";
    static readonly string[] DFA110_transitionS = {
            "\x02\x05\x1b\uffff\x02\x05\x06\uffff\x01\x01\x15\uffff\x01\x05"+
            "\x09\uffff\x02\x05\x02\uffff\x01\x05\x14\uffff\x08\x05\x01\x02"+
            "\x09\x05\x04\uffff\x04\x04\x27\uffff\x01\x04\x01\uffff\x01\x05"+
            "\x09\uffff\x01\x05\x01\uffff\x02\x05\x03\uffff\x06\x05\x01\uffff"+
            "\x01\x04\x02\uffff\x01\x04\x01\x03\x0e\x04\x01\uffff\x04\x04"+
            "\x02\uffff\x04\x04\x04\x05\x01\uffff\x01\x04\x06\uffff\x02\x04"+
            "\x09\uffff\x01\x04\x02\x05\x01\x04",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA110_eot = DFA.UnpackEncodedString(DFA110_eotS);
    static readonly short[] DFA110_eof = DFA.UnpackEncodedString(DFA110_eofS);
    static readonly char[] DFA110_min = DFA.UnpackEncodedStringToUnsignedChars(DFA110_minS);
    static readonly char[] DFA110_max = DFA.UnpackEncodedStringToUnsignedChars(DFA110_maxS);
    static readonly short[] DFA110_accept = DFA.UnpackEncodedString(DFA110_acceptS);
    static readonly short[] DFA110_special = DFA.UnpackEncodedString(DFA110_specialS);
    static readonly short[][] DFA110_transition = DFA.UnpackEncodedStringArray(DFA110_transitionS);

    protected class DFA110 : DFA
    {
        public DFA110(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;

        }

        override public string Description
        {
            get { return "618:8: public non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );"; }
        }

    }


    protected internal int DFA110_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA110_1 = input.LA(1);

                   	 
                   	int index110_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred23_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index110_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA110_2 = input.LA(1);

                   	 
                   	int index110_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred23_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index110_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA110_3 = input.LA(1);

                   	 
                   	int index110_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred23_cs()) ) { s = 24; }

                   	else if ( (synpred24_cs()) ) { s = 25; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index110_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA110_4 = input.LA(1);

                   	 
                   	int index110_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred23_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index110_4);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae110 =
            new NoViableAltException(dfa.Description, 110, _s, input);
        dfa.Error(nvae110);
        throw nvae110;
    }
    const string DFA239_eotS =
        "\x10\uffff";
    const string DFA239_eofS =
        "\x10\uffff";
    const string DFA239_minS =
        "\x01\x14\x05\uffff\x01\x41\x01\uffff\x02\x41\x06\uffff";
    const string DFA239_maxS =
        "\x01\u0115\x05\uffff\x01\u0115\x01\uffff\x02\u0115\x06\uffff";
    const string DFA239_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\uffff\x01"+
        "\x07\x02\uffff\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x06\x01\x0c";
    const string DFA239_specialS =
        "\x10\uffff}>";
    static readonly string[] DFA239_transitionS = {
            "\x01\x0b\x2c\uffff\x01\x07\x40\uffff\x08\x07\x01\x08\x0d\uffff"+
            "\x04\x09\x27\uffff\x01\x09\x01\x03\x08\uffff\x01\x01\x01\x06"+
            "\x0b\uffff\x01\x0c\x02\uffff\x01\x09\x02\uffff\x10\x09\x01\x02"+
            "\x04\x09\x01\x05\x01\uffff\x04\x09\x04\x07\x01\x0a\x01\x09\x01"+
            "\uffff\x01\x04\x01\uffff\x02\x0d\x01\uffff\x02\x09\x09\uffff"+
            "\x01\x09\x02\x07\x01\x09",
            "",
            "",
            "",
            "",
            "",
            "\x01\x0e\x2b\uffff\x01\x07\x14\uffff\x12\x0e\x04\uffff\x04"+
            "\x0e\x27\uffff\x01\x0e\x19\uffff\x01\x0e\x02\uffff\x10\x0e\x01"+
            "\uffff\x04\x0e\x02\uffff\x08\x0e\x01\uffff\x01\x0e\x06\uffff"+
            "\x02\x0e\x09\uffff\x04\x0e",
            "",
            "\x02\x07\x02\uffff\x01\x07\x03\uffff\x01\x0f\x18\uffff\x01"+
            "\x07\x0a\uffff\x01\x07\x14\uffff\x13\x07\x03\uffff\x04\x07\x27"+
            "\uffff\x01\x07\x0c\uffff\x01\x07\x0b\uffff\x02\x07\x02\uffff"+
            "\x10\x07\x01\uffff\x04\x07\x02\uffff\x08\x07\x01\uffff\x01\x07"+
            "\x02\uffff\x01\x07\x03\uffff\x02\x07\x09\uffff\x04\x07",
            "\x02\x07\x02\uffff\x01\x07\x03\uffff\x01\x0f\x18\uffff\x01"+
            "\x07\x0a\uffff\x01\x07\x14\uffff\x13\x07\x03\uffff\x04\x07\x27"+
            "\uffff\x01\x07\x0c\uffff\x01\x07\x0b\uffff\x02\x07\x02\uffff"+
            "\x10\x07\x01\uffff\x04\x07\x02\uffff\x08\x07\x01\uffff\x01\x07"+
            "\x02\uffff\x01\x07\x03\uffff\x02\x07\x09\uffff\x04\x07",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA239_eot = DFA.UnpackEncodedString(DFA239_eotS);
    static readonly short[] DFA239_eof = DFA.UnpackEncodedString(DFA239_eofS);
    static readonly char[] DFA239_min = DFA.UnpackEncodedStringToUnsignedChars(DFA239_minS);
    static readonly char[] DFA239_max = DFA.UnpackEncodedStringToUnsignedChars(DFA239_maxS);
    static readonly short[] DFA239_accept = DFA.UnpackEncodedString(DFA239_acceptS);
    static readonly short[] DFA239_special = DFA.UnpackEncodedString(DFA239_specialS);
    static readonly short[][] DFA239_transition = DFA.UnpackEncodedStringArray(DFA239_transitionS);

    protected class DFA239 : DFA
    {
        public DFA239(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = DFA239_eot;
            this.eof = DFA239_eof;
            this.min = DFA239_min;
            this.max = DFA239_max;
            this.accept = DFA239_accept;
            this.special = DFA239_special;
            this.transition = DFA239_transition;

        }

        override public string Description
        {
            get { return "989:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )"; }
        }

    }

    const string DFA238_eotS =
        "\x0b\uffff";
    const string DFA238_eofS =
        "\x0b\uffff";
    const string DFA238_minS =
        "\x01\x41\x04\x00\x06\uffff";
    const string DFA238_maxS =
        "\x01\u0115\x04\x00\x06\uffff";
    const string DFA238_acceptS =
        "\x05\uffff\x01\x04\x01\x06\x01\x01\x01\x02\x01\x03\x01\x05";
    const string DFA238_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x06\uffff}>";
    static readonly string[] DFA238_transitionS = {
            "\x01\x01\x01\x05\x3f\uffff\x08\x01\x01\x02\x09\x04\x04\uffff"+
            "\x04\x03\x27\uffff\x01\x03\x19\uffff\x01\x03\x02\uffff\x10\x03"+
            "\x01\uffff\x04\x03\x02\uffff\x04\x03\x04\x01\x01\uffff\x01\x03"+
            "\x02\uffff\x01\x06\x03\uffff\x02\x03\x09\uffff\x01\x03\x02\x01"+
            "\x01\x03",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA238_eot = DFA.UnpackEncodedString(DFA238_eotS);
    static readonly short[] DFA238_eof = DFA.UnpackEncodedString(DFA238_eofS);
    static readonly char[] DFA238_min = DFA.UnpackEncodedStringToUnsignedChars(DFA238_minS);
    static readonly char[] DFA238_max = DFA.UnpackEncodedStringToUnsignedChars(DFA238_maxS);
    static readonly short[] DFA238_accept = DFA.UnpackEncodedString(DFA238_acceptS);
    static readonly short[] DFA238_special = DFA.UnpackEncodedString(DFA238_specialS);
    static readonly short[][] DFA238_transition = DFA.UnpackEncodedStringArray(DFA238_transitionS);

    protected class DFA238 : DFA
    {
        public DFA238(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = DFA238_eot;
            this.eof = DFA238_eof;
            this.min = DFA238_min;
            this.max = DFA238_max;
            this.accept = DFA238_accept;
            this.special = DFA238_special;
            this.transition = DFA238_transition;

        }

        override public string Description
        {
            get { return "999:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )"; }
        }

    }


    protected internal int DFA238_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA238_1 = input.LA(1);

                   	 
                   	int index238_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred30_cs()) ) { s = 7; }

                   	else if ( (synpred31_cs()) ) { s = 8; }

                   	 
                   	input.Seek(index238_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA238_2 = input.LA(1);

                   	 
                   	int index238_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred30_cs()) ) { s = 7; }

                   	else if ( (synpred31_cs()) ) { s = 8; }

                   	else if ( (synpred32_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index238_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA238_3 = input.LA(1);

                   	 
                   	int index238_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred30_cs()) ) { s = 7; }

                   	else if ( (synpred31_cs()) ) { s = 8; }

                   	else if ( (synpred32_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index238_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA238_4 = input.LA(1);

                   	 
                   	int index238_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred30_cs()) ) { s = 7; }

                   	else if ( (synpred31_cs()) ) { s = 8; }

                   	 
                   	input.Seek(index238_4);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae238 =
            new NoViableAltException(dfa.Description, 238, _s, input);
        dfa.Error(nvae238);
        throw nvae238;
    }
    const string DFA242_eotS =
        "\x10\uffff";
    const string DFA242_eofS =
        "\x10\uffff";
    const string DFA242_minS =
        "\x01\x5d\x07\uffff\x01\x49\x07\uffff";
    const string DFA242_maxS =
        "\x01\u0096\x07\uffff\x01\u0096\x07\uffff";
    const string DFA242_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07"+
        "\x01\uffff\x01\x09\x01\x0a\x01\x0c\x01\x0d\x01\x0e\x01\x08\x01\x0b";
    const string DFA242_specialS =
        "\x10\uffff}>";
    static readonly string[] DFA242_transitionS = {
            "\x01\x05\x01\x06\x01\x04\x01\x0a\x01\x09\x01\x0b\x01\x0d\x01"+
            "\x0c\x01\x07\x05\uffff\x01\x02\x01\x03\x01\x01\x28\uffff\x01"+
            "\x08",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x0f\x4c\uffff\x01\x0e",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA242_eot = DFA.UnpackEncodedString(DFA242_eotS);
    static readonly short[] DFA242_eof = DFA.UnpackEncodedString(DFA242_eofS);
    static readonly char[] DFA242_min = DFA.UnpackEncodedStringToUnsignedChars(DFA242_minS);
    static readonly char[] DFA242_max = DFA.UnpackEncodedStringToUnsignedChars(DFA242_maxS);
    static readonly short[] DFA242_accept = DFA.UnpackEncodedString(DFA242_acceptS);
    static readonly short[] DFA242_special = DFA.UnpackEncodedString(DFA242_specialS);
    static readonly short[][] DFA242_transition = DFA.UnpackEncodedStringArray(DFA242_transitionS);

    protected class DFA242 : DFA
    {
        public DFA242(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;

        }

        override public string Description
        {
            get { return "1039:8: public overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );"; }
        }

    }

    const string DFA250_eotS =
        "\x30\uffff";
    const string DFA250_eofS =
        "\x30\uffff";
    const string DFA250_minS =
        "\x01\x24\x05\x00\x14\uffff\x01\x00\x13\uffff\x01\x00\x01\uffff";
    const string DFA250_maxS =
        "\x01\u0115\x05\x00\x14\uffff\x01\x00\x13\uffff\x01\x00\x01\uffff";
    const string DFA250_acceptS =
        "\x06\uffff\x02\x01\x01\x03\x26\uffff\x01\x02";
    const string DFA250_specialS =
        "\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x14\uffff\x01\x06"+
        "\x13\uffff\x01\x07\x01\uffff}>";
    static readonly string[] DFA250_transitionS = {
            "\x02\x08\x14\uffff\x02\x08\x02\uffff\x01\x08\x01\uffff\x01\x08"+
            "\x01\x03\x02\x08\x03\uffff\x01\x08\x01\uffff\x01\x08\x01\uffff"+
            "\x01\x08\x13\uffff\x01\x08\x09\uffff\x02\x08\x02\uffff\x01\x08"+
            "\x14\uffff\x08\x03\x01\x04\x09\x08\x03\uffff\x01\x08\x04\x2e"+
            "\x01\x08\x26\uffff\x01\x2e\x01\uffff\x02\x08\x06\uffff\x01\x07"+
            "\x01\x06\x01\x08\x01\uffff\x02\x08\x03\uffff\x06\x08\x01\uffff"+
            "\x01\x2e\x02\uffff\x01\x2e\x01\x1a\x0e\x2e\x01\uffff\x04\x2e"+
            "\x02\uffff\x04\x2e\x04\x03\x01\uffff\x01\x2e\x05\uffff\x01\x08"+
            "\x01\x01\x01\x02\x01\uffff\x01\x08\x01\uffff\x06\x08\x01\x05"+
            "\x02\x03\x01\x2e",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            ""
    };

    static readonly short[] DFA250_eot = DFA.UnpackEncodedString(DFA250_eotS);
    static readonly short[] DFA250_eof = DFA.UnpackEncodedString(DFA250_eofS);
    static readonly char[] DFA250_min = DFA.UnpackEncodedStringToUnsignedChars(DFA250_minS);
    static readonly char[] DFA250_max = DFA.UnpackEncodedStringToUnsignedChars(DFA250_maxS);
    static readonly short[] DFA250_accept = DFA.UnpackEncodedString(DFA250_acceptS);
    static readonly short[] DFA250_special = DFA.UnpackEncodedString(DFA250_specialS);
    static readonly short[][] DFA250_transition = DFA.UnpackEncodedStringArray(DFA250_transitionS);

    protected class DFA250 : DFA
    {
        public DFA250(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 250;
            this.eot = DFA250_eot;
            this.eof = DFA250_eof;
            this.min = DFA250_min;
            this.max = DFA250_max;
            this.accept = DFA250_accept;
            this.special = DFA250_special;
            this.transition = DFA250_transition;

        }

        override public string Description
        {
            get { return "1089:8: public statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );"; }
        }

    }


    protected internal int DFA250_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA250_0 = input.LA(1);

                   	 
                   	int index250_0 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA250_0 == 263) ) { s = 1; }

                   	else if ( (LA250_0 == 264) ) { s = 2; }

                   	else if ( (LA250_0 == OBJECT || (LA250_0 >= BOOL && LA250_0 <= DOUBLE) || (LA250_0 >= 251 && LA250_0 <= 254) || (LA250_0 >= 275 && LA250_0 <= 276)) ) { s = 3; }

                   	else if ( (LA250_0 == IDENTIFIER) ) { s = 4; }

                   	else if ( (LA250_0 == 274) ) { s = 5; }

                   	else if ( (LA250_0 == 206) && (synpred35_cs()) ) { s = 6; }

                   	else if ( (LA250_0 == 205) && (synpred35_cs()) ) { s = 7; }

                   	else if ( ((LA250_0 >= MONONOT && LA250_0 <= MONOTWIDDLE) || (LA250_0 >= RETURN && LA250_0 <= TRY) || LA250_0 == THROW || LA250_0 == BREAK || (LA250_0 >= THIS && LA250_0 <= FOREACH) || LA250_0 == OPEN_BRACE || LA250_0 == LPAREN || LA250_0 == IF || LA250_0 == BIT_AND || (LA250_0 >= PLUS && LA250_0 <= MINUS) || LA250_0 == STAR || (LA250_0 >= Real_literal && LA250_0 <= NULL) || LA250_0 == USING || LA250_0 == SEMI || (LA250_0 >= 197 && LA250_0 <= 198) || LA250_0 == 207 || (LA250_0 >= 209 && LA250_0 <= 210) || (LA250_0 >= 214 && LA250_0 <= 219) || LA250_0 == 262 || LA250_0 == 266 || (LA250_0 >= 268 && LA250_0 <= 273)) ) { s = 8; }

                   	else if ( (LA250_0 == 225) ) { s = 26; }

                   	else if ( ((LA250_0 >= ELIF && LA250_0 <= UNDEF) || LA250_0 == 195 || LA250_0 == 221 || LA250_0 == 224 || (LA250_0 >= 226 && LA250_0 <= 239) || (LA250_0 >= 241 && LA250_0 <= 244) || (LA250_0 >= 247 && LA250_0 <= 250) || LA250_0 == 256 || LA250_0 == 277) ) { s = 46; }

                   	 
                   	input.Seek(index250_0);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA250_1 = input.LA(1);

                   	 
                   	int index250_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred35_cs()) ) { s = 7; }

                   	else if ( (synpred36_cs()) ) { s = 47; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index250_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA250_2 = input.LA(1);

                   	 
                   	int index250_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred35_cs()) ) { s = 7; }

                   	else if ( (synpred36_cs()) ) { s = 47; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index250_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA250_3 = input.LA(1);

                   	 
                   	int index250_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred35_cs()) ) { s = 7; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index250_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA250_4 = input.LA(1);

                   	 
                   	int index250_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred35_cs()) ) { s = 7; }

                   	else if ( (synpred36_cs()) ) { s = 47; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index250_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA250_5 = input.LA(1);

                   	 
                   	int index250_5 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred35_cs()) ) { s = 7; }

                   	else if ( (synpred36_cs()) ) { s = 47; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index250_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA250_26 = input.LA(1);

                   	 
                   	int index250_26 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred35_cs()) ) { s = 7; }

                   	else if ( (synpred36_cs()) ) { s = 47; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index250_26);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA250_46 = input.LA(1);

                   	 
                   	int index250_46 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred35_cs()) ) { s = 7; }

                   	else if ( (synpred36_cs()) ) { s = 47; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index250_46);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae250 =
            new NoViableAltException(dfa.Description, 250, _s, input);
        dfa.Error(nvae250);
        throw nvae250;
    }
    const string DFA251_eotS =
        "\x11\uffff";
    const string DFA251_eofS =
        "\x11\uffff";
    const string DFA251_minS =
        "\x01\x24\x05\uffff\x02\x47\x02\uffff\x01\x3a\x06\uffff";
    const string DFA251_maxS =
        "\x01\u0115\x05\uffff\x02\u009c\x02\uffff\x01\u00df\x06\uffff";
    const string DFA251_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x02\uffff\x01"+
        "\x08\x01\x09\x01\uffff\x01\x0b\x01\x0c\x01\x0d\x01\x06\x01\x07\x01"+
        "\x0a";
    const string DFA251_specialS =
        "\x11\uffff}>";
    static readonly string[] DFA251_transitionS = {
            "\x02\x0d\x14\uffff\x01\x04\x01\x05\x02\uffff\x01\x04\x01\uffff"+
            "\x01\x04\x02\x0d\x01\x03\x03\uffff\x01\x01\x01\uffff\x01\x0d"+
            "\x01\uffff\x01\x02\x13\uffff\x01\x0d\x09\uffff\x02\x0d\x02\uffff"+
            "\x01\x0d\x14\uffff\x12\x0d\x03\uffff\x01\x09\x04\x0d\x01\x01"+
            "\x26\uffff\x01\x0d\x01\uffff\x01\x0d\x01\x0b\x08\uffff\x01\x0d"+
            "\x01\uffff\x02\x0d\x03\uffff\x01\x0d\x01\x06\x01\x07\x03\x0d"+
            "\x01\uffff\x01\x0d\x02\uffff\x10\x0d\x01\uffff\x04\x0d\x02\uffff"+
            "\x08\x0d\x01\uffff\x01\x0d\x05\uffff\x01\x0c\x02\x0d\x01\uffff"+
            "\x01\x02\x01\uffff\x03\x03\x02\x04\x01\x08\x01\x0a\x03\x0d",
            "",
            "",
            "",
            "",
            "",
            "\x01\x0e\x01\uffff\x01\x0d\x52\uffff\x01\x0e",
            "\x01\x0f\x01\uffff\x01\x0d\x52\uffff\x01\x0f",
            "",
            "",
            "\x01\x10\x05\uffff\x01\x10\x04\uffff\x01\x0d\x03\uffff\x02"+
            "\x0d\x01\uffff\x0a\x0d\x05\uffff\x0b\x0d\x03\uffff\x07\x0d\x24"+
            "\uffff\x03\x0d\x05\uffff\x01\x0d\x33\uffff\x03\x0d\x09\uffff"+
            "\x01\x0d\x01\uffff\x02\x0d",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA251_eot = DFA.UnpackEncodedString(DFA251_eotS);
    static readonly short[] DFA251_eof = DFA.UnpackEncodedString(DFA251_eofS);
    static readonly char[] DFA251_min = DFA.UnpackEncodedStringToUnsignedChars(DFA251_minS);
    static readonly char[] DFA251_max = DFA.UnpackEncodedStringToUnsignedChars(DFA251_maxS);
    static readonly short[] DFA251_accept = DFA.UnpackEncodedString(DFA251_acceptS);
    static readonly short[] DFA251_special = DFA.UnpackEncodedString(DFA251_specialS);
    static readonly short[][] DFA251_transition = DFA.UnpackEncodedStringArray(DFA251_transitionS);

    protected class DFA251 : DFA
    {
        public DFA251(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = DFA251_eot;
            this.eof = DFA251_eof;
            this.min = DFA251_min;
            this.max = DFA251_max;
            this.accept = DFA251_accept;
            this.special = DFA251_special;
            this.transition = DFA251_transition;

        }

        override public string Description
        {
            get { return "1094:8: public embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );"; }
        }

    }

    const string DFA268_eotS =
        "\x1b\uffff";
    const string DFA268_eofS =
        "\x1b\uffff";
    const string DFA268_minS =
        "\x01\x24\x05\x00\x14\uffff\x01\x00";
    const string DFA268_maxS =
        "\x01\u0115\x05\x00\x14\uffff\x01\x00";
    const string DFA268_acceptS =
        "\x06\uffff\x01\x01\x01\x02\x13\uffff";
    const string DFA268_specialS =
        "\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x14\uffff\x01\x06}>";
    static readonly string[] DFA268_transitionS = {
            "\x02\x07\x1b\uffff\x01\x03\x01\x07\x06\uffff\x01\x07\x15\uffff"+
            "\x01\x07\x09\uffff\x02\x07\x02\uffff\x01\x07\x14\uffff\x08\x03"+
            "\x01\x04\x09\x07\x04\uffff\x04\x1a\x27\uffff\x01\x1a\x01\uffff"+
            "\x01\x07\x08\uffff\x01\x06\x01\x07\x01\uffff\x02\x07\x03\uffff"+
            "\x06\x07\x01\uffff\x01\x1a\x02\uffff\x01\x1a\x01\x05\x0e\x1a"+
            "\x01\uffff\x04\x1a\x02\uffff\x04\x1a\x04\x03\x01\uffff\x01\x1a"+
            "\x06\uffff\x01\x01\x01\x02\x09\uffff\x01\x1a\x02\x03\x01\x1a",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff"
    };

    static readonly short[] DFA268_eot = DFA.UnpackEncodedString(DFA268_eotS);
    static readonly short[] DFA268_eof = DFA.UnpackEncodedString(DFA268_eofS);
    static readonly char[] DFA268_min = DFA.UnpackEncodedStringToUnsignedChars(DFA268_minS);
    static readonly char[] DFA268_max = DFA.UnpackEncodedStringToUnsignedChars(DFA268_maxS);
    static readonly short[] DFA268_accept = DFA.UnpackEncodedString(DFA268_acceptS);
    static readonly short[] DFA268_special = DFA.UnpackEncodedString(DFA268_specialS);
    static readonly short[][] DFA268_transition = DFA.UnpackEncodedStringArray(DFA268_transitionS);

    protected class DFA268 : DFA
    {
        public DFA268(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = DFA268_eot;
            this.eof = DFA268_eof;
            this.min = DFA268_min;
            this.max = DFA268_max;
            this.accept = DFA268_accept;
            this.special = DFA268_special;
            this.transition = DFA268_transition;

        }

        override public string Description
        {
            get { return "1183:8: public for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );"; }
        }

    }


    protected internal int DFA268_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA268_0 = input.LA(1);

                   	 
                   	int index268_0 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA268_0 == 263) ) { s = 1; }

                   	else if ( (LA268_0 == 264) ) { s = 2; }

                   	else if ( (LA268_0 == OBJECT || (LA268_0 >= BOOL && LA268_0 <= DOUBLE) || (LA268_0 >= 251 && LA268_0 <= 254) || (LA268_0 >= 275 && LA268_0 <= 276)) ) { s = 3; }

                   	else if ( (LA268_0 == IDENTIFIER) ) { s = 4; }

                   	else if ( (LA268_0 == 225) ) { s = 5; }

                   	else if ( (LA268_0 == 206) && (synpred40_cs()) ) { s = 6; }

                   	else if ( ((LA268_0 >= MONONOT && LA268_0 <= MONOTWIDDLE) || LA268_0 == THIS || LA268_0 == LPAREN || LA268_0 == BIT_AND || (LA268_0 >= PLUS && LA268_0 <= MINUS) || LA268_0 == STAR || (LA268_0 >= Real_literal && LA268_0 <= NULL) || LA268_0 == 197 || LA268_0 == 207 || (LA268_0 >= 209 && LA268_0 <= 210) || (LA268_0 >= 214 && LA268_0 <= 219)) ) { s = 7; }

                   	else if ( ((LA268_0 >= ELIF && LA268_0 <= UNDEF) || LA268_0 == 195 || LA268_0 == 221 || LA268_0 == 224 || (LA268_0 >= 226 && LA268_0 <= 239) || (LA268_0 >= 241 && LA268_0 <= 244) || (LA268_0 >= 247 && LA268_0 <= 250) || LA268_0 == 256 || LA268_0 == 274 || LA268_0 == 277) ) { s = 26; }

                   	 
                   	input.Seek(index268_0);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA268_1 = input.LA(1);

                   	 
                   	int index268_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred40_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index268_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA268_2 = input.LA(1);

                   	 
                   	int index268_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred40_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index268_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA268_3 = input.LA(1);

                   	 
                   	int index268_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred40_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index268_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA268_4 = input.LA(1);

                   	 
                   	int index268_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred40_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index268_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA268_5 = input.LA(1);

                   	 
                   	int index268_5 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred40_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index268_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA268_26 = input.LA(1);

                   	 
                   	int index268_26 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred40_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index268_26);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae268 =
            new NoViableAltException(dfa.Description, 268, _s, input);
        dfa.Error(nvae268);
        throw nvae268;
    }
    const string DFA281_eotS =
        "\x1b\uffff";
    const string DFA281_eofS =
        "\x1b\uffff";
    const string DFA281_minS =
        "\x01\x24\x05\x00\x14\uffff\x01\x00";
    const string DFA281_maxS =
        "\x01\u0115\x05\x00\x14\uffff\x01\x00";
    const string DFA281_acceptS =
        "\x06\uffff\x01\x01\x01\x02\x13\uffff";
    const string DFA281_specialS =
        "\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x14\uffff\x01\x06}>";
    static readonly string[] DFA281_transitionS = {
            "\x02\x07\x1b\uffff\x01\x03\x01\x07\x06\uffff\x01\x07\x15\uffff"+
            "\x01\x07\x09\uffff\x02\x07\x02\uffff\x01\x07\x14\uffff\x08\x03"+
            "\x01\x04\x09\x07\x04\uffff\x04\x1a\x27\uffff\x01\x1a\x01\uffff"+
            "\x01\x07\x08\uffff\x01\x06\x01\x07\x01\uffff\x02\x07\x03\uffff"+
            "\x06\x07\x01\uffff\x01\x1a\x02\uffff\x01\x1a\x01\x05\x0e\x1a"+
            "\x01\uffff\x04\x1a\x02\uffff\x04\x1a\x04\x03\x01\uffff\x01\x1a"+
            "\x06\uffff\x01\x01\x01\x02\x09\uffff\x01\x1a\x02\x03\x01\x1a",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff"
    };

    static readonly short[] DFA281_eot = DFA.UnpackEncodedString(DFA281_eotS);
    static readonly short[] DFA281_eof = DFA.UnpackEncodedString(DFA281_eofS);
    static readonly char[] DFA281_min = DFA.UnpackEncodedStringToUnsignedChars(DFA281_minS);
    static readonly char[] DFA281_max = DFA.UnpackEncodedStringToUnsignedChars(DFA281_maxS);
    static readonly short[] DFA281_accept = DFA.UnpackEncodedString(DFA281_acceptS);
    static readonly short[] DFA281_special = DFA.UnpackEncodedString(DFA281_specialS);
    static readonly short[][] DFA281_transition = DFA.UnpackEncodedStringArray(DFA281_transitionS);

    protected class DFA281 : DFA
    {
        public DFA281(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 281;
            this.eot = DFA281_eot;
            this.eof = DFA281_eof;
            this.min = DFA281_min;
            this.max = DFA281_max;
            this.accept = DFA281_accept;
            this.special = DFA281_special;
            this.transition = DFA281_transition;

        }

        override public string Description
        {
            get { return "1238:8: public resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );"; }
        }

    }


    protected internal int DFA281_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA281_0 = input.LA(1);

                   	 
                   	int index281_0 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA281_0 == 263) ) { s = 1; }

                   	else if ( (LA281_0 == 264) ) { s = 2; }

                   	else if ( (LA281_0 == OBJECT || (LA281_0 >= BOOL && LA281_0 <= DOUBLE) || (LA281_0 >= 251 && LA281_0 <= 254) || (LA281_0 >= 275 && LA281_0 <= 276)) ) { s = 3; }

                   	else if ( (LA281_0 == IDENTIFIER) ) { s = 4; }

                   	else if ( (LA281_0 == 225) ) { s = 5; }

                   	else if ( (LA281_0 == 206) && (synpred41_cs()) ) { s = 6; }

                   	else if ( ((LA281_0 >= MONONOT && LA281_0 <= MONOTWIDDLE) || LA281_0 == THIS || LA281_0 == LPAREN || LA281_0 == BIT_AND || (LA281_0 >= PLUS && LA281_0 <= MINUS) || LA281_0 == STAR || (LA281_0 >= Real_literal && LA281_0 <= NULL) || LA281_0 == 197 || LA281_0 == 207 || (LA281_0 >= 209 && LA281_0 <= 210) || (LA281_0 >= 214 && LA281_0 <= 219)) ) { s = 7; }

                   	else if ( ((LA281_0 >= ELIF && LA281_0 <= UNDEF) || LA281_0 == 195 || LA281_0 == 221 || LA281_0 == 224 || (LA281_0 >= 226 && LA281_0 <= 239) || (LA281_0 >= 241 && LA281_0 <= 244) || (LA281_0 >= 247 && LA281_0 <= 250) || LA281_0 == 256 || LA281_0 == 274 || LA281_0 == 277) ) { s = 26; }

                   	 
                   	input.Seek(index281_0);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA281_1 = input.LA(1);

                   	 
                   	int index281_1 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred41_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index281_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA281_2 = input.LA(1);

                   	 
                   	int index281_2 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred41_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index281_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA281_3 = input.LA(1);

                   	 
                   	int index281_3 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred41_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index281_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA281_4 = input.LA(1);

                   	 
                   	int index281_4 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred41_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index281_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA281_5 = input.LA(1);

                   	 
                   	int index281_5 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred41_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index281_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA281_26 = input.LA(1);

                   	 
                   	int index281_26 = input.Index;
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred41_cs()) ) { s = 6; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index281_26);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae281 =
            new NoViableAltException(dfa.Description, 281, _s, input);
        dfa.Error(nvae281);
        throw nvae281;
    }
 

    public static readonly BitSet FOLLOW_namespace_body_in_compilation_unit2416 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_193_in_namespace_declaration2427 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_qualified_identifier_in_namespace_declaration2431 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_namespace_block_in_namespace_declaration2435 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_namespace_declaration2439 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_namespace_block2450 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000120UL,0x0000000000800000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_namespace_body_in_namespace_block2454 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_namespace_block2459 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_extern_alias_directives_in_namespace_body2468 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000800000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_using_directives_in_namespace_body2473 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_global_attributes_in_namespace_body2478 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_namespace_member_declarations_in_namespace_body2483 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives2494 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_194_in_extern_alias_directive2505 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
    public static readonly BitSet FOLLOW_195_in_extern_alias_directive2509 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_extern_alias_directive2513 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_extern_alias_directive2516 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_using_directive_in_using_directives2526 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000800000UL});
    public static readonly BitSet FOLLOW_using_alias_directive_in_using_directive2538 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_using_namespace_directive_in_using_directive2543 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_USING_in_using_alias_directive2554 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_using_alias_directive2558 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_using_alias_directive2562 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive2566 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_using_alias_directive2570 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_USING_in_using_namespace_directive2580 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_namespace_name_in_using_namespace_directive2584 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_using_namespace_directive2588 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations2598 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration2609 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_namespace_member_declaration2614 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_modifiers_in_namespace_member_declaration2619 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_type_declaration_in_namespace_member_declaration2624 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_196_in_type_declaration2640 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x8020000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_class_declaration_in_type_declaration2645 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_type_declaration2657 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_type_declaration2669 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_type_declaration2675 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_type_declaration2680 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_type_declaration2685 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_declaration_in_type_declaration2690 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_delegate_declaration_in_type_declaration2695 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_qualified_identifier2706 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_DOT_in_qualified_identifier2709 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_qualified_identifier2711 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_namespace_name2722 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifier_in_modifiers2733 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
    public static readonly BitSet FOLLOW_set_in_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_class_member_declaration2809 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_modifiers_in_class_member_declaration2815 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_205_in_class_member_declaration2821 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_class_member_declaration2825 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_constant_declarators_in_class_member_declaration2829 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_class_member_declaration2833 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_event_declaration_in_class_member_declaration2838 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_196_in_class_member_declaration2845 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x8020000000004000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_206_in_class_member_declaration2848 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_method_declaration_in_class_member_declaration2850 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_class_member_declaration2861 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_class_member_declaration2872 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_class_member_declaration2883 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_class_member_declaration2889 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_206_in_class_member_declaration2895 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_method_declaration_in_class_member_declaration2899 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_class_member_declaration2904 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000006UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0189UL});
    public static readonly BitSet FOLLOW_method_declaration_in_class_member_declaration2918 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_property_declaration_in_class_member_declaration2937 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_class_member_declaration2960 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_DOT_in_class_member_declaration2962 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_class_member_declaration2964 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_class_member_declaration2973 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_field_declaration_in_class_member_declaration2986 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_declaration_in_class_member_declaration3004 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_class_member_declaration3022 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_class_member_declaration3029 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_declaration_in_class_member_declaration3035 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_delegate_declaration_in_class_member_declaration3042 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conversion_operator_declaration_in_class_member_declaration3048 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_declaration_in_class_member_declaration3053 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_destructor_declaration_in_class_member_declaration3059 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_197_in_java_delegate_creation_expression3079 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_java_delegate_creation_expression3081 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_java_delegate_creation_expression3083 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_java_delegate_creation_expression3085 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_java_delegate_creation_expression3087 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_class_member_declaration_in_java_delegate_creation_expression3089 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_java_delegate_creation_expression3091 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_THIS_in_primary_expression3113 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_brackets_in_primary_expression3117 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression3121 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_207_in_primary_expression3137 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_brackets_in_primary_expression3141 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression3145 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_primary_expression_start_in_primary_expression3151 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression3155 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_197_in_primary_expression3161 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000082UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_object_creation_expression_in_primary_expression3189 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression3193 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_object_creation_expression_in_primary_expression3255 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_delegate_creation_expression_in_primary_expression3263 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_object_creation_expression_in_primary_expression3272 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_sizeof_expression_in_primary_expression3285 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_checked_expression_in_primary_expression3296 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unchecked_expression_in_primary_expression3315 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_default_value_expression_in_primary_expression3332 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_method_expression_in_primary_expression3345 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_primary_expression_start3360 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_primary_expression_start3388 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression_start3392 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_primary_expression_start3397 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_208_in_primary_expression_start3400 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_primary_expression_start3404 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_THIS_in_primary_expression_start3411 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_207_in_primary_expression_start3417 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_paren_expression_in_primary_expression_start3422 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_typeof_expression_in_primary_expression_start3427 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_literal_in_primary_expression_start3445 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_identifier_in_primary_expression_part3458 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_brackets_or_arguments_in_primary_expression_part3463 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_209_in_primary_expression_part3469 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_210_in_primary_expression_part3474 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_operator_in_access_identifier3484 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_type_or_generic_in_access_identifier3488 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_access_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_brackets_in_brackets_or_arguments3514 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_brackets_or_arguments3518 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_brackets3528 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000246UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_list_in_brackets3532 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_brackets3537 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_paren_expression3549 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_paren_expression3553 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_paren_expression3557 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_arguments3568 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_argument_list_in_arguments3572 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_arguments3577 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_argument_in_argument_list3588 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_argument_list3591 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_argument_in_argument_list3593 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_argument_name_in_argument3605 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_argument_value_in_argument3609 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_argument_value_in_argument3614 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_argument_name3623 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_argument_name3627 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_argument_value3637 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ref_variable_reference_in_argument_value3643 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_212_in_argument_value3649 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_variable_reference_in_argument_value3653 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_213_in_ref_variable_reference3663 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_LPAREN_in_ref_variable_reference3685 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_ref_variable_reference3689 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_ref_variable_reference3693 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FE68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_ref_variable_reference_in_ref_variable_reference3698 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_reference_in_ref_variable_reference3702 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_reference_in_ref_variable_reference3738 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_variable_reference3750 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_rank_specifier_in_rank_specifiers3760 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_rank_specifier3780 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000040UL});
    public static readonly BitSet FOLLOW_dim_separators_in_rank_specifier3784 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_rank_specifier3789 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_dim_separators3800 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_delegate_creation_expression3815 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_delegate_creation_expression3819 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_name_in_delegate_creation_expression3823 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_delegate_creation_expression3827 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression3840 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer3851 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000102UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer3856 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
    public static readonly BitSet FOLLOW_COMMA_in_anonymous_object_initializer3860 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer3867 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list3877 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_member_declarator_list3881 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list3883 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_qid_in_member_declarator3897 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_member_declarator3902 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_member_declarator3906 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_creation_expression_in_primary_or_array_creation_expression3924 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_expression_in_primary_or_array_creation_expression3929 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_new_array_in_array_creation_expression3942 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_array_creation_expression3949 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_array_creation_expression3954 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_list_in_array_creation_expression3958 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_array_creation_expression3962 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000000000002A2UL,0x000000000F3007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_array_creation_expression3974 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression3979 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_array_creation_expression4015 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression4019 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression4031 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_arguments_in_array_creation_expression4037 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression4059 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_rank_specifier_in_array_creation_expression4073 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000000000A2UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression4082 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_arguments_in_array_creation_expression4141 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression4145 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_invocation_part_in_array_creation_expression4157 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_arguments_in_array_creation_expression4163 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_197_in_new_array4197 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_array_initializer4212 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000A600800003A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_variable_initializer_list_in_array_initializer4216 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
    public static readonly BitSet FOLLOW_COMMA_in_array_initializer4221 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_array_initializer4226 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list4236 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_variable_initializer_list4239 = new BitSet(new ulong[]{0x0000003000000000UL,0x00002600800002A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list4241 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_non_assignment_expression_in_variable_initializer4253 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_initializer_in_variable_initializer4257 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_214_in_sizeof_expression4267 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_sizeof_expression4271 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unmanaged_type_in_sizeof_expression4275 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_sizeof_expression4279 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_215_in_checked_expression4289 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_checked_expression4293 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_checked_expression4297 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_checked_expression4301 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_216_in_unchecked_expression4312 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_unchecked_expression4316 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_unchecked_expression4320 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_unchecked_expression4324 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_217_in_default_value_expression4335 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_default_value_expression4339 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_default_value_expression4343 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_default_value_expression4347 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_218_in_anonymous_method_expression4357 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression4361 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_anonymous_method_expression4366 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_explicit_anonymous_function_signature4375 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature4379 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_explicit_anonymous_function_signature4384 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4394 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list4399 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4403 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter4416 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_explicit_anonymous_function_parameter4421 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_explicit_anonymous_function_parameter4425 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_anonymous_function_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_object_creation_expression4453 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL});
    public static readonly BitSet FOLLOW_LPAREN_in_object_creation_expression4462 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_argument_list_in_object_creation_expression4466 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_object_creation_expression4471 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000280UL});
    public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression4475 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression4486 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_object_or_collection_initializer4500 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000A60080000386UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_object_initializer_in_object_or_collection_initializer4504 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer4511 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_element_initializer_list_in_collection_initializer4523 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
    public static readonly BitSet FOLLOW_COMMA_in_collection_initializer4527 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_collection_initializer4532 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list4543 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_element_initializer_list4547 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000A60080000386UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list4549 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_non_assignment_expression_in_element_initializer4562 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_element_initializer4568 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_list_in_element_initializer4572 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_element_initializer4576 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_initializer_list_in_object_initializer4593 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
    public static readonly BitSet FOLLOW_COMMA_in_object_initializer4598 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_object_initializer4603 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list4614 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_member_initializer_list4618 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list4620 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_identifier_in_member_initializer4633 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_member_initializer4637 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000286UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_initializer_value_in_member_initializer4641 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_initializer_value4652 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_or_collection_initializer_in_initializer_value4658 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_219_in_typeof_expression4672 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_typeof_expression4676 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unbound_type_name_in_typeof_expression4687 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_type_in_typeof_expression4698 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_206_in_typeof_expression4710 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_typeof_expression4715 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unbound_type_name_start_in_unbound_type_name4732 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name4751 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name4755 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name4762 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name4772 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start4784 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_208_in_unbound_type_name_start4787 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start4789 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DOT_in_unbound_type_name_part4800 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_part4804 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LTHAN_in_generic_dimension_specifier4814 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_commas_in_generic_dimension_specifier4818 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_GT_in_generic_dimension_specifier4823 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_commas4834 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_type_name4852 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_or_generic_in_namespace_or_type_name4863 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_208_in_namespace_or_type_name4868 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_type_or_generic_in_namespace_or_type_name4870 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_DOT_in_namespace_or_type_name4875 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_type_or_generic_in_namespace_or_type_name4879 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_identifier_in_type_or_generic4901 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_type_or_generic4905 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_type_or_generic4910 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_qid_start_in_qid4923 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_qid_part_in_qid4927 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_qid_start4939 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_qid_start4954 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_qid_start4958 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_qid_start4965 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_208_in_qid_start4970 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_qid_start4974 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_literal_in_qid_start4981 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_identifier_in_qid_part4997 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LTHAN_in_generic_argument_list5009 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF30004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_arguments_in_generic_argument_list5013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_GT_in_generic_argument_list5017 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_argument_in_type_arguments5028 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_type_arguments5031 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF30004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_argument_in_type_arguments5033 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_javaish_type_argument_in_type_argument5051 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_type_argument5058 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_220_in_javaish_type_argument5080 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_221_in_javaish_type_argument5082 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_javaish_type_argument5084 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_220_in_javaish_type_argument5091 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_javaish_type_argument5098 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_type5126 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_type_name_in_type5130 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_type5135 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_type5139 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_type5168 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_type_name_in_type5172 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_STAR_in_type5178 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_220_in_type5183 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_type5190 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_type5194 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_206_in_type5200 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_type5202 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_non_nullable_type5215 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000020UL});
    public static readonly BitSet FOLLOW_type_name_in_non_nullable_type5219 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000020UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_non_nullable_type5228 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_non_nullable_type5232 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_non_nullable_type5241 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_206_in_non_nullable_type5253 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_non_nullable_type5257 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_type_in_non_array_type5270 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_array_type5279 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_unmanaged_type5288 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_class_type5297 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_pointer_type5306 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_block5320 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_block5325 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000B8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_statement_list_in_block5329 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_block5334 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_in_statement_list5343 = new BitSet(new ulong[]{0x4C00003000000002UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_assignment_in_expression5370 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_non_assignment_expression_in_expression5376 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_expression_list5387 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_expression_list5391 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_expression_list5395 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_unary_expression_in_assignment5407 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000003FF000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_assignment_operator_in_assignment5411 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_assignment5415 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_cast_expression_in_unary_expression5434 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_or_array_creation_expression_in_unary_expression5439 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PLUS_in_unary_expression5444 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression5448 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_in_unary_expression5454 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression5458 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MONONOT_in_unary_expression5464 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression5468 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MONOTWIDDLE_in_unary_expression5474 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression5478 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_pre_increment_expression_in_unary_expression5484 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_pre_decrement_expression_in_unary_expression5490 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_pointer_indirection_expression_in_unary_expression5496 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_addressof_expression_in_unary_expression5501 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_cast_expression5513 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_cast_expression5517 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_cast_expression5521 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_cast_expression5525 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_assignment_operator5535 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PLUS_ASSIGN_in_assignment_operator5539 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_ASSIGN_in_assignment_operator5543 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STAR_ASSIGN_in_assignment_operator5547 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DIV_ASSIGN_in_assignment_operator5551 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MOD_ASSIGN_in_assignment_operator5555 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BIT_AND_ASSIGN_in_assignment_operator5559 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BIT_OR_ASSIGN_in_assignment_operator5563 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BIT_XOR_ASSIGN_in_assignment_operator5567 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LEFT_SHIFT_ASSIGN_in_assignment_operator5571 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GT_in_assignment_operator5575 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_GTE_in_assignment_operator5577 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_209_in_pre_increment_expression5588 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_pre_increment_expression5592 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_210_in_pre_decrement_expression5603 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_pre_decrement_expression5607 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STAR_in_pointer_indirection_expression5617 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_pointer_indirection_expression5621 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BIT_AND_in_addressof_expression5631 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_addressof_expression5635 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_lambda_expression_in_non_assignment_expression5658 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_expression_in_non_assignment_expression5669 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conditional_expression_in_non_assignment_expression5675 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_expression_in_multiplicative_expression5691 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000380000000000UL});
    public static readonly BitSet FOLLOW_set_in_multiplicative_expression5696 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_multiplicative_expression5706 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000380000000000UL});
    public static readonly BitSet FOLLOW_multiplicative_expression_in_additive_expression5718 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000060000000000UL});
    public static readonly BitSet FOLLOW_set_in_additive_expression5721 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_multiplicative_expression_in_additive_expression5729 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000060000000000UL});
    public static readonly BitSet FOLLOW_additive_expression_in_shift_expression5742 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000002000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_LEFT_SHIFT_in_shift_expression5746 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_GT_in_shift_expression5748 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_GT_in_shift_expression5750 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_additive_expression_in_shift_expression5753 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000002000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_shift_expression_in_relational_expression5765 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001C00000000UL,0x0000000000400000UL,0x00000000C0000000UL});
    public static readonly BitSet FOLLOW_set_in_relational_expression5772 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_shift_expression_in_relational_expression5782 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001C00000000UL,0x0000000000400000UL,0x00000000C0000000UL});
    public static readonly BitSet FOLLOW_set_in_relational_expression5791 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_non_nullable_type_in_relational_expression5799 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001C00000000UL,0x0000000000400000UL,0x00000000C0000000UL});
    public static readonly BitSet FOLLOW_relational_expression_in_equality_expression5815 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000300000000UL});
    public static readonly BitSet FOLLOW_set_in_equality_expression5822 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_relational_expression_in_equality_expression5830 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000300000000UL});
    public static readonly BitSet FOLLOW_equality_expression_in_and_expression5842 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_BIT_AND_in_and_expression5845 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_equality_expression_in_and_expression5849 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_and_expression_in_exclusive_or_expression5861 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_BIT_XOR_in_exclusive_or_expression5864 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_and_expression_in_exclusive_or_expression5868 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression5880 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_BIT_OR_in_inclusive_or_expression5885 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression5889 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression5901 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_LOG_AND_in_conditional_and_expression5906 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression5910 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression5922 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000008000000UL});
    public static readonly BitSet FOLLOW_LOG_OR_in_conditional_or_expression5926 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression5930 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000008000000UL});
    public static readonly BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression5943 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_NULL_COALESCE_in_null_coalescing_expression5948 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression5952 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_null_coalescing_expression_in_conditional_expression5964 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_220_in_conditional_expression5969 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_conditional_expression5973 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_conditional_expression5977 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_conditional_expression5981 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_function_signature_in_lambda_expression6003 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_LAMBDA_in_lambda_expression6007 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000286UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_anonymous_function_body_in_lambda_expression6011 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_anonymous_function_signature6020 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000202UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature6023 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature6029 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_anonymous_function_signature6033 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature6038 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list6049 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list6054 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list6058 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_identifier_in_implicit_anonymous_function_parameter6070 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_anonymous_function_body6079 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_anonymous_function_body6084 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_from_clause_in_query_expression6098 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
    public static readonly BitSet FOLLOW_query_body_in_query_expression6102 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_body_clauses_in_query_body6114 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
    public static readonly BitSet FOLLOW_select_or_group_clause_in_query_body6119 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_query_continuation_in_query_body6130 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_224_in_query_continuation6142 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_query_continuation6146 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000166600000000UL});
    public static readonly BitSet FOLLOW_query_body_in_query_continuation6150 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_body_clause_in_query_body_clauses6159 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000106600000000UL});
    public static readonly BitSet FOLLOW_from_clause_in_query_body_clause6170 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_let_clause_in_query_body_clause6175 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_where_clause_in_query_body_clause6180 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_join_clause_in_query_body_clause6185 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_orderby_clause_in_query_body_clause6190 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_225_in_from_clause6199 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_from_clause6203 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_from_clause6208 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
    public static readonly BitSet FOLLOW_IN_in_from_clause6212 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_from_clause6216 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_226_in_join_clause6226 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_join_clause6230 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_join_clause6235 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
    public static readonly BitSet FOLLOW_IN_in_join_clause6239 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_join_clause6243 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_227_in_join_clause6247 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_join_clause6251 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_228_in_join_clause6255 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_join_clause6259 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_224_in_join_clause6262 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_join_clause6264 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_229_in_let_clause6276 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_let_clause6280 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_let_clause6284 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_let_clause6288 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_230_in_orderby_clause6297 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_ordering_list_in_orderby_clause6301 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ordering_in_ordering_list6311 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_ordering_list6316 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_ordering_in_ordering_list6320 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_expression_in_ordering6332 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000018000000000UL});
    public static readonly BitSet FOLLOW_ordering_direction_in_ordering6337 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_ordering_direction0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_select_clause_in_select_or_group_clause6364 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_group_clause_in_select_or_group_clause6369 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_233_in_select_clause6379 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_select_clause6383 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_234_in_group_clause6393 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_group_clause6397 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_235_in_group_clause6401 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_group_clause6405 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_236_in_where_clause6415 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_where_clause6419 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_boolean_expression6429 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_global_attribute_in_global_attributes6443 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_global_attribute6455 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000600000000000UL});
    public static readonly BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute6459 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attribute_list_in_global_attribute6463 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000040UL});
    public static readonly BitSet FOLLOW_COMMA_in_global_attribute6467 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_global_attribute6472 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier6483 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_global_attribute_target_specifier6487 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_global_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_sections_in_attributes6513 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_section_in_attribute_sections6524 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_attribute_section6536 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9FFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attribute_target_specifier_in_attribute_section6540 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attribute_list_in_attribute_section6545 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000040UL});
    public static readonly BitSet FOLLOW_COMMA_in_attribute_section6549 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_attribute_section6554 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_target_in_attribute_target_specifier6565 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_attribute_target_specifier6569 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_in_attribute_list6615 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_attribute_list6618 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attribute_in_attribute_list6620 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_attribute6634 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_attribute_arguments_in_attribute6638 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_attribute_arguments6651 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments6656 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_positional_argument_in_attribute_arguments6676 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_named_argument_in_attribute_arguments6695 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_COMMA_in_attribute_arguments6711 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_positional_argument_in_attribute_arguments6713 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments6724 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_positional_argument_in_positional_argument_list6740 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_positional_argument_list6743 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_positional_argument_in_positional_argument_list6745 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_attribute_argument_expression_in_positional_argument6758 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_named_argument_in_named_argument_list6769 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_named_argument_list6772 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_named_argument_in_named_argument_list6774 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_identifier_in_named_argument6787 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_named_argument6791 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attribute_argument_expression_in_named_argument6795 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_attribute_argument_expression6806 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_245_in_class_declaration6821 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_type_or_generic_in_class_declaration6824 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_class_base_in_class_declaration6828 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration6833 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_class_body_in_class_declaration6838 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_class_declaration6842 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_211_in_class_base6857 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_class_base6861 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_interface_type_list6873 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_interface_type_list6876 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_interface_type_list6880 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_class_body6893 = new BitSet(new ulong[]{0x03E0002000100000UL,0x0000000000000122UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_class_member_declarations_in_class_body6897 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_class_body6902 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_member_declaration_in_class_member_declarations6912 = new BitSet(new ulong[]{0x03E0002000100002UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_205_in_constant_declaration6925 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_constant_declaration6929 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_constant_declarators_in_constant_declaration6933 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_constant_declaration6937 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators6947 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_constant_declarators6950 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators6952 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_identifier_in_constant_declarator6964 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_constant_declarator6969 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_constant_expression_in_constant_declarator6973 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_constant_expression6985 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_declarators_in_field_declaration6996 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_field_declaration7000 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7010 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_variable_declarators7013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7017 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_variable_declarator7029 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_variable_declarator7032 = new BitSet(new ulong[]{0x0000003000000000UL,0x00002600800002A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_variable_initializer_in_variable_declarator7036 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_method_header_in_method_declaration7052 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_method_body_in_method_declaration7056 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_method_header7066 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_method_header7069 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_method_header7073 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_method_header7078 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0040100000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header7082 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0040000000000000UL});
    public static readonly BitSet FOLLOW_throw_exceptions_in_method_header7103 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_method_body7114 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_qid_in_member_name7124 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_246_in_throw_exceptions7141 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_throw_exceptions7143 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_throw_exceptions7146 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_throw_exceptions7148 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_member_name_in_property_declaration7166 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_property_declaration7170 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_accessor_declarations_in_property_declaration7174 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_property_declaration7178 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_accessor_declarations7188 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations7194 = new BitSet(new ulong[]{0x01C0000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_accessor_declarations7198 = new BitSet(new ulong[]{0x01C0000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations7203 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations7210 = new BitSet(new ulong[]{0x01C0000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0080000000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_accessor_declarations7214 = new BitSet(new ulong[]{0x01C0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0080000000000000UL});
    public static readonly BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations7219 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration7231 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0080000000000000UL});
    public static readonly BitSet FOLLOW_247_in_get_accessor_declaration7236 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_accessor_body_in_get_accessor_declaration7240 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration7250 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_248_in_set_accessor_declaration7255 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_accessor_body_in_set_accessor_declaration7259 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PROTECTED_in_accessor_modifier7269 = new BitSet(new ulong[]{0x0100000000000002UL});
    public static readonly BitSet FOLLOW_INTERNAL_in_accessor_modifier7271 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PRIVATE_in_accessor_modifier7276 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INTERNAL_in_accessor_modifier7280 = new BitSet(new ulong[]{0x0040000000000002UL});
    public static readonly BitSet FOLLOW_PROTECTED_in_accessor_modifier7282 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_accessor_body7293 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_240_in_event_declaration7305 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_event_declaration7309 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_member_name_in_event_declaration7324 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_event_declaration7328 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
    public static readonly BitSet FOLLOW_event_accessor_declarations_in_event_declaration7332 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_event_declaration7336 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_declarators_in_event_declaration7342 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_event_declaration7346 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifier_in_event_modifiers7360 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
    public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations7371 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
    public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations7378 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations7382 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0600000000000000UL});
    public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7387 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations7408 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_event_accessor_declarations7412 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations7417 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_249_in_add_accessor_declaration7429 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_add_accessor_declaration7433 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_250_in_remove_accessor_declaration7443 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_remove_accessor_declaration7447 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ENUM_in_enum_declaration7461 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_enum_declaration7465 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_enum_base_in_enum_declaration7469 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_enum_body_in_enum_declaration7474 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_enum_declaration7478 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_211_in_enum_base7489 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00000000000000F8UL,0x7800000000000000UL});
    public static readonly BitSet FOLLOW_integral_type_in_enum_base7493 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_enum_body7503 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000120UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_enum_member_declarations_in_enum_body7506 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000100UL});
    public static readonly BitSet FOLLOW_COMMA_in_enum_body7508 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_enum_body7515 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations7525 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_enum_member_declarations7528 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations7530 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_enum_member_declaration7542 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_enum_member_declaration7547 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_enum_member_declaration7552 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_enum_member_declaration7556 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_integral_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_218_in_delegate_declaration7617 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_return_type_in_delegate_declaration7621 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_delegate_declaration7625 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000200UL});
    public static readonly BitSet FOLLOW_variant_generic_parameter_list_in_delegate_declaration7628 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_delegate_declaration7636 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_delegate_declaration7640 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_delegate_declaration7645 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL,0x0000100000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration7649 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_delegate_declaration7654 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifier_in_delegate_modifiers7664 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
    public static readonly BitSet FOLLOW_LTHAN_in_variant_generic_parameter_list7676 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_variant_type_parameters_in_variant_generic_parameter_list7680 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_GT_in_variant_generic_parameter_list7684 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters7694 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_variant_type_parameters7697 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters7699 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_variant_type_variable_name7711 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_variance_annotation_in_variant_type_variable_name7716 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_type_variable_name_in_variant_type_variable_name7721 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_variance_annotation0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses7746 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000100000000000UL});
    public static readonly BitSet FOLLOW_236_in_type_parameter_constraints_clause7757 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000030UL,0x000000000F000400UL,0x079EFFFF20100008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause7761 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_type_parameter_constraints_clause7765 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0xFFBEFFFF20000028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause7769 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_type_parameter_constraint_list7834 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_type_parameter_constraint_list7845 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7849 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_type_parameter_constraint_list7856 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0xFFBEFFFF20000028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list7860 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7867 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_type_parameter_constraint_list7872 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0xFFBEFFFF20000028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list7876 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list7883 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list7897 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_secondary_constraint_list7900 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list7902 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_secondary_constraint7914 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_type_variable_name7926 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_197_in_constructor_constraint7936 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_constructor_constraint7940 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_constructor_constraint7944 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_return_type7954 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_206_in_return_type7960 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_formal_parameter_in_formal_parameter_list7969 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_formal_parameter_list7972 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_formal_parameter_in_formal_parameter_list7974 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_formal_parameter7986 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_fixed_parameter_in_formal_parameter7992 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_parameter_array_in_formal_parameter7996 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_256_in_formal_parameter8003 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_fixed_parameter_in_fixed_parameters8013 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_fixed_parameters8018 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000006UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_fixed_parameter_in_fixed_parameters8022 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_parameter_modifier_in_fixed_parameter8035 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_fixed_parameter8040 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_fixed_parameter8044 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_default_argument_in_fixed_parameter8048 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_default_argument8060 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_default_argument8062 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_257_in_parameter_array8089 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_parameter_array8093 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_parameter_array8097 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_258_in_interface_declaration8109 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_declaration8113 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_variant_generic_parameter_list_in_interface_declaration8117 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_interface_base_in_interface_declaration8126 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration8131 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_interface_body_in_interface_declaration8136 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_declaration8140 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifier_in_interface_modifiers8152 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
    public static readonly BitSet FOLLOW_211_in_interface_base8167 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_interface_base8169 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_interface_body8179 = new BitSet(new ulong[]{0x03E0000000000000UL,0x0000000000000122UL,0x000000000F0007FCUL,0x7F9FFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_interface_member_declarations_in_interface_body8183 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_interface_body8188 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations8198 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000022UL,0x000000000F0007FCUL,0x7F9FFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_member_declaration8209 = new BitSet(new ulong[]{0x03E0000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9FFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_modifiers_in_interface_member_declaration8215 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9FFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_206_in_interface_member_declaration8221 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration8225 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_event_declaration_in_interface_member_declaration8231 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_interface_member_declaration8237 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration8253 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_property_declaration_in_interface_member_declaration8278 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_indexer_declaration_in_interface_member_declaration8288 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_property_declaration8307 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_interface_property_declaration8311 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_interface_accessor_declarations_in_interface_property_declaration8315 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_interface_property_declaration8319 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_method_declaration8329 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000200UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_interface_method_declaration8333 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_interface_method_declaration8341 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration8345 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_interface_method_declaration8350 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL,0x0000100000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration8354 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_method_declaration8359 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_240_in_interface_event_declaration8372 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_interface_event_declaration8376 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_event_declaration8380 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_event_declaration8384 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_THIS_in_interface_indexer_declaration8398 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration8402 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration8406 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration8410 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_interface_indexer_declaration8414 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration8418 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration8422 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_accessor_declarations8432 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations8441 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_accessor_declarations8445 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations8450 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations8457 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000020UL,0x0000000000000000UL,0x0080000000000000UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_accessor_declarations8461 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0080000000000000UL});
    public static readonly BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations8466 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_247_in_interface_get_accessor_declaration8478 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_get_accessor_declaration8482 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_248_in_interface_set_accessor_declaration8494 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_set_accessor_declaration8498 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifier_in_method_modifiers8510 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001FE4UL});
    public static readonly BitSet FOLLOW_255_in_struct_declaration8524 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_type_or_generic_in_struct_declaration8528 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_struct_interfaces_in_struct_declaration8532 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration8537 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL,0x0000000000000000UL,0x0000100000080000UL});
    public static readonly BitSet FOLLOW_struct_body_in_struct_declaration8542 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_struct_declaration8546 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_modifier_in_struct_modifiers8557 = new BitSet(new ulong[]{0x01E0000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000060UL});
    public static readonly BitSet FOLLOW_set_in_struct_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_211_in_struct_interfaces8598 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_struct_interfaces8602 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_struct_body8611 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000122UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_struct_member_declarations_in_struct_body8615 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_struct_body8620 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations8629 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_attributes_in_struct_member_declaration8640 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_modifiers_in_struct_member_declaration8647 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000022UL,0x000000000F0007FCUL,0xFFBFFFFF24007FFEUL,0x00000000003C01B5UL});
    public static readonly BitSet FOLLOW_205_in_struct_member_declaration8653 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_struct_member_declaration8657 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_constant_declarators_in_struct_member_declaration8661 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_struct_member_declaration8665 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_event_declaration_in_struct_member_declaration8670 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_196_in_struct_member_declaration8677 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0xFFBEFFFF20000008UL,0x00000000003C0185UL});
    public static readonly BitSet FOLLOW_method_declaration_in_struct_member_declaration8680 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_struct_member_declaration8691 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_struct_member_declaration8702 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_struct_member_declaration8713 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_struct_member_declaration8720 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_struct_member_declaration8726 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_206_in_struct_member_declaration8733 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_method_declaration_in_struct_member_declaration8737 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_struct_member_declaration8742 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000006UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0189UL});
    public static readonly BitSet FOLLOW_method_declaration_in_struct_member_declaration8756 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_property_declaration_in_struct_member_declaration8775 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_struct_member_declaration8798 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_DOT_in_struct_member_declaration8800 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_struct_member_declaration8802 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_struct_member_declaration8811 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_field_declaration_in_struct_member_declaration8824 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_declaration_in_struct_member_declaration8842 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_struct_member_declaration8860 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_declaration_in_struct_member_declaration8866 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_delegate_declaration_in_struct_member_declaration8873 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conversion_operator_declaration_in_struct_member_declaration8879 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_declaration_in_struct_member_declaration8884 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_declarator_in_indexer_declaration8903 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_indexer_declaration8907 = new BitSet(new ulong[]{0x01C0000000000000UL,0x0000000000000020UL,0x0000000000000000UL,0x0180000000000000UL});
    public static readonly BitSet FOLLOW_accessor_declarations_in_indexer_declaration8911 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_indexer_declaration8915 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_THIS_in_indexer_declarator8927 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_indexer_declarator8931 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000000F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_indexer_declarator8935 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_indexer_declarator8939 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_declarator_in_operator_declaration8952 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_operator_body_in_operator_declaration8956 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_259_in_operator_declarator8966 = new BitSet(new ulong[]{0x0000003000000000UL,0x00003E3FE0000000UL,0x0000000000460000UL,0x0000000000060000UL});
    public static readonly BitSet FOLLOW_set_in_operator_declarator8971 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator8981 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_operator_declarator8985 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_operator_declarator8989 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_binary_operator_declarator_in_operator_declarator8994 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_operator_declarator_in_operator_declarator8998 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_overloadable_unary_operator_in_operator_declarator9005 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator9009 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_operator_declarator9013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_operator_declarator9015 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_unary_operator_declarator_in_operator_declarator9019 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_overloadable_binary_operator_in_operator_declarator9025 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_operator_declarator9029 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_operator_declarator9033 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_operator_declarator9035 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_binary_operator_declarator_in_operator_declarator9039 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_RPAREN_in_unary_operator_declarator9053 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_overloadable_unary_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_binary_operator_declarator9100 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_binary_operator_declarator9104 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_binary_operator_declarator9108 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_binary_operator_declarator9112 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STAR_in_overloadable_binary_operator9125 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DIV_in_overloadable_binary_operator9129 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MOD_in_overloadable_binary_operator9133 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BIT_AND_in_overloadable_binary_operator9137 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BIT_OR_in_overloadable_binary_operator9141 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BIT_XOR_in_overloadable_binary_operator9145 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LEFT_SHIFT_in_overloadable_binary_operator9149 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator9153 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator9155 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EQUAL_in_overloadable_binary_operator9159 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NOT_EQUAL_in_overloadable_binary_operator9163 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator9167 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LTHAN_in_overloadable_binary_operator9171 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GTE_in_overloadable_binary_operator9175 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LTE_in_overloadable_binary_operator9179 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration9191 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_operator_body_in_conversion_operator_declaration9195 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_conversion_operator_declarator9205 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
    public static readonly BitSet FOLLOW_259_in_conversion_operator_declarator9214 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator9218 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_conversion_operator_declarator9222 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator9226 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_conversion_operator_declarator9230 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_conversion_operator_declarator9234 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_operator_body9244 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_declarator_in_constructor_declaration9256 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_constructor_body_in_constructor_declaration9260 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_constructor_declarator9270 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_constructor_declarator9274 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000026UL,0x000000002F0007FCUL,0x7F9EFFFF20304008UL,0x00000000003C0183UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_constructor_declarator9278 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_constructor_declarator9283 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_constructor_initializer_in_constructor_declarator9287 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_211_in_constructor_initializer9298 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL,0x0000000000000000UL,0x0000000000008000UL});
    public static readonly BitSet FOLLOW_set_in_constructor_initializer9302 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_constructor_initializer9312 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FF68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_argument_list_in_constructor_initializer9316 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_constructor_initializer9321 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_constructor_body9331 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MONOTWIDDLE_in_destructor_declaration9349 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_destructor_declaration9352 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_destructor_declaration9356 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_destructor_declaration9360 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_destructor_body_in_destructor_declaration9365 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_destructor_body9375 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_invocation_start_in_invocation_expression9387 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_arguments_in_invocation_expression9409 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_invocation_part_in_invocation_expression9413 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_invocation_part_in_invocation_expression9424 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000220UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_arguments_in_invocation_expression9430 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_invocation_start9440 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_invocation_start9457 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_invocation_start9461 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_THIS_in_invocation_start9466 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_207_in_invocation_start9472 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_invocation_start9477 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_208_in_invocation_start9482 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_invocation_start9486 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_typeof_expression_in_invocation_start9493 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_identifier_in_invocation_part9518 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_brackets_in_invocation_part9523 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declaration_statement_in_statement9542 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_labeled_statement_in_statement9557 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_statement9562 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_embedded_statement9574 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selection_statement_in_embedded_statement9579 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_iteration_statement_in_embedded_statement9585 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_jump_statement_in_embedded_statement9591 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_try_statement_in_embedded_statement9598 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_checked_statement_in_embedded_statement9603 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unchecked_statement_in_embedded_statement9608 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_lock_statement_in_embedded_statement9613 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_using_statement_in_embedded_statement9618 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_yield_statement_in_embedded_statement9624 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unsafe_statement_in_embedded_statement9630 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_fixed_statement_in_embedded_statement9635 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_statement_in_embedded_statement9640 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_262_in_fixed_statement9652 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_fixed_statement9656 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_pointer_type_in_fixed_statement9660 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement9662 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_fixed_statement9666 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_fixed_statement9670 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9680 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_fixed_pointer_declarators9685 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9689 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_identifier_in_fixed_pointer_declarator9701 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_fixed_pointer_declarator9705 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator9709 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_fixed_pointer_initializer9721 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_198_in_unsafe_statement9730 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_unsafe_statement9734 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_labeled_statement9743 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_labeled_statement9747 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_statement_in_labeled_statement9751 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_declaration_statement9762 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_local_constant_declaration_in_declaration_statement9768 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_declaration_statement9771 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_type_in_local_variable_declaration9781 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration9785 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_263_in_local_variable_type9801 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_264_in_local_variable_type9812 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_local_variable_type9817 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators9827 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_local_variable_declarators9830 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators9832 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_identifier_in_local_variable_declarator9844 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_local_variable_declarator9847 = new BitSet(new ulong[]{0x0000003000000000UL,0x00002600800002A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0381UL});
    public static readonly BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator9851 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_local_variable_initializer9864 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_initializer_in_local_variable_initializer9869 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer9875 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_265_in_stackalloc_initializer9884 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer9888 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_OPEN_BRACKET_in_stackalloc_initializer9892 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_stackalloc_initializer9896 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000040UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer9900 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_205_in_local_constant_declaration9910 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_local_constant_declaration9914 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_constant_declarators_in_local_constant_declaration9918 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_expression_statement9928 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_expression_statement9932 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_statement_expression9944 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_if_statement_in_selection_statement9955 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switch_statement_in_selection_statement9960 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IF_in_if_statement9972 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_if_statement9976 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_if_statement9980 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_if_statement9984 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_if_statement9988 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_else_statement_in_if_statement9997 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ELSE_in_else_statement10010 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_else_statement10014 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_266_in_switch_statement10024 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_switch_statement10028 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_switch_statement10032 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_switch_statement10036 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_switch_block_in_switch_statement10040 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_switch_block10050 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_switch_sections_in_switch_block10054 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_CLOSE_BRACE_in_switch_block10059 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switch_section_in_switch_sections10069 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_switch_labels_in_switch_section10080 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_statement_list_in_switch_section10084 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switch_label_in_switch_labels10094 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000002000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_267_in_switch_label10106 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_constant_expression_in_switch_label10110 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_switch_label10114 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_217_in_switch_label10121 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_switch_label10125 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_while_statement_in_iteration_statement10136 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_do_statement_in_iteration_statement10141 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_for_statement_in_iteration_statement10146 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_foreach_statement_in_iteration_statement10151 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_268_in_while_statement10161 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_while_statement10165 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_while_statement10169 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_while_statement10173 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_while_statement10177 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_269_in_do_statement10187 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_do_statement10191 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_268_in_do_statement10195 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_do_statement10199 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_do_statement10203 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_do_statement10207 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_do_statement10211 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_270_in_for_statement10221 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_for_statement10225 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_for_initializer_in_for_statement10229 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_for_statement10234 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_for_condition_in_for_statement10238 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_for_statement10243 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000002F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_for_iterator_in_for_statement10247 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_for_statement10252 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_for_statement10256 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_for_initializer10272 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_expression_list_in_for_initializer10277 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_for_condition10289 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_expression_list_in_for_iterator10299 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list10309 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_statement_expression_list10312 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list10314 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_FOREACH_in_foreach_statement10326 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_foreach_statement10330 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_local_variable_type_in_foreach_statement10334 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_foreach_statement10338 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
    public static readonly BitSet FOLLOW_IN_in_foreach_statement10342 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_foreach_statement10346 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_foreach_statement10350 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_foreach_statement10354 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_270_in_foreach_statement10366 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_foreach_statement10370 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_local_variable_type_in_foreach_statement10374 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_foreach_statement10378 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_foreach_statement10384 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_foreach_statement10388 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_foreach_statement10392 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_foreach_statement10396 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_break_statement_in_jump_statement10446 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_continue_statement_in_jump_statement10451 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_goto_statement_in_jump_statement10456 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_return_statement_in_jump_statement10461 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_throw_statement_in_jump_statement10466 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BREAK_in_break_statement10476 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_break_statement10480 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_271_in_continue_statement10490 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_continue_statement10494 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_272_in_goto_statement10504 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF22000008UL,0x0000000000240981UL});
    public static readonly BitSet FOLLOW_identifier_in_goto_statement10510 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_267_in_goto_statement10518 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_constant_expression_in_goto_statement10522 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_217_in_goto_statement10530 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_goto_statement10535 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_RETURN_in_return_statement10545 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_return_statement10549 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_return_statement10554 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_THROW_in_throw_statement10564 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000001F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_throw_statement10568 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_throw_statement10573 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_TRY_in_try_statement10588 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_try_statement10592 = new BitSet(new ulong[]{0x3000000000000000UL});
    public static readonly BitSet FOLLOW_catch_clauses_in_try_statement10598 = new BitSet(new ulong[]{0x3000000000000002UL});
    public static readonly BitSet FOLLOW_finally_clause_in_try_statement10602 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_finally_clause_in_try_statement10614 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CATCH_in_catch_clauses10625 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_specific_catch_clauses_in_catch_clauses10630 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_general_catch_clause_in_catch_clauses10634 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses10645 = new BitSet(new ulong[]{0x1000000000000002UL});
    public static readonly BitSet FOLLOW_CATCH_in_specific_catch_clauses10650 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses10655 = new BitSet(new ulong[]{0x1000000000000002UL});
    public static readonly BitSet FOLLOW_general_catch_clause_in_specific_catch_clauses10659 = new BitSet(new ulong[]{0x1000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_specific_catch_clause10671 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_class_type_in_specific_catch_clause10675 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000002F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_specific_catch_clause10679 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_specific_catch_clause10684 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_specific_catch_clause10688 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_general_catch_clause10698 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FINALLY_in_finally_clause10708 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_finally_clause10712 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_215_in_checked_statement10722 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_checked_statement10726 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_216_in_unchecked_statement10736 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000280UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_block_in_unchecked_statement10740 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_273_in_lock_statement10750 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_lock_statement10754 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_lock_statement10757 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_lock_statement10761 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_lock_statement10765 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_USING_in_using_statement10775 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_using_statement10779 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_resource_acquisition_in_using_statement10784 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_using_statement10788 = new BitSet(new ulong[]{0x4C00003000000000UL,0x0000260080000A8FUL,0x000000001F8FFFFCUL,0x7F9EFFFF2FC6E068UL,0x00000000003FF5C1UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_using_statement10793 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_resource_acquisition10809 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_resource_acquisition10814 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_274_in_yield_statement10824 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_RETURN_in_yield_statement10829 = new BitSet(new ulong[]{0x0000003000000000UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_expression_in_yield_statement10833 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_yield_statement10837 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BREAK_in_yield_statement10852 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_yield_statement10856 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_predefined_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENTIFIER_in_identifier10959 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_also_keyword_in_identifier10963 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_also_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_literal0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignment_in_assignment_list15467 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_assignment_list15469 = new BitSet(new ulong[]{0x0000003000000002UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attributes_in_field_declarations15482 = new BitSet(new ulong[]{0x03E0000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_modifiers_in_field_declarations15487 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_field_declarations15492 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_field_declaration_in_field_declarations15496 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000022UL,0x000000000F0007FCUL,0x7F9EFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attributes_in_property_declaration_list15509 = new BitSet(new ulong[]{0x03E0000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_modifiers_in_property_declaration_list15514 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_property_declaration_list15519 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_property_declaration_in_property_declaration_list15523 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000022UL,0x000000000F0007FCUL,0x7F9EFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_constant_declaration_in_constant_declarations15535 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000002000UL});
    public static readonly BitSet FOLLOW_literal_in_literals15545 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_attributes_in_delegate_declaration_list15557 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_modifiers_in_delegate_declaration_list15562 = new BitSet(new ulong[]{0x03E0000000100000UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_delegate_declaration_in_delegate_declaration_list15567 = new BitSet(new ulong[]{0x03E0000000100002UL,0x0000000000000020UL,0x0000000000000000UL,0x8020000004001FF6UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_local_variable_declaration_list15580 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_local_variable_declaration_list15582 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_local_variable_initializer_in_local_variable_initializer_list15595 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_local_variable_initializer_list15597 = new BitSet(new ulong[]{0x0000003000000002UL,0x00002600800002A6UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC6C028UL,0x00000000003C0381UL});
    public static readonly BitSet FOLLOW_expression_in_expression_list_test15610 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_expression_list_test15612 = new BitSet(new ulong[]{0x0000003000000002UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression_list15625 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_unary_expression_list15627 = new BitSet(new ulong[]{0x0000003000000002UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_invocation_expression_in_invocation_expression_list15640 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_invocation_expression_list15642 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000006UL,0x000000000F0007FCUL,0x7F9EFFFF28008008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_primary_expression_in_primary_expression_list15655 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_primary_expression_list15657 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC08028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression_list15670 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_non_assignment_expression_list15672 = new BitSet(new ulong[]{0x0000003000000002UL,0x0000260080000206UL,0x000000000F0FFFFCUL,0x7F9EFFFF2FC68028UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_modifiers_in_method_declarations15685 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_206_in_method_declarations15689 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_method_declarations15693 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0FFFFCUL,0x7F9EFFFF20000008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_method_declaration_in_method_declarations15696 = new BitSet(new ulong[]{0x03E0000000000002UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20005FECUL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_196_in_synpred1_cs2635 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred2_cs2909 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_synpred2_cs2913 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred3_cs2928 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_synpred3_cs2932 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred4_cs2947 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_DOT_in_synpred4_cs2951 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_THIS_in_synpred4_cs2955 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_THIS_in_synpred5_cs3103 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_brackets_in_synpred5_cs3108 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_207_in_synpred6_cs3128 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_brackets_in_synpred6_cs3132 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_creation_expression_in_synpred7_cs3168 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_set_in_synpred7_cs3172 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_creation_expression_in_synpred8_cs3250 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_synpred9_cs3378 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred9_cs3383 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_synpred10_cs3670 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL,0x000000000F0007FCUL,0x7F9EFFFF20004008UL,0x00000000003C0181UL});
    public static readonly BitSet FOLLOW_type_in_synpred10_cs3674 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_synpred10_cs3678 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_creation_expression_in_synpred11_cs3919 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_synpred12_cs4000 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_set_in_synpred12_cs4004 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_synpred13_cs4126 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_set_in_synpred13_cs4130 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unbound_type_name_in_synpred14_cs4682 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_generic_dimension_specifier_in_synpred15_cs4742 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_DOT_in_synpred15_cs4746 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_synpred16_cs4892 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred16_cs4896 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_synpred17_cs4945 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred17_cs4949 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_220_in_synpred18_cs5074 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_221_in_synpred18_cs5076 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred19_cs5112 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred19_cs5116 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred19_cs5120 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred20_cs5147 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred20_cs5151 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000200000000000UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_STAR_in_synpred20_cs5156 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000200000000000UL});
    public static readonly BitSet FOLLOW_220_in_synpred20_cs5161 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_expression_in_synpred21_cs5361 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000000003FF000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_assignment_operator_in_synpred21_cs5365 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_cast_expression_in_synpred22_cs5429 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_function_signature_in_synpred23_cs5649 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_LAMBDA_in_synpred23_cs5653 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_expression_in_synpred24_cs5664 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_224_in_synpred25_cs6125 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_synpred26_cs6682 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x000000000F000400UL,0x079EFFFF20000008UL,0x0000000000240181UL});
    public static readonly BitSet FOLLOW_identifier_in_synpred26_cs6686 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_synpred26_cs6690 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred27_cs7315 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_synpred27_cs7319 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred28_cs8244 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_synpred28_cs8248 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred29_cs8269 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_synpred29_cs8273 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred30_cs8747 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LPAREN_in_synpred30_cs8751 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred31_cs8766 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_OPEN_BRACE_in_synpred31_cs8770 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_name_in_synpred32_cs8785 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_DOT_in_synpred32_cs8789 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_THIS_in_synpred32_cs8793 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_synpred33_cs9394 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL,0x0000000000300000UL});
    public static readonly BitSet FOLLOW_set_in_synpred33_cs9398 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_synpred34_cs9447 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred34_cs9452 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declaration_statement_in_synpred35_cs9537 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_synpred36_cs9548 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_211_in_synpred36_cs9552 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_263_in_synpred37_cs9796 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_264_in_synpred38_cs9807 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ELSE_in_synpred39_cs9992 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_synpred40_cs10267 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_synpred41_cs10804 = new BitSet(new ulong[]{0x0000000000000002UL});

}
}